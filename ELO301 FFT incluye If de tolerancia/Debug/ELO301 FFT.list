
ELO301 FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009638  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032a8  080097d8  080097d8  0000a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca80  0800ca80  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca80  0800ca80  0000da80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca88  0800ca88  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca88  0800ca88  0000da88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca8c  0800ca8c  0000da8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000021dc  20000000  0800ca90  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001318  200021dc  0800ec6c  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034f4  0800ec6c  000104f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afed  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003369  00000000  00000000  0002b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c04  00000000  00000000  0002f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cc6  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b4a  00000000  00000000  00054eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e554e  00000000  00000000  00068a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0014df62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000556c  00000000  00000000  0014e01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00153588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002baf  00000000  00000000  001535e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  00156196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021dc 	.word	0x200021dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097c0 	.word	0x080097c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021e0 	.word	0x200021e0
 80001dc:	080097c0 	.word	0x080097c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  uint16_t sample_counter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	81fb      	strh	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fe45 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f8fd 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 fa49 	bl	8001350 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 fa17 	bl	80012f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ec2:	f000 f949 	bl	8001158 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000ec6:	f000 f9af 	bl	8001228 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  arm_status status;
  float32_t maxValue;


  HAL_DFSDM_FilterRegularStart_IT(&hdfsdm1_filter0);
 8000eca:	4867      	ldr	r0, [pc, #412]	@ (8001068 <main+0x1c0>)
 8000ecc:	f002 fc4f 	bl	800376e <HAL_DFSDM_FilterRegularStart_IT>
  status = ARM_MATH_SUCCESS;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	737b      	strb	r3, [r7, #13]
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT( &hadc1 );
 8000ed4:	4865      	ldr	r0, [pc, #404]	@ (800106c <main+0x1c4>)
 8000ed6:	f001 fa07 	bl	80022e8 <HAL_ADC_Start_IT>

  while (1)
  {
    if (adc_status == 1)
 8000eda:	4b65      	ldr	r3, [pc, #404]	@ (8001070 <main+0x1c8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d1fb      	bne.n	8000eda <main+0x32>
    {
      /* Start filling testInput_f32_10khz buffer up to sample_counter is full */
      adc_value = HAL_ADC_GetValue( &hadc1 );
 8000ee2:	4862      	ldr	r0, [pc, #392]	@ (800106c <main+0x1c4>)
 8000ee4:	f001 fab4 	bl	8002450 <HAL_ADC_GetValue>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b61      	ldr	r3, [pc, #388]	@ (8001074 <main+0x1cc>)
 8000eee:	801a      	strh	r2, [r3, #0]

#if 1
      testInput_f32_10khz[sample_counter++] = (float32_t)mic_value;//adc_value;
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	81fa      	strh	r2, [r7, #14]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8001078 <main+0x1d0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	495f      	ldr	r1, [pc, #380]	@ (800107c <main+0x1d4>)
 8000efe:	0083      	lsls	r3, r0, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	601a      	str	r2, [r3, #0]
      testInput_f32_10khz[sample_counter++] = 0;
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	81fa      	strh	r2, [r7, #14]
 8000f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800107c <main+0x1d4>)
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
#else
      sample_counter+=2;
#endif
      adc_status = 0;
 8000f16:	4b56      	ldr	r3, [pc, #344]	@ (8001070 <main+0x1c8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
      /* Check if the input buffer is full */
      if (sample_counter >= TEST_LENGTH_SAMPLES)
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f22:	d3da      	bcc.n	8000eda <main+0x32>
      {
        /* Process the data through the CFFT/CIFFT module */
        arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8000f24:	4b56      	ldr	r3, [pc, #344]	@ (8001080 <main+0x1d8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b56      	ldr	r3, [pc, #344]	@ (8001084 <main+0x1dc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4952      	ldr	r1, [pc, #328]	@ (800107c <main+0x1d4>)
 8000f32:	4855      	ldr	r0, [pc, #340]	@ (8001088 <main+0x1e0>)
 8000f34:	f005 fb12 	bl	800655c <arm_cfft_f32>

        /* Process the data through the Complex Magnitude Module for
        calculating the magnitude at each bin */
        arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 8000f38:	4b54      	ldr	r3, [pc, #336]	@ (800108c <main+0x1e4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4954      	ldr	r1, [pc, #336]	@ (8001090 <main+0x1e8>)
 8000f40:	484e      	ldr	r0, [pc, #312]	@ (800107c <main+0x1d4>)
 8000f42:	f005 fba3 	bl	800668c <arm_cmplx_mag_f32>

        /* Calculates maxValue and returns corresponding BIN value */
        arm_max_f32(testOutput+1, fftSize-1, &maxValue, &testIndex);
 8000f46:	4853      	ldr	r0, [pc, #332]	@ (8001094 <main+0x1ec>)
 8000f48:	4b50      	ldr	r3, [pc, #320]	@ (800108c <main+0x1e4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1e59      	subs	r1, r3, #1
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	4b51      	ldr	r3, [pc, #324]	@ (8001098 <main+0x1f0>)
 8000f52:	f004 ff71 	bl	8005e38 <arm_max_f32>

        /* Reset the sample counter */
        sample_counter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	81fb      	strh	r3, [r7, #14]

        //printf( "%u\t%d\r\n", testIndex, maxValue );

        float32_t fundamental_freq = (float32_t)testIndex * TEST_LENGTH_SAMPLES / fftSize;
 8000f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001098 <main+0x1f0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f66:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800109c <main+0x1f4>
 8000f6a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f6e:	4b47      	ldr	r3, [pc, #284]	@ (800108c <main+0x1e4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7e:	edc7 7a02 	vstr	s15, [r7, #8]

        if (fundamental_freq > testOutput[testIndex] + TOL) {
 8000f82:	4b45      	ldr	r3, [pc, #276]	@ (8001098 <main+0x1f0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a42      	ldr	r2, [pc, #264]	@ (8001090 <main+0x1e8>)
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f98:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	dd14      	ble.n	8000fd0 <main+0x128>
                //HAL_GPIO_WritePin(LED_GPIO_PORT, LED_HIGH_FREQ_PIN, GPIO_PIN_SET);
               //HAL_GPIO_WritePin(LED_GPIO_PORT, LED_LOW_FREQ_PIN, GPIO_PIN_RESET);
                printf("\r\n Frecuencia mayor a referencia\n\r");
 8000fa6:	483e      	ldr	r0, [pc, #248]	@ (80010a0 <main+0x1f8>)
 8000fa8:	f006 fc6e 	bl	8007888 <iprintf>
                printf("\r\nAmplitud fundamental: %.2f Hz, : %i  \n\n", testOutput[testIndex], testIndex);
 8000fac:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <main+0x1f0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a37      	ldr	r2, [pc, #220]	@ (8001090 <main+0x1e8>)
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff facd 	bl	8000558 <__aeabi_f2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4935      	ldr	r1, [pc, #212]	@ (8001098 <main+0x1f0>)
 8000fc4:	6809      	ldr	r1, [r1, #0]
 8000fc6:	9100      	str	r1, [sp, #0]
 8000fc8:	4836      	ldr	r0, [pc, #216]	@ (80010a4 <main+0x1fc>)
 8000fca:	f006 fc5d 	bl	8007888 <iprintf>
 8000fce:	e046      	b.n	800105e <main+0x1b6>
            } else if (fundamental_freq < testOutput[testIndex] - TOL) {
 8000fd0:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <main+0x1f0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001090 <main+0x1e8>)
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d51a      	bpl.n	800102a <main+0x182>
            	// HAL_GPIO_WritePin(LED_GPIO_PORT, LED_HIGH_FREQ_PIN, GPIO_PIN_RESET);
            	//HAL_GPIO_WritePin(LED_GPIO_PORT, LED_LOW_FREQ_PIN, GPIO_PIN_SET);
                printf("\r\n Frecuencia menor a referencia\n\r");
 8000ff4:	482c      	ldr	r0, [pc, #176]	@ (80010a8 <main+0x200>)
 8000ff6:	f006 fc47 	bl	8007888 <iprintf>
                printf("\r\nFrecuencia fundamental: %.2f Hz, f_ref: %i  \n\n", fundamental_freq, testOutput[testIndex]);
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f7ff faac 	bl	8000558 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <main+0x1f0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <main+0x1e8>)
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff faa1 	bl	8000558 <__aeabi_f2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9cd 2300 	strd	r2, r3, [sp]
 800101e:	4622      	mov	r2, r4
 8001020:	462b      	mov	r3, r5
 8001022:	4822      	ldr	r0, [pc, #136]	@ (80010ac <main+0x204>)
 8001024:	f006 fc30 	bl	8007888 <iprintf>
 8001028:	e019      	b.n	800105e <main+0x1b6>
            } else {
            	//HAL_GPIO_WritePin(LED_GPIO_PORT, LED_HIGH_FREQ_PIN, GPIO_PIN_SET);
            	//HAL_GPIO_WritePin(LED_GPIO_PORT, LED_LOW_FREQ_PIN, GPIO_PIN_SET);
                printf("\r\n Frecuencia dentro de la tolerancia\n\r");
 800102a:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <main+0x208>)
 800102c:	f006 fc2c 	bl	8007888 <iprintf>
                printf("\r\nFrecuencia fundamental: %.2f Hz, f_ref: %i  \n\n", fundamental_freq, testOutput[testIndex]);
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f7ff fa91 	bl	8000558 <__aeabi_f2d>
 8001036:	4604      	mov	r4, r0
 8001038:	460d      	mov	r5, r1
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <main+0x1f0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <main+0x1e8>)
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa86 	bl	8000558 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	e9cd 2300 	strd	r2, r3, [sp]
 8001054:	4622      	mov	r2, r4
 8001056:	462b      	mov	r3, r5
 8001058:	4814      	ldr	r0, [pc, #80]	@ (80010ac <main+0x204>)
 800105a:	f006 fc15 	bl	8007888 <iprintf>
            }

           HAL_Delay(1000);
 800105e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001062:	f000 fde9 	bl	8001c38 <HAL_Delay>
    if (adc_status == 1)
 8001066:	e738      	b.n	8000eda <main+0x32>
 8001068:	20002260 	.word	0x20002260
 800106c:	200021f8 	.word	0x200021f8
 8001070:	20003378 	.word	0x20003378
 8001074:	2000337a 	.word	0x2000337a
 8001078:	2000337c 	.word	0x2000337c
 800107c:	20000000 	.word	0x20000000
 8001080:	20003374 	.word	0x20003374
 8001084:	20002004 	.word	0x20002004
 8001088:	080098f0 	.word	0x080098f0
 800108c:	20002000 	.word	0x20002000
 8001090:	20002374 	.word	0x20002374
 8001094:	20002378 	.word	0x20002378
 8001098:	20003380 	.word	0x20003380
 800109c:	45000000 	.word	0x45000000
 80010a0:	080097d8 	.word	0x080097d8
 80010a4:	080097fc 	.word	0x080097fc
 80010a8:	08009828 	.word	0x08009828
 80010ac:	0800984c 	.word	0x0800984c
 80010b0:	08009880 	.word	0x08009880

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	@ 0x58
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2244      	movs	r2, #68	@ 0x44
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 fc35 	bl	8007932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010da:	f002 ff47 	bl	8003f6c <HAL_PWREx_ControlVoltageScaling>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e4:	f000 f9e8 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80010f2:	2340      	movs	r3, #64	@ 0x40
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001102:	230a      	movs	r3, #10
 8001104:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001106:	2307      	movs	r3, #7
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4618      	mov	r0, r3
 8001118:	f002 ff7e 	bl	8004018 <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001122:	f000 f9c9 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	230f      	movs	r3, #15
 8001128:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112a:	2303      	movs	r3, #3
 800112c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2104      	movs	r1, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fb7e 	bl	8004840 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800114a:	f000 f9b5 	bl	80014b8 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3758      	adds	r7, #88	@ 0x58
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116e:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <MX_ADC1_Init+0xc4>)
 8001170:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <MX_ADC1_Init+0xc8>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <MX_ADC1_Init+0xc4>)
 8001176:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 800117a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <MX_ADC1_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <MX_ADC1_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <MX_ADC1_Init+0xc4>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <MX_ADC1_Init+0xc4>)
 8001190:	2204      	movs	r2, #4
 8001192:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <MX_ADC1_Init+0xc4>)
 8001196:	2200      	movs	r2, #0
 8001198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <MX_ADC1_Init+0xc4>)
 800119c:	2201      	movs	r2, #1
 800119e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_DISABLE;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d6:	4811      	ldr	r0, [pc, #68]	@ (800121c <MX_ADC1_Init+0xc4>)
 80011d8:	f000 ff40 	bl	800205c <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011e2:	f000 f969 	bl	80014b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_ADC1_Init+0xcc>)
 80011e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ea:	2306      	movs	r3, #6
 80011ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011ee:	2302      	movs	r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f2:	237f      	movs	r3, #127	@ 0x7f
 80011f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f6:	2304      	movs	r3, #4
 80011f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <MX_ADC1_Init+0xc4>)
 8001204:	f001 fafa 	bl	80027fc <HAL_ADC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800120e:	f000 f953 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200021f8 	.word	0x200021f8
 8001220:	50040000 	.word	0x50040000
 8001224:	04300002 	.word	0x04300002

08001228 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800122c:	4b2c      	ldr	r3, [pc, #176]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 800122e:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <MX_DFSDM1_Init+0xbc>)
 8001230:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 800123a:	2200      	movs	r2, #0
 800123c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800123e:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 8001240:	2200      	movs	r2, #0
 8001242:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001244:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 500;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 800124c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001250:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001252:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 8001254:	2201      	movs	r2, #1
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001258:	4821      	ldr	r0, [pc, #132]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 800125a:	f002 f969 	bl	8003530 <HAL_DFSDM_FilterInit>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001264:	f000 f928 	bl	80014b8 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 800126a:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <MX_DFSDM1_Init+0xc4>)
 800126c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 8001270:	2201      	movs	r2, #1
 8001272:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 800127c:	2202      	movs	r2, #2
 800127e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 800128e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001292:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 800129c:	2204      	movs	r2, #4
 800129e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80012b8:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <MX_DFSDM1_Init+0xc0>)
 80012ba:	f002 f865 	bl	8003388 <HAL_DFSDM_ChannelInit>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80012c4:	f000 f8f8 	bl	80014b8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80012c8:	2201      	movs	r2, #1
 80012ca:	2101      	movs	r1, #1
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_DFSDM1_Init+0xb8>)
 80012ce:	f002 fa09 	bl	80036e4 <HAL_DFSDM_FilterConfigRegChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80012d8:	f000 f8ee 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20002260 	.word	0x20002260
 80012e4:	40016100 	.word	0x40016100
 80012e8:	200022b4 	.word	0x200022b4
 80012ec:	40016000 	.word	0x40016000

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <MX_USART2_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART2_UART_Init+0x58>)
 8001334:	f004 f806 	bl	8005344 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 f8bb 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200022ec 	.word	0x200022ec
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b35      	ldr	r3, [pc, #212]	@ (800143c <MX_GPIO_Init+0xec>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a34      	ldr	r2, [pc, #208]	@ (800143c <MX_GPIO_Init+0xec>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b32      	ldr	r3, [pc, #200]	@ (800143c <MX_GPIO_Init+0xec>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <MX_GPIO_Init+0xec>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <MX_GPIO_Init+0xec>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <MX_GPIO_Init+0xec>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b29      	ldr	r3, [pc, #164]	@ (800143c <MX_GPIO_Init+0xec>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a28      	ldr	r2, [pc, #160]	@ (800143c <MX_GPIO_Init+0xec>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_GPIO_Init+0xec>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_GPIO_Init+0xec>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a22      	ldr	r2, [pc, #136]	@ (800143c <MX_GPIO_Init+0xec>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <MX_GPIO_Init+0xec>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_GPIO_Port, TP_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	481d      	ldr	r0, [pc, #116]	@ (8001440 <MX_GPIO_Init+0xf0>)
 80013cc:	f002 fd8e 	bl	8003eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2120      	movs	r1, #32
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f002 fd88 	bl	8003eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4813      	ldr	r0, [pc, #76]	@ (8001440 <MX_GPIO_Init+0xf0>)
 80013f4:	f002 fc00 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_Pin */
  GPIO_InitStruct.Pin = TP_Pin;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	480c      	ldr	r0, [pc, #48]	@ (8001440 <MX_GPIO_Init+0xf0>)
 8001410:	f002 fbf2 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001414:	2320      	movs	r3, #32
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f002 fbe3 	bl	8003bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	48000800 	.word	0x48000800

08001444 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  adc_status =1;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x20>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(TP_GPIO_Port, TP_Pin);
 8001452:	2102      	movs	r1, #2
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <HAL_ADC_ConvCpltCallback+0x24>)
 8001456:	f002 fd61 	bl	8003f1c <HAL_GPIO_TogglePin>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20003378 	.word	0x20003378
 8001468:	48000800 	.word	0x48000800

0800146c <HAL_DFSDM_FilterErrorCallback>:
		DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
	mic_status = 1;
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
}

void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint16_t mic_value = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	81fb      	strh	r3, [r7, #14]
	mic_value = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,0);
 8001478:	2100      	movs	r1, #0
 800147a:	4804      	ldr	r0, [pc, #16]	@ (800148c <HAL_DFSDM_FilterErrorCallback+0x20>)
 800147c:	f002 f99a 	bl	80037b4 <HAL_DFSDM_FilterGetRegularValue>
 8001480:	4603      	mov	r3, r0
 8001482:	81fb      	strh	r3, [r7, #14]
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20002260 	.word	0x20002260

08001490 <_write>:



/* Add _write function to print over the uart */
int _write( int file, char *ptr, int len )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( &huart2, (uint8_t*) ptr, len, 50 );
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	b29a      	uxth	r2, r3
 80014a0:	2332      	movs	r3, #50	@ 0x32
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <_write+0x24>)
 80014a6:	f003 ff9b 	bl	80053e0 <HAL_UART_Transmit>
  return len;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200022ec 	.word	0x200022ec

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_MspInit+0x44>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_MspInit+0x44>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0a4      	sub	sp, #144	@ 0x90
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2268      	movs	r2, #104	@ 0x68
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f006 fa00 	bl	8007932 <memset>
  if(hadc->Instance==ADC1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <HAL_ADC_MspInit+0xd4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d14c      	bne.n	80015d6 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800153c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001540:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001542:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001546:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001554:	2307      	movs	r3, #7
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001558:	2302      	movs	r3, #2
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800155c:	2302      	movs	r3, #2
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001564:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fb8c 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001576:	f7ff ff9f 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_ADC_MspInit+0xd8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a19      	ldr	r2, [pc, #100]	@ (80015e4 <HAL_ADC_MspInit+0xd8>)
 8001580:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_ADC_MspInit+0xd8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_ADC_MspInit+0xd8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4a13      	ldr	r2, [pc, #76]	@ (80015e4 <HAL_ADC_MspInit+0xd8>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_ADC_MspInit+0xd8>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015aa:	2301      	movs	r3, #1
 80015ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ae:	230b      	movs	r3, #11
 80015b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80015be:	4619      	mov	r1, r3
 80015c0:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <HAL_ADC_MspInit+0xdc>)
 80015c2:	f002 fb19 	bl	8003bf8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2012      	movs	r0, #18
 80015cc:	f001 fea5 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015d0:	2012      	movs	r0, #18
 80015d2:	f001 febe 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3790      	adds	r7, #144	@ 0x90
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	50040000 	.word	0x50040000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000800 	.word	0x48000800

080015ec <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0a4      	sub	sp, #144	@ 0x90
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2268      	movs	r2, #104	@ 0x68
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f006 f990 	bl	8007932 <memset>
  if(DFSDM1_Init == 0)
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <HAL_DFSDM_FilterMspInit+0x11c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d172      	bne.n	8001700 <HAL_DFSDM_FilterMspInit+0x114>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800161a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800161e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001620:	2300      	movs	r3, #0
 8001622:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fb2d 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_DFSDM_FilterMspInit+0x4c>
    {
      Error_Handler();
 8001634:	f7ff ff40 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001638:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_DFSDM_FilterMspInit+0x120>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a33      	ldr	r2, [pc, #204]	@ (800170c <HAL_DFSDM_FilterMspInit+0x120>)
 8001640:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001642:	4b32      	ldr	r3, [pc, #200]	@ (800170c <HAL_DFSDM_FilterMspInit+0x120>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10b      	bne.n	8001662 <HAL_DFSDM_FilterMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164e:	4a30      	ldr	r2, [pc, #192]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001650:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001654:	6613      	str	r3, [r2, #96]	@ 0x60
 8001656:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a2a      	ldr	r2, [pc, #168]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a24      	ldr	r2, [pc, #144]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <HAL_DFSDM_FilterMspInit+0x124>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PA9     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001692:	2304      	movs	r3, #4
 8001694:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016a8:	2306      	movs	r3, #6
 80016aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80016b2:	4619      	mov	r1, r3
 80016b4:	4817      	ldr	r0, [pc, #92]	@ (8001714 <HAL_DFSDM_FilterMspInit+0x128>)
 80016b6:	f002 fa9f 	bl	8003bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016d2:	2306      	movs	r3, #6
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e2:	f002 fa89 	bl	8003bf8 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	203d      	movs	r0, #61	@ 0x3d
 80016ec:	f001 fe15 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80016f0:	203d      	movs	r0, #61	@ 0x3d
 80016f2:	f001 fe2e 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <HAL_DFSDM_FilterMspInit+0x11c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a02      	ldr	r2, [pc, #8]	@ (8001708 <HAL_DFSDM_FilterMspInit+0x11c>)
 80016fe:	6013      	str	r3, [r2, #0]
  }

}
 8001700:	bf00      	nop
 8001702:	3790      	adds	r7, #144	@ 0x90
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20003388 	.word	0x20003388
 800170c:	20003384 	.word	0x20003384
 8001710:	40021000 	.word	0x40021000
 8001714:	48000800 	.word	0x48000800

08001718 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0a4      	sub	sp, #144	@ 0x90
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2268      	movs	r2, #104	@ 0x68
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f006 f8fa 	bl	8007932 <memset>
  if(DFSDM1_Init == 0)
 800173e:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d16a      	bne.n	800181c <HAL_DFSDM_ChannelMspInit+0x104>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001746:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800174a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800174c:	2300      	movs	r3, #0
 800174e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fa97 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_DFSDM_ChannelMspInit+0x4c>
    {
      Error_Handler();
 8001760:	f7ff feaa 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001764:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a2f      	ldr	r2, [pc, #188]	@ (8001828 <HAL_DFSDM_ChannelMspInit+0x110>)
 800176c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800176e:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10b      	bne.n	800178e <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001776:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	4a2c      	ldr	r2, [pc, #176]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 800177c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001780:	6613      	str	r3, [r2, #96]	@ 0x60
 8001782:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b27      	ldr	r3, [pc, #156]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a26      	ldr	r2, [pc, #152]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b24      	ldr	r3, [pc, #144]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <HAL_DFSDM_ChannelMspInit+0x114>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PA9     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017be:	2304      	movs	r3, #4
 80017c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017d4:	2306      	movs	r3, #6
 80017d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80017de:	4619      	mov	r1, r3
 80017e0:	4813      	ldr	r0, [pc, #76]	@ (8001830 <HAL_DFSDM_ChannelMspInit+0x118>)
 80017e2:	f002 fa09 	bl	8003bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017fe:	2306      	movs	r3, #6
 8001800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f002 f9f3 	bl	8003bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001812:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a02      	ldr	r2, [pc, #8]	@ (8001824 <HAL_DFSDM_ChannelMspInit+0x10c>)
 800181a:	6013      	str	r3, [r2, #0]
  }

}
 800181c:	bf00      	nop
 800181e:	3790      	adds	r7, #144	@ 0x90
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20003388 	.word	0x20003388
 8001828:	20003384 	.word	0x20003384
 800182c:	40021000 	.word	0x40021000
 8001830:	48000800 	.word	0x48000800

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0a4      	sub	sp, #144	@ 0x90
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2268      	movs	r2, #104	@ 0x68
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f006 f86c 	bl	8007932 <memset>
  if(huart->Instance==USART2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <HAL_UART_MspInit+0xb0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d13a      	bne.n	80018da <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001864:	2302      	movs	r3, #2
 8001866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fa09 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800187c:	f7ff fe1c 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_UART_MspInit+0xb4>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	4a18      	ldr	r2, [pc, #96]	@ (80018e8 <HAL_UART_MspInit+0xb4>)
 8001886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188a:	6593      	str	r3, [r2, #88]	@ 0x58
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_UART_MspInit+0xb4>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_UART_MspInit+0xb4>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189c:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <HAL_UART_MspInit+0xb4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a4:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_UART_MspInit+0xb4>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b0:	230c      	movs	r3, #12
 80018b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c6:	2307      	movs	r3, #7
 80018c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d6:	f002 f98f 	bl	8003bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3790      	adds	r7, #144	@ 0x90
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40021000 	.word	0x40021000

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <NMI_Handler+0x4>

080018f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <MemManage_Handler+0x4>

08001904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <UsageFault_Handler+0x4>

08001914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001942:	f000 f959 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <ADC1_IRQHandler+0x10>)
 8001952:	f000 fd8a 	bl	800246a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200021f8 	.word	0x200021f8

08001960 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <DFSDM1_FLT0_IRQHandler+0x10>)
 8001966:	f001 ff45 	bl	80037f4 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20002260 	.word	0x20002260

08001974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_kill>:

int _kill(int pid, int sig)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198e:	f006 f823 	bl	80079d8 <__errno>
 8001992:	4603      	mov	r3, r0
 8001994:	2216      	movs	r2, #22
 8001996:	601a      	str	r2, [r3, #0]
  return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe7 	bl	8001984 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b6:	bf00      	nop
 80019b8:	e7fd      	b.n	80019b6 <_exit+0x12>

080019ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e00a      	b.n	80019e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019cc:	f3af 8000 	nop.w
 80019d0:	4601      	mov	r1, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	60ba      	str	r2, [r7, #8]
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf0      	blt.n	80019cc <_read+0x12>
  }

  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f005 ffa4 	bl	80079d8 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20028000 	.word	0x20028000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	2000338c 	.word	0x2000338c
 8001ac4:	200034f8 	.word	0x200034f8

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af0:	f7ff ffea 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <LoopForever+0xe>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <LoopForever+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f005 ff63 	bl	80079e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1e:	f7ff f9c3 	bl	8000ea8 <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200021dc 	.word	0x200021dc
  ldr r2, =_sidata
 8001b30:	0800ca90 	.word	0x0800ca90
  ldr r2, =_sbss
 8001b34:	200021dc 	.word	0x200021dc
  ldr r4, =_ebss
 8001b38:	200034f4 	.word	0x200034f4

08001b3c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <CAN1_RX0_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_Init+0x3c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b7c <HAL_Init+0x3c>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f001 fbd4 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 f80f 	bl	8001b80 <HAL_InitTick>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	e001      	b.n	8001b72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b6e:	f7ff fca9 	bl	80014c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40022000 	.word	0x40022000

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_InitTick+0x6c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <HAL_InitTick+0x70>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_InitTick+0x6c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fbdf 	bl	800336e <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d809      	bhi.n	8001bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f001 fba9 	bl	800331a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <HAL_InitTick+0x74>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e004      	b.n	8001be0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e001      	b.n	8001be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20002010 	.word	0x20002010
 8001bf0:	20002008 	.word	0x20002008
 8001bf4:	2000200c 	.word	0x2000200c

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20002010 	.word	0x20002010
 8001c1c:	20003390 	.word	0x20003390

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20003390 	.word	0x20003390

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20002010 	.word	0x20002010

08001c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3360      	adds	r3, #96	@ 0x60
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <LL_ADC_SetOffset+0x44>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	03fff000 	.word	0x03fff000

08001d30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3360      	adds	r3, #96	@ 0x60
 8001d3e:	461a      	mov	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3360      	adds	r3, #96	@ 0x60
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	615a      	str	r2, [r3, #20]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b087      	sub	sp, #28
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3330      	adds	r3, #48	@ 0x30
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	4413      	add	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	211f      	movs	r1, #31
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	401a      	ands	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	f003 011f 	and.w	r1, r3, #31
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0e5b      	lsrs	r3, r3, #25
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0d1b      	lsrs	r3, r3, #20
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2107      	movs	r1, #7
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	401a      	ands	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0d1b      	lsrs	r3, r3, #20
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0318 	and.w	r3, r3, #24
 8001ed6:	4908      	ldr	r1, [pc, #32]	@ (8001ef8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ed8:	40d9      	lsrs	r1, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	400b      	ands	r3, r1
 8001ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	0007ffff 	.word	0x0007ffff

08001efc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6093      	str	r3, [r2, #8]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f84:	d101      	bne.n	8001f8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <LL_ADC_IsEnabled+0x18>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_ADC_IsEnabled+0x1a>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ff6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ffa:	f043 0204 	orr.w	r2, r3, #4
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b04      	cmp	r3, #4
 8002020:	d101      	bne.n	8002026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d101      	bne.n	800204c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e129      	b.n	80022ca <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fa41 	bl	800150c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff3f 	bl	8001f20 <LL_ADC_IsDeepPowerDownEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff25 	bl	8001efc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff5a 	bl	8001f70 <LL_ADC_IsInternalRegulatorEnabled>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff3e 	bl	8001f48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020cc:	4b81      	ldr	r3, [pc, #516]	@ (80022d4 <HAL_ADC_Init+0x278>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	4a81      	ldr	r2, [pc, #516]	@ (80022d8 <HAL_ADC_Init+0x27c>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff3c 	bl	8001f70 <LL_ADC_IsInternalRegulatorEnabled>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10d      	bne.n	800211a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff75 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 8002124:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 80c2 	bne.w	80022b8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 80be 	bne.w	80022b8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002144:	f043 0202 	orr.w	r2, r3, #2
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff35 	bl	8001fc0 <LL_ADC_IsEnabled>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10b      	bne.n	8002174 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800215c:	485f      	ldr	r0, [pc, #380]	@ (80022dc <HAL_ADC_Init+0x280>)
 800215e:	f7ff ff2f 	bl	8001fc0 <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4619      	mov	r1, r3
 800216e:	485c      	ldr	r0, [pc, #368]	@ (80022e0 <HAL_ADC_Init+0x284>)
 8002170:	f7ff fd86 	bl	8001c80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e5b      	ldrb	r3, [r3, #25]
 8002178:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002184:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800218a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002192:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	3b01      	subs	r3, #1
 80021a8:	045b      	lsls	r3, r3, #17
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b44      	ldr	r3, [pc, #272]	@ (80022e4 <HAL_ADC_Init+0x288>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	430b      	orrs	r3, r1
 80021de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff25 	bl	8002034 <LL_ADC_INJ_IsConversionOngoing>
 80021ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d140      	bne.n	8002274 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d13d      	bne.n	8002274 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
 8002200:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002202:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800220a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800221a:	f023 0306 	bic.w	r3, r3, #6
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	430b      	orrs	r3, r1
 8002226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800222e:	2b01      	cmp	r3, #1
 8002230:	d118      	bne.n	8002264 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800224e:	4311      	orrs	r1, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002254:	430a      	orrs	r2, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	e007      	b.n	8002274 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10c      	bne.n	8002296 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f023 010f 	bic.w	r1, r3, #15
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
 8002294:	e007      	b.n	80022a6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 020f 	bic.w	r2, r2, #15
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80022b6:	e007      	b.n	80022c8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	f043 0210 	orr.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20002008 	.word	0x20002008
 80022d8:	053e2d63 	.word	0x053e2d63
 80022dc:	50040000 	.word	0x50040000
 80022e0:	50040300 	.word	0x50040300
 80022e4:	fff0c007 	.word	0xfff0c007

080022e8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fe8a 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 80a0 	bne.w	8002442 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_ADC_Start_IT+0x28>
 800230c:	2302      	movs	r3, #2
 800230e:	e09b      	b.n	8002448 <HAL_ADC_Start_IT+0x160>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fe6b 	bl	8002ff4 <ADC_Enable>
 800231e:	4603      	mov	r3, r0
 8002320:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8087 	bne.w	8002438 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	f023 0206 	bic.w	r2, r3, #6
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002356:	e002      	b.n	800235e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	221c      	movs	r2, #28
 8002364:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 021c 	bic.w	r2, r2, #28
 800237c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b08      	cmp	r3, #8
 8002384:	d108      	bne.n	8002398 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0208 	orr.w	r2, r2, #8
 8002394:	605a      	str	r2, [r3, #4]
          break;
 8002396:	e008      	b.n	80023aa <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0204 	orr.w	r2, r2, #4
 80023a6:	605a      	str	r2, [r3, #4]
          break;
 80023a8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0210 	orr.w	r2, r2, #16
 80023c0:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02d      	beq.n	800242c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d110      	bne.n	800240a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0220 	bic.w	r2, r2, #32
 80023f6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002406:	605a      	str	r2, [r3, #4]
            break;
 8002408:	e010      	b.n	800242c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002418:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	605a      	str	r2, [r3, #4]
            break;
 800242a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fdd8 	bl	8001fe6 <LL_ADC_REG_StartConversion>
 8002436:	e006      	b.n	8002446 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002440:	e001      	b.n	8002446 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x56>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fe4c 	bl	8003150 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x6a>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d05e      	beq.n	800259c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d059      	beq.n	800259c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fc57 	bl	8001db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d03e      	beq.n	800258e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d135      	bne.n	800258e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d12e      	bne.n	800258e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fd6a 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d11a      	bne.n	8002576 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 020c 	bic.w	r2, r2, #12
 800254e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	@ 0x58
 8002574:	e00b      	b.n	800258e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	f043 0210 	orr.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe ff58 	bl	8001444 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	220c      	movs	r2, #12
 800259a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x146>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d072      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d06d      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fc28 	bl	8001e36 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025e6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fbe3 	bl	8001db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025f2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d047      	beq.n	8002692 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_ADC_IRQHandler+0x1b2>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03f      	beq.n	8002692 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d13a      	bne.n	8002692 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002626:	2b40      	cmp	r3, #64	@ 0x40
 8002628:	d133      	bne.n	8002692 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d12e      	bne.n	8002692 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fcfb 	bl	8002034 <LL_ADC_INJ_IsConversionOngoing>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11a      	bne.n	800267a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002652:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d112      	bne.n	8002692 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	659a      	str	r2, [r3, #88]	@ 0x58
 8002678:	e00b      	b.n	8002692 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fd34 	bl	8003100 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2260      	movs	r2, #96	@ 0x60
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d011      	beq.n	80026ce <HAL_ADC_IRQHandler+0x264>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f886 	bl	80027d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2280      	movs	r2, #128	@ 0x80
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <HAL_ADC_IRQHandler+0x294>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fd1a 	bl	8003128 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_ADC_IRQHandler+0x2c4>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fd0c 	bl	800313c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02a      	beq.n	800278e <HAL_ADC_IRQHandler+0x324>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d025      	beq.n	800278e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e008      	b.n	8002762 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d10e      	bne.n	8002786 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	f043 0202 	orr.w	r2, r3, #2
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f830 	bl	80027e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2210      	movs	r2, #16
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d018      	beq.n	80027ca <HAL_ADC_IRQHandler+0x360>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d013      	beq.n	80027ca <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	f043 0208 	orr.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fca5 	bl	8003114 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027ca:	bf00      	nop
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x22>
 800281a:	2302      	movs	r3, #2
 800281c:	e3d5      	b.n	8002fca <HAL_ADC_ConfigChannel+0x7ce>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fbef 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 83ba 	bne.w	8002fac <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d824      	bhi.n	8002892 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	3b02      	subs	r3, #2
 800284e:	2b03      	cmp	r3, #3
 8002850:	d81b      	bhi.n	800288a <HAL_ADC_ConfigChannel+0x8e>
 8002852:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <HAL_ADC_ConfigChannel+0x5c>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	08002869 	.word	0x08002869
 800285c:	08002871 	.word	0x08002871
 8002860:	08002879 	.word	0x08002879
 8002864:	08002881 	.word	0x08002881
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002868:	230c      	movs	r3, #12
 800286a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800286e:	e010      	b.n	8002892 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002870:	2312      	movs	r3, #18
 8002872:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002876:	e00c      	b.n	8002892 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002878:	2318      	movs	r3, #24
 800287a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800287e:	e008      	b.n	8002892 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002888:	e003      	b.n	8002892 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800288a:	2306      	movs	r3, #6
 800288c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002890:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028a0:	f7ff fa9d 	bl	8001dde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fbb0 	bl	800200e <LL_ADC_REG_IsConversionOngoing>
 80028ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fbbc 	bl	8002034 <LL_ADC_INJ_IsConversionOngoing>
 80028bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 81bf 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 81ba 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028dc:	d10f      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7ff fab7 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fa4b 	bl	8001d92 <LL_ADC_SetSamplingTimeCommonConfig>
 80028fc:	e00e      	b.n	800291c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	461a      	mov	r2, r3
 800290c:	f7ff faa6 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fa3b 	bl	8001d92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00a      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6919      	ldr	r1, [r3, #16]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800294e:	f7ff f9cb 	bl	8001ce8 <LL_ADC_SetOffset>
 8002952:	e179      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f9e8 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x184>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f9dd 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	0e9b      	lsrs	r3, r3, #26
 800297a:	f003 021f 	and.w	r2, r3, #31
 800297e:	e01e      	b.n	80029be <HAL_ADC_ConfigChannel+0x1c2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f9d2 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800299e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e004      	b.n	80029bc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80029b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1da>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	e018      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x20c>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80029f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e004      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80029fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d106      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff f9a1 	bl	8001d5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff f985 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x24a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f97a 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	e01e      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x288>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff f96f 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e004      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002a78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x2a0>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	e018      	b.n	8002ace <HAL_ADC_ConfigChannel+0x2d2>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e004      	b.n	8002ace <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d106      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f93e 	bl	8001d5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f922 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x310>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2102      	movs	r1, #2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff f917 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	e01e      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x34e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f90c 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e004      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x366>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	e014      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x390>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e004      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d106      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f8df 	bl	8001d5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f8c3 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x3ce>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2103      	movs	r1, #3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff f8b8 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	e017      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x3fe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2103      	movs	r1, #3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff f8ad 	bl	8001d30 <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002be6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x416>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	e011      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x43a>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c22:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d106      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2103      	movs	r1, #3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f88a 	bl	8001d5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f9b7 	bl	8001fc0 <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 813f 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f7ff f924 	bl	8001eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a8e      	ldr	r2, [pc, #568]	@ (8002eac <HAL_ADC_ConfigChannel+0x6b0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f040 8130 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x4a4>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e019      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4d8>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2b09      	cmp	r3, #9
 8002ccc:	bf94      	ite	ls
 8002cce:	2301      	movls	r3, #1
 8002cd0:	2300      	movhi	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d079      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x4f8>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf2:	e015      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x524>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x544>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	e017      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x574>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	ea42 0103 	orr.w	r1, r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x59a>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	051b      	lsls	r3, r3, #20
 8002d94:	e018      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5cc>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	e080      	b.n	8002ece <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x5ec>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	069b      	lsls	r3, r3, #26
 8002de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de6:	e015      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x618>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	069b      	lsls	r3, r3, #26
 8002e10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x638>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	e017      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x668>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	61bb      	str	r3, [r7, #24]
  return result;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	ea42 0103 	orr.w	r1, r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x694>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	3b1e      	subs	r3, #30
 8002e88:	051b      	lsls	r3, r3, #20
 8002e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	e01d      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x6d0>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	60fb      	str	r3, [r7, #12]
  return result;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e005      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x6bc>
 8002eac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b1e      	subs	r3, #30
 8002ec6:	051b      	lsls	r3, r3, #20
 8002ec8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ecc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fe ffc2 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d06c      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee4:	483c      	ldr	r0, [pc, #240]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ee6:	f7fe fef1 	bl	8001ccc <LL_ADC_GetCommonPathInternalCh>
 8002eea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7e0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d127      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d121      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a35      	ldr	r2, [pc, #212]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d157      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f16:	4619      	mov	r1, r3
 8002f18:	482f      	ldr	r0, [pc, #188]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f1a:	f7fe fec4 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1e:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	4a30      	ldr	r2, [pc, #192]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f38:	e002      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f46:	e03a      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <HAL_ADC_ConfigChannel+0x7f0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d113      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d12a      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f70:	4619      	mov	r1, r3
 8002f72:	4819      	ldr	r0, [pc, #100]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f74:	f7fe fe97 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f78:	e021      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d11c      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d111      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fa6:	f7fe fe7e 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
 8002faa:	e008      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	37d8      	adds	r7, #216	@ 0xd8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	80080000 	.word	0x80080000
 8002fd8:	50040300 	.word	0x50040300
 8002fdc:	c7520000 	.word	0xc7520000
 8002fe0:	50040000 	.word	0x50040000
 8002fe4:	20002008 	.word	0x20002008
 8002fe8:	053e2d63 	.word	0x053e2d63
 8002fec:	cb840000 	.word	0xcb840000
 8002ff0:	80000001 	.word	0x80000001

08002ff4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe ffdb 	bl	8001fc0 <LL_ADC_IsEnabled>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d169      	bne.n	80030e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <ADC_Enable+0xfc>)
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e055      	b.n	80030e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe ffaa 	bl	8001f98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003044:	482b      	ldr	r0, [pc, #172]	@ (80030f4 <ADC_Enable+0x100>)
 8003046:	f7fe fe41 	bl	8001ccc <LL_ADC_GetCommonPathInternalCh>
 800304a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800304c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003054:	4b28      	ldr	r3, [pc, #160]	@ (80030f8 <ADC_Enable+0x104>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	4a28      	ldr	r2, [pc, #160]	@ (80030fc <ADC_Enable+0x108>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800306e:	e002      	b.n	8003076 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f9      	bne.n	8003070 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800307c:	f7fe fdd0 	bl	8001c20 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003082:	e028      	b.n	80030d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe ff99 	bl	8001fc0 <LL_ADC_IsEnabled>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe ff7d 	bl	8001f98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800309e:	f7fe fdbf 	bl	8001c20 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d914      	bls.n	80030d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d00d      	beq.n	80030d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	f043 0210 	orr.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e007      	b.n	80030e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d1cf      	bne.n	8003084 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	8000003f 	.word	0x8000003f
 80030f4:	50040300 	.word	0x50040300
 80030f8:	20002008 	.word	0x20002008
 80030fc:	053e2d63 	.word	0x053e2d63

08003100 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	@ (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	@ (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	@ (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	@ 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	@ 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff29 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff3e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff31 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0ac      	b.n	80034f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fbac 	bl	8003afc <DFSDM_GetChannelFromInstance>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4a55      	ldr	r2, [pc, #340]	@ (80034fc <HAL_DFSDM_ChannelInit+0x174>)
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e09f      	b.n	80034f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fe f9af 	bl	8001718 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80033ba:	4b51      	ldr	r3, [pc, #324]	@ (8003500 <HAL_DFSDM_ChannelInit+0x178>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003500 <HAL_DFSDM_ChannelInit+0x178>)
 80033c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80033c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003500 <HAL_DFSDM_ChannelInit+0x178>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d125      	bne.n	8003418 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80033cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80033d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4948      	ldr	r1, [pc, #288]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80033e6:	4b47      	ldr	r3, [pc, #284]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a46      	ldr	r2, [pc, #280]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033ec:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80033f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80033fa:	4b42      	ldr	r3, [pc, #264]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	493f      	ldr	r1, [pc, #252]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800340c:	4b3d      	ldr	r3, [pc, #244]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a3c      	ldr	r2, [pc, #240]	@ (8003504 <HAL_DFSDM_ChannelInit+0x17c>)
 8003412:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003416:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003426:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003436:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800343c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 020f 	bic.w	r2, r2, #15
 8003454:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800347c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f002 0207 	and.w	r2, r2, #7
 80034a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fb0a 	bl	8003afc <DFSDM_GetChannelFromInstance>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4904      	ldr	r1, [pc, #16]	@ (80034fc <HAL_DFSDM_ChannelInit+0x174>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20003398 	.word	0x20003398
 8003500:	20003394 	.word	0x20003394
 8003504:	40016000 	.word	0x40016000

08003508 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0ca      	b.n	80036d8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a66      	ldr	r2, [pc, #408]	@ (80036e0 <HAL_DFSDM_FilterInit+0x1b0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d109      	bne.n	8003560 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003550:	2b01      	cmp	r3, #1
 8003552:	d003      	beq.n	800355c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0bb      	b.n	80036d8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe f837 	bl	80015ec <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800358c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7a1b      	ldrb	r3, [r3, #8]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e007      	b.n	80035b8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80035b6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7a5b      	ldrb	r3, [r3, #9]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e007      	b.n	80035e2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 80035f0:	f023 0308 	bic.w	r3, r3, #8
 80035f4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d108      	bne.n	8003610 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7c1b      	ldrb	r3, [r3, #16]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d108      	bne.n	800362a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0210 	orr.w	r2, r2, #16
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e007      	b.n	800363a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0210 	bic.w	r2, r2, #16
 8003638:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7c5b      	ldrb	r3, [r3, #17]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e007      	b.n	8003664 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0220 	bic.w	r2, r2, #32
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8003672:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8003676:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6959      	ldr	r1, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800368a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003692:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7c1a      	ldrb	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40016100 	.word	0x40016100

080036e4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02e      	beq.n	800375c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003704:	2bff      	cmp	r3, #255	@ 0xff
 8003706:	d029      	beq.n	800375c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800371a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10d      	bne.n	800373e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e00a      	b.n	8003754 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
 800375a:	e001      	b.n	8003760 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_DFSDM_FilterRegularStart_IT>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_IT(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d004      	beq.n	800378e <HAL_DFSDM_FilterRegularStart_IT+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800378a:	2b03      	cmp	r3, #3
 800378c:	d10b      	bne.n	80037a6 <HAL_DFSDM_FilterRegularStart_IT+0x38>
  {
    /* Enable interrupts for regular conversions */
    hdfsdm_filter->Instance->FLTCR2 |= (DFSDM_FLTCR2_REOCIE | DFSDM_FLTCR2_ROVRIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 020a 	orr.w	r2, r2, #10
 800379c:	605a      	str	r2, [r3, #4]

    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9d4 	bl	8003b4c <DFSDM_RegConvStart>
 80037a4:	e001      	b.n	80037aa <HAL_DFSDM_FilterRegularStart_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(const DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0207 	and.w	r2, r3, #7
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037d6:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da00      	bge.n	80037e0 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 80037de:	33ff      	adds	r3, #255	@ 0xff
 80037e0:	121b      	asrs	r3, r3, #8
 80037e2:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 80037e4:	68bb      	ldr	r3, [r7, #8]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00f      	beq.n	8003836 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2208      	movs	r2, #8
 8003826:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fe1c 	bl	800146c <HAL_DFSDM_FilterErrorCallback>
 8003834:	e13a      	b.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd fe07 	bl	800146c <HAL_DFSDM_FilterErrorCallback>
 800385e:	e125      	b.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d025      	beq.n	80038b6 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f921 	bl	8003abc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 8113 	bne.w	8003aaa <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 810e 	bne.w	8003aaa <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0202 	bic.w	r2, r2, #2
 800389c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d101      	bne.n	80038ac <HAL_DFSDM_IRQHandler+0xb8>
 80038a8:	2201      	movs	r2, #1
 80038aa:	e000      	b.n	80038ae <HAL_DFSDM_IRQHandler+0xba>
 80038ac:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80038b4:	e0f9      	b.n	8003aaa <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d034      	beq.n	800392a <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02f      	beq.n	800392a <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f900 	bl	8003ad0 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 80e4 	bne.w	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d112      	bne.n	8003912 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8003902:	2b03      	cmp	r3, #3
 8003904:	d101      	bne.n	800390a <HAL_DFSDM_IRQHandler+0x116>
 8003906:	2201      	movs	r2, #1
 8003908:	e000      	b.n	800390c <HAL_DFSDM_IRQHandler+0x118>
 800390a:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <HAL_DFSDM_IRQHandler+0x12e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	e000      	b.n	8003924 <HAL_DFSDM_IRQHandler+0x130>
 8003922:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8003928:	e0c0      	b.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03d      	beq.n	80039b0 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800393a:	2b00      	cmp	r3, #0
 800393c:	d038      	beq.n	80039b0 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_DFSDM_IRQHandler+0x162>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_DFSDM_IRQHandler+0x164>
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003966:	e005      	b.n	8003974 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	3301      	adds	r3, #1
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_DFSDM_IRQHandler+0x190>
 800397e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003980:	2b02      	cmp	r3, #2
 8003982:	d9f1      	bls.n	8003968 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <HAL_DFSDM_IRQHandler+0x1a2>
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	3308      	adds	r3, #8
 800398e:	2201      	movs	r2, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	e003      	b.n	800399e <HAL_DFSDM_IRQHandler+0x1aa>
 8003996:	2201      	movs	r2, #1
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f89b 	bl	8003ae4 <HAL_DFSDM_FilterAwdCallback>
  {
 80039ae:	e07d      	b.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab4 <HAL_DFSDM_IRQHandler+0x2c0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d141      	bne.n	8003a3e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03c      	beq.n	8003a3e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d037      	beq.n	8003a3e <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80039de:	e02a      	b.n	8003a36 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01f      	beq.n	8003a2a <HAL_DFSDM_IRQHandler+0x236>
 80039ea:	4a33      	ldr	r2, [pc, #204]	@ (8003ab8 <HAL_DFSDM_IRQHandler+0x2c4>)
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d019      	beq.n	8003a2a <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80039f6:	4a30      	ldr	r2, [pc, #192]	@ (8003ab8 <HAL_DFSDM_IRQHandler+0x2c4>)
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00f      	beq.n	8003a2a <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f103 0210 	add.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8003a1c:	4a26      	ldr	r2, [pc, #152]	@ (8003ab8 <HAL_DFSDM_IRQHandler+0x2c4>)
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fd6f 	bl	8003508 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d9d1      	bls.n	80039e0 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8003a3c:	e036      	b.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_DFSDM_IRQHandler+0x2c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d131      	bne.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a4e:	d32d      	bcc.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d028      	beq.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	0e1b      	lsrs	r3, r3, #24
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003a6a:	e005      	b.n	8003a78 <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_DFSDM_IRQHandler+0x294>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d9f1      	bls.n	8003a6c <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f103 0218 	add.w	r2, r3, #24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8003a9a:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <HAL_DFSDM_IRQHandler+0x2c4>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fd3a 	bl	800351c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8003aa8:	e000      	b.n	8003aac <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003aaa:	bf00      	nop
}
 8003aac:	bf00      	nop
 8003aae:	3730      	adds	r7, #48	@ 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40016100 	.word	0x40016100
 8003ab8:	20003398 	.word	0x20003398

08003abc <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <DFSDM_GetChannelFromInstance+0x44>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d102      	bne.n	8003b12 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e00f      	b.n	8003b32 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <DFSDM_GetChannelFromInstance+0x48>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d102      	bne.n	8003b20 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e008      	b.n	8003b32 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <DFSDM_GetChannelFromInstance+0x4c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d102      	bne.n	8003b2e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e001      	b.n	8003b32 <DFSDM_GetChannelFromInstance+0x36>
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40016000 	.word	0x40016000
 8003b44:	40016020 	.word	0x40016020
 8003b48:	40016040 	.word	0x40016040

08003b4c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e033      	b.n	8003bd6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d116      	bne.n	8003bd6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0202 	orr.w	r2, r2, #2
 8003bbe:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d102      	bne.n	8003bd0 <DFSDM_RegConvStart+0x84>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	e000      	b.n	8003bd2 <DFSDM_RegConvStart+0x86>
 8003bd0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <DFSDM_RegConvStart+0x98>
 8003be0:	2202      	movs	r2, #2
 8003be2:	e000      	b.n	8003be6 <DFSDM_RegConvStart+0x9a>
 8003be4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c06:	e154      	b.n	8003eb2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8146 	beq.w	8003eac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d005      	beq.n	8003c38 <HAL_GPIO_Init+0x40>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d130      	bne.n	8003c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	2203      	movs	r2, #3
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c6e:	2201      	movs	r2, #1
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0201 	and.w	r2, r3, #1
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d017      	beq.n	8003cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d123      	bne.n	8003d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	08da      	lsrs	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3208      	adds	r2, #8
 8003cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	08da      	lsrs	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3208      	adds	r2, #8
 8003d24:	6939      	ldr	r1, [r7, #16]
 8003d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0203 	and.w	r2, r3, #3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80a0 	beq.w	8003eac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6c:	4b58      	ldr	r3, [pc, #352]	@ (8003ed0 <HAL_GPIO_Init+0x2d8>)
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	4a57      	ldr	r2, [pc, #348]	@ (8003ed0 <HAL_GPIO_Init+0x2d8>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d78:	4b55      	ldr	r3, [pc, #340]	@ (8003ed0 <HAL_GPIO_Init+0x2d8>)
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d84:	4a53      	ldr	r2, [pc, #332]	@ (8003ed4 <HAL_GPIO_Init+0x2dc>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dae:	d019      	beq.n	8003de4 <HAL_GPIO_Init+0x1ec>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a49      	ldr	r2, [pc, #292]	@ (8003ed8 <HAL_GPIO_Init+0x2e0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_GPIO_Init+0x1e8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a48      	ldr	r2, [pc, #288]	@ (8003edc <HAL_GPIO_Init+0x2e4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00d      	beq.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a47      	ldr	r2, [pc, #284]	@ (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x1e0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a46      	ldr	r2, [pc, #280]	@ (8003ee4 <HAL_GPIO_Init+0x2ec>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_GPIO_Init+0x1dc>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e008      	b.n	8003de6 <HAL_GPIO_Init+0x1ee>
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	e006      	b.n	8003de6 <HAL_GPIO_Init+0x1ee>
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e004      	b.n	8003de6 <HAL_GPIO_Init+0x1ee>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e002      	b.n	8003de6 <HAL_GPIO_Init+0x1ee>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_GPIO_Init+0x1ee>
 8003de4:	2300      	movs	r3, #0
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	f002 0203 	and.w	r2, r2, #3
 8003dec:	0092      	lsls	r2, r2, #2
 8003dee:	4093      	lsls	r3, r2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003df6:	4937      	ldr	r1, [pc, #220]	@ (8003ed4 <HAL_GPIO_Init+0x2dc>)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e04:	4b38      	ldr	r3, [pc, #224]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e52:	4a25      	ldr	r2, [pc, #148]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e58:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e82:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ea6:	4a10      	ldr	r2, [pc, #64]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f47f aea3 	bne.w	8003c08 <HAL_GPIO_Init+0x10>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	48000400 	.word	0x48000400
 8003edc:	48000800 	.word	0x48000800
 8003ee0:	48000c00 	.word	0x48000c00
 8003ee4:	48001000 	.word	0x48001000
 8003ee8:	40010400 	.word	0x40010400

08003eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003efc:	787b      	ldrb	r3, [r7, #1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f08:	e002      	b.n	8003f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	041a      	lsls	r2, r3, #16
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43d9      	mvns	r1, r3
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f54:	4b04      	ldr	r3, [pc, #16]	@ (8003f68 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40007000 	.word	0x40007000

08003f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f7a:	d130      	bne.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7c:	4b23      	ldr	r3, [pc, #140]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f88:	d038      	beq.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f92:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2232      	movs	r2, #50	@ 0x32
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0c9b      	lsrs	r3, r3, #18
 8003fac:	3301      	adds	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb0:	e002      	b.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc4:	d102      	bne.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f2      	bne.n	8003fb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd8:	d110      	bne.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e00f      	b.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fea:	d007      	beq.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ff4:	4a05      	ldr	r2, [pc, #20]	@ (800400c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ffa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40007000 	.word	0x40007000
 8004010:	20002008 	.word	0x20002008
 8004014:	431bde83 	.word	0x431bde83

08004018 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f000 bc02 	b.w	8004830 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800402c:	4b96      	ldr	r3, [pc, #600]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004036:	4b94      	ldr	r3, [pc, #592]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80e4 	beq.w	8004216 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_RCC_OscConfig+0x4c>
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b0c      	cmp	r3, #12
 8004058:	f040 808b 	bne.w	8004172 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b01      	cmp	r3, #1
 8004060:	f040 8087 	bne.w	8004172 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004064:	4b88      	ldr	r3, [pc, #544]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_OscConfig+0x64>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e3d9      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	4b81      	ldr	r3, [pc, #516]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_RCC_OscConfig+0x7e>
 800408c:	4b7e      	ldr	r3, [pc, #504]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004094:	e005      	b.n	80040a2 <HAL_RCC_OscConfig+0x8a>
 8004096:	4b7c      	ldr	r3, [pc, #496]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d223      	bcs.n	80040ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd8c 	bl	8004bc8 <RCC_SetFlashLatencyFromMSIRange>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e3ba      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ba:	4b73      	ldr	r3, [pc, #460]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a72      	ldr	r2, [pc, #456]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b70      	ldr	r3, [pc, #448]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	496d      	ldr	r1, [pc, #436]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	4968      	ldr	r1, [pc, #416]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	e025      	b.n	800413a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ee:	4b66      	ldr	r3, [pc, #408]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a65      	ldr	r2, [pc, #404]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b63      	ldr	r3, [pc, #396]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4960      	ldr	r1, [pc, #384]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800410c:	4b5e      	ldr	r3, [pc, #376]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	495b      	ldr	r1, [pc, #364]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fd4c 	bl	8004bc8 <RCC_SetFlashLatencyFromMSIRange>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e37a      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800413a:	f000 fc81 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b51      	ldr	r3, [pc, #324]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	4950      	ldr	r1, [pc, #320]	@ (800428c <HAL_RCC_OscConfig+0x274>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a4e      	ldr	r2, [pc, #312]	@ (8004290 <HAL_RCC_OscConfig+0x278>)
 8004158:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800415a:	4b4e      	ldr	r3, [pc, #312]	@ (8004294 <HAL_RCC_OscConfig+0x27c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fd0e 	bl	8001b80 <HAL_InitTick>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d052      	beq.n	8004214 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	e35e      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d032      	beq.n	80041e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800417a:	4b43      	ldr	r3, [pc, #268]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a42      	ldr	r2, [pc, #264]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004186:	f7fd fd4b 	bl	8001c20 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800418e:	f7fd fd47 	bl	8001c20 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e347      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ac:	4b36      	ldr	r3, [pc, #216]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041b2:	f043 0308 	orr.w	r3, r3, #8
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b33      	ldr	r3, [pc, #204]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4930      	ldr	r1, [pc, #192]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	492b      	ldr	r1, [pc, #172]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
 80041de:	e01a      	b.n	8004216 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041e0:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ec:	f7fd fd18 	bl	8001c20 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f4:	f7fd fd14 	bl	8001c20 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e314      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004206:	4b20      	ldr	r3, [pc, #128]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1dc>
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d073      	beq.n	800430a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d005      	beq.n	8004234 <HAL_RCC_OscConfig+0x21c>
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d10e      	bne.n	800424c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d10b      	bne.n	800424c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	4b14      	ldr	r3, [pc, #80]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d063      	beq.n	8004308 <HAL_RCC_OscConfig+0x2f0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d15f      	bne.n	8004308 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e2f1      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d106      	bne.n	8004264 <HAL_RCC_OscConfig+0x24c>
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0b      	ldr	r2, [pc, #44]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e025      	b.n	80042b0 <HAL_RCC_OscConfig+0x298>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800426c:	d114      	bne.n	8004298 <HAL_RCC_OscConfig+0x280>
 800426e:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a02      	ldr	r2, [pc, #8]	@ (8004288 <HAL_RCC_OscConfig+0x270>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e013      	b.n	80042b0 <HAL_RCC_OscConfig+0x298>
 8004288:	40021000 	.word	0x40021000
 800428c:	080098a8 	.word	0x080098a8
 8004290:	20002008 	.word	0x20002008
 8004294:	2000200c 	.word	0x2000200c
 8004298:	4ba0      	ldr	r3, [pc, #640]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a9f      	ldr	r2, [pc, #636]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b9d      	ldr	r3, [pc, #628]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a9c      	ldr	r2, [pc, #624]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fcb2 	bl	8001c20 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd fcae 	bl	8001c20 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e2ae      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d2:	4b92      	ldr	r3, [pc, #584]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2a8>
 80042de:	e014      	b.n	800430a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fc9e 	bl	8001c20 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fd fc9a 	bl	8001c20 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e29a      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042fa:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2d0>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d060      	beq.n	80043d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d005      	beq.n	8004328 <HAL_RCC_OscConfig+0x310>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d119      	bne.n	8004356 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d116      	bne.n	8004356 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004328:	4b7c      	ldr	r3, [pc, #496]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_OscConfig+0x328>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e277      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004340:	4b76      	ldr	r3, [pc, #472]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	4973      	ldr	r1, [pc, #460]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004354:	e040      	b.n	80043d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d023      	beq.n	80043a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435e:	4b6f      	ldr	r3, [pc, #444]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6e      	ldr	r2, [pc, #440]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fd fc59 	bl	8001c20 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004372:	f7fd fc55 	bl	8001c20 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e255      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004384:	4b65      	ldr	r3, [pc, #404]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4b62      	ldr	r3, [pc, #392]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	495f      	ldr	r1, [pc, #380]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
 80043a4:	e018      	b.n	80043d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a6:	4b5d      	ldr	r3, [pc, #372]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5c      	ldr	r2, [pc, #368]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80043ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b2:	f7fd fc35 	bl	8001c20 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ba:	f7fd fc31 	bl	8001c20 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e231      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043cc:	4b53      	ldr	r3, [pc, #332]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d03c      	beq.n	800445e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01c      	beq.n	8004426 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ec:	4b4b      	ldr	r3, [pc, #300]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80043ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f2:	4a4a      	ldr	r2, [pc, #296]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd fc10 	bl	8001c20 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004404:	f7fd fc0c 	bl	8001c20 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e20c      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004416:	4b41      	ldr	r3, [pc, #260]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ef      	beq.n	8004404 <HAL_RCC_OscConfig+0x3ec>
 8004424:	e01b      	b.n	800445e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004426:	4b3d      	ldr	r3, [pc, #244]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442c:	4a3b      	ldr	r2, [pc, #236]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fd fbf3 	bl	8001c20 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443e:	f7fd fbef 	bl	8001c20 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1ef      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004450:	4b32      	ldr	r3, [pc, #200]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ef      	bne.n	800443e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80a6 	beq.w	80045b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446c:	2300      	movs	r3, #0
 800446e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004470:	4b2a      	ldr	r3, [pc, #168]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b27      	ldr	r3, [pc, #156]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	4a26      	ldr	r2, [pc, #152]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004486:	6593      	str	r3, [r2, #88]	@ 0x58
 8004488:	4b24      	ldr	r3, [pc, #144]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004494:	2301      	movs	r3, #1
 8004496:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004498:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <HAL_RCC_OscConfig+0x508>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d118      	bne.n	80044d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004520 <HAL_RCC_OscConfig+0x508>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_RCC_OscConfig+0x508>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b0:	f7fd fbb6 	bl	8001c20 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fd fbb2 	bl	8001c20 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1b2      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <HAL_RCC_OscConfig+0x508>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d108      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4d8>
 80044de:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ee:	e029      	b.n	8004544 <HAL_RCC_OscConfig+0x52c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	d115      	bne.n	8004524 <HAL_RCC_OscConfig+0x50c>
 80044f8:	4b08      	ldr	r3, [pc, #32]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fe:	4a07      	ldr	r2, [pc, #28]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004508:	4b04      	ldr	r3, [pc, #16]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450e:	4a03      	ldr	r2, [pc, #12]	@ (800451c <HAL_RCC_OscConfig+0x504>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x52c>
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
 8004524:	4b9a      	ldr	r3, [pc, #616]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	4a99      	ldr	r2, [pc, #612]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004534:	4b96      	ldr	r3, [pc, #600]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	4a95      	ldr	r2, [pc, #596]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d016      	beq.n	800457a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fd fb68 	bl	8001c20 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	e00a      	b.n	800456a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fd fb64 	bl	8001c20 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e162      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456a:	4b89      	ldr	r3, [pc, #548]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ed      	beq.n	8004554 <HAL_RCC_OscConfig+0x53c>
 8004578:	e015      	b.n	80045a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fd fb51 	bl	8001c20 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd fb4d 	bl	8001c20 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e14b      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004598:	4b7d      	ldr	r3, [pc, #500]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ed      	bne.n	8004582 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b78      	ldr	r3, [pc, #480]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b0:	4a77      	ldr	r2, [pc, #476]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d03c      	beq.n	800463e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01c      	beq.n	8004606 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045cc:	4b70      	ldr	r3, [pc, #448]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fd fb20 	bl	8001c20 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e4:	f7fd fb1c 	bl	8001c20 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e11c      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045f6:	4b66      	ldr	r3, [pc, #408]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80045f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ef      	beq.n	80045e4 <HAL_RCC_OscConfig+0x5cc>
 8004604:	e01b      	b.n	800463e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004606:	4b62      	ldr	r3, [pc, #392]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800460c:	4a60      	ldr	r2, [pc, #384]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd fb03 	bl	8001c20 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800461e:	f7fd faff 	bl	8001c20 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0ff      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004630:	4b57      	ldr	r3, [pc, #348]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ef      	bne.n	800461e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80f3 	beq.w	800482e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	2b02      	cmp	r3, #2
 800464e:	f040 80c9 	bne.w	80047e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004652:	4b4f      	ldr	r3, [pc, #316]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f003 0203 	and.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	429a      	cmp	r2, r3
 8004664:	d12c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	3b01      	subs	r3, #1
 8004672:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d123      	bne.n	80046c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004682:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d11b      	bne.n	80046c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d113      	bne.n	80046c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d109      	bne.n	80046c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	3b01      	subs	r3, #1
 80046ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d06b      	beq.n	8004798 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d062      	beq.n	800478c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046c6:	4b32      	ldr	r3, [pc, #200]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0ac      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2d      	ldr	r2, [pc, #180]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80046dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e2:	f7fd fa9d 	bl	8001c20 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fd fa99 	bl	8001c20 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e099      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004708:	4b21      	ldr	r3, [pc, #132]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <HAL_RCC_OscConfig+0x77c>)
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004718:	3a01      	subs	r2, #1
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004722:	0212      	lsls	r2, r2, #8
 8004724:	4311      	orrs	r1, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800472a:	0852      	lsrs	r2, r2, #1
 800472c:	3a01      	subs	r2, #1
 800472e:	0552      	lsls	r2, r2, #21
 8004730:	4311      	orrs	r1, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004736:	0852      	lsrs	r2, r2, #1
 8004738:	3a01      	subs	r2, #1
 800473a:	0652      	lsls	r2, r2, #25
 800473c:	4311      	orrs	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004742:	06d2      	lsls	r2, r2, #27
 8004744:	430a      	orrs	r2, r1
 8004746:	4912      	ldr	r1, [pc, #72]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004748:	4313      	orrs	r3, r2
 800474a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0f      	ldr	r2, [pc, #60]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004758:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004762:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004764:	f7fd fa5c 	bl	8001c20 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd fa58 	bl	8001c20 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e058      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <HAL_RCC_OscConfig+0x778>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800478a:	e050      	b.n	800482e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e04f      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
 8004790:	40021000 	.word	0x40021000
 8004794:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004798:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d144      	bne.n	800482e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047a4:	4b24      	ldr	r3, [pc, #144]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a23      	ldr	r2, [pc, #140]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a20      	ldr	r2, [pc, #128]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047bc:	f7fd fa30 	bl	8001c20 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd fa2c 	bl	8001c20 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e02c      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x7ac>
 80047e2:	e024      	b.n	800482e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d01f      	beq.n	800482a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b13      	ldr	r3, [pc, #76]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a12      	ldr	r2, [pc, #72]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 80047f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fa13 	bl	8001c20 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fd fa0f 	bl	8001c20 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e00f      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	4905      	ldr	r1, [pc, #20]	@ (8004838 <HAL_RCC_OscConfig+0x820>)
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_RCC_OscConfig+0x824>)
 8004824:	4013      	ands	r3, r2
 8004826:	60cb      	str	r3, [r1, #12]
 8004828:	e001      	b.n	800482e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	feeefffc 	.word	0xfeeefffc

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0e7      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b75      	ldr	r3, [pc, #468]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d910      	bls.n	8004884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b72      	ldr	r3, [pc, #456]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	4970      	ldr	r1, [pc, #448]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b6e      	ldr	r3, [pc, #440]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0cf      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d010      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	4b66      	ldr	r3, [pc, #408]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800489c:	429a      	cmp	r2, r3
 800489e:	d908      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b63      	ldr	r3, [pc, #396]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4960      	ldr	r1, [pc, #384]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04c      	beq.n	8004958 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d121      	bne.n	8004916 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0a6      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048de:	4b54      	ldr	r3, [pc, #336]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d115      	bne.n	8004916 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e09a      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e08e      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004906:	4b4a      	ldr	r3, [pc, #296]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e086      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004916:	4b46      	ldr	r3, [pc, #280]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4943      	ldr	r1, [pc, #268]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004928:	f7fd f97a 	bl	8001c20 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fd f976 	bl	8001c20 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e06e      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	4b3a      	ldr	r3, [pc, #232]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 020c 	and.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	429a      	cmp	r2, r3
 8004956:	d1eb      	bne.n	8004930 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004970:	429a      	cmp	r2, r3
 8004972:	d208      	bcs.n	8004986 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004974:	4b2e      	ldr	r3, [pc, #184]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	492b      	ldr	r1, [pc, #172]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004986:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d210      	bcs.n	80049b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 0207 	bic.w	r2, r3, #7
 800499c:	4923      	ldr	r1, [pc, #140]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a4:	4b21      	ldr	r3, [pc, #132]	@ (8004a2c <HAL_RCC_ClockConfig+0x1ec>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e036      	b.n	8004a24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4918      	ldr	r1, [pc, #96]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e0:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4910      	ldr	r1, [pc, #64]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049f4:	f000 f824 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	490b      	ldr	r1, [pc, #44]	@ (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	4a09      	ldr	r2, [pc, #36]	@ (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a14:	4b09      	ldr	r3, [pc, #36]	@ (8004a3c <HAL_RCC_ClockConfig+0x1fc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fd f8b1 	bl	8001b80 <HAL_InitTick>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a22:	7afb      	ldrb	r3, [r7, #11]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	40021000 	.word	0x40021000
 8004a34:	080098a8 	.word	0x080098a8
 8004a38:	20002008 	.word	0x20002008
 8004a3c:	2000200c 	.word	0x2000200c

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a58:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x34>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d121      	bne.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d11e      	bne.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a74:	4b34      	ldr	r3, [pc, #208]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a80:	4b31      	ldr	r3, [pc, #196]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	e005      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a90:	4b2d      	ldr	r3, [pc, #180]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d102      	bne.n	8004abe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ab8:	4b25      	ldr	r3, [pc, #148]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	e004      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ac4:	4b23      	ldr	r3, [pc, #140]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ac6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d134      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ace:	4b1e      	ldr	r3, [pc, #120]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d003      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0xac>
 8004ae4:	e005      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ae8:	617b      	str	r3, [r7, #20]
      break;
 8004aea:	e005      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004aec:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aee:	617b      	str	r3, [r7, #20]
      break;
 8004af0:	e002      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	617b      	str	r3, [r7, #20]
      break;
 8004af6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af8:	4b13      	ldr	r3, [pc, #76]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	3301      	adds	r3, #1
 8004b04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b06:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	0e5b      	lsrs	r3, r3, #25
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b38:	69bb      	ldr	r3, [r7, #24]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3724      	adds	r7, #36	@ 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	080098c0 	.word	0x080098c0
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20002008 	.word	0x20002008

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b74:	f7ff fff0 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4904      	ldr	r1, [pc, #16]	@ (8004b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000
 8004b98:	080098b8 	.word	0x080098b8

08004b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ba0:	f7ff ffda 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0adb      	lsrs	r3, r3, #11
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4904      	ldr	r1, [pc, #16]	@ (8004bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	080098b8 	.word	0x080098b8

08004bc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004be0:	f7ff f9b6 	bl	8003f50 <HAL_PWREx_GetVoltageRange>
 8004be4:	6178      	str	r0, [r7, #20]
 8004be6:	e014      	b.n	8004c12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004be8:	4b25      	ldr	r3, [pc, #148]	@ (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	4a24      	ldr	r2, [pc, #144]	@ (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf4:	4b22      	ldr	r3, [pc, #136]	@ (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c00:	f7ff f9a6 	bl	8003f50 <HAL_PWREx_GetVoltageRange>
 8004c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c18:	d10b      	bne.n	8004c32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b80      	cmp	r3, #128	@ 0x80
 8004c1e:	d919      	bls.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c24:	d902      	bls.n	8004c2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c26:	2302      	movs	r3, #2
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e013      	b.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	e010      	b.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b80      	cmp	r3, #128	@ 0x80
 8004c36:	d902      	bls.n	8004c3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c38:	2303      	movs	r3, #3
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e00a      	b.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b80      	cmp	r3, #128	@ 0x80
 8004c42:	d102      	bne.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c44:	2302      	movs	r3, #2
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	e004      	b.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b70      	cmp	r3, #112	@ 0x70
 8004c4e:	d101      	bne.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c50:	2301      	movs	r3, #1
 8004c52:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c54:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 0207 	bic.w	r2, r3, #7
 8004c5c:	4909      	ldr	r1, [pc, #36]	@ (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c64:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d001      	beq.n	8004c76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40022000 	.word	0x40022000

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c90:	2300      	movs	r3, #0
 8004c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c94:	2300      	movs	r3, #0
 8004c96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d031      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cac:	d01a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004cae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cb2:	d814      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cbc:	d10f      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cca:	e00c      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fa44 	bl	8005160 <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cec:	4b51      	ldr	r3, [pc, #324]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfa:	494e      	ldr	r1, [pc, #312]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d02:	e001      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 809e 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d1a:	4b46      	ldr	r3, [pc, #280]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d30:	4b40      	ldr	r3, [pc, #256]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	4a3f      	ldr	r2, [pc, #252]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a39      	ldr	r2, [pc, #228]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d58:	f7fc ff62 	bl	8001c20 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d5e:	e009      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d60:	f7fc ff5e 	bl	8001c20 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d902      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	74fb      	strb	r3, [r7, #19]
        break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d74:	4b30      	ldr	r3, [pc, #192]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ef      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d15a      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d86:	4b2b      	ldr	r3, [pc, #172]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01e      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d019      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dae:	4b21      	ldr	r3, [pc, #132]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dce:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d016      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fc ff1e 	bl	8001c20 <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de6:	e00b      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fc ff1a 	bl	8001c20 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d902      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	74fb      	strb	r3, [r7, #19]
            break;
 8004dfe:	e006      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e00:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0ec      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e22:	4904      	ldr	r1, [pc, #16]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	74bb      	strb	r3, [r7, #18]
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e40:	7c7b      	ldrb	r3, [r7, #17]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4b9e      	ldr	r3, [pc, #632]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	4a9d      	ldr	r2, [pc, #628]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5e:	4b98      	ldr	r3, [pc, #608]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e64:	f023 0203 	bic.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4994      	ldr	r1, [pc, #592]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e80:	4b8f      	ldr	r3, [pc, #572]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e86:	f023 020c 	bic.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	498c      	ldr	r1, [pc, #560]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ea2:	4b87      	ldr	r3, [pc, #540]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	4983      	ldr	r1, [pc, #524]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	497b      	ldr	r1, [pc, #492]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee6:	4b76      	ldr	r3, [pc, #472]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	4972      	ldr	r1, [pc, #456]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f08:	4b6d      	ldr	r3, [pc, #436]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	496a      	ldr	r1, [pc, #424]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f2a:	4b65      	ldr	r3, [pc, #404]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f38:	4961      	ldr	r1, [pc, #388]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	4959      	ldr	r1, [pc, #356]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f6e:	4b54      	ldr	r3, [pc, #336]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	4950      	ldr	r1, [pc, #320]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f90:	4b4b      	ldr	r3, [pc, #300]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	4948      	ldr	r1, [pc, #288]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fb2:	4b43      	ldr	r3, [pc, #268]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fb8:	f023 0203 	bic.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	493f      	ldr	r1, [pc, #252]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d028      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe2:	4937      	ldr	r1, [pc, #220]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff4:	4b32      	ldr	r3, [pc, #200]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a31      	ldr	r2, [pc, #196]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ffe:	60d3      	str	r3, [r2, #12]
 8005000:	e011      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005006:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800500a:	d10c      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f8a4 	bl	8005160 <RCCEx_PLLSAI1_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005032:	4b23      	ldr	r3, [pc, #140]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	491f      	ldr	r1, [pc, #124]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800504c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005050:	d106      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005052:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4a1a      	ldr	r2, [pc, #104]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005058:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800505c:	60d3      	str	r3, [r2, #12]
 800505e:	e011      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005064:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005068:	d10c      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2101      	movs	r1, #1
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f875 	bl	8005160 <RCCEx_PLLSAI1_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005090:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005096:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509e:	4908      	ldr	r1, [pc, #32]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ae:	d109      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b0:	4b03      	ldr	r3, [pc, #12]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a02      	ldr	r2, [pc, #8]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ba:	60d3      	str	r3, [r2, #12]
 80050bc:	e014      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f843 	bl	8005160 <RCCEx_PLLSAI1_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01c      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f4:	4b19      	ldr	r3, [pc, #100]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005102:	4916      	ldr	r1, [pc, #88]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005112:	d10c      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	2102      	movs	r1, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f820 	bl	8005160 <RCCEx_PLLSAI1_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800513a:	4b08      	ldr	r3, [pc, #32]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005148:	4904      	ldr	r1, [pc, #16]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005150:	7cbb      	ldrb	r3, [r7, #18]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000

08005160 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800516e:	4b74      	ldr	r3, [pc, #464]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800517a:	4b71      	ldr	r3, [pc, #452]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0203 	and.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d10d      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
       ||
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005192:	4b6b      	ldr	r3, [pc, #428]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
       ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d047      	beq.n	8005236 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	e044      	b.n	8005236 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d018      	beq.n	80051e6 <RCCEx_PLLSAI1_Config+0x86>
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d825      	bhi.n	8005204 <RCCEx_PLLSAI1_Config+0xa4>
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d002      	beq.n	80051c2 <RCCEx_PLLSAI1_Config+0x62>
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d009      	beq.n	80051d4 <RCCEx_PLLSAI1_Config+0x74>
 80051c0:	e020      	b.n	8005204 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11d      	bne.n	800520a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d2:	e01a      	b.n	800520a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e4:	e013      	b.n	800520e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051e6:	4b56      	ldr	r3, [pc, #344]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051f2:	4b53      	ldr	r3, [pc, #332]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005202:	e006      	b.n	8005212 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e004      	b.n	8005214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005212:	bf00      	nop
    }

    if(status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800521a:	4b49      	ldr	r3, [pc, #292]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	430b      	orrs	r3, r1
 8005230:	4943      	ldr	r1, [pc, #268]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d17c      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800523c:	4b40      	ldr	r3, [pc, #256]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a3f      	ldr	r2, [pc, #252]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005248:	f7fc fcea 	bl	8001c20 <HAL_GetTick>
 800524c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800524e:	e009      	b.n	8005264 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005250:	f7fc fce6 	bl	8001c20 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d902      	bls.n	8005264 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	73fb      	strb	r3, [r7, #15]
        break;
 8005262:	e005      	b.n	8005270 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005264:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ef      	bne.n	8005250 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d15f      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d110      	bne.n	800529e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800527c:	4b30      	ldr	r3, [pc, #192]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005284:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6892      	ldr	r2, [r2, #8]
 800528c:	0211      	lsls	r1, r2, #8
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68d2      	ldr	r2, [r2, #12]
 8005292:	06d2      	lsls	r2, r2, #27
 8005294:	430a      	orrs	r2, r1
 8005296:	492a      	ldr	r1, [pc, #168]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
 800529c:	e027      	b.n	80052ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d112      	bne.n	80052ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052a4:	4b26      	ldr	r3, [pc, #152]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80052ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6892      	ldr	r2, [r2, #8]
 80052b4:	0211      	lsls	r1, r2, #8
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6912      	ldr	r2, [r2, #16]
 80052ba:	0852      	lsrs	r2, r2, #1
 80052bc:	3a01      	subs	r2, #1
 80052be:	0552      	lsls	r2, r2, #21
 80052c0:	430a      	orrs	r2, r1
 80052c2:	491f      	ldr	r1, [pc, #124]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	610b      	str	r3, [r1, #16]
 80052c8:	e011      	b.n	80052ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6892      	ldr	r2, [r2, #8]
 80052da:	0211      	lsls	r1, r2, #8
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6952      	ldr	r2, [r2, #20]
 80052e0:	0852      	lsrs	r2, r2, #1
 80052e2:	3a01      	subs	r2, #1
 80052e4:	0652      	lsls	r2, r2, #25
 80052e6:	430a      	orrs	r2, r1
 80052e8:	4915      	ldr	r1, [pc, #84]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052ee:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a13      	ldr	r2, [pc, #76]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fa:	f7fc fc91 	bl	8001c20 <HAL_GetTick>
 80052fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005300:	e009      	b.n	8005316 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005302:	f7fc fc8d 	bl	8001c20 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d902      	bls.n	8005316 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	73fb      	strb	r3, [r7, #15]
          break;
 8005314:	e005      	b.n	8005322 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005316:	4b0a      	ldr	r3, [pc, #40]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ef      	beq.n	8005302 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005328:	4b05      	ldr	r3, [pc, #20]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	4903      	ldr	r1, [pc, #12]	@ (8005340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40021000 	.word	0x40021000

08005344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e040      	b.n	80053d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fa64 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	@ 0x24
 8005370:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fb38 	bl	8005a00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8af 	bl	80054f4 <UART_SetConfig>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e01b      	b.n	80053d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fbb7 	bl	8005b44 <UART_CheckIdleState>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	@ 0x28
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d177      	bne.n	80054e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_UART_Transmit+0x24>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e070      	b.n	80054ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	@ 0x21
 8005414:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc fc03 	bl	8001c20 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005434:	d108      	bne.n	8005448 <HAL_UART_Transmit+0x68>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	e003      	b.n	8005450 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005450:	e02f      	b.n	80054b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	@ 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fc19 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e03b      	b.n	80054ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	881a      	ldrh	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005484:	b292      	uxth	r2, r2
 8005486:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	3302      	adds	r3, #2
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e007      	b.n	80054a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1c9      	bne.n	8005452 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2140      	movs	r1, #64	@ 0x40
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fbe3 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e005      	b.n	80054ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f8:	b08a      	sub	sp, #40	@ 0x28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	431a      	orrs	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4313      	orrs	r3, r2
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4ba5      	ldr	r3, [pc, #660]	@ (80057b8 <UART_SetConfig+0x2c4>)
 8005524:	4013      	ands	r3, r2
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800552c:	430b      	orrs	r3, r1
 800552e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a9a      	ldr	r2, [pc, #616]	@ (80057bc <UART_SetConfig+0x2c8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	4313      	orrs	r3, r2
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005570:	430a      	orrs	r2, r1
 8005572:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a91      	ldr	r2, [pc, #580]	@ (80057c0 <UART_SetConfig+0x2cc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d126      	bne.n	80055cc <UART_SetConfig+0xd8>
 800557e:	4b91      	ldr	r3, [pc, #580]	@ (80057c4 <UART_SetConfig+0x2d0>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d81b      	bhi.n	80055c4 <UART_SetConfig+0xd0>
 800558c:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <UART_SetConfig+0xa0>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055bd 	.word	0x080055bd
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055aa:	e0d6      	b.n	800575a <UART_SetConfig+0x266>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e0d2      	b.n	800575a <UART_SetConfig+0x266>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e0ce      	b.n	800575a <UART_SetConfig+0x266>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c2:	e0ca      	b.n	800575a <UART_SetConfig+0x266>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ca:	e0c6      	b.n	800575a <UART_SetConfig+0x266>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7d      	ldr	r2, [pc, #500]	@ (80057c8 <UART_SetConfig+0x2d4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d138      	bne.n	8005648 <UART_SetConfig+0x154>
 80055d6:	4b7b      	ldr	r3, [pc, #492]	@ (80057c4 <UART_SetConfig+0x2d0>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	d82d      	bhi.n	8005640 <UART_SetConfig+0x14c>
 80055e4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <UART_SetConfig+0xf8>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005641 	.word	0x08005641
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005641 	.word	0x08005641
 8005604:	08005641 	.word	0x08005641
 8005608:	08005641 	.word	0x08005641
 800560c:	08005629 	.word	0x08005629
 8005610:	08005641 	.word	0x08005641
 8005614:	08005641 	.word	0x08005641
 8005618:	08005641 	.word	0x08005641
 800561c:	08005639 	.word	0x08005639
 8005620:	2300      	movs	r3, #0
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005626:	e098      	b.n	800575a <UART_SetConfig+0x266>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800562e:	e094      	b.n	800575a <UART_SetConfig+0x266>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005636:	e090      	b.n	800575a <UART_SetConfig+0x266>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563e:	e08c      	b.n	800575a <UART_SetConfig+0x266>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005646:	e088      	b.n	800575a <UART_SetConfig+0x266>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5f      	ldr	r2, [pc, #380]	@ (80057cc <UART_SetConfig+0x2d8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d125      	bne.n	800569e <UART_SetConfig+0x1aa>
 8005652:	4b5c      	ldr	r3, [pc, #368]	@ (80057c4 <UART_SetConfig+0x2d0>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800565c:	2b30      	cmp	r3, #48	@ 0x30
 800565e:	d016      	beq.n	800568e <UART_SetConfig+0x19a>
 8005660:	2b30      	cmp	r3, #48	@ 0x30
 8005662:	d818      	bhi.n	8005696 <UART_SetConfig+0x1a2>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d00a      	beq.n	800567e <UART_SetConfig+0x18a>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d814      	bhi.n	8005696 <UART_SetConfig+0x1a2>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <UART_SetConfig+0x182>
 8005670:	2b10      	cmp	r3, #16
 8005672:	d008      	beq.n	8005686 <UART_SetConfig+0x192>
 8005674:	e00f      	b.n	8005696 <UART_SetConfig+0x1a2>
 8005676:	2300      	movs	r3, #0
 8005678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567c:	e06d      	b.n	800575a <UART_SetConfig+0x266>
 800567e:	2302      	movs	r3, #2
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005684:	e069      	b.n	800575a <UART_SetConfig+0x266>
 8005686:	2304      	movs	r3, #4
 8005688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568c:	e065      	b.n	800575a <UART_SetConfig+0x266>
 800568e:	2308      	movs	r3, #8
 8005690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005694:	e061      	b.n	800575a <UART_SetConfig+0x266>
 8005696:	2310      	movs	r3, #16
 8005698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569c:	e05d      	b.n	800575a <UART_SetConfig+0x266>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4b      	ldr	r2, [pc, #300]	@ (80057d0 <UART_SetConfig+0x2dc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d125      	bne.n	80056f4 <UART_SetConfig+0x200>
 80056a8:	4b46      	ldr	r3, [pc, #280]	@ (80057c4 <UART_SetConfig+0x2d0>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b4:	d016      	beq.n	80056e4 <UART_SetConfig+0x1f0>
 80056b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b8:	d818      	bhi.n	80056ec <UART_SetConfig+0x1f8>
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d00a      	beq.n	80056d4 <UART_SetConfig+0x1e0>
 80056be:	2b80      	cmp	r3, #128	@ 0x80
 80056c0:	d814      	bhi.n	80056ec <UART_SetConfig+0x1f8>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <UART_SetConfig+0x1d8>
 80056c6:	2b40      	cmp	r3, #64	@ 0x40
 80056c8:	d008      	beq.n	80056dc <UART_SetConfig+0x1e8>
 80056ca:	e00f      	b.n	80056ec <UART_SetConfig+0x1f8>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d2:	e042      	b.n	800575a <UART_SetConfig+0x266>
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056da:	e03e      	b.n	800575a <UART_SetConfig+0x266>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e2:	e03a      	b.n	800575a <UART_SetConfig+0x266>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e036      	b.n	800575a <UART_SetConfig+0x266>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e032      	b.n	800575a <UART_SetConfig+0x266>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a30      	ldr	r2, [pc, #192]	@ (80057bc <UART_SetConfig+0x2c8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d12a      	bne.n	8005754 <UART_SetConfig+0x260>
 80056fe:	4b31      	ldr	r3, [pc, #196]	@ (80057c4 <UART_SetConfig+0x2d0>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800570c:	d01a      	beq.n	8005744 <UART_SetConfig+0x250>
 800570e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005712:	d81b      	bhi.n	800574c <UART_SetConfig+0x258>
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005718:	d00c      	beq.n	8005734 <UART_SetConfig+0x240>
 800571a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800571e:	d815      	bhi.n	800574c <UART_SetConfig+0x258>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <UART_SetConfig+0x238>
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005728:	d008      	beq.n	800573c <UART_SetConfig+0x248>
 800572a:	e00f      	b.n	800574c <UART_SetConfig+0x258>
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005732:	e012      	b.n	800575a <UART_SetConfig+0x266>
 8005734:	2302      	movs	r3, #2
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573a:	e00e      	b.n	800575a <UART_SetConfig+0x266>
 800573c:	2304      	movs	r3, #4
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005742:	e00a      	b.n	800575a <UART_SetConfig+0x266>
 8005744:	2308      	movs	r3, #8
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e006      	b.n	800575a <UART_SetConfig+0x266>
 800574c:	2310      	movs	r3, #16
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e002      	b.n	800575a <UART_SetConfig+0x266>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	@ (80057bc <UART_SetConfig+0x2c8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	f040 808b 	bne.w	800587c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005766:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800576a:	2b08      	cmp	r3, #8
 800576c:	d834      	bhi.n	80057d8 <UART_SetConfig+0x2e4>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <UART_SetConfig+0x280>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005799 	.word	0x08005799
 8005778:	080057d9 	.word	0x080057d9
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057a7 	.word	0x080057a7
 8005788:	080057d9 	.word	0x080057d9
 800578c:	080057d9 	.word	0x080057d9
 8005790:	080057d9 	.word	0x080057d9
 8005794:	080057af 	.word	0x080057af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7ff f9ea 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 800579c:	61f8      	str	r0, [r7, #28]
        break;
 800579e:	e021      	b.n	80057e4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <UART_SetConfig+0x2e0>)
 80057a2:	61fb      	str	r3, [r7, #28]
        break;
 80057a4:	e01e      	b.n	80057e4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a6:	f7ff f94b 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80057aa:	61f8      	str	r0, [r7, #28]
        break;
 80057ac:	e01a      	b.n	80057e4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057b2:	61fb      	str	r3, [r7, #28]
        break;
 80057b4:	e016      	b.n	80057e4 <UART_SetConfig+0x2f0>
 80057b6:	bf00      	nop
 80057b8:	efff69f3 	.word	0xefff69f3
 80057bc:	40008000 	.word	0x40008000
 80057c0:	40013800 	.word	0x40013800
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40004400 	.word	0x40004400
 80057cc:	40004800 	.word	0x40004800
 80057d0:	40004c00 	.word	0x40004c00
 80057d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80fa 	beq.w	80059e0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d305      	bcc.n	8005808 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800580e:	e0e7      	b.n	80059e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2200      	movs	r2, #0
 8005814:	461c      	mov	r4, r3
 8005816:	4615      	mov	r5, r2
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	022b      	lsls	r3, r5, #8
 8005822:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005826:	0222      	lsls	r2, r4, #8
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	6849      	ldr	r1, [r1, #4]
 800582c:	0849      	lsrs	r1, r1, #1
 800582e:	2000      	movs	r0, #0
 8005830:	4688      	mov	r8, r1
 8005832:	4681      	mov	r9, r0
 8005834:	eb12 0a08 	adds.w	sl, r2, r8
 8005838:	eb43 0b09 	adc.w	fp, r3, r9
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584a:	4650      	mov	r0, sl
 800584c:	4659      	mov	r1, fp
 800584e:	f7fb f9b3 	bl	8000bb8 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4613      	mov	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005860:	d308      	bcc.n	8005874 <UART_SetConfig+0x380>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005868:	d204      	bcs.n	8005874 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	e0b5      	b.n	80059e0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800587a:	e0b1      	b.n	80059e0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005884:	d15d      	bne.n	8005942 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005886:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800588a:	2b08      	cmp	r3, #8
 800588c:	d827      	bhi.n	80058de <UART_SetConfig+0x3ea>
 800588e:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <UART_SetConfig+0x3a0>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058c9 	.word	0x080058c9
 80058a0:	080058df 	.word	0x080058df
 80058a4:	080058cf 	.word	0x080058cf
 80058a8:	080058df 	.word	0x080058df
 80058ac:	080058df 	.word	0x080058df
 80058b0:	080058df 	.word	0x080058df
 80058b4:	080058d7 	.word	0x080058d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b8:	f7ff f95a 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 80058bc:	61f8      	str	r0, [r7, #28]
        break;
 80058be:	e014      	b.n	80058ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c0:	f7ff f96c 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 80058c4:	61f8      	str	r0, [r7, #28]
        break;
 80058c6:	e010      	b.n	80058ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c8:	4b4c      	ldr	r3, [pc, #304]	@ (80059fc <UART_SetConfig+0x508>)
 80058ca:	61fb      	str	r3, [r7, #28]
        break;
 80058cc:	e00d      	b.n	80058ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ce:	f7ff f8b7 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80058d2:	61f8      	str	r0, [r7, #28]
        break;
 80058d4:	e009      	b.n	80058ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058da:	61fb      	str	r3, [r7, #28]
        break;
 80058dc:	e005      	b.n	80058ea <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d077      	beq.n	80059e0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	005a      	lsls	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	441a      	add	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b0f      	cmp	r3, #15
 800590a:	d916      	bls.n	800593a <UART_SetConfig+0x446>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005912:	d212      	bcs.n	800593a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f023 030f 	bic.w	r3, r3, #15
 800591c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	b29b      	uxth	r3, r3
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	b29a      	uxth	r2, r3
 800592a:	8afb      	ldrh	r3, [r7, #22]
 800592c:	4313      	orrs	r3, r2
 800592e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	8afa      	ldrh	r2, [r7, #22]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e052      	b.n	80059e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005940:	e04e      	b.n	80059e0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005942:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005946:	2b08      	cmp	r3, #8
 8005948:	d827      	bhi.n	800599a <UART_SetConfig+0x4a6>
 800594a:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <UART_SetConfig+0x45c>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005975 	.word	0x08005975
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005985 	.word	0x08005985
 800595c:	0800599b 	.word	0x0800599b
 8005960:	0800598b 	.word	0x0800598b
 8005964:	0800599b 	.word	0x0800599b
 8005968:	0800599b 	.word	0x0800599b
 800596c:	0800599b 	.word	0x0800599b
 8005970:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005974:	f7ff f8fc 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8005978:	61f8      	str	r0, [r7, #28]
        break;
 800597a:	e014      	b.n	80059a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7ff f90e 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8005980:	61f8      	str	r0, [r7, #28]
        break;
 8005982:	e010      	b.n	80059a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <UART_SetConfig+0x508>)
 8005986:	61fb      	str	r3, [r7, #28]
        break;
 8005988:	e00d      	b.n	80059a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7ff f859 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 800598e:	61f8      	str	r0, [r7, #28]
        break;
 8005990:	e009      	b.n	80059a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005996:	61fb      	str	r3, [r7, #28]
        break;
 8005998:	e005      	b.n	80059a6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059a4:	bf00      	nop
    }

    if (pclk != 0U)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d019      	beq.n	80059e0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	085a      	lsrs	r2, r3, #1
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	441a      	add	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d909      	bls.n	80059da <UART_SetConfig+0x4e6>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059cc:	d205      	bcs.n	80059da <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	e002      	b.n	80059e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3728      	adds	r7, #40	@ 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059fa:	bf00      	nop
 80059fc:	00f42400 	.word	0x00f42400

08005a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01a      	beq.n	8005b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afe:	d10a      	bne.n	8005b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b098      	sub	sp, #96	@ 0x60
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b54:	f7fc f864 	bl	8001c20 <HAL_GetTick>
 8005b58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d12e      	bne.n	8005bc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b70:	2200      	movs	r2, #0
 8005b72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f88c 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d021      	beq.n	8005bc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e6      	bne.n	8005b82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e062      	b.n	8005c8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d149      	bne.n	8005c68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f856 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d03c      	beq.n	8005c68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e6      	bne.n	8005bee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c40:	61fa      	str	r2, [r7, #28]
 8005c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	69b9      	ldr	r1, [r7, #24]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e5      	bne.n	8005c20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e011      	b.n	8005c8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3758      	adds	r7, #88	@ 0x58
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca4:	e04f      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d04b      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cae:	f7fb ffb7 	bl	8001c20 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d302      	bcc.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e04e      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d037      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b80      	cmp	r3, #128	@ 0x80
 8005cda:	d034      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b40      	cmp	r3, #64	@ 0x40
 8005ce0:	d031      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d110      	bne.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f838 	bl	8005d6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2208      	movs	r2, #8
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e029      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d20:	d111      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f81e 	bl	8005d6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d0a0      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b095      	sub	sp, #84	@ 0x54
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d118      	bne.n	8005e16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0310 	bic.w	r3, r3, #16
 8005df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6979      	ldr	r1, [r7, #20]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e6      	bne.n	8005de4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e2a:	bf00      	nop
 8005e2c:	3754      	adds	r7, #84	@ 0x54
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <arm_max_f32>:
 8005e38:	f101 3cff 	add.w	ip, r1, #4294967295
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	4607      	mov	r7, r0
 8005e40:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8005e44:	ecf7 7a01 	vldmia	r7!, {s15}
 8005e48:	d060      	beq.n	8005f0c <arm_max_f32+0xd4>
 8005e4a:	2400      	movs	r4, #0
 8005e4c:	3014      	adds	r0, #20
 8005e4e:	4625      	mov	r5, r4
 8005e50:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8005e54:	ed10 7a04 	vldr	s14, [r0, #-16]
 8005e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	bf48      	it	mi
 8005e62:	eef0 7a47 	vmovmi.f32	s15, s14
 8005e66:	ed10 7a03 	vldr	s14, [r0, #-12]
 8005e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e6e:	bf48      	it	mi
 8005e70:	1c65      	addmi	r5, r4, #1
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	bf48      	it	mi
 8005e78:	eef0 7a47 	vmovmi.f32	s15, s14
 8005e7c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e84:	bf48      	it	mi
 8005e86:	1ca5      	addmi	r5, r4, #2
 8005e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8c:	bf48      	it	mi
 8005e8e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005e92:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e9a:	bf48      	it	mi
 8005e9c:	1ce5      	addmi	r5, r4, #3
 8005e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea2:	f104 0404 	add.w	r4, r4, #4
 8005ea6:	bf44      	itt	mi
 8005ea8:	eef0 7a47 	vmovmi.f32	s15, s14
 8005eac:	4625      	movmi	r5, r4
 8005eae:	42a6      	cmp	r6, r4
 8005eb0:	f100 0010 	add.w	r0, r0, #16
 8005eb4:	d1ce      	bne.n	8005e54 <arm_max_f32+0x1c>
 8005eb6:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8005eba:	f01c 0003 	ands.w	r0, ip, #3
 8005ebe:	d021      	beq.n	8005f04 <arm_max_f32+0xcc>
 8005ec0:	ed97 7a00 	vldr	s14, [r7]
 8005ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ecc:	bfc4      	itt	gt
 8005ece:	eef0 7a47 	vmovgt.f32	s15, s14
 8005ed2:	1a0d      	subgt	r5, r1, r0
 8005ed4:	3801      	subs	r0, #1
 8005ed6:	d015      	beq.n	8005f04 <arm_max_f32+0xcc>
 8005ed8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee4:	bf44      	itt	mi
 8005ee6:	eef0 7a47 	vmovmi.f32	s15, s14
 8005eea:	1a0d      	submi	r5, r1, r0
 8005eec:	2801      	cmp	r0, #1
 8005eee:	d009      	beq.n	8005f04 <arm_max_f32+0xcc>
 8005ef0:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efc:	bfc4      	itt	gt
 8005efe:	eef0 7a47 	vmovgt.f32	s15, s14
 8005f02:	4665      	movgt	r5, ip
 8005f04:	edc2 7a00 	vstr	s15, [r2]
 8005f08:	601d      	str	r5, [r3, #0]
 8005f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0c:	4675      	mov	r5, lr
 8005f0e:	e7d4      	b.n	8005eba <arm_max_f32+0x82>

08005f10 <arm_cfft_radix8by2_f32>:
 8005f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f14:	ed2d 8b08 	vpush	{d8-d11}
 8005f18:	4607      	mov	r7, r0
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	f8b7 c000 	ldrh.w	ip, [r7]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8005f26:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8005f2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005f2e:	f000 80b0 	beq.w	8006092 <arm_cfft_radix8by2_f32+0x182>
 8005f32:	008c      	lsls	r4, r1, #2
 8005f34:	3410      	adds	r4, #16
 8005f36:	f100 0310 	add.w	r3, r0, #16
 8005f3a:	1906      	adds	r6, r0, r4
 8005f3c:	3210      	adds	r2, #16
 8005f3e:	4444      	add	r4, r8
 8005f40:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8005f44:	f108 0510 	add.w	r5, r8, #16
 8005f48:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005f4c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005f50:	ed54 4a04 	vldr	s9, [r4, #-16]
 8005f54:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005f58:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005f5c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005f60:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005f64:	ed15 0a02 	vldr	s0, [r5, #-8]
 8005f68:	ed55 0a01 	vldr	s1, [r5, #-4]
 8005f6c:	ed56 6a04 	vldr	s13, [r6, #-16]
 8005f70:	ed16 3a03 	vldr	s6, [r6, #-12]
 8005f74:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005f78:	ed13 5a02 	vldr	s10, [r3, #-8]
 8005f7c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f80:	ed16 1a02 	vldr	s2, [r6, #-8]
 8005f84:	ed56 1a01 	vldr	s3, [r6, #-4]
 8005f88:	ee73 ba82 	vadd.f32	s23, s7, s4
 8005f8c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8005f90:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8005f94:	ee33 9a04 	vadd.f32	s18, s6, s8
 8005f98:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8005f9c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8005fa0:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8005fa4:	ee71 8a06 	vadd.f32	s17, s2, s12
 8005fa8:	ed43 ba04 	vstr	s23, [r3, #-16]
 8005fac:	ed03 ba03 	vstr	s22, [r3, #-12]
 8005fb0:	ed43 aa02 	vstr	s21, [r3, #-8]
 8005fb4:	ed03 aa01 	vstr	s20, [r3, #-4]
 8005fb8:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005fbc:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005fc0:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005fc4:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005fc8:	ee37 7a62 	vsub.f32	s14, s14, s5
 8005fcc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005fd0:	ee34 4a43 	vsub.f32	s8, s8, s6
 8005fd4:	ed52 6a03 	vldr	s13, [r2, #-12]
 8005fd8:	ed12 3a04 	vldr	s6, [r2, #-16]
 8005fdc:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005fe0:	ee27 8a26 	vmul.f32	s16, s14, s13
 8005fe4:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8005fe8:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005fec:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005ff0:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8005ff4:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005ff8:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005ffc:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006000:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006004:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006008:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800600c:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006010:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006014:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006018:	ed04 4a04 	vstr	s8, [r4, #-16]
 800601c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006020:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006024:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006028:	ee35 5a40 	vsub.f32	s10, s10, s0
 800602c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006030:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006034:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006038:	ee67 3a87 	vmul.f32	s7, s15, s14
 800603c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006040:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006044:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006048:	ee25 5a07 	vmul.f32	s10, s10, s14
 800604c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006050:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006054:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006058:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800605c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006060:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006064:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006068:	3310      	adds	r3, #16
 800606a:	4563      	cmp	r3, ip
 800606c:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006070:	f106 0610 	add.w	r6, r6, #16
 8006074:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006078:	f102 0210 	add.w	r2, r2, #16
 800607c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006080:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006084:	f105 0510 	add.w	r5, r5, #16
 8006088:	f104 0410 	add.w	r4, r4, #16
 800608c:	f47f af5c 	bne.w	8005f48 <arm_cfft_radix8by2_f32+0x38>
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	b28c      	uxth	r4, r1
 8006094:	4621      	mov	r1, r4
 8006096:	2302      	movs	r3, #2
 8006098:	f000 fc1c 	bl	80068d4 <arm_radix8_butterfly_f32>
 800609c:	ecbd 8b08 	vpop	{d8-d11}
 80060a0:	4621      	mov	r1, r4
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	4640      	mov	r0, r8
 80060a6:	2302      	movs	r3, #2
 80060a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ac:	f000 bc12 	b.w	80068d4 <arm_radix8_butterfly_f32>

080060b0 <arm_cfft_radix8by4_f32>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	ed2d 8b0a 	vpush	{d8-d12}
 80060b8:	b08d      	sub	sp, #52	@ 0x34
 80060ba:	460d      	mov	r5, r1
 80060bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80060be:	8801      	ldrh	r1, [r0, #0]
 80060c0:	6842      	ldr	r2, [r0, #4]
 80060c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80060c4:	0849      	lsrs	r1, r1, #1
 80060c6:	008b      	lsls	r3, r1, #2
 80060c8:	18ee      	adds	r6, r5, r3
 80060ca:	18f0      	adds	r0, r6, r3
 80060cc:	edd0 5a00 	vldr	s11, [r0]
 80060d0:	edd5 7a00 	vldr	s15, [r5]
 80060d4:	ed96 7a00 	vldr	s14, [r6]
 80060d8:	edd0 3a01 	vldr	s7, [r0, #4]
 80060dc:	ed96 4a01 	vldr	s8, [r6, #4]
 80060e0:	ed95 5a01 	vldr	s10, [r5, #4]
 80060e4:	9008      	str	r0, [sp, #32]
 80060e6:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80060ea:	18c7      	adds	r7, r0, r3
 80060ec:	edd7 4a00 	vldr	s9, [r7]
 80060f0:	ed97 3a01 	vldr	s6, [r7, #4]
 80060f4:	9701      	str	r7, [sp, #4]
 80060f6:	ee77 6a06 	vadd.f32	s13, s14, s12
 80060fa:	462c      	mov	r4, r5
 80060fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006100:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006104:	ee16 ca90 	vmov	ip, s13
 8006108:	f844 cb08 	str.w	ip, [r4], #8
 800610c:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006110:	edd6 5a01 	vldr	s11, [r6, #4]
 8006114:	edd7 2a01 	vldr	s5, [r7, #4]
 8006118:	9404      	str	r4, [sp, #16]
 800611a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800611e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006122:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006126:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800612a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800612e:	0849      	lsrs	r1, r1, #1
 8006130:	f102 0e08 	add.w	lr, r2, #8
 8006134:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006138:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800613c:	9109      	str	r1, [sp, #36]	@ 0x24
 800613e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006142:	f1a1 0902 	sub.w	r9, r1, #2
 8006146:	f8cd e00c 	str.w	lr, [sp, #12]
 800614a:	4631      	mov	r1, r6
 800614c:	ee13 ea90 	vmov	lr, s7
 8006150:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006154:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006158:	4604      	mov	r4, r0
 800615a:	edc5 5a01 	vstr	s11, [r5, #4]
 800615e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006162:	f841 eb08 	str.w	lr, [r1], #8
 8006166:	ee34 5a24 	vadd.f32	s10, s8, s9
 800616a:	ee16 ea10 	vmov	lr, s12
 800616e:	ed86 5a01 	vstr	s10, [r6, #4]
 8006172:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006176:	f844 eb08 	str.w	lr, [r4], #8
 800617a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800617e:	edc0 6a01 	vstr	s13, [r0, #4]
 8006182:	9405      	str	r4, [sp, #20]
 8006184:	4604      	mov	r4, r0
 8006186:	ee17 0a90 	vmov	r0, s15
 800618a:	9106      	str	r1, [sp, #24]
 800618c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006190:	f102 0110 	add.w	r1, r2, #16
 8006194:	46bc      	mov	ip, r7
 8006196:	9100      	str	r1, [sp, #0]
 8006198:	f847 0b08 	str.w	r0, [r7], #8
 800619c:	f102 0118 	add.w	r1, r2, #24
 80061a0:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80061a4:	9102      	str	r1, [sp, #8]
 80061a6:	ed8c 7a01 	vstr	s14, [ip, #4]
 80061aa:	9007      	str	r0, [sp, #28]
 80061ac:	f000 8134 	beq.w	8006418 <arm_cfft_radix8by4_f32+0x368>
 80061b0:	f102 0920 	add.w	r9, r2, #32
 80061b4:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 80061b8:	9a01      	ldr	r2, [sp, #4]
 80061ba:	f8dd a000 	ldr.w	sl, [sp]
 80061be:	3b0c      	subs	r3, #12
 80061c0:	4683      	mov	fp, r0
 80061c2:	4463      	add	r3, ip
 80061c4:	f105 0e10 	add.w	lr, r5, #16
 80061c8:	f1a4 010c 	sub.w	r1, r4, #12
 80061cc:	f104 0510 	add.w	r5, r4, #16
 80061d0:	f1a6 0c0c 	sub.w	ip, r6, #12
 80061d4:	f1a2 040c 	sub.w	r4, r2, #12
 80061d8:	f106 0010 	add.w	r0, r6, #16
 80061dc:	3210      	adds	r2, #16
 80061de:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80061e2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80061e6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80061ea:	ed52 1a02 	vldr	s3, [r2, #-8]
 80061ee:	ed55 6a01 	vldr	s13, [r5, #-4]
 80061f2:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80061f6:	ed12 1a01 	vldr	s2, [r2, #-4]
 80061fa:	ed10 8a01 	vldr	s16, [r0, #-4]
 80061fe:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006202:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006206:	ee37 7a84 	vadd.f32	s14, s15, s8
 800620a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800620e:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006212:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006216:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800621a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800621e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006222:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006226:	ee78 aa25 	vadd.f32	s21, s16, s11
 800622a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800622e:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006232:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006236:	ed94 7a02 	vldr	s14, [r4, #8]
 800623a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800623e:	ed91 ba02 	vldr	s22, [r1, #8]
 8006242:	edd3 9a02 	vldr	s19, [r3, #8]
 8006246:	edd4 2a01 	vldr	s5, [r4, #4]
 800624a:	ed9c 9a01 	vldr	s18, [ip, #4]
 800624e:	ed93 5a01 	vldr	s10, [r3, #4]
 8006252:	edd1 0a01 	vldr	s1, [r1, #4]
 8006256:	ee72 6a07 	vadd.f32	s13, s4, s14
 800625a:	ee32 2a47 	vsub.f32	s4, s4, s14
 800625e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006262:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006266:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800626a:	ee79 2a62 	vsub.f32	s5, s18, s5
 800626e:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006272:	ed91 7a01 	vldr	s14, [r1, #4]
 8006276:	edd3 8a01 	vldr	s17, [r3, #4]
 800627a:	ee34 7a87 	vadd.f32	s14, s9, s14
 800627e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006282:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006286:	ee32 9a60 	vsub.f32	s18, s4, s1
 800628a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800628e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006292:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006296:	ee73 8a22 	vadd.f32	s17, s6, s5
 800629a:	ee39 9a05 	vadd.f32	s18, s18, s10
 800629e:	ee7a aac1 	vsub.f32	s21, s21, s2
 80062a2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80062a6:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80062aa:	ee69 ba07 	vmul.f32	s23, s18, s14
 80062ae:	ee6a aa87 	vmul.f32	s21, s21, s14
 80062b2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80062b6:	ee63 ca87 	vmul.f32	s25, s7, s14
 80062ba:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80062be:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80062c2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80062c6:	ee73 3aea 	vsub.f32	s7, s7, s21
 80062ca:	ee78 8a89 	vadd.f32	s17, s17, s18
 80062ce:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80062d2:	ee3b aaca 	vsub.f32	s20, s23, s20
 80062d6:	ee34 4a67 	vsub.f32	s8, s8, s15
 80062da:	ee76 6acb 	vsub.f32	s13, s13, s22
 80062de:	ee36 6a48 	vsub.f32	s12, s12, s16
 80062e2:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80062e6:	ed00 7a02 	vstr	s14, [r0, #-8]
 80062ea:	ed40 3a01 	vstr	s7, [r0, #-4]
 80062ee:	edc1 8a01 	vstr	s17, [r1, #4]
 80062f2:	ed81 aa02 	vstr	s20, [r1, #8]
 80062f6:	ed59 3a04 	vldr	s7, [r9, #-16]
 80062fa:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80062fe:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006302:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006306:	ee34 4a61 	vsub.f32	s8, s8, s3
 800630a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800630e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006312:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006316:	ee24 9a23 	vmul.f32	s18, s8, s7
 800631a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800631e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006322:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006326:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800632a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800632e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006332:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006336:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800633a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800633e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006342:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006346:	ee77 7a80 	vadd.f32	s15, s15, s0
 800634a:	ed45 3a02 	vstr	s7, [r5, #-8]
 800634e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006352:	ed84 7a01 	vstr	s14, [r4, #4]
 8006356:	ed84 4a02 	vstr	s8, [r4, #8]
 800635a:	ee35 6a81 	vadd.f32	s12, s11, s2
 800635e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006362:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8006366:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800636a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800636e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006372:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006376:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800637a:	ee26 5a25 	vmul.f32	s10, s12, s11
 800637e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006382:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006386:	ee27 7a25 	vmul.f32	s14, s14, s11
 800638a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800638e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006392:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006396:	ee75 5a24 	vadd.f32	s11, s10, s9
 800639a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800639e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80063a2:	f1bb 0b01 	subs.w	fp, fp, #1
 80063a6:	ed42 5a02 	vstr	s11, [r2, #-8]
 80063aa:	ed42 7a01 	vstr	s15, [r2, #-4]
 80063ae:	f10e 0e08 	add.w	lr, lr, #8
 80063b2:	ed83 3a02 	vstr	s6, [r3, #8]
 80063b6:	ed83 7a01 	vstr	s14, [r3, #4]
 80063ba:	f1ac 0c08 	sub.w	ip, ip, #8
 80063be:	f10a 0a08 	add.w	sl, sl, #8
 80063c2:	f100 0008 	add.w	r0, r0, #8
 80063c6:	f1a1 0108 	sub.w	r1, r1, #8
 80063ca:	f109 0910 	add.w	r9, r9, #16
 80063ce:	f105 0508 	add.w	r5, r5, #8
 80063d2:	f1a4 0408 	sub.w	r4, r4, #8
 80063d6:	f108 0818 	add.w	r8, r8, #24
 80063da:	f102 0208 	add.w	r2, r2, #8
 80063de:	f1a3 0308 	sub.w	r3, r3, #8
 80063e2:	f47f aefc 	bne.w	80061de <arm_cfft_radix8by4_f32+0x12e>
 80063e6:	9907      	ldr	r1, [sp, #28]
 80063e8:	9800      	ldr	r0, [sp, #0]
 80063ea:	00cb      	lsls	r3, r1, #3
 80063ec:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80063f0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80063f4:	9100      	str	r1, [sp, #0]
 80063f6:	9904      	ldr	r1, [sp, #16]
 80063f8:	4419      	add	r1, r3
 80063fa:	9104      	str	r1, [sp, #16]
 80063fc:	9903      	ldr	r1, [sp, #12]
 80063fe:	4419      	add	r1, r3
 8006400:	9103      	str	r1, [sp, #12]
 8006402:	9906      	ldr	r1, [sp, #24]
 8006404:	4419      	add	r1, r3
 8006406:	9106      	str	r1, [sp, #24]
 8006408:	9905      	ldr	r1, [sp, #20]
 800640a:	441f      	add	r7, r3
 800640c:	4419      	add	r1, r3
 800640e:	9b02      	ldr	r3, [sp, #8]
 8006410:	9105      	str	r1, [sp, #20]
 8006412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	9904      	ldr	r1, [sp, #16]
 800641a:	9805      	ldr	r0, [sp, #20]
 800641c:	ed91 4a00 	vldr	s8, [r1]
 8006420:	edd0 6a00 	vldr	s13, [r0]
 8006424:	9b06      	ldr	r3, [sp, #24]
 8006426:	ed97 3a00 	vldr	s6, [r7]
 800642a:	edd3 7a00 	vldr	s15, [r3]
 800642e:	edd0 4a01 	vldr	s9, [r0, #4]
 8006432:	edd1 3a01 	vldr	s7, [r1, #4]
 8006436:	ed97 2a01 	vldr	s4, [r7, #4]
 800643a:	ed93 7a01 	vldr	s14, [r3, #4]
 800643e:	9a03      	ldr	r2, [sp, #12]
 8006440:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8006444:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006448:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800644c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006450:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006454:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006458:	ee74 6a66 	vsub.f32	s13, s8, s13
 800645c:	ed81 5a00 	vstr	s10, [r1]
 8006460:	ed93 5a01 	vldr	s10, [r3, #4]
 8006464:	edd7 4a01 	vldr	s9, [r7, #4]
 8006468:	ee35 5a85 	vadd.f32	s10, s11, s10
 800646c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006470:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006474:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006478:	ed81 5a01 	vstr	s10, [r1, #4]
 800647c:	edd2 1a00 	vldr	s3, [r2]
 8006480:	edd2 2a01 	vldr	s5, [r2, #4]
 8006484:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006488:	ee34 4a42 	vsub.f32	s8, s8, s4
 800648c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006490:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006494:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006498:	ee65 2a22 	vmul.f32	s5, s10, s5
 800649c:	ee25 5a21 	vmul.f32	s10, s10, s3
 80064a0:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80064a4:	ee35 5a44 	vsub.f32	s10, s10, s8
 80064a8:	edc3 2a00 	vstr	s5, [r3]
 80064ac:	ed83 5a01 	vstr	s10, [r3, #4]
 80064b0:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80064b4:	9b00      	ldr	r3, [sp, #0]
 80064b6:	ee36 6a43 	vsub.f32	s12, s12, s6
 80064ba:	ed93 4a01 	vldr	s8, [r3, #4]
 80064be:	ed93 5a00 	vldr	s10, [r3]
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80064c8:	ee66 4a05 	vmul.f32	s9, s12, s10
 80064cc:	ee25 5a85 	vmul.f32	s10, s11, s10
 80064d0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80064d4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80064d8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80064dc:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80064e0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80064e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80064e8:	ed80 6a01 	vstr	s12, [r0, #4]
 80064ec:	edc0 5a00 	vstr	s11, [r0]
 80064f0:	edd3 5a01 	vldr	s11, [r3, #4]
 80064f4:	edd3 6a00 	vldr	s13, [r3]
 80064f8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80064fc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006500:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006504:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006508:	ee27 7a25 	vmul.f32	s14, s14, s11
 800650c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006510:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006514:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006518:	ed87 7a01 	vstr	s14, [r7, #4]
 800651c:	edc7 7a00 	vstr	s15, [r7]
 8006520:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8006524:	4621      	mov	r1, r4
 8006526:	686a      	ldr	r2, [r5, #4]
 8006528:	2304      	movs	r3, #4
 800652a:	f000 f9d3 	bl	80068d4 <arm_radix8_butterfly_f32>
 800652e:	4630      	mov	r0, r6
 8006530:	4621      	mov	r1, r4
 8006532:	686a      	ldr	r2, [r5, #4]
 8006534:	2304      	movs	r3, #4
 8006536:	f000 f9cd 	bl	80068d4 <arm_radix8_butterfly_f32>
 800653a:	9808      	ldr	r0, [sp, #32]
 800653c:	686a      	ldr	r2, [r5, #4]
 800653e:	4621      	mov	r1, r4
 8006540:	2304      	movs	r3, #4
 8006542:	f000 f9c7 	bl	80068d4 <arm_radix8_butterfly_f32>
 8006546:	686a      	ldr	r2, [r5, #4]
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	4621      	mov	r1, r4
 800654c:	2304      	movs	r3, #4
 800654e:	b00d      	add	sp, #52	@ 0x34
 8006550:	ecbd 8b0a 	vpop	{d8-d12}
 8006554:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	f000 b9bc 	b.w	80068d4 <arm_radix8_butterfly_f32>

0800655c <arm_cfft_f32>:
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	2a01      	cmp	r2, #1
 8006562:	4606      	mov	r6, r0
 8006564:	4617      	mov	r7, r2
 8006566:	460c      	mov	r4, r1
 8006568:	4698      	mov	r8, r3
 800656a:	8805      	ldrh	r5, [r0, #0]
 800656c:	d056      	beq.n	800661c <arm_cfft_f32+0xc0>
 800656e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006572:	d063      	beq.n	800663c <arm_cfft_f32+0xe0>
 8006574:	d916      	bls.n	80065a4 <arm_cfft_f32+0x48>
 8006576:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800657a:	d01a      	beq.n	80065b2 <arm_cfft_f32+0x56>
 800657c:	d947      	bls.n	800660e <arm_cfft_f32+0xb2>
 800657e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006582:	d05b      	beq.n	800663c <arm_cfft_f32+0xe0>
 8006584:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006588:	d105      	bne.n	8006596 <arm_cfft_f32+0x3a>
 800658a:	2301      	movs	r3, #1
 800658c:	6872      	ldr	r2, [r6, #4]
 800658e:	4629      	mov	r1, r5
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f99f 	bl	80068d4 <arm_radix8_butterfly_f32>
 8006596:	f1b8 0f00 	cmp.w	r8, #0
 800659a:	d111      	bne.n	80065c0 <arm_cfft_f32+0x64>
 800659c:	2f01      	cmp	r7, #1
 800659e:	d016      	beq.n	80065ce <arm_cfft_f32+0x72>
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a4:	2d20      	cmp	r5, #32
 80065a6:	d049      	beq.n	800663c <arm_cfft_f32+0xe0>
 80065a8:	d935      	bls.n	8006616 <arm_cfft_f32+0xba>
 80065aa:	2d40      	cmp	r5, #64	@ 0x40
 80065ac:	d0ed      	beq.n	800658a <arm_cfft_f32+0x2e>
 80065ae:	2d80      	cmp	r5, #128	@ 0x80
 80065b0:	d1f1      	bne.n	8006596 <arm_cfft_f32+0x3a>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff fcab 	bl	8005f10 <arm_cfft_radix8by2_f32>
 80065ba:	f1b8 0f00 	cmp.w	r8, #0
 80065be:	d0ed      	beq.n	800659c <arm_cfft_f32+0x40>
 80065c0:	68b2      	ldr	r2, [r6, #8]
 80065c2:	89b1      	ldrh	r1, [r6, #12]
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f841 	bl	800664c <arm_bitreversal_32>
 80065ca:	2f01      	cmp	r7, #1
 80065cc:	d1e8      	bne.n	80065a0 <arm_cfft_f32+0x44>
 80065ce:	ee07 5a90 	vmov	s15, r5
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065de:	2d00      	cmp	r5, #0
 80065e0:	d0de      	beq.n	80065a0 <arm_cfft_f32+0x44>
 80065e2:	f104 0108 	add.w	r1, r4, #8
 80065e6:	2300      	movs	r3, #0
 80065e8:	3301      	adds	r3, #1
 80065ea:	429d      	cmp	r5, r3
 80065ec:	f101 0108 	add.w	r1, r1, #8
 80065f0:	ed11 7a04 	vldr	s14, [r1, #-16]
 80065f4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80065f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80065fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006600:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006604:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006608:	d1ee      	bne.n	80065e8 <arm_cfft_f32+0x8c>
 800660a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006612:	d0ba      	beq.n	800658a <arm_cfft_f32+0x2e>
 8006614:	e7bf      	b.n	8006596 <arm_cfft_f32+0x3a>
 8006616:	2d10      	cmp	r5, #16
 8006618:	d0cb      	beq.n	80065b2 <arm_cfft_f32+0x56>
 800661a:	e7bc      	b.n	8006596 <arm_cfft_f32+0x3a>
 800661c:	b19d      	cbz	r5, 8006646 <arm_cfft_f32+0xea>
 800661e:	f101 030c 	add.w	r3, r1, #12
 8006622:	2200      	movs	r2, #0
 8006624:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006628:	3201      	adds	r2, #1
 800662a:	eef1 7a67 	vneg.f32	s15, s15
 800662e:	4295      	cmp	r5, r2
 8006630:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006634:	f103 0308 	add.w	r3, r3, #8
 8006638:	d1f4      	bne.n	8006624 <arm_cfft_f32+0xc8>
 800663a:	e798      	b.n	800656e <arm_cfft_f32+0x12>
 800663c:	4621      	mov	r1, r4
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff fd36 	bl	80060b0 <arm_cfft_radix8by4_f32>
 8006644:	e7a7      	b.n	8006596 <arm_cfft_f32+0x3a>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0aa      	beq.n	80065a0 <arm_cfft_f32+0x44>
 800664a:	e7b9      	b.n	80065c0 <arm_cfft_f32+0x64>

0800664c <arm_bitreversal_32>:
 800664c:	b1e9      	cbz	r1, 800668a <arm_bitreversal_32+0x3e>
 800664e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006650:	2500      	movs	r5, #0
 8006652:	f102 0e02 	add.w	lr, r2, #2
 8006656:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800665a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800665e:	08a4      	lsrs	r4, r4, #2
 8006660:	089b      	lsrs	r3, r3, #2
 8006662:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006666:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800666a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800666e:	00a6      	lsls	r6, r4, #2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006676:	3304      	adds	r3, #4
 8006678:	1d34      	adds	r4, r6, #4
 800667a:	3502      	adds	r5, #2
 800667c:	58c6      	ldr	r6, [r0, r3]
 800667e:	5907      	ldr	r7, [r0, r4]
 8006680:	50c7      	str	r7, [r0, r3]
 8006682:	428d      	cmp	r5, r1
 8006684:	5106      	str	r6, [r0, r4]
 8006686:	d3e6      	bcc.n	8006656 <arm_bitreversal_32+0xa>
 8006688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668a:	4770      	bx	lr

0800668c <arm_cmplx_mag_f32>:
 800668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	ed2d 8b02 	vpush	{d8}
 8006694:	0897      	lsrs	r7, r2, #2
 8006696:	b084      	sub	sp, #16
 8006698:	d077      	beq.n	800678a <arm_cmplx_mag_f32+0xfe>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	f100 0420 	add.w	r4, r0, #32
 80066a2:	f101 0510 	add.w	r5, r1, #16
 80066a6:	463e      	mov	r6, r7
 80066a8:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 80066ac:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 80066b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80066b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80066bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	f2c0 80c5 	blt.w	8006852 <arm_cmplx_mag_f32+0x1c6>
 80066c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80066cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80066d4:	f100 80cb 	bmi.w	800686e <arm_cmplx_mag_f32+0x1e2>
 80066d8:	ed05 8a04 	vstr	s16, [r5, #-16]
 80066dc:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 80066e0:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 80066e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80066e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80066f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80066f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f8:	f2c0 80a8 	blt.w	800684c <arm_cmplx_mag_f32+0x1c0>
 80066fc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006704:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006708:	f100 80a8 	bmi.w	800685c <arm_cmplx_mag_f32+0x1d0>
 800670c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006710:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006714:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006718:	ee20 0a00 	vmul.f32	s0, s0, s0
 800671c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006720:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006724:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672c:	f2c0 808b 	blt.w	8006846 <arm_cmplx_mag_f32+0x1ba>
 8006730:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006738:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800673c:	f100 80a9 	bmi.w	8006892 <arm_cmplx_mag_f32+0x206>
 8006740:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006744:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006748:	ed54 7a01 	vldr	s15, [r4, #-4]
 800674c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006750:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006754:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006758:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006760:	db6e      	blt.n	8006840 <arm_cmplx_mag_f32+0x1b4>
 8006762:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800676e:	f100 8087 	bmi.w	8006880 <arm_cmplx_mag_f32+0x1f4>
 8006772:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006776:	3e01      	subs	r6, #1
 8006778:	f104 0420 	add.w	r4, r4, #32
 800677c:	f105 0510 	add.w	r5, r5, #16
 8006780:	d192      	bne.n	80066a8 <arm_cmplx_mag_f32+0x1c>
 8006782:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006786:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800678a:	f012 0203 	ands.w	r2, r2, #3
 800678e:	d052      	beq.n	8006836 <arm_cmplx_mag_f32+0x1aa>
 8006790:	ed90 0a00 	vldr	s0, [r0]
 8006794:	edd0 7a01 	vldr	s15, [r0, #4]
 8006798:	ee20 0a00 	vmul.f32	s0, s0, s0
 800679c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067a0:	2300      	movs	r3, #0
 80067a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80067a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ae:	bfb8      	it	lt
 80067b0:	600b      	strlt	r3, [r1, #0]
 80067b2:	db08      	blt.n	80067c6 <arm_cmplx_mag_f32+0x13a>
 80067b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80067b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80067c0:	d479      	bmi.n	80068b6 <arm_cmplx_mag_f32+0x22a>
 80067c2:	ed81 8a00 	vstr	s16, [r1]
 80067c6:	3a01      	subs	r2, #1
 80067c8:	d035      	beq.n	8006836 <arm_cmplx_mag_f32+0x1aa>
 80067ca:	ed90 0a02 	vldr	s0, [r0, #8]
 80067ce:	edd0 7a03 	vldr	s15, [r0, #12]
 80067d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80067d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067da:	2300      	movs	r3, #0
 80067dc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80067e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e8:	bfb8      	it	lt
 80067ea:	604b      	strlt	r3, [r1, #4]
 80067ec:	db08      	blt.n	8006800 <arm_cmplx_mag_f32+0x174>
 80067ee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80067f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80067fa:	d453      	bmi.n	80068a4 <arm_cmplx_mag_f32+0x218>
 80067fc:	ed81 8a01 	vstr	s16, [r1, #4]
 8006800:	2a01      	cmp	r2, #1
 8006802:	d018      	beq.n	8006836 <arm_cmplx_mag_f32+0x1aa>
 8006804:	ed90 0a04 	vldr	s0, [r0, #16]
 8006808:	edd0 7a05 	vldr	s15, [r0, #20]
 800680c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006810:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006814:	2300      	movs	r3, #0
 8006816:	ee30 0a27 	vadd.f32	s0, s0, s15
 800681a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800681e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006822:	db19      	blt.n	8006858 <arm_cmplx_mag_f32+0x1cc>
 8006824:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006830:	d44a      	bmi.n	80068c8 <arm_cmplx_mag_f32+0x23c>
 8006832:	ed81 8a02 	vstr	s16, [r1, #8]
 8006836:	b004      	add	sp, #16
 8006838:	ecbd 8b02 	vpop	{d8}
 800683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006840:	f845 8c04 	str.w	r8, [r5, #-4]
 8006844:	e797      	b.n	8006776 <arm_cmplx_mag_f32+0xea>
 8006846:	f845 8c08 	str.w	r8, [r5, #-8]
 800684a:	e77b      	b.n	8006744 <arm_cmplx_mag_f32+0xb8>
 800684c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006850:	e75e      	b.n	8006710 <arm_cmplx_mag_f32+0x84>
 8006852:	f845 8c10 	str.w	r8, [r5, #-16]
 8006856:	e741      	b.n	80066dc <arm_cmplx_mag_f32+0x50>
 8006858:	608b      	str	r3, [r1, #8]
 800685a:	e7ec      	b.n	8006836 <arm_cmplx_mag_f32+0x1aa>
 800685c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006860:	9001      	str	r0, [sp, #4]
 8006862:	f002 ff8b 	bl	800977c <sqrtf>
 8006866:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800686a:	9801      	ldr	r0, [sp, #4]
 800686c:	e74e      	b.n	800670c <arm_cmplx_mag_f32+0x80>
 800686e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006872:	9001      	str	r0, [sp, #4]
 8006874:	f002 ff82 	bl	800977c <sqrtf>
 8006878:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800687c:	9801      	ldr	r0, [sp, #4]
 800687e:	e72b      	b.n	80066d8 <arm_cmplx_mag_f32+0x4c>
 8006880:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006884:	9001      	str	r0, [sp, #4]
 8006886:	f002 ff79 	bl	800977c <sqrtf>
 800688a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800688e:	9801      	ldr	r0, [sp, #4]
 8006890:	e76f      	b.n	8006772 <arm_cmplx_mag_f32+0xe6>
 8006892:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006896:	9001      	str	r0, [sp, #4]
 8006898:	f002 ff70 	bl	800977c <sqrtf>
 800689c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80068a0:	9801      	ldr	r0, [sp, #4]
 80068a2:	e74d      	b.n	8006740 <arm_cmplx_mag_f32+0xb4>
 80068a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	f002 ff67 	bl	800977c <sqrtf>
 80068ae:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80068b2:	9903      	ldr	r1, [sp, #12]
 80068b4:	e7a2      	b.n	80067fc <arm_cmplx_mag_f32+0x170>
 80068b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ba:	9201      	str	r2, [sp, #4]
 80068bc:	f002 ff5e 	bl	800977c <sqrtf>
 80068c0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80068c4:	9903      	ldr	r1, [sp, #12]
 80068c6:	e77c      	b.n	80067c2 <arm_cmplx_mag_f32+0x136>
 80068c8:	9101      	str	r1, [sp, #4]
 80068ca:	f002 ff57 	bl	800977c <sqrtf>
 80068ce:	9901      	ldr	r1, [sp, #4]
 80068d0:	e7af      	b.n	8006832 <arm_cmplx_mag_f32+0x1a6>
 80068d2:	bf00      	nop

080068d4 <arm_radix8_butterfly_f32>:
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	ed2d 8b10 	vpush	{d8-d15}
 80068dc:	b095      	sub	sp, #84	@ 0x54
 80068de:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 80068e2:	4603      	mov	r3, r0
 80068e4:	3304      	adds	r3, #4
 80068e6:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8006bcc <arm_radix8_butterfly_f32+0x2f8>
 80068ea:	9012      	str	r0, [sp, #72]	@ 0x48
 80068ec:	468b      	mov	fp, r1
 80068ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068f0:	4689      	mov	r9, r1
 80068f2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80068f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068f8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80068fa:	ea4f 1846 	mov.w	r8, r6, lsl #5
 80068fe:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006902:	eb03 0508 	add.w	r5, r3, r8
 8006906:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800690a:	eb05 040e 	add.w	r4, r5, lr
 800690e:	0137      	lsls	r7, r6, #4
 8006910:	eba6 030a 	sub.w	r3, r6, sl
 8006914:	eb04 000e 	add.w	r0, r4, lr
 8006918:	44b2      	add	sl, r6
 800691a:	1d3a      	adds	r2, r7, #4
 800691c:	9702      	str	r7, [sp, #8]
 800691e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006922:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006926:	ebae 0c06 	sub.w	ip, lr, r6
 800692a:	9703      	str	r7, [sp, #12]
 800692c:	eb03 0708 	add.w	r7, r3, r8
 8006930:	9701      	str	r7, [sp, #4]
 8006932:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006936:	9706      	str	r7, [sp, #24]
 8006938:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800693a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800693e:	f10e 0104 	add.w	r1, lr, #4
 8006942:	4439      	add	r1, r7
 8006944:	443a      	add	r2, r7
 8006946:	0137      	lsls	r7, r6, #4
 8006948:	00f6      	lsls	r6, r6, #3
 800694a:	9704      	str	r7, [sp, #16]
 800694c:	9605      	str	r6, [sp, #20]
 800694e:	9f01      	ldr	r7, [sp, #4]
 8006950:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006952:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006956:	f04f 0c00 	mov.w	ip, #0
 800695a:	edd4 6a00 	vldr	s13, [r4]
 800695e:	edd7 1a00 	vldr	s3, [r7]
 8006962:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006966:	edd5 5a00 	vldr	s11, [r5]
 800696a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800696e:	ed90 6a00 	vldr	s12, [r0]
 8006972:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006976:	ed93 3a00 	vldr	s6, [r3]
 800697a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800697e:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006982:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006986:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800698a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800698e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006992:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006996:	ee74 6a07 	vadd.f32	s13, s8, s14
 800699a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800699e:	ed46 6a01 	vstr	s13, [r6, #-4]
 80069a2:	ed85 4a00 	vstr	s8, [r5]
 80069a6:	edd1 6a00 	vldr	s13, [r1]
 80069aa:	ed94 9a01 	vldr	s18, [r4, #4]
 80069ae:	edd3 2a01 	vldr	s5, [r3, #4]
 80069b2:	edd7 8a01 	vldr	s17, [r7, #4]
 80069b6:	edd6 0a00 	vldr	s1, [r6]
 80069ba:	edd5 3a01 	vldr	s7, [r5, #4]
 80069be:	ed90 8a01 	vldr	s16, [r0, #4]
 80069c2:	ed92 7a00 	vldr	s14, [r2]
 80069c6:	ee33 3a61 	vsub.f32	s6, s6, s3
 80069ca:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80069ce:	ee72 aae8 	vsub.f32	s21, s5, s17
 80069d2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80069d6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80069da:	ee77 7a83 	vadd.f32	s15, s15, s6
 80069de:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80069e2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80069e6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80069ea:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80069ee:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80069f2:	ee77 0a08 	vadd.f32	s1, s14, s16
 80069f6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80069fa:	ee37 7a48 	vsub.f32	s14, s14, s16
 80069fe:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006a02:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006a06:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006a0a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006a0e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006a12:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006a16:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006a1a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006a1e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006a22:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006a26:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006a2a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006a2e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006a32:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006a36:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006a3a:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006a3e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006a42:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006a46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006a4a:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006a4e:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006a52:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006a56:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006a5a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006a5e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006a62:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006a66:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006a6a:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006a6e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006a72:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006a76:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006a7a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006a7e:	44dc      	add	ip, fp
 8006a80:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006a84:	45e1      	cmp	r9, ip
 8006a86:	ed86 8a00 	vstr	s16, [r6]
 8006a8a:	ed85 2a01 	vstr	s4, [r5, #4]
 8006a8e:	4456      	add	r6, sl
 8006a90:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006a94:	4455      	add	r5, sl
 8006a96:	edc0 6a00 	vstr	s13, [r0]
 8006a9a:	ed82 1a00 	vstr	s2, [r2]
 8006a9e:	ed80 5a01 	vstr	s10, [r0, #4]
 8006aa2:	4452      	add	r2, sl
 8006aa4:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006aa8:	4450      	add	r0, sl
 8006aaa:	edc7 2a00 	vstr	s5, [r7]
 8006aae:	edc4 4a00 	vstr	s9, [r4]
 8006ab2:	ed83 7a00 	vstr	s14, [r3]
 8006ab6:	edc1 5a00 	vstr	s11, [r1]
 8006aba:	edc7 3a01 	vstr	s7, [r7, #4]
 8006abe:	4451      	add	r1, sl
 8006ac0:	ed84 6a01 	vstr	s12, [r4, #4]
 8006ac4:	4457      	add	r7, sl
 8006ac6:	edc3 7a01 	vstr	s15, [r3, #4]
 8006aca:	4454      	add	r4, sl
 8006acc:	4453      	add	r3, sl
 8006ace:	f63f af44 	bhi.w	800695a <arm_radix8_butterfly_f32+0x86>
 8006ad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ad4:	2b07      	cmp	r3, #7
 8006ad6:	f240 81b7 	bls.w	8006e48 <arm_radix8_butterfly_f32+0x574>
 8006ada:	9b06      	ldr	r3, [sp, #24]
 8006adc:	9903      	ldr	r1, [sp, #12]
 8006ade:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006ae0:	9e05      	ldr	r6, [sp, #20]
 8006ae2:	9a04      	ldr	r2, [sp, #16]
 8006ae4:	f103 0c08 	add.w	ip, r3, #8
 8006ae8:	9b02      	ldr	r3, [sp, #8]
 8006aea:	3108      	adds	r1, #8
 8006aec:	f108 0808 	add.w	r8, r8, #8
 8006af0:	1841      	adds	r1, r0, r1
 8006af2:	3608      	adds	r6, #8
 8006af4:	330c      	adds	r3, #12
 8006af6:	4604      	mov	r4, r0
 8006af8:	4444      	add	r4, r8
 8006afa:	18c3      	adds	r3, r0, r3
 8006afc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006afe:	1981      	adds	r1, r0, r6
 8006b00:	f10e 0e08 	add.w	lr, lr, #8
 8006b04:	3208      	adds	r2, #8
 8006b06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b08:	9107      	str	r1, [sp, #28]
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4601      	mov	r1, r0
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	f100 030c 	add.w	r3, r0, #12
 8006b14:	4474      	add	r4, lr
 8006b16:	f04f 0801 	mov.w	r8, #1
 8006b1a:	1882      	adds	r2, r0, r2
 8006b1c:	4461      	add	r1, ip
 8006b1e:	9305      	str	r3, [sp, #20]
 8006b20:	464b      	mov	r3, r9
 8006b22:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b24:	46c1      	mov	r9, r8
 8006b26:	9208      	str	r2, [sp, #32]
 8006b28:	46d8      	mov	r8, fp
 8006b2a:	9106      	str	r1, [sp, #24]
 8006b2c:	f04f 0e00 	mov.w	lr, #0
 8006b30:	469b      	mov	fp, r3
 8006b32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b34:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006b36:	449e      	add	lr, r3
 8006b38:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006b3c:	441a      	add	r2, r3
 8006b3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b40:	441a      	add	r2, r3
 8006b42:	18d4      	adds	r4, r2, r3
 8006b44:	18e5      	adds	r5, r4, r3
 8006b46:	18ee      	adds	r6, r5, r3
 8006b48:	18f7      	adds	r7, r6, r3
 8006b4a:	eb07 0c03 	add.w	ip, r7, r3
 8006b4e:	920d      	str	r2, [sp, #52]	@ 0x34
 8006b50:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006b54:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006b58:	910c      	str	r1, [sp, #48]	@ 0x30
 8006b5a:	4419      	add	r1, r3
 8006b5c:	9103      	str	r1, [sp, #12]
 8006b5e:	4419      	add	r1, r3
 8006b60:	18ca      	adds	r2, r1, r3
 8006b62:	9202      	str	r2, [sp, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	18d0      	adds	r0, r2, r3
 8006b68:	ed92 ea01 	vldr	s28, [r2, #4]
 8006b6c:	9a02      	ldr	r2, [sp, #8]
 8006b6e:	edd4 7a00 	vldr	s15, [r4]
 8006b72:	edd2 da01 	vldr	s27, [r2, #4]
 8006b76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b78:	ed91 da01 	vldr	s26, [r1, #4]
 8006b7c:	ed92 ca01 	vldr	s24, [r2, #4]
 8006b80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006b82:	9903      	ldr	r1, [sp, #12]
 8006b84:	edcd 7a03 	vstr	s15, [sp, #12]
 8006b88:	edd2 7a00 	vldr	s15, [r2]
 8006b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b8e:	edcd 7a02 	vstr	s15, [sp, #8]
 8006b92:	edd2 7a00 	vldr	s15, [r2]
 8006b96:	edd0 ea01 	vldr	s29, [r0, #4]
 8006b9a:	edd1 ca01 	vldr	s25, [r1, #4]
 8006b9e:	eddc ba00 	vldr	s23, [ip]
 8006ba2:	edd7 aa00 	vldr	s21, [r7]
 8006ba6:	ed96 aa00 	vldr	s20, [r6]
 8006baa:	edd5 9a00 	vldr	s19, [r5]
 8006bae:	edcd 7a01 	vstr	s15, [sp, #4]
 8006bb2:	4403      	add	r3, r0
 8006bb4:	ed93 fa01 	vldr	s30, [r3, #4]
 8006bb8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006bbc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006bc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006bc8:	46cc      	mov	ip, r9
 8006bca:	e001      	b.n	8006bd0 <arm_radix8_butterfly_f32+0x2fc>
 8006bcc:	3f3504f3 	.word	0x3f3504f3
 8006bd0:	ed91 6a00 	vldr	s12, [r1]
 8006bd4:	ed93 5a00 	vldr	s10, [r3]
 8006bd8:	edd0 fa00 	vldr	s31, [r0]
 8006bdc:	edd4 7a00 	vldr	s15, [r4]
 8006be0:	ed95 7a00 	vldr	s14, [r5]
 8006be4:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006be8:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006bec:	ed92 2a00 	vldr	s4, [r2]
 8006bf0:	ed96 0a00 	vldr	s0, [r6]
 8006bf4:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006bf8:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006bfc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006c00:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006c04:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006c08:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006c0c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006c10:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c18:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006c1c:	edd4 8a01 	vldr	s17, [r4, #4]
 8006c20:	ed92 9a01 	vldr	s18, [r2, #4]
 8006c24:	edd7 0a00 	vldr	s1, [r7]
 8006c28:	edd1 2a01 	vldr	s5, [r1, #4]
 8006c2c:	ed95 7a01 	vldr	s14, [r5, #4]
 8006c30:	ed93 6a01 	vldr	s12, [r3, #4]
 8006c34:	edd0 5a01 	vldr	s11, [r0, #4]
 8006c38:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006c3c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006c40:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006c44:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006c48:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006c4c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006c50:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006c54:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006c58:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006c5c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006c60:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006c64:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006c68:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006c6c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8006c70:	ee32 1a08 	vadd.f32	s2, s4, s16
 8006c74:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006c78:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006c7c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006c80:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006c84:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006c88:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006c8c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006c90:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006c94:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006c98:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006c9c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006ca0:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006ca4:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006ca8:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006cac:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006cb0:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006cb4:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006cb8:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006cbc:	ee33 9a49 	vsub.f32	s18, s6, s18
 8006cc0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006cc4:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006cc8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006ccc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006cd0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006cd4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006cd8:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006cdc:	ee35 8a03 	vadd.f32	s16, s10, s6
 8006ce0:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006ce4:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006ce8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006cec:	ed9d 2a01 	vldr	s4, [sp, #4]
 8006cf0:	eddd 1a02 	vldr	s3, [sp, #8]
 8006cf4:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006cf8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006cfc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8006d00:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8006d04:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006d08:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8006d0c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8006d10:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8006d14:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006d18:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8006d1c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8006d20:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8006d24:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006d28:	ee22 2a08 	vmul.f32	s4, s4, s16
 8006d2c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006d30:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006d34:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006d38:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006d3c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8006d40:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006d44:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006d48:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006d4c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8006d50:	ee72 1a21 	vadd.f32	s3, s4, s3
 8006d54:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006d58:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006d5c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006d60:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006d64:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006d68:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006d6c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8006d70:	eddd 5a03 	vldr	s11, [sp, #12]
 8006d74:	edc6 fa00 	vstr	s31, [r6]
 8006d78:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006d7c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006d80:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006d84:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006d88:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006d8c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8006d90:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006d94:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006d98:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006d9c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8006da0:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006da4:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006da8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006dac:	44c4      	add	ip, r8
 8006dae:	45e3      	cmp	fp, ip
 8006db0:	edc3 3a00 	vstr	s7, [r3]
 8006db4:	edc3 6a01 	vstr	s13, [r3, #4]
 8006db8:	4456      	add	r6, sl
 8006dba:	ed07 1a01 	vstr	s2, [r7, #-4]
 8006dbe:	edc7 0a00 	vstr	s1, [r7]
 8006dc2:	4453      	add	r3, sl
 8006dc4:	ed80 2a00 	vstr	s4, [r0]
 8006dc8:	edc0 2a01 	vstr	s5, [r0, #4]
 8006dcc:	4457      	add	r7, sl
 8006dce:	edc2 1a00 	vstr	s3, [r2]
 8006dd2:	ed82 7a01 	vstr	s14, [r2, #4]
 8006dd6:	4450      	add	r0, sl
 8006dd8:	ed85 8a00 	vstr	s16, [r5]
 8006ddc:	ed85 0a01 	vstr	s0, [r5, #4]
 8006de0:	4452      	add	r2, sl
 8006de2:	edc1 4a00 	vstr	s9, [r1]
 8006de6:	4455      	add	r5, sl
 8006de8:	ed81 3a01 	vstr	s6, [r1, #4]
 8006dec:	edc4 8a00 	vstr	s17, [r4]
 8006df0:	ed84 6a01 	vstr	s12, [r4, #4]
 8006df4:	4451      	add	r1, sl
 8006df6:	4454      	add	r4, sl
 8006df8:	f63f aeea 	bhi.w	8006bd0 <arm_radix8_butterfly_f32+0x2fc>
 8006dfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dfe:	3308      	adds	r3, #8
 8006e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e04:	3308      	adds	r3, #8
 8006e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	3308      	adds	r3, #8
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	3308      	adds	r3, #8
 8006e18:	9307      	str	r3, [sp, #28]
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	9306      	str	r3, [sp, #24]
 8006e20:	9b05      	ldr	r3, [sp, #20]
 8006e22:	3308      	adds	r3, #8
 8006e24:	9305      	str	r3, [sp, #20]
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e2e:	f109 0901 	add.w	r9, r9, #1
 8006e32:	454b      	cmp	r3, r9
 8006e34:	f47f ae7d 	bne.w	8006b32 <arm_radix8_butterfly_f32+0x25e>
 8006e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	46d9      	mov	r9, fp
 8006e40:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e42:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8006e46:	e554      	b.n	80068f2 <arm_radix8_butterfly_f32+0x1e>
 8006e48:	b015      	add	sp, #84	@ 0x54
 8006e4a:	ecbd 8b10 	vpop	{d8-d15}
 8006e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e52:	bf00      	nop

08006e54 <__cvt>:
 8006e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	ec57 6b10 	vmov	r6, r7, d0
 8006e5c:	2f00      	cmp	r7, #0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4619      	mov	r1, r3
 8006e62:	463b      	mov	r3, r7
 8006e64:	bfbb      	ittet	lt
 8006e66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e6a:	461f      	movlt	r7, r3
 8006e6c:	2300      	movge	r3, #0
 8006e6e:	232d      	movlt	r3, #45	@ 0x2d
 8006e70:	700b      	strb	r3, [r1, #0]
 8006e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e78:	4691      	mov	r9, r2
 8006e7a:	f023 0820 	bic.w	r8, r3, #32
 8006e7e:	bfbc      	itt	lt
 8006e80:	4632      	movlt	r2, r6
 8006e82:	4616      	movlt	r6, r2
 8006e84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e88:	d005      	beq.n	8006e96 <__cvt+0x42>
 8006e8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e8e:	d100      	bne.n	8006e92 <__cvt+0x3e>
 8006e90:	3401      	adds	r4, #1
 8006e92:	2102      	movs	r1, #2
 8006e94:	e000      	b.n	8006e98 <__cvt+0x44>
 8006e96:	2103      	movs	r1, #3
 8006e98:	ab03      	add	r3, sp, #12
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	ab02      	add	r3, sp, #8
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	ec47 6b10 	vmov	d0, r6, r7
 8006ea4:	4653      	mov	r3, sl
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	f000 fe4e 	bl	8007b48 <_dtoa_r>
 8006eac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	d119      	bne.n	8006ee8 <__cvt+0x94>
 8006eb4:	f019 0f01 	tst.w	r9, #1
 8006eb8:	d00e      	beq.n	8006ed8 <__cvt+0x84>
 8006eba:	eb00 0904 	add.w	r9, r0, r4
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	f7f9 fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eca:	b108      	cbz	r0, 8006ed0 <__cvt+0x7c>
 8006ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ed0:	2230      	movs	r2, #48	@ 0x30
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	454b      	cmp	r3, r9
 8006ed6:	d31e      	bcc.n	8006f16 <__cvt+0xc2>
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006edc:	1b5b      	subs	r3, r3, r5
 8006ede:	4628      	mov	r0, r5
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	b004      	add	sp, #16
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006eec:	eb00 0904 	add.w	r9, r0, r4
 8006ef0:	d1e5      	bne.n	8006ebe <__cvt+0x6a>
 8006ef2:	7803      	ldrb	r3, [r0, #0]
 8006ef4:	2b30      	cmp	r3, #48	@ 0x30
 8006ef6:	d10a      	bne.n	8006f0e <__cvt+0xba>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2300      	movs	r3, #0
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	f7f9 fdea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f04:	b918      	cbnz	r0, 8006f0e <__cvt+0xba>
 8006f06:	f1c4 0401 	rsb	r4, r4, #1
 8006f0a:	f8ca 4000 	str.w	r4, [sl]
 8006f0e:	f8da 3000 	ldr.w	r3, [sl]
 8006f12:	4499      	add	r9, r3
 8006f14:	e7d3      	b.n	8006ebe <__cvt+0x6a>
 8006f16:	1c59      	adds	r1, r3, #1
 8006f18:	9103      	str	r1, [sp, #12]
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	e7d9      	b.n	8006ed2 <__cvt+0x7e>

08006f1e <__exponent>:
 8006f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f20:	2900      	cmp	r1, #0
 8006f22:	bfba      	itte	lt
 8006f24:	4249      	neglt	r1, r1
 8006f26:	232d      	movlt	r3, #45	@ 0x2d
 8006f28:	232b      	movge	r3, #43	@ 0x2b
 8006f2a:	2909      	cmp	r1, #9
 8006f2c:	7002      	strb	r2, [r0, #0]
 8006f2e:	7043      	strb	r3, [r0, #1]
 8006f30:	dd29      	ble.n	8006f86 <__exponent+0x68>
 8006f32:	f10d 0307 	add.w	r3, sp, #7
 8006f36:	461d      	mov	r5, r3
 8006f38:	270a      	movs	r7, #10
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f40:	fb07 1416 	mls	r4, r7, r6, r1
 8006f44:	3430      	adds	r4, #48	@ 0x30
 8006f46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	2c63      	cmp	r4, #99	@ 0x63
 8006f4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f52:	4631      	mov	r1, r6
 8006f54:	dcf1      	bgt.n	8006f3a <__exponent+0x1c>
 8006f56:	3130      	adds	r1, #48	@ 0x30
 8006f58:	1e94      	subs	r4, r2, #2
 8006f5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f5e:	1c41      	adds	r1, r0, #1
 8006f60:	4623      	mov	r3, r4
 8006f62:	42ab      	cmp	r3, r5
 8006f64:	d30a      	bcc.n	8006f7c <__exponent+0x5e>
 8006f66:	f10d 0309 	add.w	r3, sp, #9
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	42ac      	cmp	r4, r5
 8006f6e:	bf88      	it	hi
 8006f70:	2300      	movhi	r3, #0
 8006f72:	3302      	adds	r3, #2
 8006f74:	4403      	add	r3, r0
 8006f76:	1a18      	subs	r0, r3, r0
 8006f78:	b003      	add	sp, #12
 8006f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f84:	e7ed      	b.n	8006f62 <__exponent+0x44>
 8006f86:	2330      	movs	r3, #48	@ 0x30
 8006f88:	3130      	adds	r1, #48	@ 0x30
 8006f8a:	7083      	strb	r3, [r0, #2]
 8006f8c:	70c1      	strb	r1, [r0, #3]
 8006f8e:	1d03      	adds	r3, r0, #4
 8006f90:	e7f1      	b.n	8006f76 <__exponent+0x58>
	...

08006f94 <_printf_float>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	b08d      	sub	sp, #52	@ 0x34
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	461f      	mov	r7, r3
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	f000 fccd 	bl	8007944 <_localeconv_r>
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7f9 f966 	bl	8000280 <strlen>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fbc:	9005      	str	r0, [sp, #20]
 8006fbe:	3307      	adds	r3, #7
 8006fc0:	f023 0307 	bic.w	r3, r3, #7
 8006fc4:	f103 0208 	add.w	r2, r3, #8
 8006fc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006fcc:	f8d4 b000 	ldr.w	fp, [r4]
 8006fd0:	f8c8 2000 	str.w	r2, [r8]
 8006fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006fdc:	9307      	str	r3, [sp, #28]
 8006fde:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fe2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fea:	4b9c      	ldr	r3, [pc, #624]	@ (800725c <_printf_float+0x2c8>)
 8006fec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff0:	f7f9 fda4 	bl	8000b3c <__aeabi_dcmpun>
 8006ff4:	bb70      	cbnz	r0, 8007054 <_printf_float+0xc0>
 8006ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ffa:	4b98      	ldr	r3, [pc, #608]	@ (800725c <_printf_float+0x2c8>)
 8006ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8007000:	f7f9 fd7e 	bl	8000b00 <__aeabi_dcmple>
 8007004:	bb30      	cbnz	r0, 8007054 <_printf_float+0xc0>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 fd6d 	bl	8000aec <__aeabi_dcmplt>
 8007012:	b110      	cbz	r0, 800701a <_printf_float+0x86>
 8007014:	232d      	movs	r3, #45	@ 0x2d
 8007016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800701a:	4a91      	ldr	r2, [pc, #580]	@ (8007260 <_printf_float+0x2cc>)
 800701c:	4b91      	ldr	r3, [pc, #580]	@ (8007264 <_printf_float+0x2d0>)
 800701e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007022:	bf94      	ite	ls
 8007024:	4690      	movls	r8, r2
 8007026:	4698      	movhi	r8, r3
 8007028:	2303      	movs	r3, #3
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	f02b 0304 	bic.w	r3, fp, #4
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	f04f 0900 	mov.w	r9, #0
 8007036:	9700      	str	r7, [sp, #0]
 8007038:	4633      	mov	r3, r6
 800703a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800703c:	4621      	mov	r1, r4
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f9d2 	bl	80073e8 <_printf_common>
 8007044:	3001      	adds	r0, #1
 8007046:	f040 808d 	bne.w	8007164 <_printf_float+0x1d0>
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
 800704e:	b00d      	add	sp, #52	@ 0x34
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	4642      	mov	r2, r8
 8007056:	464b      	mov	r3, r9
 8007058:	4640      	mov	r0, r8
 800705a:	4649      	mov	r1, r9
 800705c:	f7f9 fd6e 	bl	8000b3c <__aeabi_dcmpun>
 8007060:	b140      	cbz	r0, 8007074 <_printf_float+0xe0>
 8007062:	464b      	mov	r3, r9
 8007064:	2b00      	cmp	r3, #0
 8007066:	bfbc      	itt	lt
 8007068:	232d      	movlt	r3, #45	@ 0x2d
 800706a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800706e:	4a7e      	ldr	r2, [pc, #504]	@ (8007268 <_printf_float+0x2d4>)
 8007070:	4b7e      	ldr	r3, [pc, #504]	@ (800726c <_printf_float+0x2d8>)
 8007072:	e7d4      	b.n	800701e <_printf_float+0x8a>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800707a:	9206      	str	r2, [sp, #24]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	d13b      	bne.n	80070f8 <_printf_float+0x164>
 8007080:	2306      	movs	r3, #6
 8007082:	6063      	str	r3, [r4, #4]
 8007084:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007088:	2300      	movs	r3, #0
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	9303      	str	r3, [sp, #12]
 800708e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007090:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007094:	ab09      	add	r3, sp, #36	@ 0x24
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	6861      	ldr	r1, [r4, #4]
 800709a:	ec49 8b10 	vmov	d0, r8, r9
 800709e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80070a2:	4628      	mov	r0, r5
 80070a4:	f7ff fed6 	bl	8006e54 <__cvt>
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070ac:	2b47      	cmp	r3, #71	@ 0x47
 80070ae:	4680      	mov	r8, r0
 80070b0:	d129      	bne.n	8007106 <_printf_float+0x172>
 80070b2:	1cc8      	adds	r0, r1, #3
 80070b4:	db02      	blt.n	80070bc <_printf_float+0x128>
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	4299      	cmp	r1, r3
 80070ba:	dd41      	ble.n	8007140 <_printf_float+0x1ac>
 80070bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80070c0:	fa5f fa8a 	uxtb.w	sl, sl
 80070c4:	3901      	subs	r1, #1
 80070c6:	4652      	mov	r2, sl
 80070c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80070cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80070ce:	f7ff ff26 	bl	8006f1e <__exponent>
 80070d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d4:	1813      	adds	r3, r2, r0
 80070d6:	2a01      	cmp	r2, #1
 80070d8:	4681      	mov	r9, r0
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	dc02      	bgt.n	80070e4 <_printf_float+0x150>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	07d2      	lsls	r2, r2, #31
 80070e2:	d501      	bpl.n	80070e8 <_printf_float+0x154>
 80070e4:	3301      	adds	r3, #1
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0a2      	beq.n	8007036 <_printf_float+0xa2>
 80070f0:	232d      	movs	r3, #45	@ 0x2d
 80070f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f6:	e79e      	b.n	8007036 <_printf_float+0xa2>
 80070f8:	9a06      	ldr	r2, [sp, #24]
 80070fa:	2a47      	cmp	r2, #71	@ 0x47
 80070fc:	d1c2      	bne.n	8007084 <_printf_float+0xf0>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1c0      	bne.n	8007084 <_printf_float+0xf0>
 8007102:	2301      	movs	r3, #1
 8007104:	e7bd      	b.n	8007082 <_printf_float+0xee>
 8007106:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800710a:	d9db      	bls.n	80070c4 <_printf_float+0x130>
 800710c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007110:	d118      	bne.n	8007144 <_printf_float+0x1b0>
 8007112:	2900      	cmp	r1, #0
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	dd0b      	ble.n	8007130 <_printf_float+0x19c>
 8007118:	6121      	str	r1, [r4, #16]
 800711a:	b913      	cbnz	r3, 8007122 <_printf_float+0x18e>
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	07d0      	lsls	r0, r2, #31
 8007120:	d502      	bpl.n	8007128 <_printf_float+0x194>
 8007122:	3301      	adds	r3, #1
 8007124:	440b      	add	r3, r1
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	65a1      	str	r1, [r4, #88]	@ 0x58
 800712a:	f04f 0900 	mov.w	r9, #0
 800712e:	e7db      	b.n	80070e8 <_printf_float+0x154>
 8007130:	b913      	cbnz	r3, 8007138 <_printf_float+0x1a4>
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	07d2      	lsls	r2, r2, #31
 8007136:	d501      	bpl.n	800713c <_printf_float+0x1a8>
 8007138:	3302      	adds	r3, #2
 800713a:	e7f4      	b.n	8007126 <_printf_float+0x192>
 800713c:	2301      	movs	r3, #1
 800713e:	e7f2      	b.n	8007126 <_printf_float+0x192>
 8007140:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007146:	4299      	cmp	r1, r3
 8007148:	db05      	blt.n	8007156 <_printf_float+0x1c2>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	6121      	str	r1, [r4, #16]
 800714e:	07d8      	lsls	r0, r3, #31
 8007150:	d5ea      	bpl.n	8007128 <_printf_float+0x194>
 8007152:	1c4b      	adds	r3, r1, #1
 8007154:	e7e7      	b.n	8007126 <_printf_float+0x192>
 8007156:	2900      	cmp	r1, #0
 8007158:	bfd4      	ite	le
 800715a:	f1c1 0202 	rsble	r2, r1, #2
 800715e:	2201      	movgt	r2, #1
 8007160:	4413      	add	r3, r2
 8007162:	e7e0      	b.n	8007126 <_printf_float+0x192>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	055a      	lsls	r2, r3, #21
 8007168:	d407      	bmi.n	800717a <_printf_float+0x1e6>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	4642      	mov	r2, r8
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	d12b      	bne.n	80071d0 <_printf_float+0x23c>
 8007178:	e767      	b.n	800704a <_printf_float+0xb6>
 800717a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800717e:	f240 80dd 	bls.w	800733c <_printf_float+0x3a8>
 8007182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007186:	2200      	movs	r2, #0
 8007188:	2300      	movs	r3, #0
 800718a:	f7f9 fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800718e:	2800      	cmp	r0, #0
 8007190:	d033      	beq.n	80071fa <_printf_float+0x266>
 8007192:	4a37      	ldr	r2, [pc, #220]	@ (8007270 <_printf_float+0x2dc>)
 8007194:	2301      	movs	r3, #1
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	f43f af54 	beq.w	800704a <_printf_float+0xb6>
 80071a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80071a6:	4543      	cmp	r3, r8
 80071a8:	db02      	blt.n	80071b0 <_printf_float+0x21c>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	07d8      	lsls	r0, r3, #31
 80071ae:	d50f      	bpl.n	80071d0 <_printf_float+0x23c>
 80071b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b4:	4631      	mov	r1, r6
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	f43f af45 	beq.w	800704a <_printf_float+0xb6>
 80071c0:	f04f 0900 	mov.w	r9, #0
 80071c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c8:	f104 0a1a 	add.w	sl, r4, #26
 80071cc:	45c8      	cmp	r8, r9
 80071ce:	dc09      	bgt.n	80071e4 <_printf_float+0x250>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	079b      	lsls	r3, r3, #30
 80071d4:	f100 8103 	bmi.w	80073de <_printf_float+0x44a>
 80071d8:	68e0      	ldr	r0, [r4, #12]
 80071da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071dc:	4298      	cmp	r0, r3
 80071de:	bfb8      	it	lt
 80071e0:	4618      	movlt	r0, r3
 80071e2:	e734      	b.n	800704e <_printf_float+0xba>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4652      	mov	r2, sl
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f43f af2b 	beq.w	800704a <_printf_float+0xb6>
 80071f4:	f109 0901 	add.w	r9, r9, #1
 80071f8:	e7e8      	b.n	80071cc <_printf_float+0x238>
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc39      	bgt.n	8007274 <_printf_float+0x2e0>
 8007200:	4a1b      	ldr	r2, [pc, #108]	@ (8007270 <_printf_float+0x2dc>)
 8007202:	2301      	movs	r3, #1
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af1d 	beq.w	800704a <_printf_float+0xb6>
 8007210:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007214:	ea59 0303 	orrs.w	r3, r9, r3
 8007218:	d102      	bne.n	8007220 <_printf_float+0x28c>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	07d9      	lsls	r1, r3, #31
 800721e:	d5d7      	bpl.n	80071d0 <_printf_float+0x23c>
 8007220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	f43f af0d 	beq.w	800704a <_printf_float+0xb6>
 8007230:	f04f 0a00 	mov.w	sl, #0
 8007234:	f104 0b1a 	add.w	fp, r4, #26
 8007238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723a:	425b      	negs	r3, r3
 800723c:	4553      	cmp	r3, sl
 800723e:	dc01      	bgt.n	8007244 <_printf_float+0x2b0>
 8007240:	464b      	mov	r3, r9
 8007242:	e793      	b.n	800716c <_printf_float+0x1d8>
 8007244:	2301      	movs	r3, #1
 8007246:	465a      	mov	r2, fp
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	f43f aefb 	beq.w	800704a <_printf_float+0xb6>
 8007254:	f10a 0a01 	add.w	sl, sl, #1
 8007258:	e7ee      	b.n	8007238 <_printf_float+0x2a4>
 800725a:	bf00      	nop
 800725c:	7fefffff 	.word	0x7fefffff
 8007260:	0800c710 	.word	0x0800c710
 8007264:	0800c714 	.word	0x0800c714
 8007268:	0800c718 	.word	0x0800c718
 800726c:	0800c71c 	.word	0x0800c71c
 8007270:	0800c720 	.word	0x0800c720
 8007274:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007276:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800727a:	4553      	cmp	r3, sl
 800727c:	bfa8      	it	ge
 800727e:	4653      	movge	r3, sl
 8007280:	2b00      	cmp	r3, #0
 8007282:	4699      	mov	r9, r3
 8007284:	dc36      	bgt.n	80072f4 <_printf_float+0x360>
 8007286:	f04f 0b00 	mov.w	fp, #0
 800728a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800728e:	f104 021a 	add.w	r2, r4, #26
 8007292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007294:	9306      	str	r3, [sp, #24]
 8007296:	eba3 0309 	sub.w	r3, r3, r9
 800729a:	455b      	cmp	r3, fp
 800729c:	dc31      	bgt.n	8007302 <_printf_float+0x36e>
 800729e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a0:	459a      	cmp	sl, r3
 80072a2:	dc3a      	bgt.n	800731a <_printf_float+0x386>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	07da      	lsls	r2, r3, #31
 80072a8:	d437      	bmi.n	800731a <_printf_float+0x386>
 80072aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ac:	ebaa 0903 	sub.w	r9, sl, r3
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	ebaa 0303 	sub.w	r3, sl, r3
 80072b6:	4599      	cmp	r9, r3
 80072b8:	bfa8      	it	ge
 80072ba:	4699      	movge	r9, r3
 80072bc:	f1b9 0f00 	cmp.w	r9, #0
 80072c0:	dc33      	bgt.n	800732a <_printf_float+0x396>
 80072c2:	f04f 0800 	mov.w	r8, #0
 80072c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ca:	f104 0b1a 	add.w	fp, r4, #26
 80072ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d0:	ebaa 0303 	sub.w	r3, sl, r3
 80072d4:	eba3 0309 	sub.w	r3, r3, r9
 80072d8:	4543      	cmp	r3, r8
 80072da:	f77f af79 	ble.w	80071d0 <_printf_float+0x23c>
 80072de:	2301      	movs	r3, #1
 80072e0:	465a      	mov	r2, fp
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f aeae 	beq.w	800704a <_printf_float+0xb6>
 80072ee:	f108 0801 	add.w	r8, r8, #1
 80072f2:	e7ec      	b.n	80072ce <_printf_float+0x33a>
 80072f4:	4642      	mov	r2, r8
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	d1c2      	bne.n	8007286 <_printf_float+0x2f2>
 8007300:	e6a3      	b.n	800704a <_printf_float+0xb6>
 8007302:	2301      	movs	r3, #1
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	9206      	str	r2, [sp, #24]
 800730a:	47b8      	blx	r7
 800730c:	3001      	adds	r0, #1
 800730e:	f43f ae9c 	beq.w	800704a <_printf_float+0xb6>
 8007312:	9a06      	ldr	r2, [sp, #24]
 8007314:	f10b 0b01 	add.w	fp, fp, #1
 8007318:	e7bb      	b.n	8007292 <_printf_float+0x2fe>
 800731a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	d1c0      	bne.n	80072aa <_printf_float+0x316>
 8007328:	e68f      	b.n	800704a <_printf_float+0xb6>
 800732a:	9a06      	ldr	r2, [sp, #24]
 800732c:	464b      	mov	r3, r9
 800732e:	4442      	add	r2, r8
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	d1c3      	bne.n	80072c2 <_printf_float+0x32e>
 800733a:	e686      	b.n	800704a <_printf_float+0xb6>
 800733c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007340:	f1ba 0f01 	cmp.w	sl, #1
 8007344:	dc01      	bgt.n	800734a <_printf_float+0x3b6>
 8007346:	07db      	lsls	r3, r3, #31
 8007348:	d536      	bpl.n	80073b8 <_printf_float+0x424>
 800734a:	2301      	movs	r3, #1
 800734c:	4642      	mov	r2, r8
 800734e:	4631      	mov	r1, r6
 8007350:	4628      	mov	r0, r5
 8007352:	47b8      	blx	r7
 8007354:	3001      	adds	r0, #1
 8007356:	f43f ae78 	beq.w	800704a <_printf_float+0xb6>
 800735a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f ae70 	beq.w	800704a <_printf_float+0xb6>
 800736a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007376:	f7f9 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800737a:	b9c0      	cbnz	r0, 80073ae <_printf_float+0x41a>
 800737c:	4653      	mov	r3, sl
 800737e:	f108 0201 	add.w	r2, r8, #1
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	d10c      	bne.n	80073a6 <_printf_float+0x412>
 800738c:	e65d      	b.n	800704a <_printf_float+0xb6>
 800738e:	2301      	movs	r3, #1
 8007390:	465a      	mov	r2, fp
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	f43f ae56 	beq.w	800704a <_printf_float+0xb6>
 800739e:	f108 0801 	add.w	r8, r8, #1
 80073a2:	45d0      	cmp	r8, sl
 80073a4:	dbf3      	blt.n	800738e <_printf_float+0x3fa>
 80073a6:	464b      	mov	r3, r9
 80073a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80073ac:	e6df      	b.n	800716e <_printf_float+0x1da>
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	f104 0b1a 	add.w	fp, r4, #26
 80073b6:	e7f4      	b.n	80073a2 <_printf_float+0x40e>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4642      	mov	r2, r8
 80073bc:	e7e1      	b.n	8007382 <_printf_float+0x3ee>
 80073be:	2301      	movs	r3, #1
 80073c0:	464a      	mov	r2, r9
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae3e 	beq.w	800704a <_printf_float+0xb6>
 80073ce:	f108 0801 	add.w	r8, r8, #1
 80073d2:	68e3      	ldr	r3, [r4, #12]
 80073d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073d6:	1a5b      	subs	r3, r3, r1
 80073d8:	4543      	cmp	r3, r8
 80073da:	dcf0      	bgt.n	80073be <_printf_float+0x42a>
 80073dc:	e6fc      	b.n	80071d8 <_printf_float+0x244>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	f104 0919 	add.w	r9, r4, #25
 80073e6:	e7f4      	b.n	80073d2 <_printf_float+0x43e>

080073e8 <_printf_common>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	4616      	mov	r6, r2
 80073ee:	4698      	mov	r8, r3
 80073f0:	688a      	ldr	r2, [r1, #8]
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfb8      	it	lt
 80073fc:	4613      	movlt	r3, r2
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007404:	4607      	mov	r7, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b10a      	cbz	r2, 800740e <_printf_common+0x26>
 800740a:	3301      	adds	r3, #1
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0699      	lsls	r1, r3, #26
 8007412:	bf42      	ittt	mi
 8007414:	6833      	ldrmi	r3, [r6, #0]
 8007416:	3302      	addmi	r3, #2
 8007418:	6033      	strmi	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d106      	bne.n	8007430 <_printf_common+0x48>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	42ab      	cmp	r3, r5
 800742e:	dc26      	bgt.n	800747e <_printf_common+0x96>
 8007430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	3b00      	subs	r3, #0
 8007438:	bf18      	it	ne
 800743a:	2301      	movne	r3, #1
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d42b      	bmi.n	8007498 <_printf_common+0xb0>
 8007440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007444:	4641      	mov	r1, r8
 8007446:	4638      	mov	r0, r7
 8007448:	47c8      	blx	r9
 800744a:	3001      	adds	r0, #1
 800744c:	d01e      	beq.n	800748c <_printf_common+0xa4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	2b04      	cmp	r3, #4
 8007458:	bf02      	ittt	eq
 800745a:	68e5      	ldreq	r5, [r4, #12]
 800745c:	6833      	ldreq	r3, [r6, #0]
 800745e:	1aed      	subeq	r5, r5, r3
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	bf0c      	ite	eq
 8007464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007468:	2500      	movne	r5, #0
 800746a:	4293      	cmp	r3, r2
 800746c:	bfc4      	itt	gt
 800746e:	1a9b      	subgt	r3, r3, r2
 8007470:	18ed      	addgt	r5, r5, r3
 8007472:	2600      	movs	r6, #0
 8007474:	341a      	adds	r4, #26
 8007476:	42b5      	cmp	r5, r6
 8007478:	d11a      	bne.n	80074b0 <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e008      	b.n	8007490 <_printf_common+0xa8>
 800747e:	2301      	movs	r3, #1
 8007480:	4652      	mov	r2, sl
 8007482:	4641      	mov	r1, r8
 8007484:	4638      	mov	r0, r7
 8007486:	47c8      	blx	r9
 8007488:	3001      	adds	r0, #1
 800748a:	d103      	bne.n	8007494 <_printf_common+0xac>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	3501      	adds	r5, #1
 8007496:	e7c6      	b.n	8007426 <_printf_common+0x3e>
 8007498:	18e1      	adds	r1, r4, r3
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	2030      	movs	r0, #48	@ 0x30
 800749e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074a2:	4422      	add	r2, r4
 80074a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ac:	3302      	adds	r3, #2
 80074ae:	e7c7      	b.n	8007440 <_printf_common+0x58>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	4641      	mov	r1, r8
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c8      	blx	r9
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa4>
 80074be:	3601      	adds	r6, #1
 80074c0:	e7d9      	b.n	8007476 <_printf_common+0x8e>
	...

080074c4 <_printf_i>:
 80074c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	7e0f      	ldrb	r7, [r1, #24]
 80074ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074cc:	2f78      	cmp	r7, #120	@ 0x78
 80074ce:	4691      	mov	r9, r2
 80074d0:	4680      	mov	r8, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	469a      	mov	sl, r3
 80074d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074da:	d807      	bhi.n	80074ec <_printf_i+0x28>
 80074dc:	2f62      	cmp	r7, #98	@ 0x62
 80074de:	d80a      	bhi.n	80074f6 <_printf_i+0x32>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	f000 80d2 	beq.w	800768a <_printf_i+0x1c6>
 80074e6:	2f58      	cmp	r7, #88	@ 0x58
 80074e8:	f000 80b9 	beq.w	800765e <_printf_i+0x19a>
 80074ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074f4:	e03a      	b.n	800756c <_printf_i+0xa8>
 80074f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074fa:	2b15      	cmp	r3, #21
 80074fc:	d8f6      	bhi.n	80074ec <_printf_i+0x28>
 80074fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007504 <_printf_i+0x40>)
 8007500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007504:	0800755d 	.word	0x0800755d
 8007508:	08007571 	.word	0x08007571
 800750c:	080074ed 	.word	0x080074ed
 8007510:	080074ed 	.word	0x080074ed
 8007514:	080074ed 	.word	0x080074ed
 8007518:	080074ed 	.word	0x080074ed
 800751c:	08007571 	.word	0x08007571
 8007520:	080074ed 	.word	0x080074ed
 8007524:	080074ed 	.word	0x080074ed
 8007528:	080074ed 	.word	0x080074ed
 800752c:	080074ed 	.word	0x080074ed
 8007530:	08007671 	.word	0x08007671
 8007534:	0800759b 	.word	0x0800759b
 8007538:	0800762b 	.word	0x0800762b
 800753c:	080074ed 	.word	0x080074ed
 8007540:	080074ed 	.word	0x080074ed
 8007544:	08007693 	.word	0x08007693
 8007548:	080074ed 	.word	0x080074ed
 800754c:	0800759b 	.word	0x0800759b
 8007550:	080074ed 	.word	0x080074ed
 8007554:	080074ed 	.word	0x080074ed
 8007558:	08007633 	.word	0x08007633
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6032      	str	r2, [r6, #0]
 8007564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e09d      	b.n	80076ac <_printf_i+0x1e8>
 8007570:	6833      	ldr	r3, [r6, #0]
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	0606      	lsls	r6, r0, #24
 800757a:	d501      	bpl.n	8007580 <_printf_i+0xbc>
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	e003      	b.n	8007588 <_printf_i+0xc4>
 8007580:	0645      	lsls	r5, r0, #25
 8007582:	d5fb      	bpl.n	800757c <_printf_i+0xb8>
 8007584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007588:	2d00      	cmp	r5, #0
 800758a:	da03      	bge.n	8007594 <_printf_i+0xd0>
 800758c:	232d      	movs	r3, #45	@ 0x2d
 800758e:	426d      	negs	r5, r5
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007594:	4859      	ldr	r0, [pc, #356]	@ (80076fc <_printf_i+0x238>)
 8007596:	230a      	movs	r3, #10
 8007598:	e011      	b.n	80075be <_printf_i+0xfa>
 800759a:	6821      	ldr	r1, [r4, #0]
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	0608      	lsls	r0, r1, #24
 80075a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075a4:	d402      	bmi.n	80075ac <_printf_i+0xe8>
 80075a6:	0649      	lsls	r1, r1, #25
 80075a8:	bf48      	it	mi
 80075aa:	b2ad      	uxthmi	r5, r5
 80075ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ae:	4853      	ldr	r0, [pc, #332]	@ (80076fc <_printf_i+0x238>)
 80075b0:	6033      	str	r3, [r6, #0]
 80075b2:	bf14      	ite	ne
 80075b4:	230a      	movne	r3, #10
 80075b6:	2308      	moveq	r3, #8
 80075b8:	2100      	movs	r1, #0
 80075ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075be:	6866      	ldr	r6, [r4, #4]
 80075c0:	60a6      	str	r6, [r4, #8]
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	bfa2      	ittt	ge
 80075c6:	6821      	ldrge	r1, [r4, #0]
 80075c8:	f021 0104 	bicge.w	r1, r1, #4
 80075cc:	6021      	strge	r1, [r4, #0]
 80075ce:	b90d      	cbnz	r5, 80075d4 <_printf_i+0x110>
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d04b      	beq.n	800766c <_printf_i+0x1a8>
 80075d4:	4616      	mov	r6, r2
 80075d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80075da:	fb03 5711 	mls	r7, r3, r1, r5
 80075de:	5dc7      	ldrb	r7, [r0, r7]
 80075e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e4:	462f      	mov	r7, r5
 80075e6:	42bb      	cmp	r3, r7
 80075e8:	460d      	mov	r5, r1
 80075ea:	d9f4      	bls.n	80075d6 <_printf_i+0x112>
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d10b      	bne.n	8007608 <_printf_i+0x144>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07df      	lsls	r7, r3, #31
 80075f4:	d508      	bpl.n	8007608 <_printf_i+0x144>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	4299      	cmp	r1, r3
 80075fc:	bfde      	ittt	le
 80075fe:	2330      	movle	r3, #48	@ 0x30
 8007600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007608:	1b92      	subs	r2, r2, r6
 800760a:	6122      	str	r2, [r4, #16]
 800760c:	f8cd a000 	str.w	sl, [sp]
 8007610:	464b      	mov	r3, r9
 8007612:	aa03      	add	r2, sp, #12
 8007614:	4621      	mov	r1, r4
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fee6 	bl	80073e8 <_printf_common>
 800761c:	3001      	adds	r0, #1
 800761e:	d14a      	bne.n	80076b6 <_printf_i+0x1f2>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b004      	add	sp, #16
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f043 0320 	orr.w	r3, r3, #32
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	4833      	ldr	r0, [pc, #204]	@ (8007700 <_printf_i+0x23c>)
 8007634:	2778      	movs	r7, #120	@ 0x78
 8007636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	6831      	ldr	r1, [r6, #0]
 800763e:	061f      	lsls	r7, r3, #24
 8007640:	f851 5b04 	ldr.w	r5, [r1], #4
 8007644:	d402      	bmi.n	800764c <_printf_i+0x188>
 8007646:	065f      	lsls	r7, r3, #25
 8007648:	bf48      	it	mi
 800764a:	b2ad      	uxthmi	r5, r5
 800764c:	6031      	str	r1, [r6, #0]
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	bf44      	itt	mi
 8007652:	f043 0320 	orrmi.w	r3, r3, #32
 8007656:	6023      	strmi	r3, [r4, #0]
 8007658:	b11d      	cbz	r5, 8007662 <_printf_i+0x19e>
 800765a:	2310      	movs	r3, #16
 800765c:	e7ac      	b.n	80075b8 <_printf_i+0xf4>
 800765e:	4827      	ldr	r0, [pc, #156]	@ (80076fc <_printf_i+0x238>)
 8007660:	e7e9      	b.n	8007636 <_printf_i+0x172>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f023 0320 	bic.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	e7f6      	b.n	800765a <_printf_i+0x196>
 800766c:	4616      	mov	r6, r2
 800766e:	e7bd      	b.n	80075ec <_printf_i+0x128>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	6825      	ldr	r5, [r4, #0]
 8007674:	6961      	ldr	r1, [r4, #20]
 8007676:	1d18      	adds	r0, r3, #4
 8007678:	6030      	str	r0, [r6, #0]
 800767a:	062e      	lsls	r6, r5, #24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	d501      	bpl.n	8007684 <_printf_i+0x1c0>
 8007680:	6019      	str	r1, [r3, #0]
 8007682:	e002      	b.n	800768a <_printf_i+0x1c6>
 8007684:	0668      	lsls	r0, r5, #25
 8007686:	d5fb      	bpl.n	8007680 <_printf_i+0x1bc>
 8007688:	8019      	strh	r1, [r3, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	4616      	mov	r6, r2
 8007690:	e7bc      	b.n	800760c <_printf_i+0x148>
 8007692:	6833      	ldr	r3, [r6, #0]
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	6032      	str	r2, [r6, #0]
 8007698:	681e      	ldr	r6, [r3, #0]
 800769a:	6862      	ldr	r2, [r4, #4]
 800769c:	2100      	movs	r1, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	f7f8 fd9e 	bl	80001e0 <memchr>
 80076a4:	b108      	cbz	r0, 80076aa <_printf_i+0x1e6>
 80076a6:	1b80      	subs	r0, r0, r6
 80076a8:	6060      	str	r0, [r4, #4]
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	2300      	movs	r3, #0
 80076b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076b4:	e7aa      	b.n	800760c <_printf_i+0x148>
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	4632      	mov	r2, r6
 80076ba:	4649      	mov	r1, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	47d0      	blx	sl
 80076c0:	3001      	adds	r0, #1
 80076c2:	d0ad      	beq.n	8007620 <_printf_i+0x15c>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	079b      	lsls	r3, r3, #30
 80076c8:	d413      	bmi.n	80076f2 <_printf_i+0x22e>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	4298      	cmp	r0, r3
 80076d0:	bfb8      	it	lt
 80076d2:	4618      	movlt	r0, r3
 80076d4:	e7a6      	b.n	8007624 <_printf_i+0x160>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4632      	mov	r2, r6
 80076da:	4649      	mov	r1, r9
 80076dc:	4640      	mov	r0, r8
 80076de:	47d0      	blx	sl
 80076e0:	3001      	adds	r0, #1
 80076e2:	d09d      	beq.n	8007620 <_printf_i+0x15c>
 80076e4:	3501      	adds	r5, #1
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	9903      	ldr	r1, [sp, #12]
 80076ea:	1a5b      	subs	r3, r3, r1
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dcf2      	bgt.n	80076d6 <_printf_i+0x212>
 80076f0:	e7eb      	b.n	80076ca <_printf_i+0x206>
 80076f2:	2500      	movs	r5, #0
 80076f4:	f104 0619 	add.w	r6, r4, #25
 80076f8:	e7f5      	b.n	80076e6 <_printf_i+0x222>
 80076fa:	bf00      	nop
 80076fc:	0800c722 	.word	0x0800c722
 8007700:	0800c733 	.word	0x0800c733

08007704 <std>:
 8007704:	2300      	movs	r3, #0
 8007706:	b510      	push	{r4, lr}
 8007708:	4604      	mov	r4, r0
 800770a:	e9c0 3300 	strd	r3, r3, [r0]
 800770e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007712:	6083      	str	r3, [r0, #8]
 8007714:	8181      	strh	r1, [r0, #12]
 8007716:	6643      	str	r3, [r0, #100]	@ 0x64
 8007718:	81c2      	strh	r2, [r0, #14]
 800771a:	6183      	str	r3, [r0, #24]
 800771c:	4619      	mov	r1, r3
 800771e:	2208      	movs	r2, #8
 8007720:	305c      	adds	r0, #92	@ 0x5c
 8007722:	f000 f906 	bl	8007932 <memset>
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <std+0x58>)
 8007728:	6263      	str	r3, [r4, #36]	@ 0x24
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x5c>)
 800772c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x60>)
 8007730:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <std+0x64>)
 8007734:	6323      	str	r3, [r4, #48]	@ 0x30
 8007736:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <std+0x68>)
 8007738:	6224      	str	r4, [r4, #32]
 800773a:	429c      	cmp	r4, r3
 800773c:	d006      	beq.n	800774c <std+0x48>
 800773e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007742:	4294      	cmp	r4, r2
 8007744:	d002      	beq.n	800774c <std+0x48>
 8007746:	33d0      	adds	r3, #208	@ 0xd0
 8007748:	429c      	cmp	r4, r3
 800774a:	d105      	bne.n	8007758 <std+0x54>
 800774c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007754:	f000 b96a 	b.w	8007a2c <__retarget_lock_init_recursive>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	bf00      	nop
 800775c:	080078ad 	.word	0x080078ad
 8007760:	080078cf 	.word	0x080078cf
 8007764:	08007907 	.word	0x08007907
 8007768:	0800792b 	.word	0x0800792b
 800776c:	200033a8 	.word	0x200033a8

08007770 <stdio_exit_handler>:
 8007770:	4a02      	ldr	r2, [pc, #8]	@ (800777c <stdio_exit_handler+0xc>)
 8007772:	4903      	ldr	r1, [pc, #12]	@ (8007780 <stdio_exit_handler+0x10>)
 8007774:	4803      	ldr	r0, [pc, #12]	@ (8007784 <stdio_exit_handler+0x14>)
 8007776:	f000 b869 	b.w	800784c <_fwalk_sglue>
 800777a:	bf00      	nop
 800777c:	20002014 	.word	0x20002014
 8007780:	08009361 	.word	0x08009361
 8007784:	20002024 	.word	0x20002024

08007788 <cleanup_stdio>:
 8007788:	6841      	ldr	r1, [r0, #4]
 800778a:	4b0c      	ldr	r3, [pc, #48]	@ (80077bc <cleanup_stdio+0x34>)
 800778c:	4299      	cmp	r1, r3
 800778e:	b510      	push	{r4, lr}
 8007790:	4604      	mov	r4, r0
 8007792:	d001      	beq.n	8007798 <cleanup_stdio+0x10>
 8007794:	f001 fde4 	bl	8009360 <_fflush_r>
 8007798:	68a1      	ldr	r1, [r4, #8]
 800779a:	4b09      	ldr	r3, [pc, #36]	@ (80077c0 <cleanup_stdio+0x38>)
 800779c:	4299      	cmp	r1, r3
 800779e:	d002      	beq.n	80077a6 <cleanup_stdio+0x1e>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 fddd 	bl	8009360 <_fflush_r>
 80077a6:	68e1      	ldr	r1, [r4, #12]
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <cleanup_stdio+0x3c>)
 80077aa:	4299      	cmp	r1, r3
 80077ac:	d004      	beq.n	80077b8 <cleanup_stdio+0x30>
 80077ae:	4620      	mov	r0, r4
 80077b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b4:	f001 bdd4 	b.w	8009360 <_fflush_r>
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	200033a8 	.word	0x200033a8
 80077c0:	20003410 	.word	0x20003410
 80077c4:	20003478 	.word	0x20003478

080077c8 <global_stdio_init.part.0>:
 80077c8:	b510      	push	{r4, lr}
 80077ca:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <global_stdio_init.part.0+0x30>)
 80077cc:	4c0b      	ldr	r4, [pc, #44]	@ (80077fc <global_stdio_init.part.0+0x34>)
 80077ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007800 <global_stdio_init.part.0+0x38>)
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	4620      	mov	r0, r4
 80077d4:	2200      	movs	r2, #0
 80077d6:	2104      	movs	r1, #4
 80077d8:	f7ff ff94 	bl	8007704 <std>
 80077dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077e0:	2201      	movs	r2, #1
 80077e2:	2109      	movs	r1, #9
 80077e4:	f7ff ff8e 	bl	8007704 <std>
 80077e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077ec:	2202      	movs	r2, #2
 80077ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f2:	2112      	movs	r1, #18
 80077f4:	f7ff bf86 	b.w	8007704 <std>
 80077f8:	200034e0 	.word	0x200034e0
 80077fc:	200033a8 	.word	0x200033a8
 8007800:	08007771 	.word	0x08007771

08007804 <__sfp_lock_acquire>:
 8007804:	4801      	ldr	r0, [pc, #4]	@ (800780c <__sfp_lock_acquire+0x8>)
 8007806:	f000 b912 	b.w	8007a2e <__retarget_lock_acquire_recursive>
 800780a:	bf00      	nop
 800780c:	200034e9 	.word	0x200034e9

08007810 <__sfp_lock_release>:
 8007810:	4801      	ldr	r0, [pc, #4]	@ (8007818 <__sfp_lock_release+0x8>)
 8007812:	f000 b90d 	b.w	8007a30 <__retarget_lock_release_recursive>
 8007816:	bf00      	nop
 8007818:	200034e9 	.word	0x200034e9

0800781c <__sinit>:
 800781c:	b510      	push	{r4, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	f7ff fff0 	bl	8007804 <__sfp_lock_acquire>
 8007824:	6a23      	ldr	r3, [r4, #32]
 8007826:	b11b      	cbz	r3, 8007830 <__sinit+0x14>
 8007828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800782c:	f7ff bff0 	b.w	8007810 <__sfp_lock_release>
 8007830:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <__sinit+0x28>)
 8007832:	6223      	str	r3, [r4, #32]
 8007834:	4b04      	ldr	r3, [pc, #16]	@ (8007848 <__sinit+0x2c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f5      	bne.n	8007828 <__sinit+0xc>
 800783c:	f7ff ffc4 	bl	80077c8 <global_stdio_init.part.0>
 8007840:	e7f2      	b.n	8007828 <__sinit+0xc>
 8007842:	bf00      	nop
 8007844:	08007789 	.word	0x08007789
 8007848:	200034e0 	.word	0x200034e0

0800784c <_fwalk_sglue>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4607      	mov	r7, r0
 8007852:	4688      	mov	r8, r1
 8007854:	4614      	mov	r4, r2
 8007856:	2600      	movs	r6, #0
 8007858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800785c:	f1b9 0901 	subs.w	r9, r9, #1
 8007860:	d505      	bpl.n	800786e <_fwalk_sglue+0x22>
 8007862:	6824      	ldr	r4, [r4, #0]
 8007864:	2c00      	cmp	r4, #0
 8007866:	d1f7      	bne.n	8007858 <_fwalk_sglue+0xc>
 8007868:	4630      	mov	r0, r6
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d907      	bls.n	8007884 <_fwalk_sglue+0x38>
 8007874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007878:	3301      	adds	r3, #1
 800787a:	d003      	beq.n	8007884 <_fwalk_sglue+0x38>
 800787c:	4629      	mov	r1, r5
 800787e:	4638      	mov	r0, r7
 8007880:	47c0      	blx	r8
 8007882:	4306      	orrs	r6, r0
 8007884:	3568      	adds	r5, #104	@ 0x68
 8007886:	e7e9      	b.n	800785c <_fwalk_sglue+0x10>

08007888 <iprintf>:
 8007888:	b40f      	push	{r0, r1, r2, r3}
 800788a:	b507      	push	{r0, r1, r2, lr}
 800788c:	4906      	ldr	r1, [pc, #24]	@ (80078a8 <iprintf+0x20>)
 800788e:	ab04      	add	r3, sp, #16
 8007890:	6808      	ldr	r0, [r1, #0]
 8007892:	f853 2b04 	ldr.w	r2, [r3], #4
 8007896:	6881      	ldr	r1, [r0, #8]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	f001 fbc5 	bl	8009028 <_vfiprintf_r>
 800789e:	b003      	add	sp, #12
 80078a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a4:	b004      	add	sp, #16
 80078a6:	4770      	bx	lr
 80078a8:	20002020 	.word	0x20002020

080078ac <__sread>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	460c      	mov	r4, r1
 80078b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b4:	f000 f86c 	bl	8007990 <_read_r>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	bfab      	itete	ge
 80078bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078be:	89a3      	ldrhlt	r3, [r4, #12]
 80078c0:	181b      	addge	r3, r3, r0
 80078c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078c6:	bfac      	ite	ge
 80078c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078ca:	81a3      	strhlt	r3, [r4, #12]
 80078cc:	bd10      	pop	{r4, pc}

080078ce <__swrite>:
 80078ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d2:	461f      	mov	r7, r3
 80078d4:	898b      	ldrh	r3, [r1, #12]
 80078d6:	05db      	lsls	r3, r3, #23
 80078d8:	4605      	mov	r5, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	4616      	mov	r6, r2
 80078de:	d505      	bpl.n	80078ec <__swrite+0x1e>
 80078e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e4:	2302      	movs	r3, #2
 80078e6:	2200      	movs	r2, #0
 80078e8:	f000 f840 	bl	800796c <_lseek_r>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	4632      	mov	r2, r6
 80078fa:	463b      	mov	r3, r7
 80078fc:	4628      	mov	r0, r5
 80078fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007902:	f000 b857 	b.w	80079b4 <_write_r>

08007906 <__sseek>:
 8007906:	b510      	push	{r4, lr}
 8007908:	460c      	mov	r4, r1
 800790a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790e:	f000 f82d 	bl	800796c <_lseek_r>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	bf15      	itete	ne
 8007918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800791a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800791e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007922:	81a3      	strheq	r3, [r4, #12]
 8007924:	bf18      	it	ne
 8007926:	81a3      	strhne	r3, [r4, #12]
 8007928:	bd10      	pop	{r4, pc}

0800792a <__sclose>:
 800792a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792e:	f000 b80d 	b.w	800794c <_close_r>

08007932 <memset>:
 8007932:	4402      	add	r2, r0
 8007934:	4603      	mov	r3, r0
 8007936:	4293      	cmp	r3, r2
 8007938:	d100      	bne.n	800793c <memset+0xa>
 800793a:	4770      	bx	lr
 800793c:	f803 1b01 	strb.w	r1, [r3], #1
 8007940:	e7f9      	b.n	8007936 <memset+0x4>
	...

08007944 <_localeconv_r>:
 8007944:	4800      	ldr	r0, [pc, #0]	@ (8007948 <_localeconv_r+0x4>)
 8007946:	4770      	bx	lr
 8007948:	20002160 	.word	0x20002160

0800794c <_close_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d06      	ldr	r5, [pc, #24]	@ (8007968 <_close_r+0x1c>)
 8007950:	2300      	movs	r3, #0
 8007952:	4604      	mov	r4, r0
 8007954:	4608      	mov	r0, r1
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	f7fa f84c 	bl	80019f4 <_close>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_close_r+0x1a>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_close_r+0x1a>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	200034e4 	.word	0x200034e4

0800796c <_lseek_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d07      	ldr	r5, [pc, #28]	@ (800798c <_lseek_r+0x20>)
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7fa f861 	bl	8001a42 <_lseek>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_lseek_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_lseek_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	200034e4 	.word	0x200034e4

08007990 <_read_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d07      	ldr	r5, [pc, #28]	@ (80079b0 <_read_r+0x20>)
 8007994:	4604      	mov	r4, r0
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	2200      	movs	r2, #0
 800799c:	602a      	str	r2, [r5, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f7fa f80b 	bl	80019ba <_read>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_read_r+0x1e>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_read_r+0x1e>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200034e4 	.word	0x200034e4

080079b4 <_write_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d07      	ldr	r5, [pc, #28]	@ (80079d4 <_write_r+0x20>)
 80079b8:	4604      	mov	r4, r0
 80079ba:	4608      	mov	r0, r1
 80079bc:	4611      	mov	r1, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7f9 fd64 	bl	8001490 <_write>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_write_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_write_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200034e4 	.word	0x200034e4

080079d8 <__errno>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	@ (80079e0 <__errno+0x8>)
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20002020 	.word	0x20002020

080079e4 <__libc_init_array>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4d0d      	ldr	r5, [pc, #52]	@ (8007a1c <__libc_init_array+0x38>)
 80079e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007a20 <__libc_init_array+0x3c>)
 80079ea:	1b64      	subs	r4, r4, r5
 80079ec:	10a4      	asrs	r4, r4, #2
 80079ee:	2600      	movs	r6, #0
 80079f0:	42a6      	cmp	r6, r4
 80079f2:	d109      	bne.n	8007a08 <__libc_init_array+0x24>
 80079f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007a24 <__libc_init_array+0x40>)
 80079f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007a28 <__libc_init_array+0x44>)
 80079f8:	f001 fee2 	bl	80097c0 <_init>
 80079fc:	1b64      	subs	r4, r4, r5
 80079fe:	10a4      	asrs	r4, r4, #2
 8007a00:	2600      	movs	r6, #0
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	d105      	bne.n	8007a12 <__libc_init_array+0x2e>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0c:	4798      	blx	r3
 8007a0e:	3601      	adds	r6, #1
 8007a10:	e7ee      	b.n	80079f0 <__libc_init_array+0xc>
 8007a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a16:	4798      	blx	r3
 8007a18:	3601      	adds	r6, #1
 8007a1a:	e7f2      	b.n	8007a02 <__libc_init_array+0x1e>
 8007a1c:	0800ca88 	.word	0x0800ca88
 8007a20:	0800ca88 	.word	0x0800ca88
 8007a24:	0800ca88 	.word	0x0800ca88
 8007a28:	0800ca8c 	.word	0x0800ca8c

08007a2c <__retarget_lock_init_recursive>:
 8007a2c:	4770      	bx	lr

08007a2e <__retarget_lock_acquire_recursive>:
 8007a2e:	4770      	bx	lr

08007a30 <__retarget_lock_release_recursive>:
 8007a30:	4770      	bx	lr

08007a32 <quorem>:
 8007a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a36:	6903      	ldr	r3, [r0, #16]
 8007a38:	690c      	ldr	r4, [r1, #16]
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	db7e      	blt.n	8007b3e <quorem+0x10c>
 8007a40:	3c01      	subs	r4, #1
 8007a42:	f101 0814 	add.w	r8, r1, #20
 8007a46:	00a3      	lsls	r3, r4, #2
 8007a48:	f100 0514 	add.w	r5, r0, #20
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a68:	d32e      	bcc.n	8007ac8 <quorem+0x96>
 8007a6a:	f04f 0a00 	mov.w	sl, #0
 8007a6e:	46c4      	mov	ip, r8
 8007a70:	46ae      	mov	lr, r5
 8007a72:	46d3      	mov	fp, sl
 8007a74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a78:	b298      	uxth	r0, r3
 8007a7a:	fb06 a000 	mla	r0, r6, r0, sl
 8007a7e:	0c02      	lsrs	r2, r0, #16
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	fb06 2303 	mla	r3, r6, r3, r2
 8007a86:	f8de 2000 	ldr.w	r2, [lr]
 8007a8a:	b280      	uxth	r0, r0
 8007a8c:	b292      	uxth	r2, r2
 8007a8e:	1a12      	subs	r2, r2, r0
 8007a90:	445a      	add	r2, fp
 8007a92:	f8de 0000 	ldr.w	r0, [lr]
 8007a96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007aa0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007aa4:	b292      	uxth	r2, r2
 8007aa6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007aaa:	45e1      	cmp	r9, ip
 8007aac:	f84e 2b04 	str.w	r2, [lr], #4
 8007ab0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ab4:	d2de      	bcs.n	8007a74 <quorem+0x42>
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	58eb      	ldr	r3, [r5, r3]
 8007aba:	b92b      	cbnz	r3, 8007ac8 <quorem+0x96>
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	429d      	cmp	r5, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	d32f      	bcc.n	8007b26 <quorem+0xf4>
 8007ac6:	613c      	str	r4, [r7, #16]
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f001 f97b 	bl	8008dc4 <__mcmp>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	db25      	blt.n	8007b1e <quorem+0xec>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ada:	f8d1 c000 	ldr.w	ip, [r1]
 8007ade:	fa1f fe82 	uxth.w	lr, r2
 8007ae2:	fa1f f38c 	uxth.w	r3, ip
 8007ae6:	eba3 030e 	sub.w	r3, r3, lr
 8007aea:	4403      	add	r3, r0
 8007aec:	0c12      	lsrs	r2, r2, #16
 8007aee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007af2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afc:	45c1      	cmp	r9, r8
 8007afe:	f841 3b04 	str.w	r3, [r1], #4
 8007b02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b06:	d2e6      	bcs.n	8007ad6 <quorem+0xa4>
 8007b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b10:	b922      	cbnz	r2, 8007b1c <quorem+0xea>
 8007b12:	3b04      	subs	r3, #4
 8007b14:	429d      	cmp	r5, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	d30b      	bcc.n	8007b32 <quorem+0x100>
 8007b1a:	613c      	str	r4, [r7, #16]
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	4630      	mov	r0, r6
 8007b20:	b003      	add	sp, #12
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1cb      	bne.n	8007ac6 <quorem+0x94>
 8007b2e:	3c01      	subs	r4, #1
 8007b30:	e7c6      	b.n	8007ac0 <quorem+0x8e>
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d1ef      	bne.n	8007b1a <quorem+0xe8>
 8007b3a:	3c01      	subs	r4, #1
 8007b3c:	e7ea      	b.n	8007b14 <quorem+0xe2>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	e7ee      	b.n	8007b20 <quorem+0xee>
 8007b42:	0000      	movs	r0, r0
 8007b44:	0000      	movs	r0, r0
	...

08007b48 <_dtoa_r>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	69c7      	ldr	r7, [r0, #28]
 8007b4e:	b099      	sub	sp, #100	@ 0x64
 8007b50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b54:	ec55 4b10 	vmov	r4, r5, d0
 8007b58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007b5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b5c:	4683      	mov	fp, r0
 8007b5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b62:	b97f      	cbnz	r7, 8007b84 <_dtoa_r+0x3c>
 8007b64:	2010      	movs	r0, #16
 8007b66:	f000 fdfd 	bl	8008764 <malloc>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b70:	b920      	cbnz	r0, 8007b7c <_dtoa_r+0x34>
 8007b72:	4ba7      	ldr	r3, [pc, #668]	@ (8007e10 <_dtoa_r+0x2c8>)
 8007b74:	21ef      	movs	r1, #239	@ 0xef
 8007b76:	48a7      	ldr	r0, [pc, #668]	@ (8007e14 <_dtoa_r+0x2cc>)
 8007b78:	f001 fccc 	bl	8009514 <__assert_func>
 8007b7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b80:	6007      	str	r7, [r0, #0]
 8007b82:	60c7      	str	r7, [r0, #12]
 8007b84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b88:	6819      	ldr	r1, [r3, #0]
 8007b8a:	b159      	cbz	r1, 8007ba4 <_dtoa_r+0x5c>
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	604a      	str	r2, [r1, #4]
 8007b90:	2301      	movs	r3, #1
 8007b92:	4093      	lsls	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 feda 	bl	8008950 <_Bfree>
 8007b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	1e2b      	subs	r3, r5, #0
 8007ba6:	bfb9      	ittee	lt
 8007ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bac:	9303      	strlt	r3, [sp, #12]
 8007bae:	2300      	movge	r3, #0
 8007bb0:	6033      	strge	r3, [r6, #0]
 8007bb2:	9f03      	ldr	r7, [sp, #12]
 8007bb4:	4b98      	ldr	r3, [pc, #608]	@ (8007e18 <_dtoa_r+0x2d0>)
 8007bb6:	bfbc      	itt	lt
 8007bb8:	2201      	movlt	r2, #1
 8007bba:	6032      	strlt	r2, [r6, #0]
 8007bbc:	43bb      	bics	r3, r7
 8007bbe:	d112      	bne.n	8007be6 <_dtoa_r+0x9e>
 8007bc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007bc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bcc:	4323      	orrs	r3, r4
 8007bce:	f000 854d 	beq.w	800866c <_dtoa_r+0xb24>
 8007bd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e2c <_dtoa_r+0x2e4>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 854f 	beq.w	800867c <_dtoa_r+0xb34>
 8007bde:	f10a 0303 	add.w	r3, sl, #3
 8007be2:	f000 bd49 	b.w	8008678 <_dtoa_r+0xb30>
 8007be6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	ec51 0b17 	vmov	r0, r1, d7
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007bf6:	f7f8 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	b158      	cbz	r0, 8007c16 <_dtoa_r+0xce>
 8007bfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c00:	2301      	movs	r3, #1
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c06:	b113      	cbz	r3, 8007c0e <_dtoa_r+0xc6>
 8007c08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c0a:	4b84      	ldr	r3, [pc, #528]	@ (8007e1c <_dtoa_r+0x2d4>)
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007e30 <_dtoa_r+0x2e8>
 8007c12:	f000 bd33 	b.w	800867c <_dtoa_r+0xb34>
 8007c16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c1a:	aa16      	add	r2, sp, #88	@ 0x58
 8007c1c:	a917      	add	r1, sp, #92	@ 0x5c
 8007c1e:	4658      	mov	r0, fp
 8007c20:	f001 f980 	bl	8008f24 <__d2b>
 8007c24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c28:	4681      	mov	r9, r0
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	d077      	beq.n	8007d1e <_dtoa_r+0x1d6>
 8007c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4b74      	ldr	r3, [pc, #464]	@ (8007e20 <_dtoa_r+0x2d8>)
 8007c4e:	f7f8 fb23 	bl	8000298 <__aeabi_dsub>
 8007c52:	a369      	add	r3, pc, #420	@ (adr r3, 8007df8 <_dtoa_r+0x2b0>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fcd6 	bl	8000608 <__aeabi_dmul>
 8007c5c:	a368      	add	r3, pc, #416	@ (adr r3, 8007e00 <_dtoa_r+0x2b8>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fb1b 	bl	800029c <__adddf3>
 8007c66:	4604      	mov	r4, r0
 8007c68:	4630      	mov	r0, r6
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	f7f8 fc62 	bl	8000534 <__aeabi_i2d>
 8007c70:	a365      	add	r3, pc, #404	@ (adr r3, 8007e08 <_dtoa_r+0x2c0>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fcc7 	bl	8000608 <__aeabi_dmul>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4629      	mov	r1, r5
 8007c82:	f7f8 fb0b 	bl	800029c <__adddf3>
 8007c86:	4604      	mov	r4, r0
 8007c88:	460d      	mov	r5, r1
 8007c8a:	f7f8 ff6d 	bl	8000b68 <__aeabi_d2iz>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4607      	mov	r7, r0
 8007c92:	2300      	movs	r3, #0
 8007c94:	4620      	mov	r0, r4
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7f8 ff28 	bl	8000aec <__aeabi_dcmplt>
 8007c9c:	b140      	cbz	r0, 8007cb0 <_dtoa_r+0x168>
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f7f8 fc48 	bl	8000534 <__aeabi_i2d>
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	f7f8 ff16 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cac:	b900      	cbnz	r0, 8007cb0 <_dtoa_r+0x168>
 8007cae:	3f01      	subs	r7, #1
 8007cb0:	2f16      	cmp	r7, #22
 8007cb2:	d851      	bhi.n	8007d58 <_dtoa_r+0x210>
 8007cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e24 <_dtoa_r+0x2dc>)
 8007cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cc2:	f7f8 ff13 	bl	8000aec <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d048      	beq.n	8007d5c <_dtoa_r+0x214>
 8007cca:	3f01      	subs	r7, #1
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9312      	str	r3, [sp, #72]	@ 0x48
 8007cd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007cd2:	1b9b      	subs	r3, r3, r6
 8007cd4:	1e5a      	subs	r2, r3, #1
 8007cd6:	bf44      	itt	mi
 8007cd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007cdc:	2300      	movmi	r3, #0
 8007cde:	9208      	str	r2, [sp, #32]
 8007ce0:	bf54      	ite	pl
 8007ce2:	f04f 0800 	movpl.w	r8, #0
 8007ce6:	9308      	strmi	r3, [sp, #32]
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	db39      	blt.n	8007d60 <_dtoa_r+0x218>
 8007cec:	9b08      	ldr	r3, [sp, #32]
 8007cee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007cf0:	443b      	add	r3, r7
 8007cf2:	9308      	str	r3, [sp, #32]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfa:	2b09      	cmp	r3, #9
 8007cfc:	d864      	bhi.n	8007dc8 <_dtoa_r+0x280>
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	bfc4      	itt	gt
 8007d02:	3b04      	subgt	r3, #4
 8007d04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d08:	f1a3 0302 	sub.w	r3, r3, #2
 8007d0c:	bfcc      	ite	gt
 8007d0e:	2400      	movgt	r4, #0
 8007d10:	2401      	movle	r4, #1
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d863      	bhi.n	8007dde <_dtoa_r+0x296>
 8007d16:	e8df f003 	tbb	[pc, r3]
 8007d1a:	372a      	.short	0x372a
 8007d1c:	5535      	.short	0x5535
 8007d1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d22:	441e      	add	r6, r3
 8007d24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	bfc1      	itttt	gt
 8007d2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d30:	409f      	lslgt	r7, r3
 8007d32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d3a:	bfd6      	itet	le
 8007d3c:	f1c3 0320 	rsble	r3, r3, #32
 8007d40:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d44:	fa04 f003 	lslle.w	r0, r4, r3
 8007d48:	f7f8 fbe4 	bl	8000514 <__aeabi_ui2d>
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d52:	3e01      	subs	r6, #1
 8007d54:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d56:	e777      	b.n	8007c48 <_dtoa_r+0x100>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e7b8      	b.n	8007cce <_dtoa_r+0x186>
 8007d5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007d5e:	e7b7      	b.n	8007cd0 <_dtoa_r+0x188>
 8007d60:	427b      	negs	r3, r7
 8007d62:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d64:	2300      	movs	r3, #0
 8007d66:	eba8 0807 	sub.w	r8, r8, r7
 8007d6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d6c:	e7c4      	b.n	8007cf8 <_dtoa_r+0x1b0>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dc35      	bgt.n	8007de4 <_dtoa_r+0x29c>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	9307      	str	r3, [sp, #28]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d82:	e00b      	b.n	8007d9c <_dtoa_r+0x254>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e7f3      	b.n	8007d70 <_dtoa_r+0x228>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	3301      	adds	r3, #1
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	bfb8      	it	lt
 8007d9a:	2301      	movlt	r3, #1
 8007d9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007da0:	2100      	movs	r1, #0
 8007da2:	2204      	movs	r2, #4
 8007da4:	f102 0514 	add.w	r5, r2, #20
 8007da8:	429d      	cmp	r5, r3
 8007daa:	d91f      	bls.n	8007dec <_dtoa_r+0x2a4>
 8007dac:	6041      	str	r1, [r0, #4]
 8007dae:	4658      	mov	r0, fp
 8007db0:	f000 fd8e 	bl	80088d0 <_Balloc>
 8007db4:	4682      	mov	sl, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d13c      	bne.n	8007e34 <_dtoa_r+0x2ec>
 8007dba:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <_dtoa_r+0x2e0>)
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007dc2:	e6d8      	b.n	8007b76 <_dtoa_r+0x2e>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e7e0      	b.n	8007d8a <_dtoa_r+0x242>
 8007dc8:	2401      	movs	r4, #1
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2312      	movs	r3, #18
 8007ddc:	e7d0      	b.n	8007d80 <_dtoa_r+0x238>
 8007dde:	2301      	movs	r3, #1
 8007de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de2:	e7f5      	b.n	8007dd0 <_dtoa_r+0x288>
 8007de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	e7d7      	b.n	8007d9c <_dtoa_r+0x254>
 8007dec:	3101      	adds	r1, #1
 8007dee:	0052      	lsls	r2, r2, #1
 8007df0:	e7d8      	b.n	8007da4 <_dtoa_r+0x25c>
 8007df2:	bf00      	nop
 8007df4:	f3af 8000 	nop.w
 8007df8:	636f4361 	.word	0x636f4361
 8007dfc:	3fd287a7 	.word	0x3fd287a7
 8007e00:	8b60c8b3 	.word	0x8b60c8b3
 8007e04:	3fc68a28 	.word	0x3fc68a28
 8007e08:	509f79fb 	.word	0x509f79fb
 8007e0c:	3fd34413 	.word	0x3fd34413
 8007e10:	0800c751 	.word	0x0800c751
 8007e14:	0800c768 	.word	0x0800c768
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	0800c721 	.word	0x0800c721
 8007e20:	3ff80000 	.word	0x3ff80000
 8007e24:	0800c860 	.word	0x0800c860
 8007e28:	0800c7c0 	.word	0x0800c7c0
 8007e2c:	0800c74d 	.word	0x0800c74d
 8007e30:	0800c720 	.word	0x0800c720
 8007e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e38:	6018      	str	r0, [r3, #0]
 8007e3a:	9b07      	ldr	r3, [sp, #28]
 8007e3c:	2b0e      	cmp	r3, #14
 8007e3e:	f200 80a4 	bhi.w	8007f8a <_dtoa_r+0x442>
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	f000 80a1 	beq.w	8007f8a <_dtoa_r+0x442>
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	dd33      	ble.n	8007eb4 <_dtoa_r+0x36c>
 8007e4c:	4bad      	ldr	r3, [pc, #692]	@ (8008104 <_dtoa_r+0x5bc>)
 8007e4e:	f007 020f 	and.w	r2, r7, #15
 8007e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e56:	ed93 7b00 	vldr	d7, [r3]
 8007e5a:	05f8      	lsls	r0, r7, #23
 8007e5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e64:	d516      	bpl.n	8007e94 <_dtoa_r+0x34c>
 8007e66:	4ba8      	ldr	r3, [pc, #672]	@ (8008108 <_dtoa_r+0x5c0>)
 8007e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e70:	f7f8 fcf4 	bl	800085c <__aeabi_ddiv>
 8007e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e78:	f004 040f 	and.w	r4, r4, #15
 8007e7c:	2603      	movs	r6, #3
 8007e7e:	4da2      	ldr	r5, [pc, #648]	@ (8008108 <_dtoa_r+0x5c0>)
 8007e80:	b954      	cbnz	r4, 8007e98 <_dtoa_r+0x350>
 8007e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8a:	f7f8 fce7 	bl	800085c <__aeabi_ddiv>
 8007e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e92:	e028      	b.n	8007ee6 <_dtoa_r+0x39e>
 8007e94:	2602      	movs	r6, #2
 8007e96:	e7f2      	b.n	8007e7e <_dtoa_r+0x336>
 8007e98:	07e1      	lsls	r1, r4, #31
 8007e9a:	d508      	bpl.n	8007eae <_dtoa_r+0x366>
 8007e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ea0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ea4:	f7f8 fbb0 	bl	8000608 <__aeabi_dmul>
 8007ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eac:	3601      	adds	r6, #1
 8007eae:	1064      	asrs	r4, r4, #1
 8007eb0:	3508      	adds	r5, #8
 8007eb2:	e7e5      	b.n	8007e80 <_dtoa_r+0x338>
 8007eb4:	f000 80d2 	beq.w	800805c <_dtoa_r+0x514>
 8007eb8:	427c      	negs	r4, r7
 8007eba:	4b92      	ldr	r3, [pc, #584]	@ (8008104 <_dtoa_r+0x5bc>)
 8007ebc:	4d92      	ldr	r5, [pc, #584]	@ (8008108 <_dtoa_r+0x5c0>)
 8007ebe:	f004 020f 	and.w	r2, r4, #15
 8007ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ece:	f7f8 fb9b 	bl	8000608 <__aeabi_dmul>
 8007ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed6:	1124      	asrs	r4, r4, #4
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2602      	movs	r6, #2
 8007edc:	2c00      	cmp	r4, #0
 8007ede:	f040 80b2 	bne.w	8008046 <_dtoa_r+0x4fe>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1d3      	bne.n	8007e8e <_dtoa_r+0x346>
 8007ee6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ee8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80b7 	beq.w	8008060 <_dtoa_r+0x518>
 8007ef2:	4b86      	ldr	r3, [pc, #536]	@ (800810c <_dtoa_r+0x5c4>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fdf7 	bl	8000aec <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f000 80ae 	beq.w	8008060 <_dtoa_r+0x518>
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80aa 	beq.w	8008060 <_dtoa_r+0x518>
 8007f0c:	9b00      	ldr	r3, [sp, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dd37      	ble.n	8007f82 <_dtoa_r+0x43a>
 8007f12:	1e7b      	subs	r3, r7, #1
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	4620      	mov	r0, r4
 8007f18:	4b7d      	ldr	r3, [pc, #500]	@ (8008110 <_dtoa_r+0x5c8>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f7f8 fb73 	bl	8000608 <__aeabi_dmul>
 8007f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f26:	9c00      	ldr	r4, [sp, #0]
 8007f28:	3601      	adds	r6, #1
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7f8 fb02 	bl	8000534 <__aeabi_i2d>
 8007f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f34:	f7f8 fb68 	bl	8000608 <__aeabi_dmul>
 8007f38:	4b76      	ldr	r3, [pc, #472]	@ (8008114 <_dtoa_r+0x5cc>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f7f8 f9ae 	bl	800029c <__adddf3>
 8007f40:	4605      	mov	r5, r0
 8007f42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	f040 808d 	bne.w	8008066 <_dtoa_r+0x51e>
 8007f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f50:	4b71      	ldr	r3, [pc, #452]	@ (8008118 <_dtoa_r+0x5d0>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	f7f8 f9a0 	bl	8000298 <__aeabi_dsub>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4633      	mov	r3, r6
 8007f64:	f7f8 fde0 	bl	8000b28 <__aeabi_dcmpgt>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f040 828b 	bne.w	8008484 <_dtoa_r+0x93c>
 8007f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f72:	462a      	mov	r2, r5
 8007f74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f78:	f7f8 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f040 8128 	bne.w	80081d2 <_dtoa_r+0x68a>
 8007f82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f2c0 815a 	blt.w	8008246 <_dtoa_r+0x6fe>
 8007f92:	2f0e      	cmp	r7, #14
 8007f94:	f300 8157 	bgt.w	8008246 <_dtoa_r+0x6fe>
 8007f98:	4b5a      	ldr	r3, [pc, #360]	@ (8008104 <_dtoa_r+0x5bc>)
 8007f9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f9e:	ed93 7b00 	vldr	d7, [r3]
 8007fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	ed8d 7b00 	vstr	d7, [sp]
 8007faa:	da03      	bge.n	8007fb4 <_dtoa_r+0x46c>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f340 8101 	ble.w	80081b6 <_dtoa_r+0x66e>
 8007fb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007fb8:	4656      	mov	r6, sl
 8007fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 fc4b 	bl	800085c <__aeabi_ddiv>
 8007fc6:	f7f8 fdcf 	bl	8000b68 <__aeabi_d2iz>
 8007fca:	4680      	mov	r8, r0
 8007fcc:	f7f8 fab2 	bl	8000534 <__aeabi_i2d>
 8007fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fd4:	f7f8 fb18 	bl	8000608 <__aeabi_dmul>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4620      	mov	r0, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007fe4:	f7f8 f958 	bl	8000298 <__aeabi_dsub>
 8007fe8:	f806 4b01 	strb.w	r4, [r6], #1
 8007fec:	9d07      	ldr	r5, [sp, #28]
 8007fee:	eba6 040a 	sub.w	r4, r6, sl
 8007ff2:	42a5      	cmp	r5, r4
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	f040 8117 	bne.w	800822a <_dtoa_r+0x6e2>
 8007ffc:	f7f8 f94e 	bl	800029c <__adddf3>
 8008000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	f7f8 fd8e 	bl	8000b28 <__aeabi_dcmpgt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f040 80f9 	bne.w	8008204 <_dtoa_r+0x6bc>
 8008012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800801e:	b118      	cbz	r0, 8008028 <_dtoa_r+0x4e0>
 8008020:	f018 0f01 	tst.w	r8, #1
 8008024:	f040 80ee 	bne.w	8008204 <_dtoa_r+0x6bc>
 8008028:	4649      	mov	r1, r9
 800802a:	4658      	mov	r0, fp
 800802c:	f000 fc90 	bl	8008950 <_Bfree>
 8008030:	2300      	movs	r3, #0
 8008032:	7033      	strb	r3, [r6, #0]
 8008034:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008036:	3701      	adds	r7, #1
 8008038:	601f      	str	r7, [r3, #0]
 800803a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 831d 	beq.w	800867c <_dtoa_r+0xb34>
 8008042:	601e      	str	r6, [r3, #0]
 8008044:	e31a      	b.n	800867c <_dtoa_r+0xb34>
 8008046:	07e2      	lsls	r2, r4, #31
 8008048:	d505      	bpl.n	8008056 <_dtoa_r+0x50e>
 800804a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800804e:	f7f8 fadb 	bl	8000608 <__aeabi_dmul>
 8008052:	3601      	adds	r6, #1
 8008054:	2301      	movs	r3, #1
 8008056:	1064      	asrs	r4, r4, #1
 8008058:	3508      	adds	r5, #8
 800805a:	e73f      	b.n	8007edc <_dtoa_r+0x394>
 800805c:	2602      	movs	r6, #2
 800805e:	e742      	b.n	8007ee6 <_dtoa_r+0x39e>
 8008060:	9c07      	ldr	r4, [sp, #28]
 8008062:	9704      	str	r7, [sp, #16]
 8008064:	e761      	b.n	8007f2a <_dtoa_r+0x3e2>
 8008066:	4b27      	ldr	r3, [pc, #156]	@ (8008104 <_dtoa_r+0x5bc>)
 8008068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800806a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800806e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008072:	4454      	add	r4, sl
 8008074:	2900      	cmp	r1, #0
 8008076:	d053      	beq.n	8008120 <_dtoa_r+0x5d8>
 8008078:	4928      	ldr	r1, [pc, #160]	@ (800811c <_dtoa_r+0x5d4>)
 800807a:	2000      	movs	r0, #0
 800807c:	f7f8 fbee 	bl	800085c <__aeabi_ddiv>
 8008080:	4633      	mov	r3, r6
 8008082:	462a      	mov	r2, r5
 8008084:	f7f8 f908 	bl	8000298 <__aeabi_dsub>
 8008088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800808c:	4656      	mov	r6, sl
 800808e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008092:	f7f8 fd69 	bl	8000b68 <__aeabi_d2iz>
 8008096:	4605      	mov	r5, r0
 8008098:	f7f8 fa4c 	bl	8000534 <__aeabi_i2d>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a4:	f7f8 f8f8 	bl	8000298 <__aeabi_dsub>
 80080a8:	3530      	adds	r5, #48	@ 0x30
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080b2:	f806 5b01 	strb.w	r5, [r6], #1
 80080b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080ba:	f7f8 fd17 	bl	8000aec <__aeabi_dcmplt>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d171      	bne.n	80081a6 <_dtoa_r+0x65e>
 80080c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c6:	4911      	ldr	r1, [pc, #68]	@ (800810c <_dtoa_r+0x5c4>)
 80080c8:	2000      	movs	r0, #0
 80080ca:	f7f8 f8e5 	bl	8000298 <__aeabi_dsub>
 80080ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080d2:	f7f8 fd0b 	bl	8000aec <__aeabi_dcmplt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f040 8095 	bne.w	8008206 <_dtoa_r+0x6be>
 80080dc:	42a6      	cmp	r6, r4
 80080de:	f43f af50 	beq.w	8007f82 <_dtoa_r+0x43a>
 80080e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008110 <_dtoa_r+0x5c8>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	f7f8 fa8d 	bl	8000608 <__aeabi_dmul>
 80080ee:	4b08      	ldr	r3, [pc, #32]	@ (8008110 <_dtoa_r+0x5c8>)
 80080f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080f4:	2200      	movs	r2, #0
 80080f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fa:	f7f8 fa85 	bl	8000608 <__aeabi_dmul>
 80080fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008102:	e7c4      	b.n	800808e <_dtoa_r+0x546>
 8008104:	0800c860 	.word	0x0800c860
 8008108:	0800c838 	.word	0x0800c838
 800810c:	3ff00000 	.word	0x3ff00000
 8008110:	40240000 	.word	0x40240000
 8008114:	401c0000 	.word	0x401c0000
 8008118:	40140000 	.word	0x40140000
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	f7f8 fa70 	bl	8000608 <__aeabi_dmul>
 8008128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800812c:	9415      	str	r4, [sp, #84]	@ 0x54
 800812e:	4656      	mov	r6, sl
 8008130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008134:	f7f8 fd18 	bl	8000b68 <__aeabi_d2iz>
 8008138:	4605      	mov	r5, r0
 800813a:	f7f8 f9fb 	bl	8000534 <__aeabi_i2d>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008146:	f7f8 f8a7 	bl	8000298 <__aeabi_dsub>
 800814a:	3530      	adds	r5, #48	@ 0x30
 800814c:	f806 5b01 	strb.w	r5, [r6], #1
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	42a6      	cmp	r6, r4
 8008156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800815a:	f04f 0200 	mov.w	r2, #0
 800815e:	d124      	bne.n	80081aa <_dtoa_r+0x662>
 8008160:	4bac      	ldr	r3, [pc, #688]	@ (8008414 <_dtoa_r+0x8cc>)
 8008162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008166:	f7f8 f899 	bl	800029c <__adddf3>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008172:	f7f8 fcd9 	bl	8000b28 <__aeabi_dcmpgt>
 8008176:	2800      	cmp	r0, #0
 8008178:	d145      	bne.n	8008206 <_dtoa_r+0x6be>
 800817a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800817e:	49a5      	ldr	r1, [pc, #660]	@ (8008414 <_dtoa_r+0x8cc>)
 8008180:	2000      	movs	r0, #0
 8008182:	f7f8 f889 	bl	8000298 <__aeabi_dsub>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818e:	f7f8 fcad 	bl	8000aec <__aeabi_dcmplt>
 8008192:	2800      	cmp	r0, #0
 8008194:	f43f aef5 	beq.w	8007f82 <_dtoa_r+0x43a>
 8008198:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800819a:	1e73      	subs	r3, r6, #1
 800819c:	9315      	str	r3, [sp, #84]	@ 0x54
 800819e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081a2:	2b30      	cmp	r3, #48	@ 0x30
 80081a4:	d0f8      	beq.n	8008198 <_dtoa_r+0x650>
 80081a6:	9f04      	ldr	r7, [sp, #16]
 80081a8:	e73e      	b.n	8008028 <_dtoa_r+0x4e0>
 80081aa:	4b9b      	ldr	r3, [pc, #620]	@ (8008418 <_dtoa_r+0x8d0>)
 80081ac:	f7f8 fa2c 	bl	8000608 <__aeabi_dmul>
 80081b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b4:	e7bc      	b.n	8008130 <_dtoa_r+0x5e8>
 80081b6:	d10c      	bne.n	80081d2 <_dtoa_r+0x68a>
 80081b8:	4b98      	ldr	r3, [pc, #608]	@ (800841c <_dtoa_r+0x8d4>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081c0:	f7f8 fa22 	bl	8000608 <__aeabi_dmul>
 80081c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081c8:	f7f8 fca4 	bl	8000b14 <__aeabi_dcmpge>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f000 8157 	beq.w	8008480 <_dtoa_r+0x938>
 80081d2:	2400      	movs	r4, #0
 80081d4:	4625      	mov	r5, r4
 80081d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d8:	43db      	mvns	r3, r3
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	4656      	mov	r6, sl
 80081de:	2700      	movs	r7, #0
 80081e0:	4621      	mov	r1, r4
 80081e2:	4658      	mov	r0, fp
 80081e4:	f000 fbb4 	bl	8008950 <_Bfree>
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	d0dc      	beq.n	80081a6 <_dtoa_r+0x65e>
 80081ec:	b12f      	cbz	r7, 80081fa <_dtoa_r+0x6b2>
 80081ee:	42af      	cmp	r7, r5
 80081f0:	d003      	beq.n	80081fa <_dtoa_r+0x6b2>
 80081f2:	4639      	mov	r1, r7
 80081f4:	4658      	mov	r0, fp
 80081f6:	f000 fbab 	bl	8008950 <_Bfree>
 80081fa:	4629      	mov	r1, r5
 80081fc:	4658      	mov	r0, fp
 80081fe:	f000 fba7 	bl	8008950 <_Bfree>
 8008202:	e7d0      	b.n	80081a6 <_dtoa_r+0x65e>
 8008204:	9704      	str	r7, [sp, #16]
 8008206:	4633      	mov	r3, r6
 8008208:	461e      	mov	r6, r3
 800820a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800820e:	2a39      	cmp	r2, #57	@ 0x39
 8008210:	d107      	bne.n	8008222 <_dtoa_r+0x6da>
 8008212:	459a      	cmp	sl, r3
 8008214:	d1f8      	bne.n	8008208 <_dtoa_r+0x6c0>
 8008216:	9a04      	ldr	r2, [sp, #16]
 8008218:	3201      	adds	r2, #1
 800821a:	9204      	str	r2, [sp, #16]
 800821c:	2230      	movs	r2, #48	@ 0x30
 800821e:	f88a 2000 	strb.w	r2, [sl]
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	3201      	adds	r2, #1
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e7bd      	b.n	80081a6 <_dtoa_r+0x65e>
 800822a:	4b7b      	ldr	r3, [pc, #492]	@ (8008418 <_dtoa_r+0x8d0>)
 800822c:	2200      	movs	r2, #0
 800822e:	f7f8 f9eb 	bl	8000608 <__aeabi_dmul>
 8008232:	2200      	movs	r2, #0
 8008234:	2300      	movs	r3, #0
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	f7f8 fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f aebb 	beq.w	8007fba <_dtoa_r+0x472>
 8008244:	e6f0      	b.n	8008028 <_dtoa_r+0x4e0>
 8008246:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008248:	2a00      	cmp	r2, #0
 800824a:	f000 80db 	beq.w	8008404 <_dtoa_r+0x8bc>
 800824e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008250:	2a01      	cmp	r2, #1
 8008252:	f300 80bf 	bgt.w	80083d4 <_dtoa_r+0x88c>
 8008256:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008258:	2a00      	cmp	r2, #0
 800825a:	f000 80b7 	beq.w	80083cc <_dtoa_r+0x884>
 800825e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008262:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008264:	4646      	mov	r6, r8
 8008266:	9a08      	ldr	r2, [sp, #32]
 8008268:	2101      	movs	r1, #1
 800826a:	441a      	add	r2, r3
 800826c:	4658      	mov	r0, fp
 800826e:	4498      	add	r8, r3
 8008270:	9208      	str	r2, [sp, #32]
 8008272:	f000 fc21 	bl	8008ab8 <__i2b>
 8008276:	4605      	mov	r5, r0
 8008278:	b15e      	cbz	r6, 8008292 <_dtoa_r+0x74a>
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd08      	ble.n	8008292 <_dtoa_r+0x74a>
 8008280:	42b3      	cmp	r3, r6
 8008282:	9a08      	ldr	r2, [sp, #32]
 8008284:	bfa8      	it	ge
 8008286:	4633      	movge	r3, r6
 8008288:	eba8 0803 	sub.w	r8, r8, r3
 800828c:	1af6      	subs	r6, r6, r3
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	9308      	str	r3, [sp, #32]
 8008292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008294:	b1f3      	cbz	r3, 80082d4 <_dtoa_r+0x78c>
 8008296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80b7 	beq.w	800840c <_dtoa_r+0x8c4>
 800829e:	b18c      	cbz	r4, 80082c4 <_dtoa_r+0x77c>
 80082a0:	4629      	mov	r1, r5
 80082a2:	4622      	mov	r2, r4
 80082a4:	4658      	mov	r0, fp
 80082a6:	f000 fcc7 	bl	8008c38 <__pow5mult>
 80082aa:	464a      	mov	r2, r9
 80082ac:	4601      	mov	r1, r0
 80082ae:	4605      	mov	r5, r0
 80082b0:	4658      	mov	r0, fp
 80082b2:	f000 fc17 	bl	8008ae4 <__multiply>
 80082b6:	4649      	mov	r1, r9
 80082b8:	9004      	str	r0, [sp, #16]
 80082ba:	4658      	mov	r0, fp
 80082bc:	f000 fb48 	bl	8008950 <_Bfree>
 80082c0:	9b04      	ldr	r3, [sp, #16]
 80082c2:	4699      	mov	r9, r3
 80082c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c6:	1b1a      	subs	r2, r3, r4
 80082c8:	d004      	beq.n	80082d4 <_dtoa_r+0x78c>
 80082ca:	4649      	mov	r1, r9
 80082cc:	4658      	mov	r0, fp
 80082ce:	f000 fcb3 	bl	8008c38 <__pow5mult>
 80082d2:	4681      	mov	r9, r0
 80082d4:	2101      	movs	r1, #1
 80082d6:	4658      	mov	r0, fp
 80082d8:	f000 fbee 	bl	8008ab8 <__i2b>
 80082dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082de:	4604      	mov	r4, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 81cf 	beq.w	8008684 <_dtoa_r+0xb3c>
 80082e6:	461a      	mov	r2, r3
 80082e8:	4601      	mov	r1, r0
 80082ea:	4658      	mov	r0, fp
 80082ec:	f000 fca4 	bl	8008c38 <__pow5mult>
 80082f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	4604      	mov	r4, r0
 80082f6:	f300 8095 	bgt.w	8008424 <_dtoa_r+0x8dc>
 80082fa:	9b02      	ldr	r3, [sp, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 8087 	bne.w	8008410 <_dtoa_r+0x8c8>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008308:	2b00      	cmp	r3, #0
 800830a:	f040 8089 	bne.w	8008420 <_dtoa_r+0x8d8>
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008314:	0d1b      	lsrs	r3, r3, #20
 8008316:	051b      	lsls	r3, r3, #20
 8008318:	b12b      	cbz	r3, 8008326 <_dtoa_r+0x7de>
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	3301      	adds	r3, #1
 800831e:	9308      	str	r3, [sp, #32]
 8008320:	f108 0801 	add.w	r8, r8, #1
 8008324:	2301      	movs	r3, #1
 8008326:	930a      	str	r3, [sp, #40]	@ 0x28
 8008328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 81b0 	beq.w	8008690 <_dtoa_r+0xb48>
 8008330:	6923      	ldr	r3, [r4, #16]
 8008332:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008336:	6918      	ldr	r0, [r3, #16]
 8008338:	f000 fb72 	bl	8008a20 <__hi0bits>
 800833c:	f1c0 0020 	rsb	r0, r0, #32
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	4418      	add	r0, r3
 8008344:	f010 001f 	ands.w	r0, r0, #31
 8008348:	d077      	beq.n	800843a <_dtoa_r+0x8f2>
 800834a:	f1c0 0320 	rsb	r3, r0, #32
 800834e:	2b04      	cmp	r3, #4
 8008350:	dd6b      	ble.n	800842a <_dtoa_r+0x8e2>
 8008352:	9b08      	ldr	r3, [sp, #32]
 8008354:	f1c0 001c 	rsb	r0, r0, #28
 8008358:	4403      	add	r3, r0
 800835a:	4480      	add	r8, r0
 800835c:	4406      	add	r6, r0
 800835e:	9308      	str	r3, [sp, #32]
 8008360:	f1b8 0f00 	cmp.w	r8, #0
 8008364:	dd05      	ble.n	8008372 <_dtoa_r+0x82a>
 8008366:	4649      	mov	r1, r9
 8008368:	4642      	mov	r2, r8
 800836a:	4658      	mov	r0, fp
 800836c:	f000 fcbe 	bl	8008cec <__lshift>
 8008370:	4681      	mov	r9, r0
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	2b00      	cmp	r3, #0
 8008376:	dd05      	ble.n	8008384 <_dtoa_r+0x83c>
 8008378:	4621      	mov	r1, r4
 800837a:	461a      	mov	r2, r3
 800837c:	4658      	mov	r0, fp
 800837e:	f000 fcb5 	bl	8008cec <__lshift>
 8008382:	4604      	mov	r4, r0
 8008384:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008386:	2b00      	cmp	r3, #0
 8008388:	d059      	beq.n	800843e <_dtoa_r+0x8f6>
 800838a:	4621      	mov	r1, r4
 800838c:	4648      	mov	r0, r9
 800838e:	f000 fd19 	bl	8008dc4 <__mcmp>
 8008392:	2800      	cmp	r0, #0
 8008394:	da53      	bge.n	800843e <_dtoa_r+0x8f6>
 8008396:	1e7b      	subs	r3, r7, #1
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	4649      	mov	r1, r9
 800839c:	2300      	movs	r3, #0
 800839e:	220a      	movs	r2, #10
 80083a0:	4658      	mov	r0, fp
 80083a2:	f000 faf7 	bl	8008994 <__multadd>
 80083a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a8:	4681      	mov	r9, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8172 	beq.w	8008694 <_dtoa_r+0xb4c>
 80083b0:	2300      	movs	r3, #0
 80083b2:	4629      	mov	r1, r5
 80083b4:	220a      	movs	r2, #10
 80083b6:	4658      	mov	r0, fp
 80083b8:	f000 faec 	bl	8008994 <__multadd>
 80083bc:	9b00      	ldr	r3, [sp, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	4605      	mov	r5, r0
 80083c2:	dc67      	bgt.n	8008494 <_dtoa_r+0x94c>
 80083c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	dc41      	bgt.n	800844e <_dtoa_r+0x906>
 80083ca:	e063      	b.n	8008494 <_dtoa_r+0x94c>
 80083cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083d2:	e746      	b.n	8008262 <_dtoa_r+0x71a>
 80083d4:	9b07      	ldr	r3, [sp, #28]
 80083d6:	1e5c      	subs	r4, r3, #1
 80083d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083da:	42a3      	cmp	r3, r4
 80083dc:	bfbf      	itttt	lt
 80083de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80083e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80083e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80083e4:	1ae3      	sublt	r3, r4, r3
 80083e6:	bfb4      	ite	lt
 80083e8:	18d2      	addlt	r2, r2, r3
 80083ea:	1b1c      	subge	r4, r3, r4
 80083ec:	9b07      	ldr	r3, [sp, #28]
 80083ee:	bfbc      	itt	lt
 80083f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80083f2:	2400      	movlt	r4, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfb5      	itete	lt
 80083f8:	eba8 0603 	sublt.w	r6, r8, r3
 80083fc:	9b07      	ldrge	r3, [sp, #28]
 80083fe:	2300      	movlt	r3, #0
 8008400:	4646      	movge	r6, r8
 8008402:	e730      	b.n	8008266 <_dtoa_r+0x71e>
 8008404:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008406:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008408:	4646      	mov	r6, r8
 800840a:	e735      	b.n	8008278 <_dtoa_r+0x730>
 800840c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800840e:	e75c      	b.n	80082ca <_dtoa_r+0x782>
 8008410:	2300      	movs	r3, #0
 8008412:	e788      	b.n	8008326 <_dtoa_r+0x7de>
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	40240000 	.word	0x40240000
 800841c:	40140000 	.word	0x40140000
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	e780      	b.n	8008326 <_dtoa_r+0x7de>
 8008424:	2300      	movs	r3, #0
 8008426:	930a      	str	r3, [sp, #40]	@ 0x28
 8008428:	e782      	b.n	8008330 <_dtoa_r+0x7e8>
 800842a:	d099      	beq.n	8008360 <_dtoa_r+0x818>
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	331c      	adds	r3, #28
 8008430:	441a      	add	r2, r3
 8008432:	4498      	add	r8, r3
 8008434:	441e      	add	r6, r3
 8008436:	9208      	str	r2, [sp, #32]
 8008438:	e792      	b.n	8008360 <_dtoa_r+0x818>
 800843a:	4603      	mov	r3, r0
 800843c:	e7f6      	b.n	800842c <_dtoa_r+0x8e4>
 800843e:	9b07      	ldr	r3, [sp, #28]
 8008440:	9704      	str	r7, [sp, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc20      	bgt.n	8008488 <_dtoa_r+0x940>
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844a:	2b02      	cmp	r3, #2
 800844c:	dd1e      	ble.n	800848c <_dtoa_r+0x944>
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f47f aec0 	bne.w	80081d6 <_dtoa_r+0x68e>
 8008456:	4621      	mov	r1, r4
 8008458:	2205      	movs	r2, #5
 800845a:	4658      	mov	r0, fp
 800845c:	f000 fa9a 	bl	8008994 <__multadd>
 8008460:	4601      	mov	r1, r0
 8008462:	4604      	mov	r4, r0
 8008464:	4648      	mov	r0, r9
 8008466:	f000 fcad 	bl	8008dc4 <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	f77f aeb3 	ble.w	80081d6 <_dtoa_r+0x68e>
 8008470:	4656      	mov	r6, sl
 8008472:	2331      	movs	r3, #49	@ 0x31
 8008474:	f806 3b01 	strb.w	r3, [r6], #1
 8008478:	9b04      	ldr	r3, [sp, #16]
 800847a:	3301      	adds	r3, #1
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	e6ae      	b.n	80081de <_dtoa_r+0x696>
 8008480:	9c07      	ldr	r4, [sp, #28]
 8008482:	9704      	str	r7, [sp, #16]
 8008484:	4625      	mov	r5, r4
 8008486:	e7f3      	b.n	8008470 <_dtoa_r+0x928>
 8008488:	9b07      	ldr	r3, [sp, #28]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8104 	beq.w	800869c <_dtoa_r+0xb54>
 8008494:	2e00      	cmp	r6, #0
 8008496:	dd05      	ble.n	80084a4 <_dtoa_r+0x95c>
 8008498:	4629      	mov	r1, r5
 800849a:	4632      	mov	r2, r6
 800849c:	4658      	mov	r0, fp
 800849e:	f000 fc25 	bl	8008cec <__lshift>
 80084a2:	4605      	mov	r5, r0
 80084a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d05a      	beq.n	8008560 <_dtoa_r+0xa18>
 80084aa:	6869      	ldr	r1, [r5, #4]
 80084ac:	4658      	mov	r0, fp
 80084ae:	f000 fa0f 	bl	80088d0 <_Balloc>
 80084b2:	4606      	mov	r6, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <_dtoa_r+0x97a>
 80084b6:	4b84      	ldr	r3, [pc, #528]	@ (80086c8 <_dtoa_r+0xb80>)
 80084b8:	4602      	mov	r2, r0
 80084ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80084be:	f7ff bb5a 	b.w	8007b76 <_dtoa_r+0x2e>
 80084c2:	692a      	ldr	r2, [r5, #16]
 80084c4:	3202      	adds	r2, #2
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	f105 010c 	add.w	r1, r5, #12
 80084cc:	300c      	adds	r0, #12
 80084ce:	f001 f813 	bl	80094f8 <memcpy>
 80084d2:	2201      	movs	r2, #1
 80084d4:	4631      	mov	r1, r6
 80084d6:	4658      	mov	r0, fp
 80084d8:	f000 fc08 	bl	8008cec <__lshift>
 80084dc:	f10a 0301 	add.w	r3, sl, #1
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	9b00      	ldr	r3, [sp, #0]
 80084e4:	4453      	add	r3, sl
 80084e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	462f      	mov	r7, r5
 80084f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80084f2:	4605      	mov	r5, r0
 80084f4:	9b07      	ldr	r3, [sp, #28]
 80084f6:	4621      	mov	r1, r4
 80084f8:	3b01      	subs	r3, #1
 80084fa:	4648      	mov	r0, r9
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	f7ff fa98 	bl	8007a32 <quorem>
 8008502:	4639      	mov	r1, r7
 8008504:	9002      	str	r0, [sp, #8]
 8008506:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800850a:	4648      	mov	r0, r9
 800850c:	f000 fc5a 	bl	8008dc4 <__mcmp>
 8008510:	462a      	mov	r2, r5
 8008512:	9008      	str	r0, [sp, #32]
 8008514:	4621      	mov	r1, r4
 8008516:	4658      	mov	r0, fp
 8008518:	f000 fc70 	bl	8008dfc <__mdiff>
 800851c:	68c2      	ldr	r2, [r0, #12]
 800851e:	4606      	mov	r6, r0
 8008520:	bb02      	cbnz	r2, 8008564 <_dtoa_r+0xa1c>
 8008522:	4601      	mov	r1, r0
 8008524:	4648      	mov	r0, r9
 8008526:	f000 fc4d 	bl	8008dc4 <__mcmp>
 800852a:	4602      	mov	r2, r0
 800852c:	4631      	mov	r1, r6
 800852e:	4658      	mov	r0, fp
 8008530:	920e      	str	r2, [sp, #56]	@ 0x38
 8008532:	f000 fa0d 	bl	8008950 <_Bfree>
 8008536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008538:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800853a:	9e07      	ldr	r6, [sp, #28]
 800853c:	ea43 0102 	orr.w	r1, r3, r2
 8008540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008542:	4319      	orrs	r1, r3
 8008544:	d110      	bne.n	8008568 <_dtoa_r+0xa20>
 8008546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800854a:	d029      	beq.n	80085a0 <_dtoa_r+0xa58>
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd02      	ble.n	8008558 <_dtoa_r+0xa10>
 8008552:	9b02      	ldr	r3, [sp, #8]
 8008554:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	f883 8000 	strb.w	r8, [r3]
 800855e:	e63f      	b.n	80081e0 <_dtoa_r+0x698>
 8008560:	4628      	mov	r0, r5
 8008562:	e7bb      	b.n	80084dc <_dtoa_r+0x994>
 8008564:	2201      	movs	r2, #1
 8008566:	e7e1      	b.n	800852c <_dtoa_r+0x9e4>
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	db04      	blt.n	8008578 <_dtoa_r+0xa30>
 800856e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008570:	430b      	orrs	r3, r1
 8008572:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008574:	430b      	orrs	r3, r1
 8008576:	d120      	bne.n	80085ba <_dtoa_r+0xa72>
 8008578:	2a00      	cmp	r2, #0
 800857a:	dded      	ble.n	8008558 <_dtoa_r+0xa10>
 800857c:	4649      	mov	r1, r9
 800857e:	2201      	movs	r2, #1
 8008580:	4658      	mov	r0, fp
 8008582:	f000 fbb3 	bl	8008cec <__lshift>
 8008586:	4621      	mov	r1, r4
 8008588:	4681      	mov	r9, r0
 800858a:	f000 fc1b 	bl	8008dc4 <__mcmp>
 800858e:	2800      	cmp	r0, #0
 8008590:	dc03      	bgt.n	800859a <_dtoa_r+0xa52>
 8008592:	d1e1      	bne.n	8008558 <_dtoa_r+0xa10>
 8008594:	f018 0f01 	tst.w	r8, #1
 8008598:	d0de      	beq.n	8008558 <_dtoa_r+0xa10>
 800859a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800859e:	d1d8      	bne.n	8008552 <_dtoa_r+0xa0a>
 80085a0:	9a00      	ldr	r2, [sp, #0]
 80085a2:	2339      	movs	r3, #57	@ 0x39
 80085a4:	7013      	strb	r3, [r2, #0]
 80085a6:	4633      	mov	r3, r6
 80085a8:	461e      	mov	r6, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085b0:	2a39      	cmp	r2, #57	@ 0x39
 80085b2:	d052      	beq.n	800865a <_dtoa_r+0xb12>
 80085b4:	3201      	adds	r2, #1
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	e612      	b.n	80081e0 <_dtoa_r+0x698>
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	dd07      	ble.n	80085ce <_dtoa_r+0xa86>
 80085be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085c2:	d0ed      	beq.n	80085a0 <_dtoa_r+0xa58>
 80085c4:	9a00      	ldr	r2, [sp, #0]
 80085c6:	f108 0301 	add.w	r3, r8, #1
 80085ca:	7013      	strb	r3, [r2, #0]
 80085cc:	e608      	b.n	80081e0 <_dtoa_r+0x698>
 80085ce:	9b07      	ldr	r3, [sp, #28]
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80085d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085d8:	4293      	cmp	r3, r2
 80085da:	d028      	beq.n	800862e <_dtoa_r+0xae6>
 80085dc:	4649      	mov	r1, r9
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	4658      	mov	r0, fp
 80085e4:	f000 f9d6 	bl	8008994 <__multadd>
 80085e8:	42af      	cmp	r7, r5
 80085ea:	4681      	mov	r9, r0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	f04f 020a 	mov.w	r2, #10
 80085f4:	4639      	mov	r1, r7
 80085f6:	4658      	mov	r0, fp
 80085f8:	d107      	bne.n	800860a <_dtoa_r+0xac2>
 80085fa:	f000 f9cb 	bl	8008994 <__multadd>
 80085fe:	4607      	mov	r7, r0
 8008600:	4605      	mov	r5, r0
 8008602:	9b07      	ldr	r3, [sp, #28]
 8008604:	3301      	adds	r3, #1
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	e774      	b.n	80084f4 <_dtoa_r+0x9ac>
 800860a:	f000 f9c3 	bl	8008994 <__multadd>
 800860e:	4629      	mov	r1, r5
 8008610:	4607      	mov	r7, r0
 8008612:	2300      	movs	r3, #0
 8008614:	220a      	movs	r2, #10
 8008616:	4658      	mov	r0, fp
 8008618:	f000 f9bc 	bl	8008994 <__multadd>
 800861c:	4605      	mov	r5, r0
 800861e:	e7f0      	b.n	8008602 <_dtoa_r+0xaba>
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	bfcc      	ite	gt
 8008626:	461e      	movgt	r6, r3
 8008628:	2601      	movle	r6, #1
 800862a:	4456      	add	r6, sl
 800862c:	2700      	movs	r7, #0
 800862e:	4649      	mov	r1, r9
 8008630:	2201      	movs	r2, #1
 8008632:	4658      	mov	r0, fp
 8008634:	f000 fb5a 	bl	8008cec <__lshift>
 8008638:	4621      	mov	r1, r4
 800863a:	4681      	mov	r9, r0
 800863c:	f000 fbc2 	bl	8008dc4 <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	dcb0      	bgt.n	80085a6 <_dtoa_r+0xa5e>
 8008644:	d102      	bne.n	800864c <_dtoa_r+0xb04>
 8008646:	f018 0f01 	tst.w	r8, #1
 800864a:	d1ac      	bne.n	80085a6 <_dtoa_r+0xa5e>
 800864c:	4633      	mov	r3, r6
 800864e:	461e      	mov	r6, r3
 8008650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008654:	2a30      	cmp	r2, #48	@ 0x30
 8008656:	d0fa      	beq.n	800864e <_dtoa_r+0xb06>
 8008658:	e5c2      	b.n	80081e0 <_dtoa_r+0x698>
 800865a:	459a      	cmp	sl, r3
 800865c:	d1a4      	bne.n	80085a8 <_dtoa_r+0xa60>
 800865e:	9b04      	ldr	r3, [sp, #16]
 8008660:	3301      	adds	r3, #1
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	2331      	movs	r3, #49	@ 0x31
 8008666:	f88a 3000 	strb.w	r3, [sl]
 800866a:	e5b9      	b.n	80081e0 <_dtoa_r+0x698>
 800866c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800866e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80086cc <_dtoa_r+0xb84>
 8008672:	b11b      	cbz	r3, 800867c <_dtoa_r+0xb34>
 8008674:	f10a 0308 	add.w	r3, sl, #8
 8008678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	4650      	mov	r0, sl
 800867e:	b019      	add	sp, #100	@ 0x64
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008686:	2b01      	cmp	r3, #1
 8008688:	f77f ae37 	ble.w	80082fa <_dtoa_r+0x7b2>
 800868c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800868e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008690:	2001      	movs	r0, #1
 8008692:	e655      	b.n	8008340 <_dtoa_r+0x7f8>
 8008694:	9b00      	ldr	r3, [sp, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f77f aed6 	ble.w	8008448 <_dtoa_r+0x900>
 800869c:	4656      	mov	r6, sl
 800869e:	4621      	mov	r1, r4
 80086a0:	4648      	mov	r0, r9
 80086a2:	f7ff f9c6 	bl	8007a32 <quorem>
 80086a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086aa:	f806 8b01 	strb.w	r8, [r6], #1
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	eba6 020a 	sub.w	r2, r6, sl
 80086b4:	4293      	cmp	r3, r2
 80086b6:	ddb3      	ble.n	8008620 <_dtoa_r+0xad8>
 80086b8:	4649      	mov	r1, r9
 80086ba:	2300      	movs	r3, #0
 80086bc:	220a      	movs	r2, #10
 80086be:	4658      	mov	r0, fp
 80086c0:	f000 f968 	bl	8008994 <__multadd>
 80086c4:	4681      	mov	r9, r0
 80086c6:	e7ea      	b.n	800869e <_dtoa_r+0xb56>
 80086c8:	0800c7c0 	.word	0x0800c7c0
 80086cc:	0800c744 	.word	0x0800c744

080086d0 <_free_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4605      	mov	r5, r0
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d041      	beq.n	800875c <_free_r+0x8c>
 80086d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086dc:	1f0c      	subs	r4, r1, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bfb8      	it	lt
 80086e2:	18e4      	addlt	r4, r4, r3
 80086e4:	f000 f8e8 	bl	80088b8 <__malloc_lock>
 80086e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008760 <_free_r+0x90>)
 80086ea:	6813      	ldr	r3, [r2, #0]
 80086ec:	b933      	cbnz	r3, 80086fc <_free_r+0x2c>
 80086ee:	6063      	str	r3, [r4, #4]
 80086f0:	6014      	str	r4, [r2, #0]
 80086f2:	4628      	mov	r0, r5
 80086f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f8:	f000 b8e4 	b.w	80088c4 <__malloc_unlock>
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	d908      	bls.n	8008712 <_free_r+0x42>
 8008700:	6820      	ldr	r0, [r4, #0]
 8008702:	1821      	adds	r1, r4, r0
 8008704:	428b      	cmp	r3, r1
 8008706:	bf01      	itttt	eq
 8008708:	6819      	ldreq	r1, [r3, #0]
 800870a:	685b      	ldreq	r3, [r3, #4]
 800870c:	1809      	addeq	r1, r1, r0
 800870e:	6021      	streq	r1, [r4, #0]
 8008710:	e7ed      	b.n	80086ee <_free_r+0x1e>
 8008712:	461a      	mov	r2, r3
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b10b      	cbz	r3, 800871c <_free_r+0x4c>
 8008718:	42a3      	cmp	r3, r4
 800871a:	d9fa      	bls.n	8008712 <_free_r+0x42>
 800871c:	6811      	ldr	r1, [r2, #0]
 800871e:	1850      	adds	r0, r2, r1
 8008720:	42a0      	cmp	r0, r4
 8008722:	d10b      	bne.n	800873c <_free_r+0x6c>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	4401      	add	r1, r0
 8008728:	1850      	adds	r0, r2, r1
 800872a:	4283      	cmp	r3, r0
 800872c:	6011      	str	r1, [r2, #0]
 800872e:	d1e0      	bne.n	80086f2 <_free_r+0x22>
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	6053      	str	r3, [r2, #4]
 8008736:	4408      	add	r0, r1
 8008738:	6010      	str	r0, [r2, #0]
 800873a:	e7da      	b.n	80086f2 <_free_r+0x22>
 800873c:	d902      	bls.n	8008744 <_free_r+0x74>
 800873e:	230c      	movs	r3, #12
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	e7d6      	b.n	80086f2 <_free_r+0x22>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	1821      	adds	r1, r4, r0
 8008748:	428b      	cmp	r3, r1
 800874a:	bf04      	itt	eq
 800874c:	6819      	ldreq	r1, [r3, #0]
 800874e:	685b      	ldreq	r3, [r3, #4]
 8008750:	6063      	str	r3, [r4, #4]
 8008752:	bf04      	itt	eq
 8008754:	1809      	addeq	r1, r1, r0
 8008756:	6021      	streq	r1, [r4, #0]
 8008758:	6054      	str	r4, [r2, #4]
 800875a:	e7ca      	b.n	80086f2 <_free_r+0x22>
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	200034f0 	.word	0x200034f0

08008764 <malloc>:
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <malloc+0xc>)
 8008766:	4601      	mov	r1, r0
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f000 b825 	b.w	80087b8 <_malloc_r>
 800876e:	bf00      	nop
 8008770:	20002020 	.word	0x20002020

08008774 <sbrk_aligned>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	4e0f      	ldr	r6, [pc, #60]	@ (80087b4 <sbrk_aligned+0x40>)
 8008778:	460c      	mov	r4, r1
 800877a:	6831      	ldr	r1, [r6, #0]
 800877c:	4605      	mov	r5, r0
 800877e:	b911      	cbnz	r1, 8008786 <sbrk_aligned+0x12>
 8008780:	f000 feaa 	bl	80094d8 <_sbrk_r>
 8008784:	6030      	str	r0, [r6, #0]
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f000 fea5 	bl	80094d8 <_sbrk_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d103      	bne.n	800879a <sbrk_aligned+0x26>
 8008792:	f04f 34ff 	mov.w	r4, #4294967295
 8008796:	4620      	mov	r0, r4
 8008798:	bd70      	pop	{r4, r5, r6, pc}
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d0f8      	beq.n	8008796 <sbrk_aligned+0x22>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 fe96 	bl	80094d8 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d1f2      	bne.n	8008796 <sbrk_aligned+0x22>
 80087b0:	e7ef      	b.n	8008792 <sbrk_aligned+0x1e>
 80087b2:	bf00      	nop
 80087b4:	200034ec 	.word	0x200034ec

080087b8 <_malloc_r>:
 80087b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	1ccd      	adds	r5, r1, #3
 80087be:	f025 0503 	bic.w	r5, r5, #3
 80087c2:	3508      	adds	r5, #8
 80087c4:	2d0c      	cmp	r5, #12
 80087c6:	bf38      	it	cc
 80087c8:	250c      	movcc	r5, #12
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	4606      	mov	r6, r0
 80087ce:	db01      	blt.n	80087d4 <_malloc_r+0x1c>
 80087d0:	42a9      	cmp	r1, r5
 80087d2:	d904      	bls.n	80087de <_malloc_r+0x26>
 80087d4:	230c      	movs	r3, #12
 80087d6:	6033      	str	r3, [r6, #0]
 80087d8:	2000      	movs	r0, #0
 80087da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088b4 <_malloc_r+0xfc>
 80087e2:	f000 f869 	bl	80088b8 <__malloc_lock>
 80087e6:	f8d8 3000 	ldr.w	r3, [r8]
 80087ea:	461c      	mov	r4, r3
 80087ec:	bb44      	cbnz	r4, 8008840 <_malloc_r+0x88>
 80087ee:	4629      	mov	r1, r5
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff ffbf 	bl	8008774 <sbrk_aligned>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	4604      	mov	r4, r0
 80087fa:	d158      	bne.n	80088ae <_malloc_r+0xf6>
 80087fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008800:	4627      	mov	r7, r4
 8008802:	2f00      	cmp	r7, #0
 8008804:	d143      	bne.n	800888e <_malloc_r+0xd6>
 8008806:	2c00      	cmp	r4, #0
 8008808:	d04b      	beq.n	80088a2 <_malloc_r+0xea>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	4639      	mov	r1, r7
 800880e:	4630      	mov	r0, r6
 8008810:	eb04 0903 	add.w	r9, r4, r3
 8008814:	f000 fe60 	bl	80094d8 <_sbrk_r>
 8008818:	4581      	cmp	r9, r0
 800881a:	d142      	bne.n	80088a2 <_malloc_r+0xea>
 800881c:	6821      	ldr	r1, [r4, #0]
 800881e:	1a6d      	subs	r5, r5, r1
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff ffa6 	bl	8008774 <sbrk_aligned>
 8008828:	3001      	adds	r0, #1
 800882a:	d03a      	beq.n	80088a2 <_malloc_r+0xea>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	442b      	add	r3, r5
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	f8d8 3000 	ldr.w	r3, [r8]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	bb62      	cbnz	r2, 8008894 <_malloc_r+0xdc>
 800883a:	f8c8 7000 	str.w	r7, [r8]
 800883e:	e00f      	b.n	8008860 <_malloc_r+0xa8>
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	1b52      	subs	r2, r2, r5
 8008844:	d420      	bmi.n	8008888 <_malloc_r+0xd0>
 8008846:	2a0b      	cmp	r2, #11
 8008848:	d917      	bls.n	800887a <_malloc_r+0xc2>
 800884a:	1961      	adds	r1, r4, r5
 800884c:	42a3      	cmp	r3, r4
 800884e:	6025      	str	r5, [r4, #0]
 8008850:	bf18      	it	ne
 8008852:	6059      	strne	r1, [r3, #4]
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	bf08      	it	eq
 8008858:	f8c8 1000 	streq.w	r1, [r8]
 800885c:	5162      	str	r2, [r4, r5]
 800885e:	604b      	str	r3, [r1, #4]
 8008860:	4630      	mov	r0, r6
 8008862:	f000 f82f 	bl	80088c4 <__malloc_unlock>
 8008866:	f104 000b 	add.w	r0, r4, #11
 800886a:	1d23      	adds	r3, r4, #4
 800886c:	f020 0007 	bic.w	r0, r0, #7
 8008870:	1ac2      	subs	r2, r0, r3
 8008872:	bf1c      	itt	ne
 8008874:	1a1b      	subne	r3, r3, r0
 8008876:	50a3      	strne	r3, [r4, r2]
 8008878:	e7af      	b.n	80087da <_malloc_r+0x22>
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	42a3      	cmp	r3, r4
 800887e:	bf0c      	ite	eq
 8008880:	f8c8 2000 	streq.w	r2, [r8]
 8008884:	605a      	strne	r2, [r3, #4]
 8008886:	e7eb      	b.n	8008860 <_malloc_r+0xa8>
 8008888:	4623      	mov	r3, r4
 800888a:	6864      	ldr	r4, [r4, #4]
 800888c:	e7ae      	b.n	80087ec <_malloc_r+0x34>
 800888e:	463c      	mov	r4, r7
 8008890:	687f      	ldr	r7, [r7, #4]
 8008892:	e7b6      	b.n	8008802 <_malloc_r+0x4a>
 8008894:	461a      	mov	r2, r3
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	42a3      	cmp	r3, r4
 800889a:	d1fb      	bne.n	8008894 <_malloc_r+0xdc>
 800889c:	2300      	movs	r3, #0
 800889e:	6053      	str	r3, [r2, #4]
 80088a0:	e7de      	b.n	8008860 <_malloc_r+0xa8>
 80088a2:	230c      	movs	r3, #12
 80088a4:	6033      	str	r3, [r6, #0]
 80088a6:	4630      	mov	r0, r6
 80088a8:	f000 f80c 	bl	80088c4 <__malloc_unlock>
 80088ac:	e794      	b.n	80087d8 <_malloc_r+0x20>
 80088ae:	6005      	str	r5, [r0, #0]
 80088b0:	e7d6      	b.n	8008860 <_malloc_r+0xa8>
 80088b2:	bf00      	nop
 80088b4:	200034f0 	.word	0x200034f0

080088b8 <__malloc_lock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	@ (80088c0 <__malloc_lock+0x8>)
 80088ba:	f7ff b8b8 	b.w	8007a2e <__retarget_lock_acquire_recursive>
 80088be:	bf00      	nop
 80088c0:	200034e8 	.word	0x200034e8

080088c4 <__malloc_unlock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	@ (80088cc <__malloc_unlock+0x8>)
 80088c6:	f7ff b8b3 	b.w	8007a30 <__retarget_lock_release_recursive>
 80088ca:	bf00      	nop
 80088cc:	200034e8 	.word	0x200034e8

080088d0 <_Balloc>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	69c6      	ldr	r6, [r0, #28]
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	b976      	cbnz	r6, 80088f8 <_Balloc+0x28>
 80088da:	2010      	movs	r0, #16
 80088dc:	f7ff ff42 	bl	8008764 <malloc>
 80088e0:	4602      	mov	r2, r0
 80088e2:	61e0      	str	r0, [r4, #28]
 80088e4:	b920      	cbnz	r0, 80088f0 <_Balloc+0x20>
 80088e6:	4b18      	ldr	r3, [pc, #96]	@ (8008948 <_Balloc+0x78>)
 80088e8:	4818      	ldr	r0, [pc, #96]	@ (800894c <_Balloc+0x7c>)
 80088ea:	216b      	movs	r1, #107	@ 0x6b
 80088ec:	f000 fe12 	bl	8009514 <__assert_func>
 80088f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088f4:	6006      	str	r6, [r0, #0]
 80088f6:	60c6      	str	r6, [r0, #12]
 80088f8:	69e6      	ldr	r6, [r4, #28]
 80088fa:	68f3      	ldr	r3, [r6, #12]
 80088fc:	b183      	cbz	r3, 8008920 <_Balloc+0x50>
 80088fe:	69e3      	ldr	r3, [r4, #28]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008906:	b9b8      	cbnz	r0, 8008938 <_Balloc+0x68>
 8008908:	2101      	movs	r1, #1
 800890a:	fa01 f605 	lsl.w	r6, r1, r5
 800890e:	1d72      	adds	r2, r6, #5
 8008910:	0092      	lsls	r2, r2, #2
 8008912:	4620      	mov	r0, r4
 8008914:	f000 fe1c 	bl	8009550 <_calloc_r>
 8008918:	b160      	cbz	r0, 8008934 <_Balloc+0x64>
 800891a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800891e:	e00e      	b.n	800893e <_Balloc+0x6e>
 8008920:	2221      	movs	r2, #33	@ 0x21
 8008922:	2104      	movs	r1, #4
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fe13 	bl	8009550 <_calloc_r>
 800892a:	69e3      	ldr	r3, [r4, #28]
 800892c:	60f0      	str	r0, [r6, #12]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e4      	bne.n	80088fe <_Balloc+0x2e>
 8008934:	2000      	movs	r0, #0
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	6802      	ldr	r2, [r0, #0]
 800893a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800893e:	2300      	movs	r3, #0
 8008940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008944:	e7f7      	b.n	8008936 <_Balloc+0x66>
 8008946:	bf00      	nop
 8008948:	0800c751 	.word	0x0800c751
 800894c:	0800c7d1 	.word	0x0800c7d1

08008950 <_Bfree>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	69c6      	ldr	r6, [r0, #28]
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	b976      	cbnz	r6, 8008978 <_Bfree+0x28>
 800895a:	2010      	movs	r0, #16
 800895c:	f7ff ff02 	bl	8008764 <malloc>
 8008960:	4602      	mov	r2, r0
 8008962:	61e8      	str	r0, [r5, #28]
 8008964:	b920      	cbnz	r0, 8008970 <_Bfree+0x20>
 8008966:	4b09      	ldr	r3, [pc, #36]	@ (800898c <_Bfree+0x3c>)
 8008968:	4809      	ldr	r0, [pc, #36]	@ (8008990 <_Bfree+0x40>)
 800896a:	218f      	movs	r1, #143	@ 0x8f
 800896c:	f000 fdd2 	bl	8009514 <__assert_func>
 8008970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008974:	6006      	str	r6, [r0, #0]
 8008976:	60c6      	str	r6, [r0, #12]
 8008978:	b13c      	cbz	r4, 800898a <_Bfree+0x3a>
 800897a:	69eb      	ldr	r3, [r5, #28]
 800897c:	6862      	ldr	r2, [r4, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008984:	6021      	str	r1, [r4, #0]
 8008986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	0800c751 	.word	0x0800c751
 8008990:	0800c7d1 	.word	0x0800c7d1

08008994 <__multadd>:
 8008994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008998:	690d      	ldr	r5, [r1, #16]
 800899a:	4607      	mov	r7, r0
 800899c:	460c      	mov	r4, r1
 800899e:	461e      	mov	r6, r3
 80089a0:	f101 0c14 	add.w	ip, r1, #20
 80089a4:	2000      	movs	r0, #0
 80089a6:	f8dc 3000 	ldr.w	r3, [ip]
 80089aa:	b299      	uxth	r1, r3
 80089ac:	fb02 6101 	mla	r1, r2, r1, r6
 80089b0:	0c1e      	lsrs	r6, r3, #16
 80089b2:	0c0b      	lsrs	r3, r1, #16
 80089b4:	fb02 3306 	mla	r3, r2, r6, r3
 80089b8:	b289      	uxth	r1, r1
 80089ba:	3001      	adds	r0, #1
 80089bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089c0:	4285      	cmp	r5, r0
 80089c2:	f84c 1b04 	str.w	r1, [ip], #4
 80089c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089ca:	dcec      	bgt.n	80089a6 <__multadd+0x12>
 80089cc:	b30e      	cbz	r6, 8008a12 <__multadd+0x7e>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	dc19      	bgt.n	8008a08 <__multadd+0x74>
 80089d4:	6861      	ldr	r1, [r4, #4]
 80089d6:	4638      	mov	r0, r7
 80089d8:	3101      	adds	r1, #1
 80089da:	f7ff ff79 	bl	80088d0 <_Balloc>
 80089de:	4680      	mov	r8, r0
 80089e0:	b928      	cbnz	r0, 80089ee <__multadd+0x5a>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008a18 <__multadd+0x84>)
 80089e6:	480d      	ldr	r0, [pc, #52]	@ (8008a1c <__multadd+0x88>)
 80089e8:	21ba      	movs	r1, #186	@ 0xba
 80089ea:	f000 fd93 	bl	8009514 <__assert_func>
 80089ee:	6922      	ldr	r2, [r4, #16]
 80089f0:	3202      	adds	r2, #2
 80089f2:	f104 010c 	add.w	r1, r4, #12
 80089f6:	0092      	lsls	r2, r2, #2
 80089f8:	300c      	adds	r0, #12
 80089fa:	f000 fd7d 	bl	80094f8 <memcpy>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ffa5 	bl	8008950 <_Bfree>
 8008a06:	4644      	mov	r4, r8
 8008a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	615e      	str	r6, [r3, #20]
 8008a10:	6125      	str	r5, [r4, #16]
 8008a12:	4620      	mov	r0, r4
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a18:	0800c7c0 	.word	0x0800c7c0
 8008a1c:	0800c7d1 	.word	0x0800c7d1

08008a20 <__hi0bits>:
 8008a20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a24:	4603      	mov	r3, r0
 8008a26:	bf36      	itet	cc
 8008a28:	0403      	lslcc	r3, r0, #16
 8008a2a:	2000      	movcs	r0, #0
 8008a2c:	2010      	movcc	r0, #16
 8008a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a32:	bf3c      	itt	cc
 8008a34:	021b      	lslcc	r3, r3, #8
 8008a36:	3008      	addcc	r0, #8
 8008a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a3c:	bf3c      	itt	cc
 8008a3e:	011b      	lslcc	r3, r3, #4
 8008a40:	3004      	addcc	r0, #4
 8008a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a46:	bf3c      	itt	cc
 8008a48:	009b      	lslcc	r3, r3, #2
 8008a4a:	3002      	addcc	r0, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	db05      	blt.n	8008a5c <__hi0bits+0x3c>
 8008a50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a54:	f100 0001 	add.w	r0, r0, #1
 8008a58:	bf08      	it	eq
 8008a5a:	2020      	moveq	r0, #32
 8008a5c:	4770      	bx	lr

08008a5e <__lo0bits>:
 8008a5e:	6803      	ldr	r3, [r0, #0]
 8008a60:	4602      	mov	r2, r0
 8008a62:	f013 0007 	ands.w	r0, r3, #7
 8008a66:	d00b      	beq.n	8008a80 <__lo0bits+0x22>
 8008a68:	07d9      	lsls	r1, r3, #31
 8008a6a:	d421      	bmi.n	8008ab0 <__lo0bits+0x52>
 8008a6c:	0798      	lsls	r0, r3, #30
 8008a6e:	bf49      	itett	mi
 8008a70:	085b      	lsrmi	r3, r3, #1
 8008a72:	089b      	lsrpl	r3, r3, #2
 8008a74:	2001      	movmi	r0, #1
 8008a76:	6013      	strmi	r3, [r2, #0]
 8008a78:	bf5c      	itt	pl
 8008a7a:	6013      	strpl	r3, [r2, #0]
 8008a7c:	2002      	movpl	r0, #2
 8008a7e:	4770      	bx	lr
 8008a80:	b299      	uxth	r1, r3
 8008a82:	b909      	cbnz	r1, 8008a88 <__lo0bits+0x2a>
 8008a84:	0c1b      	lsrs	r3, r3, #16
 8008a86:	2010      	movs	r0, #16
 8008a88:	b2d9      	uxtb	r1, r3
 8008a8a:	b909      	cbnz	r1, 8008a90 <__lo0bits+0x32>
 8008a8c:	3008      	adds	r0, #8
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	0719      	lsls	r1, r3, #28
 8008a92:	bf04      	itt	eq
 8008a94:	091b      	lsreq	r3, r3, #4
 8008a96:	3004      	addeq	r0, #4
 8008a98:	0799      	lsls	r1, r3, #30
 8008a9a:	bf04      	itt	eq
 8008a9c:	089b      	lsreq	r3, r3, #2
 8008a9e:	3002      	addeq	r0, #2
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d403      	bmi.n	8008aac <__lo0bits+0x4e>
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	f100 0001 	add.w	r0, r0, #1
 8008aaa:	d003      	beq.n	8008ab4 <__lo0bits+0x56>
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	4770      	bx	lr
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4770      	bx	lr
 8008ab4:	2020      	movs	r0, #32
 8008ab6:	4770      	bx	lr

08008ab8 <__i2b>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	460c      	mov	r4, r1
 8008abc:	2101      	movs	r1, #1
 8008abe:	f7ff ff07 	bl	80088d0 <_Balloc>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	b928      	cbnz	r0, 8008ad2 <__i2b+0x1a>
 8008ac6:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <__i2b+0x24>)
 8008ac8:	4805      	ldr	r0, [pc, #20]	@ (8008ae0 <__i2b+0x28>)
 8008aca:	f240 1145 	movw	r1, #325	@ 0x145
 8008ace:	f000 fd21 	bl	8009514 <__assert_func>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6144      	str	r4, [r0, #20]
 8008ad6:	6103      	str	r3, [r0, #16]
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	0800c7c0 	.word	0x0800c7c0
 8008ae0:	0800c7d1 	.word	0x0800c7d1

08008ae4 <__multiply>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4614      	mov	r4, r2
 8008aea:	690a      	ldr	r2, [r1, #16]
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	bfa8      	it	ge
 8008af2:	4623      	movge	r3, r4
 8008af4:	460f      	mov	r7, r1
 8008af6:	bfa4      	itt	ge
 8008af8:	460c      	movge	r4, r1
 8008afa:	461f      	movge	r7, r3
 8008afc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	6861      	ldr	r1, [r4, #4]
 8008b08:	eb0a 0609 	add.w	r6, sl, r9
 8008b0c:	42b3      	cmp	r3, r6
 8008b0e:	b085      	sub	sp, #20
 8008b10:	bfb8      	it	lt
 8008b12:	3101      	addlt	r1, #1
 8008b14:	f7ff fedc 	bl	80088d0 <_Balloc>
 8008b18:	b930      	cbnz	r0, 8008b28 <__multiply+0x44>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b44      	ldr	r3, [pc, #272]	@ (8008c30 <__multiply+0x14c>)
 8008b1e:	4845      	ldr	r0, [pc, #276]	@ (8008c34 <__multiply+0x150>)
 8008b20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b24:	f000 fcf6 	bl	8009514 <__assert_func>
 8008b28:	f100 0514 	add.w	r5, r0, #20
 8008b2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b30:	462b      	mov	r3, r5
 8008b32:	2200      	movs	r2, #0
 8008b34:	4543      	cmp	r3, r8
 8008b36:	d321      	bcc.n	8008b7c <__multiply+0x98>
 8008b38:	f107 0114 	add.w	r1, r7, #20
 8008b3c:	f104 0214 	add.w	r2, r4, #20
 8008b40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	1b13      	subs	r3, r2, r4
 8008b4c:	3b15      	subs	r3, #21
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	3304      	adds	r3, #4
 8008b54:	f104 0715 	add.w	r7, r4, #21
 8008b58:	42ba      	cmp	r2, r7
 8008b5a:	bf38      	it	cc
 8008b5c:	2304      	movcc	r3, #4
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	9103      	str	r1, [sp, #12]
 8008b64:	428b      	cmp	r3, r1
 8008b66:	d80c      	bhi.n	8008b82 <__multiply+0x9e>
 8008b68:	2e00      	cmp	r6, #0
 8008b6a:	dd03      	ble.n	8008b74 <__multiply+0x90>
 8008b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05b      	beq.n	8008c2c <__multiply+0x148>
 8008b74:	6106      	str	r6, [r0, #16]
 8008b76:	b005      	add	sp, #20
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	f843 2b04 	str.w	r2, [r3], #4
 8008b80:	e7d8      	b.n	8008b34 <__multiply+0x50>
 8008b82:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b86:	f1ba 0f00 	cmp.w	sl, #0
 8008b8a:	d024      	beq.n	8008bd6 <__multiply+0xf2>
 8008b8c:	f104 0e14 	add.w	lr, r4, #20
 8008b90:	46a9      	mov	r9, r5
 8008b92:	f04f 0c00 	mov.w	ip, #0
 8008b96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b9a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b9e:	fa1f fb87 	uxth.w	fp, r7
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ba8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008bac:	f8d9 7000 	ldr.w	r7, [r9]
 8008bb0:	4463      	add	r3, ip
 8008bb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008bba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bc4:	4572      	cmp	r2, lr
 8008bc6:	f849 3b04 	str.w	r3, [r9], #4
 8008bca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bce:	d8e2      	bhi.n	8008b96 <__multiply+0xb2>
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	f845 c003 	str.w	ip, [r5, r3]
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008bdc:	3104      	adds	r1, #4
 8008bde:	f1b9 0f00 	cmp.w	r9, #0
 8008be2:	d021      	beq.n	8008c28 <__multiply+0x144>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	f104 0c14 	add.w	ip, r4, #20
 8008bea:	46ae      	mov	lr, r5
 8008bec:	f04f 0a00 	mov.w	sl, #0
 8008bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8008bf4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008bf8:	fb09 770b 	mla	r7, r9, fp, r7
 8008bfc:	4457      	add	r7, sl
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c04:	f84e 3b04 	str.w	r3, [lr], #4
 8008c08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c10:	f8be 3000 	ldrh.w	r3, [lr]
 8008c14:	fb09 330a 	mla	r3, r9, sl, r3
 8008c18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c1c:	4562      	cmp	r2, ip
 8008c1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c22:	d8e5      	bhi.n	8008bf0 <__multiply+0x10c>
 8008c24:	9f01      	ldr	r7, [sp, #4]
 8008c26:	51eb      	str	r3, [r5, r7]
 8008c28:	3504      	adds	r5, #4
 8008c2a:	e799      	b.n	8008b60 <__multiply+0x7c>
 8008c2c:	3e01      	subs	r6, #1
 8008c2e:	e79b      	b.n	8008b68 <__multiply+0x84>
 8008c30:	0800c7c0 	.word	0x0800c7c0
 8008c34:	0800c7d1 	.word	0x0800c7d1

08008c38 <__pow5mult>:
 8008c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c3c:	4615      	mov	r5, r2
 8008c3e:	f012 0203 	ands.w	r2, r2, #3
 8008c42:	4607      	mov	r7, r0
 8008c44:	460e      	mov	r6, r1
 8008c46:	d007      	beq.n	8008c58 <__pow5mult+0x20>
 8008c48:	4c25      	ldr	r4, [pc, #148]	@ (8008ce0 <__pow5mult+0xa8>)
 8008c4a:	3a01      	subs	r2, #1
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c52:	f7ff fe9f 	bl	8008994 <__multadd>
 8008c56:	4606      	mov	r6, r0
 8008c58:	10ad      	asrs	r5, r5, #2
 8008c5a:	d03d      	beq.n	8008cd8 <__pow5mult+0xa0>
 8008c5c:	69fc      	ldr	r4, [r7, #28]
 8008c5e:	b97c      	cbnz	r4, 8008c80 <__pow5mult+0x48>
 8008c60:	2010      	movs	r0, #16
 8008c62:	f7ff fd7f 	bl	8008764 <malloc>
 8008c66:	4602      	mov	r2, r0
 8008c68:	61f8      	str	r0, [r7, #28]
 8008c6a:	b928      	cbnz	r0, 8008c78 <__pow5mult+0x40>
 8008c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce4 <__pow5mult+0xac>)
 8008c6e:	481e      	ldr	r0, [pc, #120]	@ (8008ce8 <__pow5mult+0xb0>)
 8008c70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c74:	f000 fc4e 	bl	8009514 <__assert_func>
 8008c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c7c:	6004      	str	r4, [r0, #0]
 8008c7e:	60c4      	str	r4, [r0, #12]
 8008c80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c88:	b94c      	cbnz	r4, 8008c9e <__pow5mult+0x66>
 8008c8a:	f240 2171 	movw	r1, #625	@ 0x271
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f7ff ff12 	bl	8008ab8 <__i2b>
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	07eb      	lsls	r3, r5, #31
 8008ca4:	d50a      	bpl.n	8008cbc <__pow5mult+0x84>
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4638      	mov	r0, r7
 8008cac:	f7ff ff1a 	bl	8008ae4 <__multiply>
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff fe4b 	bl	8008950 <_Bfree>
 8008cba:	4646      	mov	r6, r8
 8008cbc:	106d      	asrs	r5, r5, #1
 8008cbe:	d00b      	beq.n	8008cd8 <__pow5mult+0xa0>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	b938      	cbnz	r0, 8008cd4 <__pow5mult+0x9c>
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff ff0b 	bl	8008ae4 <__multiply>
 8008cce:	6020      	str	r0, [r4, #0]
 8008cd0:	f8c0 9000 	str.w	r9, [r0]
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	e7e4      	b.n	8008ca2 <__pow5mult+0x6a>
 8008cd8:	4630      	mov	r0, r6
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	bf00      	nop
 8008ce0:	0800c82c 	.word	0x0800c82c
 8008ce4:	0800c751 	.word	0x0800c751
 8008ce8:	0800c7d1 	.word	0x0800c7d1

08008cec <__lshift>:
 8008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	6849      	ldr	r1, [r1, #4]
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	4691      	mov	r9, r2
 8008d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d04:	f108 0601 	add.w	r6, r8, #1
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	db0b      	blt.n	8008d24 <__lshift+0x38>
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff fddf 	bl	80088d0 <_Balloc>
 8008d12:	4605      	mov	r5, r0
 8008d14:	b948      	cbnz	r0, 8008d2a <__lshift+0x3e>
 8008d16:	4602      	mov	r2, r0
 8008d18:	4b28      	ldr	r3, [pc, #160]	@ (8008dbc <__lshift+0xd0>)
 8008d1a:	4829      	ldr	r0, [pc, #164]	@ (8008dc0 <__lshift+0xd4>)
 8008d1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d20:	f000 fbf8 	bl	8009514 <__assert_func>
 8008d24:	3101      	adds	r1, #1
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	e7ee      	b.n	8008d08 <__lshift+0x1c>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f100 0114 	add.w	r1, r0, #20
 8008d30:	f100 0210 	add.w	r2, r0, #16
 8008d34:	4618      	mov	r0, r3
 8008d36:	4553      	cmp	r3, sl
 8008d38:	db33      	blt.n	8008da2 <__lshift+0xb6>
 8008d3a:	6920      	ldr	r0, [r4, #16]
 8008d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	f019 091f 	ands.w	r9, r9, #31
 8008d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d50:	d02b      	beq.n	8008daa <__lshift+0xbe>
 8008d52:	f1c9 0e20 	rsb	lr, r9, #32
 8008d56:	468a      	mov	sl, r1
 8008d58:	2200      	movs	r2, #0
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d60:	4310      	orrs	r0, r2
 8008d62:	f84a 0b04 	str.w	r0, [sl], #4
 8008d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6a:	459c      	cmp	ip, r3
 8008d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d70:	d8f3      	bhi.n	8008d5a <__lshift+0x6e>
 8008d72:	ebac 0304 	sub.w	r3, ip, r4
 8008d76:	3b15      	subs	r3, #21
 8008d78:	f023 0303 	bic.w	r3, r3, #3
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	f104 0015 	add.w	r0, r4, #21
 8008d82:	4584      	cmp	ip, r0
 8008d84:	bf38      	it	cc
 8008d86:	2304      	movcc	r3, #4
 8008d88:	50ca      	str	r2, [r1, r3]
 8008d8a:	b10a      	cbz	r2, 8008d90 <__lshift+0xa4>
 8008d8c:	f108 0602 	add.w	r6, r8, #2
 8008d90:	3e01      	subs	r6, #1
 8008d92:	4638      	mov	r0, r7
 8008d94:	612e      	str	r6, [r5, #16]
 8008d96:	4621      	mov	r1, r4
 8008d98:	f7ff fdda 	bl	8008950 <_Bfree>
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008da6:	3301      	adds	r3, #1
 8008da8:	e7c5      	b.n	8008d36 <__lshift+0x4a>
 8008daa:	3904      	subs	r1, #4
 8008dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008db4:	459c      	cmp	ip, r3
 8008db6:	d8f9      	bhi.n	8008dac <__lshift+0xc0>
 8008db8:	e7ea      	b.n	8008d90 <__lshift+0xa4>
 8008dba:	bf00      	nop
 8008dbc:	0800c7c0 	.word	0x0800c7c0
 8008dc0:	0800c7d1 	.word	0x0800c7d1

08008dc4 <__mcmp>:
 8008dc4:	690a      	ldr	r2, [r1, #16]
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6900      	ldr	r0, [r0, #16]
 8008dca:	1a80      	subs	r0, r0, r2
 8008dcc:	b530      	push	{r4, r5, lr}
 8008dce:	d10e      	bne.n	8008dee <__mcmp+0x2a>
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	3114      	adds	r1, #20
 8008dd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008de4:	4295      	cmp	r5, r2
 8008de6:	d003      	beq.n	8008df0 <__mcmp+0x2c>
 8008de8:	d205      	bcs.n	8008df6 <__mcmp+0x32>
 8008dea:	f04f 30ff 	mov.w	r0, #4294967295
 8008dee:	bd30      	pop	{r4, r5, pc}
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d3f3      	bcc.n	8008ddc <__mcmp+0x18>
 8008df4:	e7fb      	b.n	8008dee <__mcmp+0x2a>
 8008df6:	2001      	movs	r0, #1
 8008df8:	e7f9      	b.n	8008dee <__mcmp+0x2a>
	...

08008dfc <__mdiff>:
 8008dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	4689      	mov	r9, r1
 8008e02:	4606      	mov	r6, r0
 8008e04:	4611      	mov	r1, r2
 8008e06:	4648      	mov	r0, r9
 8008e08:	4614      	mov	r4, r2
 8008e0a:	f7ff ffdb 	bl	8008dc4 <__mcmp>
 8008e0e:	1e05      	subs	r5, r0, #0
 8008e10:	d112      	bne.n	8008e38 <__mdiff+0x3c>
 8008e12:	4629      	mov	r1, r5
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff fd5b 	bl	80088d0 <_Balloc>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	b928      	cbnz	r0, 8008e2a <__mdiff+0x2e>
 8008e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f1c <__mdiff+0x120>)
 8008e20:	f240 2137 	movw	r1, #567	@ 0x237
 8008e24:	483e      	ldr	r0, [pc, #248]	@ (8008f20 <__mdiff+0x124>)
 8008e26:	f000 fb75 	bl	8009514 <__assert_func>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e30:	4610      	mov	r0, r2
 8008e32:	b003      	add	sp, #12
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	bfbc      	itt	lt
 8008e3a:	464b      	movlt	r3, r9
 8008e3c:	46a1      	movlt	r9, r4
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e44:	bfba      	itte	lt
 8008e46:	461c      	movlt	r4, r3
 8008e48:	2501      	movlt	r5, #1
 8008e4a:	2500      	movge	r5, #0
 8008e4c:	f7ff fd40 	bl	80088d0 <_Balloc>
 8008e50:	4602      	mov	r2, r0
 8008e52:	b918      	cbnz	r0, 8008e5c <__mdiff+0x60>
 8008e54:	4b31      	ldr	r3, [pc, #196]	@ (8008f1c <__mdiff+0x120>)
 8008e56:	f240 2145 	movw	r1, #581	@ 0x245
 8008e5a:	e7e3      	b.n	8008e24 <__mdiff+0x28>
 8008e5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e60:	6926      	ldr	r6, [r4, #16]
 8008e62:	60c5      	str	r5, [r0, #12]
 8008e64:	f109 0310 	add.w	r3, r9, #16
 8008e68:	f109 0514 	add.w	r5, r9, #20
 8008e6c:	f104 0e14 	add.w	lr, r4, #20
 8008e70:	f100 0b14 	add.w	fp, r0, #20
 8008e74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	46d9      	mov	r9, fp
 8008e80:	f04f 0c00 	mov.w	ip, #0
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	fa1f f38a 	uxth.w	r3, sl
 8008e94:	4619      	mov	r1, r3
 8008e96:	b283      	uxth	r3, r0
 8008e98:	1acb      	subs	r3, r1, r3
 8008e9a:	0c00      	lsrs	r0, r0, #16
 8008e9c:	4463      	add	r3, ip
 8008e9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ea2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008eac:	4576      	cmp	r6, lr
 8008eae:	f849 3b04 	str.w	r3, [r9], #4
 8008eb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eb6:	d8e5      	bhi.n	8008e84 <__mdiff+0x88>
 8008eb8:	1b33      	subs	r3, r6, r4
 8008eba:	3b15      	subs	r3, #21
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	3415      	adds	r4, #21
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	42a6      	cmp	r6, r4
 8008ec6:	bf38      	it	cc
 8008ec8:	2304      	movcc	r3, #4
 8008eca:	441d      	add	r5, r3
 8008ecc:	445b      	add	r3, fp
 8008ece:	461e      	mov	r6, r3
 8008ed0:	462c      	mov	r4, r5
 8008ed2:	4544      	cmp	r4, r8
 8008ed4:	d30e      	bcc.n	8008ef4 <__mdiff+0xf8>
 8008ed6:	f108 0103 	add.w	r1, r8, #3
 8008eda:	1b49      	subs	r1, r1, r5
 8008edc:	f021 0103 	bic.w	r1, r1, #3
 8008ee0:	3d03      	subs	r5, #3
 8008ee2:	45a8      	cmp	r8, r5
 8008ee4:	bf38      	it	cc
 8008ee6:	2100      	movcc	r1, #0
 8008ee8:	440b      	add	r3, r1
 8008eea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eee:	b191      	cbz	r1, 8008f16 <__mdiff+0x11a>
 8008ef0:	6117      	str	r7, [r2, #16]
 8008ef2:	e79d      	b.n	8008e30 <__mdiff+0x34>
 8008ef4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ef8:	46e6      	mov	lr, ip
 8008efa:	0c08      	lsrs	r0, r1, #16
 8008efc:	fa1c fc81 	uxtah	ip, ip, r1
 8008f00:	4471      	add	r1, lr
 8008f02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f06:	b289      	uxth	r1, r1
 8008f08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f0c:	f846 1b04 	str.w	r1, [r6], #4
 8008f10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f14:	e7dd      	b.n	8008ed2 <__mdiff+0xd6>
 8008f16:	3f01      	subs	r7, #1
 8008f18:	e7e7      	b.n	8008eea <__mdiff+0xee>
 8008f1a:	bf00      	nop
 8008f1c:	0800c7c0 	.word	0x0800c7c0
 8008f20:	0800c7d1 	.word	0x0800c7d1

08008f24 <__d2b>:
 8008f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	460f      	mov	r7, r1
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	ec59 8b10 	vmov	r8, r9, d0
 8008f30:	4616      	mov	r6, r2
 8008f32:	f7ff fccd 	bl	80088d0 <_Balloc>
 8008f36:	4604      	mov	r4, r0
 8008f38:	b930      	cbnz	r0, 8008f48 <__d2b+0x24>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4b23      	ldr	r3, [pc, #140]	@ (8008fcc <__d2b+0xa8>)
 8008f3e:	4824      	ldr	r0, [pc, #144]	@ (8008fd0 <__d2b+0xac>)
 8008f40:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f44:	f000 fae6 	bl	8009514 <__assert_func>
 8008f48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f50:	b10d      	cbz	r5, 8008f56 <__d2b+0x32>
 8008f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	f1b8 0300 	subs.w	r3, r8, #0
 8008f5c:	d023      	beq.n	8008fa6 <__d2b+0x82>
 8008f5e:	4668      	mov	r0, sp
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	f7ff fd7c 	bl	8008a5e <__lo0bits>
 8008f66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f6a:	b1d0      	cbz	r0, 8008fa2 <__d2b+0x7e>
 8008f6c:	f1c0 0320 	rsb	r3, r0, #32
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	430b      	orrs	r3, r1
 8008f76:	40c2      	lsrs	r2, r0
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	61a3      	str	r3, [r4, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bf0c      	ite	eq
 8008f84:	2201      	moveq	r2, #1
 8008f86:	2202      	movne	r2, #2
 8008f88:	6122      	str	r2, [r4, #16]
 8008f8a:	b1a5      	cbz	r5, 8008fb6 <__d2b+0x92>
 8008f8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f90:	4405      	add	r5, r0
 8008f92:	603d      	str	r5, [r7, #0]
 8008f94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f98:	6030      	str	r0, [r6, #0]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	b003      	add	sp, #12
 8008f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	6161      	str	r1, [r4, #20]
 8008fa4:	e7ea      	b.n	8008f7c <__d2b+0x58>
 8008fa6:	a801      	add	r0, sp, #4
 8008fa8:	f7ff fd59 	bl	8008a5e <__lo0bits>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	6163      	str	r3, [r4, #20]
 8008fb0:	3020      	adds	r0, #32
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	e7e8      	b.n	8008f88 <__d2b+0x64>
 8008fb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fbe:	6038      	str	r0, [r7, #0]
 8008fc0:	6918      	ldr	r0, [r3, #16]
 8008fc2:	f7ff fd2d 	bl	8008a20 <__hi0bits>
 8008fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fca:	e7e5      	b.n	8008f98 <__d2b+0x74>
 8008fcc:	0800c7c0 	.word	0x0800c7c0
 8008fd0:	0800c7d1 	.word	0x0800c7d1

08008fd4 <__sfputc_r>:
 8008fd4:	6893      	ldr	r3, [r2, #8]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	b410      	push	{r4}
 8008fdc:	6093      	str	r3, [r2, #8]
 8008fde:	da08      	bge.n	8008ff2 <__sfputc_r+0x1e>
 8008fe0:	6994      	ldr	r4, [r2, #24]
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	db01      	blt.n	8008fea <__sfputc_r+0x16>
 8008fe6:	290a      	cmp	r1, #10
 8008fe8:	d103      	bne.n	8008ff2 <__sfputc_r+0x1e>
 8008fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fee:	f000 b9df 	b.w	80093b0 <__swbuf_r>
 8008ff2:	6813      	ldr	r3, [r2, #0]
 8008ff4:	1c58      	adds	r0, r3, #1
 8008ff6:	6010      	str	r0, [r2, #0]
 8008ff8:	7019      	strb	r1, [r3, #0]
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009000:	4770      	bx	lr

08009002 <__sfputs_r>:
 8009002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009004:	4606      	mov	r6, r0
 8009006:	460f      	mov	r7, r1
 8009008:	4614      	mov	r4, r2
 800900a:	18d5      	adds	r5, r2, r3
 800900c:	42ac      	cmp	r4, r5
 800900e:	d101      	bne.n	8009014 <__sfputs_r+0x12>
 8009010:	2000      	movs	r0, #0
 8009012:	e007      	b.n	8009024 <__sfputs_r+0x22>
 8009014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009018:	463a      	mov	r2, r7
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ffda 	bl	8008fd4 <__sfputc_r>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d1f3      	bne.n	800900c <__sfputs_r+0xa>
 8009024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009028 <_vfiprintf_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	460d      	mov	r5, r1
 800902e:	b09d      	sub	sp, #116	@ 0x74
 8009030:	4614      	mov	r4, r2
 8009032:	4698      	mov	r8, r3
 8009034:	4606      	mov	r6, r0
 8009036:	b118      	cbz	r0, 8009040 <_vfiprintf_r+0x18>
 8009038:	6a03      	ldr	r3, [r0, #32]
 800903a:	b90b      	cbnz	r3, 8009040 <_vfiprintf_r+0x18>
 800903c:	f7fe fbee 	bl	800781c <__sinit>
 8009040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d405      	bmi.n	8009052 <_vfiprintf_r+0x2a>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	059a      	lsls	r2, r3, #22
 800904a:	d402      	bmi.n	8009052 <_vfiprintf_r+0x2a>
 800904c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800904e:	f7fe fcee 	bl	8007a2e <__retarget_lock_acquire_recursive>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	071b      	lsls	r3, r3, #28
 8009056:	d501      	bpl.n	800905c <_vfiprintf_r+0x34>
 8009058:	692b      	ldr	r3, [r5, #16]
 800905a:	b99b      	cbnz	r3, 8009084 <_vfiprintf_r+0x5c>
 800905c:	4629      	mov	r1, r5
 800905e:	4630      	mov	r0, r6
 8009060:	f000 f9e4 	bl	800942c <__swsetup_r>
 8009064:	b170      	cbz	r0, 8009084 <_vfiprintf_r+0x5c>
 8009066:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009068:	07dc      	lsls	r4, r3, #31
 800906a:	d504      	bpl.n	8009076 <_vfiprintf_r+0x4e>
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	b01d      	add	sp, #116	@ 0x74
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	0598      	lsls	r0, r3, #22
 800907a:	d4f7      	bmi.n	800906c <_vfiprintf_r+0x44>
 800907c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800907e:	f7fe fcd7 	bl	8007a30 <__retarget_lock_release_recursive>
 8009082:	e7f3      	b.n	800906c <_vfiprintf_r+0x44>
 8009084:	2300      	movs	r3, #0
 8009086:	9309      	str	r3, [sp, #36]	@ 0x24
 8009088:	2320      	movs	r3, #32
 800908a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800908e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009092:	2330      	movs	r3, #48	@ 0x30
 8009094:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009244 <_vfiprintf_r+0x21c>
 8009098:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800909c:	f04f 0901 	mov.w	r9, #1
 80090a0:	4623      	mov	r3, r4
 80090a2:	469a      	mov	sl, r3
 80090a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a8:	b10a      	cbz	r2, 80090ae <_vfiprintf_r+0x86>
 80090aa:	2a25      	cmp	r2, #37	@ 0x25
 80090ac:	d1f9      	bne.n	80090a2 <_vfiprintf_r+0x7a>
 80090ae:	ebba 0b04 	subs.w	fp, sl, r4
 80090b2:	d00b      	beq.n	80090cc <_vfiprintf_r+0xa4>
 80090b4:	465b      	mov	r3, fp
 80090b6:	4622      	mov	r2, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ffa1 	bl	8009002 <__sfputs_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	f000 80a7 	beq.w	8009214 <_vfiprintf_r+0x1ec>
 80090c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c8:	445a      	add	r2, fp
 80090ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80090cc:	f89a 3000 	ldrb.w	r3, [sl]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 809f 	beq.w	8009214 <_vfiprintf_r+0x1ec>
 80090d6:	2300      	movs	r3, #0
 80090d8:	f04f 32ff 	mov.w	r2, #4294967295
 80090dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e0:	f10a 0a01 	add.w	sl, sl, #1
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	9307      	str	r3, [sp, #28]
 80090e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80090ee:	4654      	mov	r4, sl
 80090f0:	2205      	movs	r2, #5
 80090f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f6:	4853      	ldr	r0, [pc, #332]	@ (8009244 <_vfiprintf_r+0x21c>)
 80090f8:	f7f7 f872 	bl	80001e0 <memchr>
 80090fc:	9a04      	ldr	r2, [sp, #16]
 80090fe:	b9d8      	cbnz	r0, 8009138 <_vfiprintf_r+0x110>
 8009100:	06d1      	lsls	r1, r2, #27
 8009102:	bf44      	itt	mi
 8009104:	2320      	movmi	r3, #32
 8009106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800910a:	0713      	lsls	r3, r2, #28
 800910c:	bf44      	itt	mi
 800910e:	232b      	movmi	r3, #43	@ 0x2b
 8009110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009114:	f89a 3000 	ldrb.w	r3, [sl]
 8009118:	2b2a      	cmp	r3, #42	@ 0x2a
 800911a:	d015      	beq.n	8009148 <_vfiprintf_r+0x120>
 800911c:	9a07      	ldr	r2, [sp, #28]
 800911e:	4654      	mov	r4, sl
 8009120:	2000      	movs	r0, #0
 8009122:	f04f 0c0a 	mov.w	ip, #10
 8009126:	4621      	mov	r1, r4
 8009128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800912c:	3b30      	subs	r3, #48	@ 0x30
 800912e:	2b09      	cmp	r3, #9
 8009130:	d94b      	bls.n	80091ca <_vfiprintf_r+0x1a2>
 8009132:	b1b0      	cbz	r0, 8009162 <_vfiprintf_r+0x13a>
 8009134:	9207      	str	r2, [sp, #28]
 8009136:	e014      	b.n	8009162 <_vfiprintf_r+0x13a>
 8009138:	eba0 0308 	sub.w	r3, r0, r8
 800913c:	fa09 f303 	lsl.w	r3, r9, r3
 8009140:	4313      	orrs	r3, r2
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	46a2      	mov	sl, r4
 8009146:	e7d2      	b.n	80090ee <_vfiprintf_r+0xc6>
 8009148:	9b03      	ldr	r3, [sp, #12]
 800914a:	1d19      	adds	r1, r3, #4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	9103      	str	r1, [sp, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfbb      	ittet	lt
 8009154:	425b      	neglt	r3, r3
 8009156:	f042 0202 	orrlt.w	r2, r2, #2
 800915a:	9307      	strge	r3, [sp, #28]
 800915c:	9307      	strlt	r3, [sp, #28]
 800915e:	bfb8      	it	lt
 8009160:	9204      	strlt	r2, [sp, #16]
 8009162:	7823      	ldrb	r3, [r4, #0]
 8009164:	2b2e      	cmp	r3, #46	@ 0x2e
 8009166:	d10a      	bne.n	800917e <_vfiprintf_r+0x156>
 8009168:	7863      	ldrb	r3, [r4, #1]
 800916a:	2b2a      	cmp	r3, #42	@ 0x2a
 800916c:	d132      	bne.n	80091d4 <_vfiprintf_r+0x1ac>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	1d1a      	adds	r2, r3, #4
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	9203      	str	r2, [sp, #12]
 8009176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800917a:	3402      	adds	r4, #2
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009254 <_vfiprintf_r+0x22c>
 8009182:	7821      	ldrb	r1, [r4, #0]
 8009184:	2203      	movs	r2, #3
 8009186:	4650      	mov	r0, sl
 8009188:	f7f7 f82a 	bl	80001e0 <memchr>
 800918c:	b138      	cbz	r0, 800919e <_vfiprintf_r+0x176>
 800918e:	9b04      	ldr	r3, [sp, #16]
 8009190:	eba0 000a 	sub.w	r0, r0, sl
 8009194:	2240      	movs	r2, #64	@ 0x40
 8009196:	4082      	lsls	r2, r0
 8009198:	4313      	orrs	r3, r2
 800919a:	3401      	adds	r4, #1
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a2:	4829      	ldr	r0, [pc, #164]	@ (8009248 <_vfiprintf_r+0x220>)
 80091a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091a8:	2206      	movs	r2, #6
 80091aa:	f7f7 f819 	bl	80001e0 <memchr>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d03f      	beq.n	8009232 <_vfiprintf_r+0x20a>
 80091b2:	4b26      	ldr	r3, [pc, #152]	@ (800924c <_vfiprintf_r+0x224>)
 80091b4:	bb1b      	cbnz	r3, 80091fe <_vfiprintf_r+0x1d6>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	3307      	adds	r3, #7
 80091ba:	f023 0307 	bic.w	r3, r3, #7
 80091be:	3308      	adds	r3, #8
 80091c0:	9303      	str	r3, [sp, #12]
 80091c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c4:	443b      	add	r3, r7
 80091c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c8:	e76a      	b.n	80090a0 <_vfiprintf_r+0x78>
 80091ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ce:	460c      	mov	r4, r1
 80091d0:	2001      	movs	r0, #1
 80091d2:	e7a8      	b.n	8009126 <_vfiprintf_r+0xfe>
 80091d4:	2300      	movs	r3, #0
 80091d6:	3401      	adds	r4, #1
 80091d8:	9305      	str	r3, [sp, #20]
 80091da:	4619      	mov	r1, r3
 80091dc:	f04f 0c0a 	mov.w	ip, #10
 80091e0:	4620      	mov	r0, r4
 80091e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e6:	3a30      	subs	r2, #48	@ 0x30
 80091e8:	2a09      	cmp	r2, #9
 80091ea:	d903      	bls.n	80091f4 <_vfiprintf_r+0x1cc>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0c6      	beq.n	800917e <_vfiprintf_r+0x156>
 80091f0:	9105      	str	r1, [sp, #20]
 80091f2:	e7c4      	b.n	800917e <_vfiprintf_r+0x156>
 80091f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091f8:	4604      	mov	r4, r0
 80091fa:	2301      	movs	r3, #1
 80091fc:	e7f0      	b.n	80091e0 <_vfiprintf_r+0x1b8>
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	462a      	mov	r2, r5
 8009204:	4b12      	ldr	r3, [pc, #72]	@ (8009250 <_vfiprintf_r+0x228>)
 8009206:	a904      	add	r1, sp, #16
 8009208:	4630      	mov	r0, r6
 800920a:	f7fd fec3 	bl	8006f94 <_printf_float>
 800920e:	4607      	mov	r7, r0
 8009210:	1c78      	adds	r0, r7, #1
 8009212:	d1d6      	bne.n	80091c2 <_vfiprintf_r+0x19a>
 8009214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009216:	07d9      	lsls	r1, r3, #31
 8009218:	d405      	bmi.n	8009226 <_vfiprintf_r+0x1fe>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	059a      	lsls	r2, r3, #22
 800921e:	d402      	bmi.n	8009226 <_vfiprintf_r+0x1fe>
 8009220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009222:	f7fe fc05 	bl	8007a30 <__retarget_lock_release_recursive>
 8009226:	89ab      	ldrh	r3, [r5, #12]
 8009228:	065b      	lsls	r3, r3, #25
 800922a:	f53f af1f 	bmi.w	800906c <_vfiprintf_r+0x44>
 800922e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009230:	e71e      	b.n	8009070 <_vfiprintf_r+0x48>
 8009232:	ab03      	add	r3, sp, #12
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	462a      	mov	r2, r5
 8009238:	4b05      	ldr	r3, [pc, #20]	@ (8009250 <_vfiprintf_r+0x228>)
 800923a:	a904      	add	r1, sp, #16
 800923c:	4630      	mov	r0, r6
 800923e:	f7fe f941 	bl	80074c4 <_printf_i>
 8009242:	e7e4      	b.n	800920e <_vfiprintf_r+0x1e6>
 8009244:	0800c928 	.word	0x0800c928
 8009248:	0800c932 	.word	0x0800c932
 800924c:	08006f95 	.word	0x08006f95
 8009250:	08009003 	.word	0x08009003
 8009254:	0800c92e 	.word	0x0800c92e

08009258 <__sflush_r>:
 8009258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009260:	0716      	lsls	r6, r2, #28
 8009262:	4605      	mov	r5, r0
 8009264:	460c      	mov	r4, r1
 8009266:	d454      	bmi.n	8009312 <__sflush_r+0xba>
 8009268:	684b      	ldr	r3, [r1, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	dc02      	bgt.n	8009274 <__sflush_r+0x1c>
 800926e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	dd48      	ble.n	8009306 <__sflush_r+0xae>
 8009274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009276:	2e00      	cmp	r6, #0
 8009278:	d045      	beq.n	8009306 <__sflush_r+0xae>
 800927a:	2300      	movs	r3, #0
 800927c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009280:	682f      	ldr	r7, [r5, #0]
 8009282:	6a21      	ldr	r1, [r4, #32]
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	d030      	beq.n	80092ea <__sflush_r+0x92>
 8009288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	0759      	lsls	r1, r3, #29
 800928e:	d505      	bpl.n	800929c <__sflush_r+0x44>
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009296:	b10b      	cbz	r3, 800929c <__sflush_r+0x44>
 8009298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800929a:	1ad2      	subs	r2, r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092a0:	6a21      	ldr	r1, [r4, #32]
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b0      	blx	r6
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	d106      	bne.n	80092ba <__sflush_r+0x62>
 80092ac:	6829      	ldr	r1, [r5, #0]
 80092ae:	291d      	cmp	r1, #29
 80092b0:	d82b      	bhi.n	800930a <__sflush_r+0xb2>
 80092b2:	4a2a      	ldr	r2, [pc, #168]	@ (800935c <__sflush_r+0x104>)
 80092b4:	410a      	asrs	r2, r1
 80092b6:	07d6      	lsls	r6, r2, #31
 80092b8:	d427      	bmi.n	800930a <__sflush_r+0xb2>
 80092ba:	2200      	movs	r2, #0
 80092bc:	6062      	str	r2, [r4, #4]
 80092be:	04d9      	lsls	r1, r3, #19
 80092c0:	6922      	ldr	r2, [r4, #16]
 80092c2:	6022      	str	r2, [r4, #0]
 80092c4:	d504      	bpl.n	80092d0 <__sflush_r+0x78>
 80092c6:	1c42      	adds	r2, r0, #1
 80092c8:	d101      	bne.n	80092ce <__sflush_r+0x76>
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	b903      	cbnz	r3, 80092d0 <__sflush_r+0x78>
 80092ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80092d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092d2:	602f      	str	r7, [r5, #0]
 80092d4:	b1b9      	cbz	r1, 8009306 <__sflush_r+0xae>
 80092d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092da:	4299      	cmp	r1, r3
 80092dc:	d002      	beq.n	80092e4 <__sflush_r+0x8c>
 80092de:	4628      	mov	r0, r5
 80092e0:	f7ff f9f6 	bl	80086d0 <_free_r>
 80092e4:	2300      	movs	r3, #0
 80092e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092e8:	e00d      	b.n	8009306 <__sflush_r+0xae>
 80092ea:	2301      	movs	r3, #1
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b0      	blx	r6
 80092f0:	4602      	mov	r2, r0
 80092f2:	1c50      	adds	r0, r2, #1
 80092f4:	d1c9      	bne.n	800928a <__sflush_r+0x32>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0c6      	beq.n	800928a <__sflush_r+0x32>
 80092fc:	2b1d      	cmp	r3, #29
 80092fe:	d001      	beq.n	8009304 <__sflush_r+0xac>
 8009300:	2b16      	cmp	r3, #22
 8009302:	d11e      	bne.n	8009342 <__sflush_r+0xea>
 8009304:	602f      	str	r7, [r5, #0]
 8009306:	2000      	movs	r0, #0
 8009308:	e022      	b.n	8009350 <__sflush_r+0xf8>
 800930a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800930e:	b21b      	sxth	r3, r3
 8009310:	e01b      	b.n	800934a <__sflush_r+0xf2>
 8009312:	690f      	ldr	r7, [r1, #16]
 8009314:	2f00      	cmp	r7, #0
 8009316:	d0f6      	beq.n	8009306 <__sflush_r+0xae>
 8009318:	0793      	lsls	r3, r2, #30
 800931a:	680e      	ldr	r6, [r1, #0]
 800931c:	bf08      	it	eq
 800931e:	694b      	ldreq	r3, [r1, #20]
 8009320:	600f      	str	r7, [r1, #0]
 8009322:	bf18      	it	ne
 8009324:	2300      	movne	r3, #0
 8009326:	eba6 0807 	sub.w	r8, r6, r7
 800932a:	608b      	str	r3, [r1, #8]
 800932c:	f1b8 0f00 	cmp.w	r8, #0
 8009330:	dde9      	ble.n	8009306 <__sflush_r+0xae>
 8009332:	6a21      	ldr	r1, [r4, #32]
 8009334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009336:	4643      	mov	r3, r8
 8009338:	463a      	mov	r2, r7
 800933a:	4628      	mov	r0, r5
 800933c:	47b0      	blx	r6
 800933e:	2800      	cmp	r0, #0
 8009340:	dc08      	bgt.n	8009354 <__sflush_r+0xfc>
 8009342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934a:	81a3      	strh	r3, [r4, #12]
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009354:	4407      	add	r7, r0
 8009356:	eba8 0800 	sub.w	r8, r8, r0
 800935a:	e7e7      	b.n	800932c <__sflush_r+0xd4>
 800935c:	dfbffffe 	.word	0xdfbffffe

08009360 <_fflush_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	690b      	ldr	r3, [r1, #16]
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
 8009368:	b913      	cbnz	r3, 8009370 <_fflush_r+0x10>
 800936a:	2500      	movs	r5, #0
 800936c:	4628      	mov	r0, r5
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	b118      	cbz	r0, 800937a <_fflush_r+0x1a>
 8009372:	6a03      	ldr	r3, [r0, #32]
 8009374:	b90b      	cbnz	r3, 800937a <_fflush_r+0x1a>
 8009376:	f7fe fa51 	bl	800781c <__sinit>
 800937a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0f3      	beq.n	800936a <_fflush_r+0xa>
 8009382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009384:	07d0      	lsls	r0, r2, #31
 8009386:	d404      	bmi.n	8009392 <_fflush_r+0x32>
 8009388:	0599      	lsls	r1, r3, #22
 800938a:	d402      	bmi.n	8009392 <_fflush_r+0x32>
 800938c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800938e:	f7fe fb4e 	bl	8007a2e <__retarget_lock_acquire_recursive>
 8009392:	4628      	mov	r0, r5
 8009394:	4621      	mov	r1, r4
 8009396:	f7ff ff5f 	bl	8009258 <__sflush_r>
 800939a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800939c:	07da      	lsls	r2, r3, #31
 800939e:	4605      	mov	r5, r0
 80093a0:	d4e4      	bmi.n	800936c <_fflush_r+0xc>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	059b      	lsls	r3, r3, #22
 80093a6:	d4e1      	bmi.n	800936c <_fflush_r+0xc>
 80093a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093aa:	f7fe fb41 	bl	8007a30 <__retarget_lock_release_recursive>
 80093ae:	e7dd      	b.n	800936c <_fflush_r+0xc>

080093b0 <__swbuf_r>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	460e      	mov	r6, r1
 80093b4:	4614      	mov	r4, r2
 80093b6:	4605      	mov	r5, r0
 80093b8:	b118      	cbz	r0, 80093c2 <__swbuf_r+0x12>
 80093ba:	6a03      	ldr	r3, [r0, #32]
 80093bc:	b90b      	cbnz	r3, 80093c2 <__swbuf_r+0x12>
 80093be:	f7fe fa2d 	bl	800781c <__sinit>
 80093c2:	69a3      	ldr	r3, [r4, #24]
 80093c4:	60a3      	str	r3, [r4, #8]
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	071a      	lsls	r2, r3, #28
 80093ca:	d501      	bpl.n	80093d0 <__swbuf_r+0x20>
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	b943      	cbnz	r3, 80093e2 <__swbuf_r+0x32>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f82a 	bl	800942c <__swsetup_r>
 80093d8:	b118      	cbz	r0, 80093e2 <__swbuf_r+0x32>
 80093da:	f04f 37ff 	mov.w	r7, #4294967295
 80093de:	4638      	mov	r0, r7
 80093e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	6922      	ldr	r2, [r4, #16]
 80093e6:	1a98      	subs	r0, r3, r2
 80093e8:	6963      	ldr	r3, [r4, #20]
 80093ea:	b2f6      	uxtb	r6, r6
 80093ec:	4283      	cmp	r3, r0
 80093ee:	4637      	mov	r7, r6
 80093f0:	dc05      	bgt.n	80093fe <__swbuf_r+0x4e>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff ffb3 	bl	8009360 <_fflush_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d1ed      	bne.n	80093da <__swbuf_r+0x2a>
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	3b01      	subs	r3, #1
 8009402:	60a3      	str	r3, [r4, #8]
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	701e      	strb	r6, [r3, #0]
 800940c:	6962      	ldr	r2, [r4, #20]
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	429a      	cmp	r2, r3
 8009412:	d004      	beq.n	800941e <__swbuf_r+0x6e>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	07db      	lsls	r3, r3, #31
 8009418:	d5e1      	bpl.n	80093de <__swbuf_r+0x2e>
 800941a:	2e0a      	cmp	r6, #10
 800941c:	d1df      	bne.n	80093de <__swbuf_r+0x2e>
 800941e:	4621      	mov	r1, r4
 8009420:	4628      	mov	r0, r5
 8009422:	f7ff ff9d 	bl	8009360 <_fflush_r>
 8009426:	2800      	cmp	r0, #0
 8009428:	d0d9      	beq.n	80093de <__swbuf_r+0x2e>
 800942a:	e7d6      	b.n	80093da <__swbuf_r+0x2a>

0800942c <__swsetup_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4b29      	ldr	r3, [pc, #164]	@ (80094d4 <__swsetup_r+0xa8>)
 8009430:	4605      	mov	r5, r0
 8009432:	6818      	ldr	r0, [r3, #0]
 8009434:	460c      	mov	r4, r1
 8009436:	b118      	cbz	r0, 8009440 <__swsetup_r+0x14>
 8009438:	6a03      	ldr	r3, [r0, #32]
 800943a:	b90b      	cbnz	r3, 8009440 <__swsetup_r+0x14>
 800943c:	f7fe f9ee 	bl	800781c <__sinit>
 8009440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009444:	0719      	lsls	r1, r3, #28
 8009446:	d422      	bmi.n	800948e <__swsetup_r+0x62>
 8009448:	06da      	lsls	r2, r3, #27
 800944a:	d407      	bmi.n	800945c <__swsetup_r+0x30>
 800944c:	2209      	movs	r2, #9
 800944e:	602a      	str	r2, [r5, #0]
 8009450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	f04f 30ff 	mov.w	r0, #4294967295
 800945a:	e033      	b.n	80094c4 <__swsetup_r+0x98>
 800945c:	0758      	lsls	r0, r3, #29
 800945e:	d512      	bpl.n	8009486 <__swsetup_r+0x5a>
 8009460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009462:	b141      	cbz	r1, 8009476 <__swsetup_r+0x4a>
 8009464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009468:	4299      	cmp	r1, r3
 800946a:	d002      	beq.n	8009472 <__swsetup_r+0x46>
 800946c:	4628      	mov	r0, r5
 800946e:	f7ff f92f 	bl	80086d0 <_free_r>
 8009472:	2300      	movs	r3, #0
 8009474:	6363      	str	r3, [r4, #52]	@ 0x34
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	2300      	movs	r3, #0
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f043 0308 	orr.w	r3, r3, #8
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	b94b      	cbnz	r3, 80094a6 <__swsetup_r+0x7a>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949c:	d003      	beq.n	80094a6 <__swsetup_r+0x7a>
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f000 f8c1 	bl	8009628 <__smakebuf_r>
 80094a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094aa:	f013 0201 	ands.w	r2, r3, #1
 80094ae:	d00a      	beq.n	80094c6 <__swsetup_r+0x9a>
 80094b0:	2200      	movs	r2, #0
 80094b2:	60a2      	str	r2, [r4, #8]
 80094b4:	6962      	ldr	r2, [r4, #20]
 80094b6:	4252      	negs	r2, r2
 80094b8:	61a2      	str	r2, [r4, #24]
 80094ba:	6922      	ldr	r2, [r4, #16]
 80094bc:	b942      	cbnz	r2, 80094d0 <__swsetup_r+0xa4>
 80094be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094c2:	d1c5      	bne.n	8009450 <__swsetup_r+0x24>
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	0799      	lsls	r1, r3, #30
 80094c8:	bf58      	it	pl
 80094ca:	6962      	ldrpl	r2, [r4, #20]
 80094cc:	60a2      	str	r2, [r4, #8]
 80094ce:	e7f4      	b.n	80094ba <__swsetup_r+0x8e>
 80094d0:	2000      	movs	r0, #0
 80094d2:	e7f7      	b.n	80094c4 <__swsetup_r+0x98>
 80094d4:	20002020 	.word	0x20002020

080094d8 <_sbrk_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d06      	ldr	r5, [pc, #24]	@ (80094f4 <_sbrk_r+0x1c>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	f7f8 faba 	bl	8001a5c <_sbrk>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_sbrk_r+0x1a>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_sbrk_r+0x1a>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	200034e4 	.word	0x200034e4

080094f8 <memcpy>:
 80094f8:	440a      	add	r2, r1
 80094fa:	4291      	cmp	r1, r2
 80094fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009500:	d100      	bne.n	8009504 <memcpy+0xc>
 8009502:	4770      	bx	lr
 8009504:	b510      	push	{r4, lr}
 8009506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800950a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800950e:	4291      	cmp	r1, r2
 8009510:	d1f9      	bne.n	8009506 <memcpy+0xe>
 8009512:	bd10      	pop	{r4, pc}

08009514 <__assert_func>:
 8009514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009516:	4614      	mov	r4, r2
 8009518:	461a      	mov	r2, r3
 800951a:	4b09      	ldr	r3, [pc, #36]	@ (8009540 <__assert_func+0x2c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4605      	mov	r5, r0
 8009520:	68d8      	ldr	r0, [r3, #12]
 8009522:	b954      	cbnz	r4, 800953a <__assert_func+0x26>
 8009524:	4b07      	ldr	r3, [pc, #28]	@ (8009544 <__assert_func+0x30>)
 8009526:	461c      	mov	r4, r3
 8009528:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800952c:	9100      	str	r1, [sp, #0]
 800952e:	462b      	mov	r3, r5
 8009530:	4905      	ldr	r1, [pc, #20]	@ (8009548 <__assert_func+0x34>)
 8009532:	f000 f841 	bl	80095b8 <fiprintf>
 8009536:	f000 f8d5 	bl	80096e4 <abort>
 800953a:	4b04      	ldr	r3, [pc, #16]	@ (800954c <__assert_func+0x38>)
 800953c:	e7f4      	b.n	8009528 <__assert_func+0x14>
 800953e:	bf00      	nop
 8009540:	20002020 	.word	0x20002020
 8009544:	0800c97e 	.word	0x0800c97e
 8009548:	0800c950 	.word	0x0800c950
 800954c:	0800c943 	.word	0x0800c943

08009550 <_calloc_r>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	fba1 5402 	umull	r5, r4, r1, r2
 8009556:	b93c      	cbnz	r4, 8009568 <_calloc_r+0x18>
 8009558:	4629      	mov	r1, r5
 800955a:	f7ff f92d 	bl	80087b8 <_malloc_r>
 800955e:	4606      	mov	r6, r0
 8009560:	b928      	cbnz	r0, 800956e <_calloc_r+0x1e>
 8009562:	2600      	movs	r6, #0
 8009564:	4630      	mov	r0, r6
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	220c      	movs	r2, #12
 800956a:	6002      	str	r2, [r0, #0]
 800956c:	e7f9      	b.n	8009562 <_calloc_r+0x12>
 800956e:	462a      	mov	r2, r5
 8009570:	4621      	mov	r1, r4
 8009572:	f7fe f9de 	bl	8007932 <memset>
 8009576:	e7f5      	b.n	8009564 <_calloc_r+0x14>

08009578 <__ascii_mbtowc>:
 8009578:	b082      	sub	sp, #8
 800957a:	b901      	cbnz	r1, 800957e <__ascii_mbtowc+0x6>
 800957c:	a901      	add	r1, sp, #4
 800957e:	b142      	cbz	r2, 8009592 <__ascii_mbtowc+0x1a>
 8009580:	b14b      	cbz	r3, 8009596 <__ascii_mbtowc+0x1e>
 8009582:	7813      	ldrb	r3, [r2, #0]
 8009584:	600b      	str	r3, [r1, #0]
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	1e10      	subs	r0, r2, #0
 800958a:	bf18      	it	ne
 800958c:	2001      	movne	r0, #1
 800958e:	b002      	add	sp, #8
 8009590:	4770      	bx	lr
 8009592:	4610      	mov	r0, r2
 8009594:	e7fb      	b.n	800958e <__ascii_mbtowc+0x16>
 8009596:	f06f 0001 	mvn.w	r0, #1
 800959a:	e7f8      	b.n	800958e <__ascii_mbtowc+0x16>

0800959c <__ascii_wctomb>:
 800959c:	4603      	mov	r3, r0
 800959e:	4608      	mov	r0, r1
 80095a0:	b141      	cbz	r1, 80095b4 <__ascii_wctomb+0x18>
 80095a2:	2aff      	cmp	r2, #255	@ 0xff
 80095a4:	d904      	bls.n	80095b0 <__ascii_wctomb+0x14>
 80095a6:	228a      	movs	r2, #138	@ 0x8a
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295
 80095ae:	4770      	bx	lr
 80095b0:	700a      	strb	r2, [r1, #0]
 80095b2:	2001      	movs	r0, #1
 80095b4:	4770      	bx	lr
	...

080095b8 <fiprintf>:
 80095b8:	b40e      	push	{r1, r2, r3}
 80095ba:	b503      	push	{r0, r1, lr}
 80095bc:	4601      	mov	r1, r0
 80095be:	ab03      	add	r3, sp, #12
 80095c0:	4805      	ldr	r0, [pc, #20]	@ (80095d8 <fiprintf+0x20>)
 80095c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	f7ff fd2d 	bl	8009028 <_vfiprintf_r>
 80095ce:	b002      	add	sp, #8
 80095d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d4:	b003      	add	sp, #12
 80095d6:	4770      	bx	lr
 80095d8:	20002020 	.word	0x20002020

080095dc <__swhatbuf_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	460c      	mov	r4, r1
 80095e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e4:	2900      	cmp	r1, #0
 80095e6:	b096      	sub	sp, #88	@ 0x58
 80095e8:	4615      	mov	r5, r2
 80095ea:	461e      	mov	r6, r3
 80095ec:	da0d      	bge.n	800960a <__swhatbuf_r+0x2e>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	bf14      	ite	ne
 80095fa:	2340      	movne	r3, #64	@ 0x40
 80095fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009600:	2000      	movs	r0, #0
 8009602:	6031      	str	r1, [r6, #0]
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	b016      	add	sp, #88	@ 0x58
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	466a      	mov	r2, sp
 800960c:	f000 f848 	bl	80096a0 <_fstat_r>
 8009610:	2800      	cmp	r0, #0
 8009612:	dbec      	blt.n	80095ee <__swhatbuf_r+0x12>
 8009614:	9901      	ldr	r1, [sp, #4]
 8009616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800961a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800961e:	4259      	negs	r1, r3
 8009620:	4159      	adcs	r1, r3
 8009622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009626:	e7eb      	b.n	8009600 <__swhatbuf_r+0x24>

08009628 <__smakebuf_r>:
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800962c:	079d      	lsls	r5, r3, #30
 800962e:	4606      	mov	r6, r0
 8009630:	460c      	mov	r4, r1
 8009632:	d507      	bpl.n	8009644 <__smakebuf_r+0x1c>
 8009634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2301      	movs	r3, #1
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	b003      	add	sp, #12
 8009642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009644:	ab01      	add	r3, sp, #4
 8009646:	466a      	mov	r2, sp
 8009648:	f7ff ffc8 	bl	80095dc <__swhatbuf_r>
 800964c:	9f00      	ldr	r7, [sp, #0]
 800964e:	4605      	mov	r5, r0
 8009650:	4639      	mov	r1, r7
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff f8b0 	bl	80087b8 <_malloc_r>
 8009658:	b948      	cbnz	r0, 800966e <__smakebuf_r+0x46>
 800965a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965e:	059a      	lsls	r2, r3, #22
 8009660:	d4ee      	bmi.n	8009640 <__smakebuf_r+0x18>
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	f043 0302 	orr.w	r3, r3, #2
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	e7e2      	b.n	8009634 <__smakebuf_r+0xc>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	6020      	str	r0, [r4, #0]
 8009672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800967e:	b15b      	cbz	r3, 8009698 <__smakebuf_r+0x70>
 8009680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f81d 	bl	80096c4 <_isatty_r>
 800968a:	b128      	cbz	r0, 8009698 <__smakebuf_r+0x70>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	431d      	orrs	r5, r3
 800969c:	81a5      	strh	r5, [r4, #12]
 800969e:	e7cf      	b.n	8009640 <__smakebuf_r+0x18>

080096a0 <_fstat_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d07      	ldr	r5, [pc, #28]	@ (80096c0 <_fstat_r+0x20>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	f7f8 f9ad 	bl	8001a0c <_fstat>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d102      	bne.n	80096bc <_fstat_r+0x1c>
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	b103      	cbz	r3, 80096bc <_fstat_r+0x1c>
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop
 80096c0:	200034e4 	.word	0x200034e4

080096c4 <_isatty_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	@ (80096e0 <_isatty_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f8 f9ac 	bl	8001a2c <_isatty>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_isatty_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_isatty_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	200034e4 	.word	0x200034e4

080096e4 <abort>:
 80096e4:	b508      	push	{r3, lr}
 80096e6:	2006      	movs	r0, #6
 80096e8:	f000 f82c 	bl	8009744 <raise>
 80096ec:	2001      	movs	r0, #1
 80096ee:	f7f8 f959 	bl	80019a4 <_exit>

080096f2 <_raise_r>:
 80096f2:	291f      	cmp	r1, #31
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4605      	mov	r5, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	d904      	bls.n	8009706 <_raise_r+0x14>
 80096fc:	2316      	movs	r3, #22
 80096fe:	6003      	str	r3, [r0, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	bd38      	pop	{r3, r4, r5, pc}
 8009706:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009708:	b112      	cbz	r2, 8009710 <_raise_r+0x1e>
 800970a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800970e:	b94b      	cbnz	r3, 8009724 <_raise_r+0x32>
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f831 	bl	8009778 <_getpid_r>
 8009716:	4622      	mov	r2, r4
 8009718:	4601      	mov	r1, r0
 800971a:	4628      	mov	r0, r5
 800971c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009720:	f000 b818 	b.w	8009754 <_kill_r>
 8009724:	2b01      	cmp	r3, #1
 8009726:	d00a      	beq.n	800973e <_raise_r+0x4c>
 8009728:	1c59      	adds	r1, r3, #1
 800972a:	d103      	bne.n	8009734 <_raise_r+0x42>
 800972c:	2316      	movs	r3, #22
 800972e:	6003      	str	r3, [r0, #0]
 8009730:	2001      	movs	r0, #1
 8009732:	e7e7      	b.n	8009704 <_raise_r+0x12>
 8009734:	2100      	movs	r1, #0
 8009736:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800973a:	4620      	mov	r0, r4
 800973c:	4798      	blx	r3
 800973e:	2000      	movs	r0, #0
 8009740:	e7e0      	b.n	8009704 <_raise_r+0x12>
	...

08009744 <raise>:
 8009744:	4b02      	ldr	r3, [pc, #8]	@ (8009750 <raise+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f7ff bfd2 	b.w	80096f2 <_raise_r>
 800974e:	bf00      	nop
 8009750:	20002020 	.word	0x20002020

08009754 <_kill_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	@ (8009774 <_kill_r+0x20>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	f7f8 f90f 	bl	8001984 <_kill>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d102      	bne.n	8009770 <_kill_r+0x1c>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b103      	cbz	r3, 8009770 <_kill_r+0x1c>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd38      	pop	{r3, r4, r5, pc}
 8009772:	bf00      	nop
 8009774:	200034e4 	.word	0x200034e4

08009778 <_getpid_r>:
 8009778:	f7f8 b8fc 	b.w	8001974 <_getpid>

0800977c <sqrtf>:
 800977c:	b508      	push	{r3, lr}
 800977e:	ed2d 8b02 	vpush	{d8}
 8009782:	eeb0 8a40 	vmov.f32	s16, s0
 8009786:	f000 f817 	bl	80097b8 <__ieee754_sqrtf>
 800978a:	eeb4 8a48 	vcmp.f32	s16, s16
 800978e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009792:	d60c      	bvs.n	80097ae <sqrtf+0x32>
 8009794:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80097b4 <sqrtf+0x38>
 8009798:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800979c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a0:	d505      	bpl.n	80097ae <sqrtf+0x32>
 80097a2:	f7fe f919 	bl	80079d8 <__errno>
 80097a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80097aa:	2321      	movs	r3, #33	@ 0x21
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	ecbd 8b02 	vpop	{d8}
 80097b2:	bd08      	pop	{r3, pc}
 80097b4:	00000000 	.word	0x00000000

080097b8 <__ieee754_sqrtf>:
 80097b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80097bc:	4770      	bx	lr
	...

080097c0 <_init>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr

080097cc <_fini>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr
