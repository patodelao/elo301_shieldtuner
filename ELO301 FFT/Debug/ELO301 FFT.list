
ELO301 FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031e0  08007308  08007308  00008308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e8  0800a4e8  000101e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e8  0800a4e8  0000b4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4f0  0800a4f0  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f0  0800a4f0  0000b4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4f4  0800a4f4  0000b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000041e0  20000000  0800a4f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  200041e0  0800e6d8  000101e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053e0  0800e6d8  000103e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d1d  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b7  00000000  00000000  00023f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000268e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072f  00000000  00000000  00027340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c01  00000000  00000000  00027a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e245  00000000  00000000  0004a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1d8b  00000000  00000000  000588b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0012a640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  0012a6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012df94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002baf  00000000  00000000  0012dffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  00130ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200041e0 	.word	0x200041e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072f0 	.word	0x080072f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200041e4 	.word	0x200041e4
 80001dc:	080072f0 	.word	0x080072f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 faf5 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f85b 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f8db 	bl	8001070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 f8a9 	bl	8001010 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  arm_status status;
  float32_t maxValue;

  status = ARM_MATH_SUCCESS;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	717b      	strb	r3, [r7, #5]

  /* Process the data through the CFFT/CIFFT module */
  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <main+0x98>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <main+0x9c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	491e      	ldr	r1, [pc, #120]	@ (8000f48 <main+0xa0>)
 8000ed0:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <main+0xa4>)
 8000ed2:	f003 f8dd 	bl	8004090 <arm_cfft_f32>

  /* Process the data through the Complex Magnitude Module for
  calculating the magnitude at each bin */
  arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <main+0xa8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	491d      	ldr	r1, [pc, #116]	@ (8000f54 <main+0xac>)
 8000ede:	481a      	ldr	r0, [pc, #104]	@ (8000f48 <main+0xa0>)
 8000ee0:	f003 f96e 	bl	80041c0 <arm_cmplx_mag_f32>

  /* Calculates maxValue and returns corresponding BIN value */
  arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <main+0xa8>)
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	463a      	mov	r2, r7
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <main+0xb0>)
 8000eec:	4819      	ldr	r0, [pc, #100]	@ (8000f54 <main+0xac>)
 8000eee:	f002 fd3d 	bl	800396c <arm_max_f32>

  if (testIndex !=  refIndex)
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <main+0xb0>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <main+0xb4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d001      	beq.n	8000f02 <main+0x5a>
  {
    status = ARM_MATH_TEST_FAILURE;
 8000efe:	23fa      	movs	r3, #250	@ 0xfa
 8000f00:	717b      	strb	r3, [r7, #5]
    for(uint16_t i=0; i<1024; i++)
    {
      printf("%u,%0.1f\r\n", i, testOutput[i]);
    }
#else
    for(uint16_t i=0; i<1024; i+=2)
 8000f02:	2300      	movs	r3, #0
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	e015      	b.n	8000f34 <main+0x8c>
    {
      printf("%0.1f\r\n", 100*testInput_f32_10khz2[i]);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <main+0xb8>)
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000f64 <main+0xbc>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1c:	ee17 0a90 	vmov	r0, s15
 8000f20:	f7ff fb1a 	bl	8000558 <__aeabi_f2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	480f      	ldr	r0, [pc, #60]	@ (8000f68 <main+0xc0>)
 8000f2a:	f004 fa47 	bl	80053bc <iprintf>
    for(uint16_t i=0; i<1024; i+=2)
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	3302      	adds	r3, #2
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f3a:	d3e5      	bcc.n	8000f08 <main+0x60>
    }
#endif
    for(;;);
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <main+0x94>
 8000f40:	20005284 	.word	0x20005284
 8000f44:	20004004 	.word	0x20004004
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	08007358 	.word	0x08007358
 8000f50:	20004000 	.word	0x20004000
 8000f54:	20004284 	.word	0x20004284
 8000f58:	20005288 	.word	0x20005288
 8000f5c:	20004008 	.word	0x20004008
 8000f60:	20002000 	.word	0x20002000
 8000f64:	42c80000 	.word	0x42c80000
 8000f68:	08007308 	.word	0x08007308

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	@ 0x58
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2244      	movs	r2, #68	@ 0x44
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f004 fa73 	bl	8005466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f92:	f000 fd85 	bl	8001aa0 <HAL_PWREx_ControlVoltageScaling>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f9c:	f000 f8e2 	bl	8001164 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000faa:	2340      	movs	r3, #64	@ 0x40
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fdbc 	bl	8001b4c <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fda:	f000 f8c3 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 f9bc 	bl	8002374 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001002:	f000 f8af 	bl	8001164 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3758      	adds	r7, #88	@ 0x58
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <MX_USART2_UART_Init+0x5c>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001054:	f001 ff10 	bl	8002e78 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105e:	f000 f881 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200041fc 	.word	0x200041fc
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <MX_GPIO_Init+0xc4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <MX_GPIO_Init+0xc4>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <MX_GPIO_Init+0xc4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a24      	ldr	r2, [pc, #144]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_GPIO_Init+0xc4>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ee:	f000 fcb1 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480b      	ldr	r0, [pc, #44]	@ (8001138 <MX_GPIO_Init+0xc8>)
 800110a:	f000 fb29 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800110e:	2320      	movs	r3, #32
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f000 fb1a 	bl	8001760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	@ 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000
 8001138:	48000800 	.word	0x48000800

0800113c <_write>:

/* USER CODE BEGIN 4 */
/* Add _write function to print over the uart */
int _write( int file, char *ptr, int len )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( &huart2, (uint8_t*) ptr, len, 50 );
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	b29a      	uxth	r2, r3
 800114c:	2332      	movs	r3, #50	@ 0x32
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	4803      	ldr	r0, [pc, #12]	@ (8001160 <_write+0x24>)
 8001152:	f001 fedf 	bl	8002f14 <HAL_UART_Transmit>
  return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200041fc 	.word	0x200041fc

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_MspInit+0x44>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	@ 0x60
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_MspInit+0x44>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	@ 0x58
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0a4      	sub	sp, #144	@ 0x90
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2268      	movs	r2, #104	@ 0x68
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 f944 	bl	8005466 <memset>
  if(huart->Instance==USART2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <HAL_UART_MspInit+0xb0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d13a      	bne.n	800125e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fae1 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001200:	f7ff ffb0 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <HAL_UART_MspInit+0xb4>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	4a18      	ldr	r2, [pc, #96]	@ (800126c <HAL_UART_MspInit+0xb4>)
 800120a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <HAL_UART_MspInit+0xb4>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_UART_MspInit+0xb4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <HAL_UART_MspInit+0xb4>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_UART_MspInit+0xb4>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001234:	230c      	movs	r3, #12
 8001236:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124a:	2307      	movs	r3, #7
 800124c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	f000 fa81 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3790      	adds	r7, #144	@ 0x90
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c6:	f000 f945 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_kill>:

int _kill(int pid, int sig)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012e8:	f004 f910 	bl	800550c <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2216      	movs	r2, #22
 80012f0:	601a      	str	r2, [r3, #0]
  return -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_exit>:

void _exit (int status)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001306:	f04f 31ff 	mov.w	r1, #4294967295
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffe7 	bl	80012de <_kill>
  while (1) {}    /* Make sure we hang here */
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <_exit+0x12>

08001314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00a      	b.n	800133c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001326:	f3af 8000 	nop.w
 800132a:	4601      	mov	r1, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	b2ca      	uxtb	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf0      	blt.n	8001326 <_read+0x12>
  }

  return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:
  }
  return len;
}

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001376:	605a      	str	r2, [r3, #4]
  return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f004 f890 	bl	800550c <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20028000 	.word	0x20028000
 8001418:	00000400 	.word	0x00000400
 800141c:	2000528c 	.word	0x2000528c
 8001420:	200053e0 	.word	0x200053e0

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f004 f84f 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff fd15 	bl	8000ea8 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	200041e0 	.word	0x200041e0
  ldr r2, =_sidata
 800148c:	0800a4f8 	.word	0x0800a4f8
  ldr r2, =_sbss
 8001490:	200041e0 	.word	0x200041e0
  ldr r4, =_ebss
 8001494:	200053e0 	.word	0x200053e0

08001498 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_IRQHandler>
	...

0800149c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_Init+0x3c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_Init+0x3c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b2:	2003      	movs	r0, #3
 80014b4:	f000 f920 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f80f 	bl	80014dc <HAL_InitTick>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	e001      	b.n	80014ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ca:	f7ff fe51 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_InitTick+0x6c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_InitTick+0x70>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_InitTick+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f91d 	bl	8001746 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d809      	bhi.n	800152c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f8f5 	bl	800170e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_InitTick+0x74>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e007      	b.n	800153c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e004      	b.n	800153c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e001      	b.n	800153c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20004014 	.word	0x20004014
 800154c:	2000400c 	.word	0x2000400c
 8001550:	20004010 	.word	0x20004010

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20004014 	.word	0x20004014
 8001578:	20005290 	.word	0x20005290

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20005290 	.word	0x20005290

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff47 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff5c 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffb0 	bl	80016b4 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e154      	b.n	8001a1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8146 	beq.w	8001a14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_Init+0x40>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	6939      	ldr	r1, [r7, #16]
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a0 	beq.w	8001a14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b58      	ldr	r3, [pc, #352]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d8:	4a57      	ldr	r2, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6613      	str	r3, [r2, #96]	@ 0x60
 80018e0:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ec:	4a53      	ldr	r2, [pc, #332]	@ (8001a3c <HAL_GPIO_Init+0x2dc>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001916:	d019      	beq.n	800194c <HAL_GPIO_Init+0x1ec>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_GPIO_Init+0x1e8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2e4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_GPIO_Init+0x1e4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2e8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1e0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_GPIO_Init+0x1dc>
 8001938:	2304      	movs	r3, #4
 800193a:	e008      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 800193c:	2307      	movs	r3, #7
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001940:	2303      	movs	r3, #3
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	@ (8001a3c <HAL_GPIO_Init+0x2dc>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800196c:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001990:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ba:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a0e:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f aea3 	bne.w	8001770 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48000c00 	.word	0x48000c00
 8001a4c:	48001000 	.word	0x48001000
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aae:	d130      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001abc:	d038      	beq.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2232      	movs	r2, #50	@ 0x32
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0c9b      	lsrs	r3, r3, #18
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae4:	e002      	b.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af8:	d102      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f2      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0c:	d110      	bne.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e00f      	b.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1e:	d007      	beq.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b20:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b28:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40007000 	.word	0x40007000
 8001b44:	2000400c 	.word	0x2000400c
 8001b48:	431bde83 	.word	0x431bde83

08001b4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f000 bc02 	b.w	8002364 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b60:	4b96      	ldr	r3, [pc, #600]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6a:	4b94      	ldr	r3, [pc, #592]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80e4 	beq.w	8001d4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4c>
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	f040 808b 	bne.w	8001ca6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	f040 8087 	bne.w	8001ca6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b98:	4b88      	ldr	r3, [pc, #544]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x64>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e3d9      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	4b81      	ldr	r3, [pc, #516]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_RCC_OscConfig+0x7e>
 8001bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc8:	e005      	b.n	8001bd6 <HAL_RCC_OscConfig+0x8a>
 8001bca:	4b7c      	ldr	r3, [pc, #496]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d223      	bcs.n	8001c22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fd8c 	bl	80026fc <RCC_SetFlashLatencyFromMSIRange>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e3ba      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bee:	4b73      	ldr	r3, [pc, #460]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a72      	ldr	r2, [pc, #456]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b70      	ldr	r3, [pc, #448]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	496d      	ldr	r1, [pc, #436]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	4968      	ldr	r1, [pc, #416]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	e025      	b.n	8001c6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c22:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a65      	ldr	r2, [pc, #404]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4960      	ldr	r1, [pc, #384]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c40:	4b5e      	ldr	r3, [pc, #376]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	495b      	ldr	r1, [pc, #364]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fd4c 	bl	80026fc <RCC_SetFlashLatencyFromMSIRange>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e37a      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6e:	f000 fc81 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b51      	ldr	r3, [pc, #324]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4950      	ldr	r1, [pc, #320]	@ (8001dc0 <HAL_RCC_OscConfig+0x274>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a4e      	ldr	r2, [pc, #312]	@ (8001dc4 <HAL_RCC_OscConfig+0x278>)
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc8 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc22 	bl	80014dc <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d052      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	e35e      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d032      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cae:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a42      	ldr	r2, [pc, #264]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fc5f 	bl	800157c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fc5b 	bl	800157c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e347      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce0:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a35      	ldr	r2, [pc, #212]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4930      	ldr	r1, [pc, #192]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	492b      	ldr	r1, [pc, #172]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
 8001d12:	e01a      	b.n	8001d4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d14:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a28      	ldr	r2, [pc, #160]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc2c 	bl	800157c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d28:	f7ff fc28 	bl	800157c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e314      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1dc>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d073      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x21c>
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d10e      	bne.n	8001d80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d063      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2f0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d15f      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e2f1      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x24c>
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e025      	b.n	8001de4 <HAL_RCC_OscConfig+0x298>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da0:	d114      	bne.n	8001dcc <HAL_RCC_OscConfig+0x280>
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a02      	ldr	r2, [pc, #8]	@ (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e013      	b.n	8001de4 <HAL_RCC_OscConfig+0x298>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08007310 	.word	0x08007310
 8001dc4:	2000400c 	.word	0x2000400c
 8001dc8:	20004010 	.word	0x20004010
 8001dcc:	4ba0      	ldr	r3, [pc, #640]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a9f      	ldr	r2, [pc, #636]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b9d      	ldr	r3, [pc, #628]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a9c      	ldr	r2, [pc, #624]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fbc6 	bl	800157c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fbc2 	bl	800157c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	@ 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e2ae      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e06:	4b92      	ldr	r3, [pc, #584]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x2a8>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fbb2 	bl	800157c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fbae 	bl	800157c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	@ 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e29a      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2e:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2d0>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d060      	beq.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x310>
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d119      	bne.n	8001e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d116      	bne.n	8001e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x328>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e277      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4973      	ldr	r1, [pc, #460]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e88:	e040      	b.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d023      	beq.n	8001eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e92:	4b6f      	ldr	r3, [pc, #444]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6e      	ldr	r2, [pc, #440]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb6d 	bl	800157c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fb69 	bl	800157c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e255      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	4b65      	ldr	r3, [pc, #404]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b62      	ldr	r3, [pc, #392]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	061b      	lsls	r3, r3, #24
 8001ed2:	495f      	ldr	r1, [pc, #380]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	e018      	b.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b5d      	ldr	r3, [pc, #372]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5c      	ldr	r2, [pc, #368]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fb49 	bl	800157c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eee:	f7ff fb45 	bl	800157c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e231      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f00:	4b53      	ldr	r3, [pc, #332]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f20:	4b4b      	ldr	r3, [pc, #300]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	4a4a      	ldr	r2, [pc, #296]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff fb24 	bl	800157c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fb20 	bl	800157c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e20c      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ef      	beq.n	8001f38 <HAL_RCC_OscConfig+0x3ec>
 8001f58:	e01b      	b.n	8001f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f60:	4a3b      	ldr	r2, [pc, #236]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fb07 	bl	800157c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fb03 	bl	800157c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1ef      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f84:	4b32      	ldr	r3, [pc, #200]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ef      	bne.n	8001f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80a6 	beq.w	80020ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbc:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_RCC_OscConfig+0x508>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d118      	bne.n	800200a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <HAL_RCC_OscConfig+0x508>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_RCC_OscConfig+0x508>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff faca 	bl	800157c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7ff fac6 	bl	800157c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1b2      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x508>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x4d8>
 8002012:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002022:	e029      	b.n	8002078 <HAL_RCC_OscConfig+0x52c>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b05      	cmp	r3, #5
 800202a:	d115      	bne.n	8002058 <HAL_RCC_OscConfig+0x50c>
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a07      	ldr	r2, [pc, #28]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800203c:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	4a03      	ldr	r2, [pc, #12]	@ (8002050 <HAL_RCC_OscConfig+0x504>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204c:	e014      	b.n	8002078 <HAL_RCC_OscConfig+0x52c>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	4b9a      	ldr	r3, [pc, #616]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205e:	4a99      	ldr	r2, [pc, #612]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002068:	4b96      	ldr	r3, [pc, #600]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	4a95      	ldr	r2, [pc, #596]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d016      	beq.n	80020ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff fa7c 	bl	800157c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	e00a      	b.n	800209e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff fa78 	bl	800157c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e162      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	4b89      	ldr	r3, [pc, #548]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ed      	beq.n	8002088 <HAL_RCC_OscConfig+0x53c>
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7ff fa65 	bl	800157c <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7ff fa61 	bl	800157c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e14b      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020cc:	4b7d      	ldr	r3, [pc, #500]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ed      	bne.n	80020b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020da:	7ffb      	ldrb	r3, [r7, #31]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b78      	ldr	r3, [pc, #480]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	4a77      	ldr	r2, [pc, #476]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03c      	beq.n	8002172 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01c      	beq.n	800213a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002100:	4b70      	ldr	r3, [pc, #448]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002106:	4a6f      	ldr	r2, [pc, #444]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff fa34 	bl	800157c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002118:	f7ff fa30 	bl	800157c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e11c      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212a:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800212c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ef      	beq.n	8002118 <HAL_RCC_OscConfig+0x5cc>
 8002138:	e01b      	b.n	8002172 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800213a:	4b62      	ldr	r3, [pc, #392]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800213c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002140:	4a60      	ldr	r2, [pc, #384]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7ff fa17 	bl	800157c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002152:	f7ff fa13 	bl	800157c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0ff      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002164:	4b57      	ldr	r3, [pc, #348]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ef      	bne.n	8002152 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80f3 	beq.w	8002362 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	2b02      	cmp	r3, #2
 8002182:	f040 80c9 	bne.w	8002318 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002186:	4b4f      	ldr	r3, [pc, #316]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0203 	and.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	429a      	cmp	r2, r3
 8002198:	d12c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	3b01      	subs	r3, #1
 80021a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d123      	bne.n	80021f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d11b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d113      	bne.n	80021f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	3b01      	subs	r3, #1
 80021da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d109      	bne.n	80021f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d06b      	beq.n	80022cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d062      	beq.n	80022c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021fa:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0ac      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800220a:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002210:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002214:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002216:	f7ff f9b1 	bl	800157c <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff f9ad 	bl	800157c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e099      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <HAL_RCC_OscConfig+0x77c>)
 8002242:	4013      	ands	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800224c:	3a01      	subs	r2, #1
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002256:	0212      	lsls	r2, r2, #8
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800225e:	0852      	lsrs	r2, r2, #1
 8002260:	3a01      	subs	r2, #1
 8002262:	0552      	lsls	r2, r2, #21
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800226a:	0852      	lsrs	r2, r2, #1
 800226c:	3a01      	subs	r2, #1
 800226e:	0652      	lsls	r2, r2, #25
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002276:	06d2      	lsls	r2, r2, #27
 8002278:	430a      	orrs	r2, r1
 800227a:	4912      	ldr	r1, [pc, #72]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002280:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0f      	ldr	r2, [pc, #60]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228c:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a0c      	ldr	r2, [pc, #48]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002298:	f7ff f970 	bl	800157c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff f96c 	bl	800157c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e058      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <HAL_RCC_OscConfig+0x778>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022be:	e050      	b.n	8002362 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e04f      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d144      	bne.n	8002362 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e4:	4b21      	ldr	r3, [pc, #132]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a20      	ldr	r2, [pc, #128]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f0:	f7ff f944 	bl	800157c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff f940 	bl	800157c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e02c      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x7ac>
 8002316:	e024      	b.n	8002362 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d01f      	beq.n	800235e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a12      	ldr	r2, [pc, #72]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7ff f927 	bl	800157c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f923 	bl	800157c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4905      	ldr	r1, [pc, #20]	@ (800236c <HAL_RCC_OscConfig+0x820>)
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_RCC_OscConfig+0x824>)
 8002358:	4013      	ands	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
 800235c:	e001      	b.n	8002362 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	feeefffc 	.word	0xfeeefffc

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0e7      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b75      	ldr	r3, [pc, #468]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b72      	ldr	r3, [pc, #456]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4970      	ldr	r1, [pc, #448]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0cf      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d908      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b63      	ldr	r3, [pc, #396]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4960      	ldr	r1, [pc, #384]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d04c      	beq.n	800248c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0a6      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002412:	4b54      	ldr	r3, [pc, #336]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e09a      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242a:	4b4e      	ldr	r3, [pc, #312]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e08e      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243a:	4b4a      	ldr	r3, [pc, #296]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e086      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b46      	ldr	r3, [pc, #280]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4943      	ldr	r1, [pc, #268]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7ff f88e 	bl	800157c <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7ff f88a 	bl	800157c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e06e      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b3a      	ldr	r3, [pc, #232]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d208      	bcs.n	80024ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	492b      	ldr	r1, [pc, #172]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d210      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 0207 	bic.w	r2, r3, #7
 80024d0:	4923      	ldr	r1, [pc, #140]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e036      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4918      	ldr	r1, [pc, #96]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4910      	ldr	r1, [pc, #64]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002528:	f000 f824 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	490b      	ldr	r1, [pc, #44]	@ (8002568 <HAL_RCC_ClockConfig+0x1f4>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	4a09      	ldr	r2, [pc, #36]	@ (800256c <HAL_RCC_ClockConfig+0x1f8>)
 8002546:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1fc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe ffc5 	bl	80014dc <HAL_InitTick>
 8002552:	4603      	mov	r3, r0
 8002554:	72fb      	strb	r3, [r7, #11]

  return status;
 8002556:	7afb      	ldrb	r3, [r7, #11]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	08007310 	.word	0x08007310
 800256c:	2000400c 	.word	0x2000400c
 8002570:	20004010 	.word	0x20004010

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002582:	4b3e      	ldr	r3, [pc, #248]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258c:	4b3b      	ldr	r3, [pc, #236]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d121      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d11e      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a8:	4b34      	ldr	r3, [pc, #208]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b4:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e004      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f8:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x114>)
 80025fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d134      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0xa6>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d003      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xac>
 8002618:	e005      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x110>)
 800261c:	617b      	str	r3, [r7, #20]
      break;
 800261e:	e005      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002620:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x114>)
 8002622:	617b      	str	r3, [r7, #20]
      break;
 8002624:	e002      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	617b      	str	r3, [r7, #20]
      break;
 800262a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	3301      	adds	r3, #1
 8002638:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	fb03 f202 	mul.w	r2, r3, r2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	0e5b      	lsrs	r3, r3, #25
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800266c:	69bb      	ldr	r3, [r7, #24]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	08007328 	.word	0x08007328
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200

0800268c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000400c 	.word	0x2000400c

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08007320 	.word	0x08007320

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d4:	f7ff ffda 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4904      	ldr	r1, [pc, #16]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08007320 	.word	0x08007320

080026fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002708:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002714:	f7ff f9b6 	bl	8001a84 <HAL_PWREx_GetVoltageRange>
 8002718:	6178      	str	r0, [r7, #20]
 800271a:	e014      	b.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b25      	ldr	r3, [pc, #148]	@ (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	4a24      	ldr	r2, [pc, #144]	@ (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	@ 0x58
 8002728:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002734:	f7ff f9a6 	bl	8001a84 <HAL_PWREx_GetVoltageRange>
 8002738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	4a1d      	ldr	r2, [pc, #116]	@ (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274c:	d10b      	bne.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b80      	cmp	r3, #128	@ 0x80
 8002752:	d919      	bls.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2ba0      	cmp	r3, #160	@ 0xa0
 8002758:	d902      	bls.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800275a:	2302      	movs	r3, #2
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e013      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e010      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b80      	cmp	r3, #128	@ 0x80
 800276a:	d902      	bls.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800276c:	2303      	movs	r3, #3
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e00a      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b80      	cmp	r3, #128	@ 0x80
 8002776:	d102      	bne.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e004      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b70      	cmp	r3, #112	@ 0x70
 8002782:	d101      	bne.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 0207 	bic.w	r2, r3, #7
 8002790:	4909      	ldr	r1, [pc, #36]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40022000 	.word	0x40022000

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d031      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027e0:	d01a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027e6:	d814      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027f0:	d10f      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027fe:	e00c      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fa44 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002810:	e003      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	74fb      	strb	r3, [r7, #19]
      break;
 8002816:	e000      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10b      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002820:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	494e      	ldr	r1, [pc, #312]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002836:	e001      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 809e 	beq.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800284e:	4b46      	ldr	r3, [pc, #280]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b40      	ldr	r3, [pc, #256]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002868:	4a3f      	ldr	r2, [pc, #252]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287c:	2301      	movs	r3, #1
 800287e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002880:	4b3a      	ldr	r3, [pc, #232]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a39      	ldr	r2, [pc, #228]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800288c:	f7fe fe76 	bl	800157c <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002892:	e009      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fe72 	bl	800157c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	74fb      	strb	r3, [r7, #19]
        break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a8:	4b30      	ldr	r3, [pc, #192]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d15a      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01e      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d019      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e2:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002902:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d016      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fe32 	bl	800157c <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291a:	e00b      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe fe2e 	bl	800157c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d902      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	74fb      	strb	r3, [r7, #19]
            break;
 8002932:	e006      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ec      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002956:	4904      	ldr	r1, [pc, #16]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800295e:	e009      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002974:	7c7b      	ldrb	r3, [r7, #17]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b9e      	ldr	r3, [pc, #632]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	4a9d      	ldr	r2, [pc, #628]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002984:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002992:	4b98      	ldr	r3, [pc, #608]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002998:	f023 0203 	bic.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4994      	ldr	r1, [pc, #592]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b4:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 020c 	bic.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	498c      	ldr	r1, [pc, #560]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029d6:	4b87      	ldr	r3, [pc, #540]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	4983      	ldr	r1, [pc, #524]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	497b      	ldr	r1, [pc, #492]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a1a:	4b76      	ldr	r3, [pc, #472]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	4972      	ldr	r1, [pc, #456]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a42:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	496a      	ldr	r1, [pc, #424]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6c:	4961      	ldr	r1, [pc, #388]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a80:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	4959      	ldr	r1, [pc, #356]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa2:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	4950      	ldr	r1, [pc, #320]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad2:	4948      	ldr	r1, [pc, #288]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae6:	4b43      	ldr	r3, [pc, #268]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002aec:	f023 0203 	bic.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	493f      	ldr	r1, [pc, #252]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d028      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b08:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b16:	4937      	ldr	r1, [pc, #220]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b26:	d106      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b28:	4b32      	ldr	r3, [pc, #200]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a31      	ldr	r2, [pc, #196]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b32:	60d3      	str	r3, [r2, #12]
 8002b34:	e011      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f8a4 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b66:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	491f      	ldr	r1, [pc, #124]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b86:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b90:	60d3      	str	r3, [r2, #12]
 8002b92:	e011      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f875 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be4:	4b03      	ldr	r3, [pc, #12]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a02      	ldr	r2, [pc, #8]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bee:	60d3      	str	r3, [r2, #12]
 8002bf0:	e014      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2101      	movs	r1, #1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f843 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01c      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	4916      	ldr	r1, [pc, #88]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f820 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7c:	4904      	ldr	r1, [pc, #16]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000

08002c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca2:	4b74      	ldr	r3, [pc, #464]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cae:	4b71      	ldr	r3, [pc, #452]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d10d      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d047      	beq.n	8002d6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e044      	b.n	8002d6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d018      	beq.n	8002d1a <RCCEx_PLLSAI1_Config+0x86>
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d825      	bhi.n	8002d38 <RCCEx_PLLSAI1_Config+0xa4>
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0x62>
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d009      	beq.n	8002d08 <RCCEx_PLLSAI1_Config+0x74>
 8002cf4:	e020      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11d      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e01a      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d08:	4b5a      	ldr	r3, [pc, #360]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e013      	b.n	8002d42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d1a:	4b56      	ldr	r3, [pc, #344]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d26:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d36:	e006      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e004      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e002      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d4e:	4b49      	ldr	r3, [pc, #292]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	430b      	orrs	r3, r1
 8002d64:	4943      	ldr	r1, [pc, #268]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d17c      	bne.n	8002e6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d70:	4b40      	ldr	r3, [pc, #256]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3f      	ldr	r2, [pc, #252]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fbfe 	bl	800157c <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d82:	e009      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d84:	f7fe fbfa 	bl	800157c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	73fb      	strb	r3, [r7, #15]
        break;
 8002d96:	e005      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ef      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d15f      	bne.n	8002e6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d110      	bne.n	8002dd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db0:	4b30      	ldr	r3, [pc, #192]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002db8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	0211      	lsls	r1, r2, #8
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68d2      	ldr	r2, [r2, #12]
 8002dc6:	06d2      	lsls	r2, r2, #27
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	492a      	ldr	r1, [pc, #168]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	610b      	str	r3, [r1, #16]
 8002dd0:	e027      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d112      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd8:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002de0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6892      	ldr	r2, [r2, #8]
 8002de8:	0211      	lsls	r1, r2, #8
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6912      	ldr	r2, [r2, #16]
 8002dee:	0852      	lsrs	r2, r2, #1
 8002df0:	3a01      	subs	r2, #1
 8002df2:	0552      	lsls	r2, r2, #21
 8002df4:	430a      	orrs	r2, r1
 8002df6:	491f      	ldr	r1, [pc, #124]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	610b      	str	r3, [r1, #16]
 8002dfc:	e011      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6892      	ldr	r2, [r2, #8]
 8002e0e:	0211      	lsls	r1, r2, #8
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6952      	ldr	r2, [r2, #20]
 8002e14:	0852      	lsrs	r2, r2, #1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0652      	lsls	r2, r2, #25
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	4915      	ldr	r1, [pc, #84]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e22:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a13      	ldr	r2, [pc, #76]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fba5 	bl	800157c <HAL_GetTick>
 8002e32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e34:	e009      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e36:	f7fe fba1 	bl	800157c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d902      	bls.n	8002e4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	73fb      	strb	r3, [r7, #15]
          break;
 8002e48:	e005      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ef      	beq.n	8002e36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4903      	ldr	r1, [pc, #12]	@ (8002e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e040      	b.n	8002f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f98c 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb38 	bl	8003534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8af 	bl	8003028 <UART_SetConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01b      	b.n	8002f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fbb7 	bl	8003678 <UART_CheckIdleState>
 8002f0a:	4603      	mov	r3, r0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d177      	bne.n	800301c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Transmit+0x24>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e070      	b.n	800301e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	@ 0x21
 8002f48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fb17 	bl	800157c <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02f      	b.n	8002fe6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	@ 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fc19 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03b      	b.n	800301e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e007      	b.n	8002fd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c9      	bne.n	8002f86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	@ 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fbe3 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e005      	b.n	800301e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b08a      	sub	sp, #40	@ 0x28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4ba5      	ldr	r3, [pc, #660]	@ (80032ec <UART_SetConfig+0x2c4>)
 8003058:	4013      	ands	r3, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a9a      	ldr	r2, [pc, #616]	@ (80032f0 <UART_SetConfig+0x2c8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003090:	4313      	orrs	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a91      	ldr	r2, [pc, #580]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d126      	bne.n	8003100 <UART_SetConfig+0xd8>
 80030b2:	4b91      	ldr	r3, [pc, #580]	@ (80032f8 <UART_SetConfig+0x2d0>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d81b      	bhi.n	80030f8 <UART_SetConfig+0xd0>
 80030c0:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <UART_SetConfig+0xa0>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f1 	.word	0x080030f1
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030de:	e0d6      	b.n	800328e <UART_SetConfig+0x266>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e0d2      	b.n	800328e <UART_SetConfig+0x266>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e0ce      	b.n	800328e <UART_SetConfig+0x266>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f6:	e0ca      	b.n	800328e <UART_SetConfig+0x266>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e0c6      	b.n	800328e <UART_SetConfig+0x266>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a7d      	ldr	r2, [pc, #500]	@ (80032fc <UART_SetConfig+0x2d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d138      	bne.n	800317c <UART_SetConfig+0x154>
 800310a:	4b7b      	ldr	r3, [pc, #492]	@ (80032f8 <UART_SetConfig+0x2d0>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d82d      	bhi.n	8003174 <UART_SetConfig+0x14c>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <UART_SetConfig+0xf8>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003155 	.word	0x08003155
 8003124:	08003175 	.word	0x08003175
 8003128:	08003175 	.word	0x08003175
 800312c:	08003175 	.word	0x08003175
 8003130:	08003165 	.word	0x08003165
 8003134:	08003175 	.word	0x08003175
 8003138:	08003175 	.word	0x08003175
 800313c:	08003175 	.word	0x08003175
 8003140:	0800315d 	.word	0x0800315d
 8003144:	08003175 	.word	0x08003175
 8003148:	08003175 	.word	0x08003175
 800314c:	08003175 	.word	0x08003175
 8003150:	0800316d 	.word	0x0800316d
 8003154:	2300      	movs	r3, #0
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315a:	e098      	b.n	800328e <UART_SetConfig+0x266>
 800315c:	2302      	movs	r3, #2
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003162:	e094      	b.n	800328e <UART_SetConfig+0x266>
 8003164:	2304      	movs	r3, #4
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316a:	e090      	b.n	800328e <UART_SetConfig+0x266>
 800316c:	2308      	movs	r3, #8
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003172:	e08c      	b.n	800328e <UART_SetConfig+0x266>
 8003174:	2310      	movs	r3, #16
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e088      	b.n	800328e <UART_SetConfig+0x266>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5f      	ldr	r2, [pc, #380]	@ (8003300 <UART_SetConfig+0x2d8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d125      	bne.n	80031d2 <UART_SetConfig+0x1aa>
 8003186:	4b5c      	ldr	r3, [pc, #368]	@ (80032f8 <UART_SetConfig+0x2d0>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003190:	2b30      	cmp	r3, #48	@ 0x30
 8003192:	d016      	beq.n	80031c2 <UART_SetConfig+0x19a>
 8003194:	2b30      	cmp	r3, #48	@ 0x30
 8003196:	d818      	bhi.n	80031ca <UART_SetConfig+0x1a2>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d00a      	beq.n	80031b2 <UART_SetConfig+0x18a>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d814      	bhi.n	80031ca <UART_SetConfig+0x1a2>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <UART_SetConfig+0x182>
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d008      	beq.n	80031ba <UART_SetConfig+0x192>
 80031a8:	e00f      	b.n	80031ca <UART_SetConfig+0x1a2>
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b0:	e06d      	b.n	800328e <UART_SetConfig+0x266>
 80031b2:	2302      	movs	r3, #2
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b8:	e069      	b.n	800328e <UART_SetConfig+0x266>
 80031ba:	2304      	movs	r3, #4
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c0:	e065      	b.n	800328e <UART_SetConfig+0x266>
 80031c2:	2308      	movs	r3, #8
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c8:	e061      	b.n	800328e <UART_SetConfig+0x266>
 80031ca:	2310      	movs	r3, #16
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d0:	e05d      	b.n	800328e <UART_SetConfig+0x266>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <UART_SetConfig+0x2dc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <UART_SetConfig+0x200>
 80031dc:	4b46      	ldr	r3, [pc, #280]	@ (80032f8 <UART_SetConfig+0x2d0>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031e8:	d016      	beq.n	8003218 <UART_SetConfig+0x1f0>
 80031ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80031ec:	d818      	bhi.n	8003220 <UART_SetConfig+0x1f8>
 80031ee:	2b80      	cmp	r3, #128	@ 0x80
 80031f0:	d00a      	beq.n	8003208 <UART_SetConfig+0x1e0>
 80031f2:	2b80      	cmp	r3, #128	@ 0x80
 80031f4:	d814      	bhi.n	8003220 <UART_SetConfig+0x1f8>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0x1d8>
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d008      	beq.n	8003210 <UART_SetConfig+0x1e8>
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x1f8>
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e042      	b.n	800328e <UART_SetConfig+0x266>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e03e      	b.n	800328e <UART_SetConfig+0x266>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e03a      	b.n	800328e <UART_SetConfig+0x266>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e036      	b.n	800328e <UART_SetConfig+0x266>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e032      	b.n	800328e <UART_SetConfig+0x266>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <UART_SetConfig+0x2c8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12a      	bne.n	8003288 <UART_SetConfig+0x260>
 8003232:	4b31      	ldr	r3, [pc, #196]	@ (80032f8 <UART_SetConfig+0x2d0>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800323c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003240:	d01a      	beq.n	8003278 <UART_SetConfig+0x250>
 8003242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003246:	d81b      	bhi.n	8003280 <UART_SetConfig+0x258>
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324c:	d00c      	beq.n	8003268 <UART_SetConfig+0x240>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003252:	d815      	bhi.n	8003280 <UART_SetConfig+0x258>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x238>
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d008      	beq.n	8003270 <UART_SetConfig+0x248>
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x258>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003266:	e012      	b.n	800328e <UART_SetConfig+0x266>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326e:	e00e      	b.n	800328e <UART_SetConfig+0x266>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003276:	e00a      	b.n	800328e <UART_SetConfig+0x266>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327e:	e006      	b.n	800328e <UART_SetConfig+0x266>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e002      	b.n	800328e <UART_SetConfig+0x266>
 8003288:	2310      	movs	r3, #16
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <UART_SetConfig+0x2c8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	f040 808b 	bne.w	80033b0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800329a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d834      	bhi.n	800330c <UART_SetConfig+0x2e4>
 80032a2:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <UART_SetConfig+0x280>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	0800330d 	.word	0x0800330d
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	080032db 	.word	0x080032db
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7ff f9ea 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80032d0:	61f8      	str	r0, [r7, #28]
        break;
 80032d2:	e021      	b.n	8003318 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <UART_SetConfig+0x2e0>)
 80032d6:	61fb      	str	r3, [r7, #28]
        break;
 80032d8:	e01e      	b.n	8003318 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032da:	f7ff f94b 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80032de:	61f8      	str	r0, [r7, #28]
        break;
 80032e0:	e01a      	b.n	8003318 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e6:	61fb      	str	r3, [r7, #28]
        break;
 80032e8:	e016      	b.n	8003318 <UART_SetConfig+0x2f0>
 80032ea:	bf00      	nop
 80032ec:	efff69f3 	.word	0xefff69f3
 80032f0:	40008000 	.word	0x40008000
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40004400 	.word	0x40004400
 8003300:	40004800 	.word	0x40004800
 8003304:	40004c00 	.word	0x40004c00
 8003308:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003316:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80fa 	beq.w	8003514 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	429a      	cmp	r2, r3
 800332e:	d305      	bcc.n	800333c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	d903      	bls.n	8003344 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003342:	e0e7      	b.n	8003514 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2200      	movs	r2, #0
 8003348:	461c      	mov	r4, r3
 800334a:	4615      	mov	r5, r2
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	022b      	lsls	r3, r5, #8
 8003356:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800335a:	0222      	lsls	r2, r4, #8
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	6849      	ldr	r1, [r1, #4]
 8003360:	0849      	lsrs	r1, r1, #1
 8003362:	2000      	movs	r0, #0
 8003364:	4688      	mov	r8, r1
 8003366:	4681      	mov	r9, r0
 8003368:	eb12 0a08 	adds.w	sl, r2, r8
 800336c:	eb43 0b09 	adc.w	fp, r3, r9
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800337e:	4650      	mov	r0, sl
 8003380:	4659      	mov	r1, fp
 8003382:	f7fd fc19 	bl	8000bb8 <__aeabi_uldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4613      	mov	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003394:	d308      	bcc.n	80033a8 <UART_SetConfig+0x380>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339c:	d204      	bcs.n	80033a8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e0b5      	b.n	8003514 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033ae:	e0b1      	b.n	8003514 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	d15d      	bne.n	8003476 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80033ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d827      	bhi.n	8003412 <UART_SetConfig+0x3ea>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <UART_SetConfig+0x3a0>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033fd 	.word	0x080033fd
 80033d4:	08003413 	.word	0x08003413
 80033d8:	08003403 	.word	0x08003403
 80033dc:	08003413 	.word	0x08003413
 80033e0:	08003413 	.word	0x08003413
 80033e4:	08003413 	.word	0x08003413
 80033e8:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7ff f95a 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80033f0:	61f8      	str	r0, [r7, #28]
        break;
 80033f2:	e014      	b.n	800341e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7ff f96c 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80033f8:	61f8      	str	r0, [r7, #28]
        break;
 80033fa:	e010      	b.n	800341e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003530 <UART_SetConfig+0x508>)
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e00d      	b.n	800341e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7ff f8b7 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8003406:	61f8      	str	r0, [r7, #28]
        break;
 8003408:	e009      	b.n	800341e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800340e:	61fb      	str	r3, [r7, #28]
        break;
 8003410:	e005      	b.n	800341e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800341c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d077      	beq.n	8003514 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005a      	lsls	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d916      	bls.n	800346e <UART_SetConfig+0x446>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003446:	d212      	bcs.n	800346e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f023 030f 	bic.w	r3, r3, #15
 8003450:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	b29b      	uxth	r3, r3
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	b29a      	uxth	r2, r3
 800345e:	8afb      	ldrh	r3, [r7, #22]
 8003460:	4313      	orrs	r3, r2
 8003462:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	8afa      	ldrh	r2, [r7, #22]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	e052      	b.n	8003514 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003474:	e04e      	b.n	8003514 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003476:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800347a:	2b08      	cmp	r3, #8
 800347c:	d827      	bhi.n	80034ce <UART_SetConfig+0x4a6>
 800347e:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <UART_SetConfig+0x45c>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034b9 	.word	0x080034b9
 8003490:	080034cf 	.word	0x080034cf
 8003494:	080034bf 	.word	0x080034bf
 8003498:	080034cf 	.word	0x080034cf
 800349c:	080034cf 	.word	0x080034cf
 80034a0:	080034cf 	.word	0x080034cf
 80034a4:	080034c7 	.word	0x080034c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7ff f8fc 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80034ac:	61f8      	str	r0, [r7, #28]
        break;
 80034ae:	e014      	b.n	80034da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7ff f90e 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80034b4:	61f8      	str	r0, [r7, #28]
        break;
 80034b6:	e010      	b.n	80034da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <UART_SetConfig+0x508>)
 80034ba:	61fb      	str	r3, [r7, #28]
        break;
 80034bc:	e00d      	b.n	80034da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034be:	f7ff f859 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80034c2:	61f8      	str	r0, [r7, #28]
        break;
 80034c4:	e009      	b.n	80034da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ca:	61fb      	str	r3, [r7, #28]
        break;
 80034cc:	e005      	b.n	80034da <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034d8:	bf00      	nop
    }

    if (pclk != 0U)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d019      	beq.n	8003514 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	085a      	lsrs	r2, r3, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	d909      	bls.n	800350e <UART_SetConfig+0x4e6>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003500:	d205      	bcs.n	800350e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e002      	b.n	8003514 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003520:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352e:	bf00      	nop
 8003530:	00f42400 	.word	0x00f42400

08003534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01a      	beq.n	800364a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003632:	d10a      	bne.n	800364a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b098      	sub	sp, #96	@ 0x60
 800367c:	af02      	add	r7, sp, #8
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003688:	f7fd ff78 	bl	800157c <HAL_GetTick>
 800368c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d12e      	bne.n	80036fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800369c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a4:	2200      	movs	r2, #0
 80036a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f88c 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d021      	beq.n	80036fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e6      	bne.n	80036b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e062      	b.n	80037c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d149      	bne.n	800379c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	2200      	movs	r2, #0
 8003712:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f856 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03c      	beq.n	800379c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	623b      	str	r3, [r7, #32]
   return(result);
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
 8003742:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e6      	bne.n	8003722 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	60fb      	str	r3, [r7, #12]
   return(result);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003774:	61fa      	str	r2, [r7, #28]
 8003776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	617b      	str	r3, [r7, #20]
   return(result);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e011      	b.n	80037c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3758      	adds	r7, #88	@ 0x58
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d8:	e04f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d04b      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fd fecb 	bl	800157c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e04e      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d037      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b80      	cmp	r3, #128	@ 0x80
 800380e:	d034      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b40      	cmp	r3, #64	@ 0x40
 8003814:	d031      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d110      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f838 	bl	80038a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2208      	movs	r2, #8
 8003836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e029      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003854:	d111      	bne.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800385e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f81e 	bl	80038a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d0a0      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b095      	sub	sp, #84	@ 0x54
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e6      	bne.n	80038aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3308      	adds	r3, #8
 80038fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	60bb      	str	r3, [r7, #8]
   return(result);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0310 	bic.w	r3, r3, #16
 800392c:	647b      	str	r3, [r7, #68]	@ 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	613b      	str	r3, [r7, #16]
   return(result);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e6      	bne.n	8003918 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800395e:	bf00      	nop
 8003960:	3754      	adds	r7, #84	@ 0x54
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <arm_max_f32>:
 800396c:	f101 3cff 	add.w	ip, r1, #4294967295
 8003970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003972:	4607      	mov	r7, r0
 8003974:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8003978:	ecf7 7a01 	vldmia	r7!, {s15}
 800397c:	d060      	beq.n	8003a40 <arm_max_f32+0xd4>
 800397e:	2400      	movs	r4, #0
 8003980:	3014      	adds	r0, #20
 8003982:	4625      	mov	r5, r4
 8003984:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8003988:	ed10 7a04 	vldr	s14, [r0, #-16]
 800398c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	bf48      	it	mi
 8003996:	eef0 7a47 	vmovmi.f32	s15, s14
 800399a:	ed10 7a03 	vldr	s14, [r0, #-12]
 800399e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a2:	bf48      	it	mi
 80039a4:	1c65      	addmi	r5, r4, #1
 80039a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039aa:	bf48      	it	mi
 80039ac:	eef0 7a47 	vmovmi.f32	s15, s14
 80039b0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80039b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b8:	bf48      	it	mi
 80039ba:	1ca5      	addmi	r5, r4, #2
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	bf48      	it	mi
 80039c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80039c6:	ed10 7a01 	vldr	s14, [r0, #-4]
 80039ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ce:	bf48      	it	mi
 80039d0:	1ce5      	addmi	r5, r4, #3
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	f104 0404 	add.w	r4, r4, #4
 80039da:	bf44      	itt	mi
 80039dc:	eef0 7a47 	vmovmi.f32	s15, s14
 80039e0:	4625      	movmi	r5, r4
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	f100 0010 	add.w	r0, r0, #16
 80039e8:	d1ce      	bne.n	8003988 <arm_max_f32+0x1c>
 80039ea:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80039ee:	f01c 0003 	ands.w	r0, ip, #3
 80039f2:	d021      	beq.n	8003a38 <arm_max_f32+0xcc>
 80039f4:	ed97 7a00 	vldr	s14, [r7]
 80039f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a00:	bfc4      	itt	gt
 8003a02:	eef0 7a47 	vmovgt.f32	s15, s14
 8003a06:	1a0d      	subgt	r5, r1, r0
 8003a08:	3801      	subs	r0, #1
 8003a0a:	d015      	beq.n	8003a38 <arm_max_f32+0xcc>
 8003a0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a18:	bf44      	itt	mi
 8003a1a:	eef0 7a47 	vmovmi.f32	s15, s14
 8003a1e:	1a0d      	submi	r5, r1, r0
 8003a20:	2801      	cmp	r0, #1
 8003a22:	d009      	beq.n	8003a38 <arm_max_f32+0xcc>
 8003a24:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	bfc4      	itt	gt
 8003a32:	eef0 7a47 	vmovgt.f32	s15, s14
 8003a36:	4665      	movgt	r5, ip
 8003a38:	edc2 7a00 	vstr	s15, [r2]
 8003a3c:	601d      	str	r5, [r3, #0]
 8003a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a40:	4675      	mov	r5, lr
 8003a42:	e7d4      	b.n	80039ee <arm_max_f32+0x82>

08003a44 <arm_cfft_radix8by2_f32>:
 8003a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a48:	ed2d 8b08 	vpush	{d8-d11}
 8003a4c:	4607      	mov	r7, r0
 8003a4e:	4608      	mov	r0, r1
 8003a50:	f8b7 c000 	ldrh.w	ip, [r7]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8003a5a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003a62:	f000 80b0 	beq.w	8003bc6 <arm_cfft_radix8by2_f32+0x182>
 8003a66:	008c      	lsls	r4, r1, #2
 8003a68:	3410      	adds	r4, #16
 8003a6a:	f100 0310 	add.w	r3, r0, #16
 8003a6e:	1906      	adds	r6, r0, r4
 8003a70:	3210      	adds	r2, #16
 8003a72:	4444      	add	r4, r8
 8003a74:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003a78:	f108 0510 	add.w	r5, r8, #16
 8003a7c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003a80:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003a84:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003a88:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003a8c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003a90:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003a94:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003a98:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003a9c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003aa0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003aa4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003aa8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003aac:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003ab0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003ab4:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003ab8:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003abc:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003ac0:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003ac4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003ac8:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003acc:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003ad0:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003ad4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003ad8:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003adc:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003ae0:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003ae4:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003ae8:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003aec:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003af0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003af4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003af8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003afc:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003b00:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003b04:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003b08:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003b0c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003b10:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003b14:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003b18:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003b1c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003b20:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003b24:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003b28:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003b2c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003b30:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003b34:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003b38:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003b3c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003b40:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003b44:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003b48:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003b4c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003b50:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003b54:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003b58:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003b5c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003b60:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003b64:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003b68:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003b6c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003b70:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003b74:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003b78:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003b7c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003b80:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003b84:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003b88:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003b8c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003b90:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003b94:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003b98:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	4563      	cmp	r3, ip
 8003ba0:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003ba4:	f106 0610 	add.w	r6, r6, #16
 8003ba8:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003bac:	f102 0210 	add.w	r2, r2, #16
 8003bb0:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003bb4:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003bb8:	f105 0510 	add.w	r5, r5, #16
 8003bbc:	f104 0410 	add.w	r4, r4, #16
 8003bc0:	f47f af5c 	bne.w	8003a7c <arm_cfft_radix8by2_f32+0x38>
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	b28c      	uxth	r4, r1
 8003bc8:	4621      	mov	r1, r4
 8003bca:	2302      	movs	r3, #2
 8003bcc:	f000 fc1c 	bl	8004408 <arm_radix8_butterfly_f32>
 8003bd0:	ecbd 8b08 	vpop	{d8-d11}
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4640      	mov	r0, r8
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003be0:	f000 bc12 	b.w	8004408 <arm_radix8_butterfly_f32>

08003be4 <arm_cfft_radix8by4_f32>:
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be8:	ed2d 8b0a 	vpush	{d8-d12}
 8003bec:	b08d      	sub	sp, #52	@ 0x34
 8003bee:	460d      	mov	r5, r1
 8003bf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003bf2:	8801      	ldrh	r1, [r0, #0]
 8003bf4:	6842      	ldr	r2, [r0, #4]
 8003bf6:	900a      	str	r0, [sp, #40]	@ 0x28
 8003bf8:	0849      	lsrs	r1, r1, #1
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	18ee      	adds	r6, r5, r3
 8003bfe:	18f0      	adds	r0, r6, r3
 8003c00:	edd0 5a00 	vldr	s11, [r0]
 8003c04:	edd5 7a00 	vldr	s15, [r5]
 8003c08:	ed96 7a00 	vldr	s14, [r6]
 8003c0c:	edd0 3a01 	vldr	s7, [r0, #4]
 8003c10:	ed96 4a01 	vldr	s8, [r6, #4]
 8003c14:	ed95 5a01 	vldr	s10, [r5, #4]
 8003c18:	9008      	str	r0, [sp, #32]
 8003c1a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003c1e:	18c7      	adds	r7, r0, r3
 8003c20:	edd7 4a00 	vldr	s9, [r7]
 8003c24:	ed97 3a01 	vldr	s6, [r7, #4]
 8003c28:	9701      	str	r7, [sp, #4]
 8003c2a:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003c2e:	462c      	mov	r4, r5
 8003c30:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003c34:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003c38:	ee16 ca90 	vmov	ip, s13
 8003c3c:	f844 cb08 	str.w	ip, [r4], #8
 8003c40:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003c44:	edd6 5a01 	vldr	s11, [r6, #4]
 8003c48:	edd7 2a01 	vldr	s5, [r7, #4]
 8003c4c:	9404      	str	r4, [sp, #16]
 8003c4e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003c52:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003c56:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003c5a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003c5e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003c62:	0849      	lsrs	r1, r1, #1
 8003c64:	f102 0e08 	add.w	lr, r2, #8
 8003c68:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003c6c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003c70:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c72:	ee35 4a47 	vsub.f32	s8, s10, s14
 8003c76:	f1a1 0902 	sub.w	r9, r1, #2
 8003c7a:	f8cd e00c 	str.w	lr, [sp, #12]
 8003c7e:	4631      	mov	r1, r6
 8003c80:	ee13 ea90 	vmov	lr, s7
 8003c84:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003c88:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	edc5 5a01 	vstr	s11, [r5, #4]
 8003c92:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003c96:	f841 eb08 	str.w	lr, [r1], #8
 8003c9a:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003c9e:	ee16 ea10 	vmov	lr, s12
 8003ca2:	ed86 5a01 	vstr	s10, [r6, #4]
 8003ca6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003caa:	f844 eb08 	str.w	lr, [r4], #8
 8003cae:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003cb2:	edc0 6a01 	vstr	s13, [r0, #4]
 8003cb6:	9405      	str	r4, [sp, #20]
 8003cb8:	4604      	mov	r4, r0
 8003cba:	ee17 0a90 	vmov	r0, s15
 8003cbe:	9106      	str	r1, [sp, #24]
 8003cc0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003cc4:	f102 0110 	add.w	r1, r2, #16
 8003cc8:	46bc      	mov	ip, r7
 8003cca:	9100      	str	r1, [sp, #0]
 8003ccc:	f847 0b08 	str.w	r0, [r7], #8
 8003cd0:	f102 0118 	add.w	r1, r2, #24
 8003cd4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8003cd8:	9102      	str	r1, [sp, #8]
 8003cda:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003cde:	9007      	str	r0, [sp, #28]
 8003ce0:	f000 8134 	beq.w	8003f4c <arm_cfft_radix8by4_f32+0x368>
 8003ce4:	f102 0920 	add.w	r9, r2, #32
 8003ce8:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8003cec:	9a01      	ldr	r2, [sp, #4]
 8003cee:	f8dd a000 	ldr.w	sl, [sp]
 8003cf2:	3b0c      	subs	r3, #12
 8003cf4:	4683      	mov	fp, r0
 8003cf6:	4463      	add	r3, ip
 8003cf8:	f105 0e10 	add.w	lr, r5, #16
 8003cfc:	f1a4 010c 	sub.w	r1, r4, #12
 8003d00:	f104 0510 	add.w	r5, r4, #16
 8003d04:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003d08:	f1a2 040c 	sub.w	r4, r2, #12
 8003d0c:	f106 0010 	add.w	r0, r6, #16
 8003d10:	3210      	adds	r2, #16
 8003d12:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003d16:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003d1a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003d1e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003d22:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003d26:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003d2a:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003d2e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003d32:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003d36:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003d3a:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003d3e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003d42:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003d46:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003d4a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003d4e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003d52:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003d56:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003d5a:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003d5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003d62:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003d66:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003d6a:	ed94 7a02 	vldr	s14, [r4, #8]
 8003d6e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003d72:	ed91 ba02 	vldr	s22, [r1, #8]
 8003d76:	edd3 9a02 	vldr	s19, [r3, #8]
 8003d7a:	edd4 2a01 	vldr	s5, [r4, #4]
 8003d7e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003d82:	ed93 5a01 	vldr	s10, [r3, #4]
 8003d86:	edd1 0a01 	vldr	s1, [r1, #4]
 8003d8a:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003d8e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003d92:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003d96:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003d9a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003d9e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003da2:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003da6:	ed91 7a01 	vldr	s14, [r1, #4]
 8003daa:	edd3 8a01 	vldr	s17, [r3, #4]
 8003dae:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003db2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003db6:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003dba:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003dbe:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003dc2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8003dc6:	ed1a aa02 	vldr	s20, [sl, #-8]
 8003dca:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003dce:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003dd2:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003dd6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003dda:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003dde:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003de2:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003de6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003dea:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003dee:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003df2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003df6:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003dfa:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003dfe:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003e02:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003e06:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003e0a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003e0e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003e12:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003e16:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003e1a:	ed00 7a02 	vstr	s14, [r0, #-8]
 8003e1e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8003e22:	edc1 8a01 	vstr	s17, [r1, #4]
 8003e26:	ed81 aa02 	vstr	s20, [r1, #8]
 8003e2a:	ed59 3a04 	vldr	s7, [r9, #-16]
 8003e2e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003e32:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003e36:	ed59 6a03 	vldr	s13, [r9, #-12]
 8003e3a:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003e3e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003e42:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003e46:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003e4a:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003e4e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003e52:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003e56:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e5a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003e5e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003e62:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003e66:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003e6a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003e6e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8003e72:	ee75 6a60 	vsub.f32	s13, s10, s1
 8003e76:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8003e7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e7e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8003e82:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003e86:	ed84 7a01 	vstr	s14, [r4, #4]
 8003e8a:	ed84 4a02 	vstr	s8, [r4, #8]
 8003e8e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003e92:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003e96:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8003e9a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8003e9e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003ea2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003ea6:	ee67 2a26 	vmul.f32	s5, s14, s13
 8003eaa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003eae:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003eb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003eb6:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003eba:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003ebe:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003ec2:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003ec6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003eca:	ee75 5a24 	vadd.f32	s11, s10, s9
 8003ece:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003ed2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003ed6:	f1bb 0b01 	subs.w	fp, fp, #1
 8003eda:	ed42 5a02 	vstr	s11, [r2, #-8]
 8003ede:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003ee2:	f10e 0e08 	add.w	lr, lr, #8
 8003ee6:	ed83 3a02 	vstr	s6, [r3, #8]
 8003eea:	ed83 7a01 	vstr	s14, [r3, #4]
 8003eee:	f1ac 0c08 	sub.w	ip, ip, #8
 8003ef2:	f10a 0a08 	add.w	sl, sl, #8
 8003ef6:	f100 0008 	add.w	r0, r0, #8
 8003efa:	f1a1 0108 	sub.w	r1, r1, #8
 8003efe:	f109 0910 	add.w	r9, r9, #16
 8003f02:	f105 0508 	add.w	r5, r5, #8
 8003f06:	f1a4 0408 	sub.w	r4, r4, #8
 8003f0a:	f108 0818 	add.w	r8, r8, #24
 8003f0e:	f102 0208 	add.w	r2, r2, #8
 8003f12:	f1a3 0308 	sub.w	r3, r3, #8
 8003f16:	f47f aefc 	bne.w	8003d12 <arm_cfft_radix8by4_f32+0x12e>
 8003f1a:	9907      	ldr	r1, [sp, #28]
 8003f1c:	9800      	ldr	r0, [sp, #0]
 8003f1e:	00cb      	lsls	r3, r1, #3
 8003f20:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003f24:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003f28:	9100      	str	r1, [sp, #0]
 8003f2a:	9904      	ldr	r1, [sp, #16]
 8003f2c:	4419      	add	r1, r3
 8003f2e:	9104      	str	r1, [sp, #16]
 8003f30:	9903      	ldr	r1, [sp, #12]
 8003f32:	4419      	add	r1, r3
 8003f34:	9103      	str	r1, [sp, #12]
 8003f36:	9906      	ldr	r1, [sp, #24]
 8003f38:	4419      	add	r1, r3
 8003f3a:	9106      	str	r1, [sp, #24]
 8003f3c:	9905      	ldr	r1, [sp, #20]
 8003f3e:	441f      	add	r7, r3
 8003f40:	4419      	add	r1, r3
 8003f42:	9b02      	ldr	r3, [sp, #8]
 8003f44:	9105      	str	r1, [sp, #20]
 8003f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f4a:	9302      	str	r3, [sp, #8]
 8003f4c:	9904      	ldr	r1, [sp, #16]
 8003f4e:	9805      	ldr	r0, [sp, #20]
 8003f50:	ed91 4a00 	vldr	s8, [r1]
 8003f54:	edd0 6a00 	vldr	s13, [r0]
 8003f58:	9b06      	ldr	r3, [sp, #24]
 8003f5a:	ed97 3a00 	vldr	s6, [r7]
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	edd0 4a01 	vldr	s9, [r0, #4]
 8003f66:	edd1 3a01 	vldr	s7, [r1, #4]
 8003f6a:	ed97 2a01 	vldr	s4, [r7, #4]
 8003f6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f72:	9a03      	ldr	r2, [sp, #12]
 8003f74:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8003f78:	ee34 6a26 	vadd.f32	s12, s8, s13
 8003f7c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8003f80:	ee37 5a86 	vadd.f32	s10, s15, s12
 8003f84:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003f88:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003f8c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8003f90:	ed81 5a00 	vstr	s10, [r1]
 8003f94:	ed93 5a01 	vldr	s10, [r3, #4]
 8003f98:	edd7 4a01 	vldr	s9, [r7, #4]
 8003f9c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003fa0:	ee37 4a26 	vadd.f32	s8, s14, s13
 8003fa4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003fa8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8003fac:	ed81 5a01 	vstr	s10, [r1, #4]
 8003fb0:	edd2 1a00 	vldr	s3, [r2]
 8003fb4:	edd2 2a01 	vldr	s5, [r2, #4]
 8003fb8:	ee34 5a83 	vadd.f32	s10, s9, s6
 8003fbc:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003fc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003fc4:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003fc8:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003fcc:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003fd0:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003fd4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003fd8:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003fdc:	edc3 2a00 	vstr	s5, [r3]
 8003fe0:	ed83 5a01 	vstr	s10, [r3, #4]
 8003fe4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8003fe8:	9b00      	ldr	r3, [sp, #0]
 8003fea:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003fee:	ed93 4a01 	vldr	s8, [r3, #4]
 8003ff2:	ed93 5a00 	vldr	s10, [r3]
 8003ff6:	9b02      	ldr	r3, [sp, #8]
 8003ff8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003ffc:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004000:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004004:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004008:	ee65 5a84 	vmul.f32	s11, s11, s8
 800400c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004010:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004014:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004018:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800401c:	ed80 6a01 	vstr	s12, [r0, #4]
 8004020:	edc0 5a00 	vstr	s11, [r0]
 8004024:	edd3 5a01 	vldr	s11, [r3, #4]
 8004028:	edd3 6a00 	vldr	s13, [r3]
 800402c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004030:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8004034:	ee27 6a26 	vmul.f32	s12, s14, s13
 8004038:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800403c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004040:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004044:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004048:	ee76 7a27 	vadd.f32	s15, s12, s15
 800404c:	ed87 7a01 	vstr	s14, [r7, #4]
 8004050:	edc7 7a00 	vstr	s15, [r7]
 8004054:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8004058:	4621      	mov	r1, r4
 800405a:	686a      	ldr	r2, [r5, #4]
 800405c:	2304      	movs	r3, #4
 800405e:	f000 f9d3 	bl	8004408 <arm_radix8_butterfly_f32>
 8004062:	4630      	mov	r0, r6
 8004064:	4621      	mov	r1, r4
 8004066:	686a      	ldr	r2, [r5, #4]
 8004068:	2304      	movs	r3, #4
 800406a:	f000 f9cd 	bl	8004408 <arm_radix8_butterfly_f32>
 800406e:	9808      	ldr	r0, [sp, #32]
 8004070:	686a      	ldr	r2, [r5, #4]
 8004072:	4621      	mov	r1, r4
 8004074:	2304      	movs	r3, #4
 8004076:	f000 f9c7 	bl	8004408 <arm_radix8_butterfly_f32>
 800407a:	686a      	ldr	r2, [r5, #4]
 800407c:	9801      	ldr	r0, [sp, #4]
 800407e:	4621      	mov	r1, r4
 8004080:	2304      	movs	r3, #4
 8004082:	b00d      	add	sp, #52	@ 0x34
 8004084:	ecbd 8b0a 	vpop	{d8-d12}
 8004088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	f000 b9bc 	b.w	8004408 <arm_radix8_butterfly_f32>

08004090 <arm_cfft_f32>:
 8004090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004094:	2a01      	cmp	r2, #1
 8004096:	4606      	mov	r6, r0
 8004098:	4617      	mov	r7, r2
 800409a:	460c      	mov	r4, r1
 800409c:	4698      	mov	r8, r3
 800409e:	8805      	ldrh	r5, [r0, #0]
 80040a0:	d056      	beq.n	8004150 <arm_cfft_f32+0xc0>
 80040a2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80040a6:	d063      	beq.n	8004170 <arm_cfft_f32+0xe0>
 80040a8:	d916      	bls.n	80040d8 <arm_cfft_f32+0x48>
 80040aa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80040ae:	d01a      	beq.n	80040e6 <arm_cfft_f32+0x56>
 80040b0:	d947      	bls.n	8004142 <arm_cfft_f32+0xb2>
 80040b2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80040b6:	d05b      	beq.n	8004170 <arm_cfft_f32+0xe0>
 80040b8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80040bc:	d105      	bne.n	80040ca <arm_cfft_f32+0x3a>
 80040be:	2301      	movs	r3, #1
 80040c0:	6872      	ldr	r2, [r6, #4]
 80040c2:	4629      	mov	r1, r5
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 f99f 	bl	8004408 <arm_radix8_butterfly_f32>
 80040ca:	f1b8 0f00 	cmp.w	r8, #0
 80040ce:	d111      	bne.n	80040f4 <arm_cfft_f32+0x64>
 80040d0:	2f01      	cmp	r7, #1
 80040d2:	d016      	beq.n	8004102 <arm_cfft_f32+0x72>
 80040d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d8:	2d20      	cmp	r5, #32
 80040da:	d049      	beq.n	8004170 <arm_cfft_f32+0xe0>
 80040dc:	d935      	bls.n	800414a <arm_cfft_f32+0xba>
 80040de:	2d40      	cmp	r5, #64	@ 0x40
 80040e0:	d0ed      	beq.n	80040be <arm_cfft_f32+0x2e>
 80040e2:	2d80      	cmp	r5, #128	@ 0x80
 80040e4:	d1f1      	bne.n	80040ca <arm_cfft_f32+0x3a>
 80040e6:	4621      	mov	r1, r4
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7ff fcab 	bl	8003a44 <arm_cfft_radix8by2_f32>
 80040ee:	f1b8 0f00 	cmp.w	r8, #0
 80040f2:	d0ed      	beq.n	80040d0 <arm_cfft_f32+0x40>
 80040f4:	68b2      	ldr	r2, [r6, #8]
 80040f6:	89b1      	ldrh	r1, [r6, #12]
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 f841 	bl	8004180 <arm_bitreversal_32>
 80040fe:	2f01      	cmp	r7, #1
 8004100:	d1e8      	bne.n	80040d4 <arm_cfft_f32+0x44>
 8004102:	ee07 5a90 	vmov	s15, r5
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004112:	2d00      	cmp	r5, #0
 8004114:	d0de      	beq.n	80040d4 <arm_cfft_f32+0x44>
 8004116:	f104 0108 	add.w	r1, r4, #8
 800411a:	2300      	movs	r3, #0
 800411c:	3301      	adds	r3, #1
 800411e:	429d      	cmp	r5, r3
 8004120:	f101 0108 	add.w	r1, r1, #8
 8004124:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004128:	ed51 7a03 	vldr	s15, [r1, #-12]
 800412c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004130:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004134:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004138:	ed41 7a03 	vstr	s15, [r1, #-12]
 800413c:	d1ee      	bne.n	800411c <arm_cfft_f32+0x8c>
 800413e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004142:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004146:	d0ba      	beq.n	80040be <arm_cfft_f32+0x2e>
 8004148:	e7bf      	b.n	80040ca <arm_cfft_f32+0x3a>
 800414a:	2d10      	cmp	r5, #16
 800414c:	d0cb      	beq.n	80040e6 <arm_cfft_f32+0x56>
 800414e:	e7bc      	b.n	80040ca <arm_cfft_f32+0x3a>
 8004150:	b19d      	cbz	r5, 800417a <arm_cfft_f32+0xea>
 8004152:	f101 030c 	add.w	r3, r1, #12
 8004156:	2200      	movs	r2, #0
 8004158:	ed53 7a02 	vldr	s15, [r3, #-8]
 800415c:	3201      	adds	r2, #1
 800415e:	eef1 7a67 	vneg.f32	s15, s15
 8004162:	4295      	cmp	r5, r2
 8004164:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004168:	f103 0308 	add.w	r3, r3, #8
 800416c:	d1f4      	bne.n	8004158 <arm_cfft_f32+0xc8>
 800416e:	e798      	b.n	80040a2 <arm_cfft_f32+0x12>
 8004170:	4621      	mov	r1, r4
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff fd36 	bl	8003be4 <arm_cfft_radix8by4_f32>
 8004178:	e7a7      	b.n	80040ca <arm_cfft_f32+0x3a>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0aa      	beq.n	80040d4 <arm_cfft_f32+0x44>
 800417e:	e7b9      	b.n	80040f4 <arm_cfft_f32+0x64>

08004180 <arm_bitreversal_32>:
 8004180:	b1e9      	cbz	r1, 80041be <arm_bitreversal_32+0x3e>
 8004182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004184:	2500      	movs	r5, #0
 8004186:	f102 0e02 	add.w	lr, r2, #2
 800418a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800418e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004192:	08a4      	lsrs	r4, r4, #2
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800419a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800419e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80041a2:	00a6      	lsls	r6, r4, #2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80041aa:	3304      	adds	r3, #4
 80041ac:	1d34      	adds	r4, r6, #4
 80041ae:	3502      	adds	r5, #2
 80041b0:	58c6      	ldr	r6, [r0, r3]
 80041b2:	5907      	ldr	r7, [r0, r4]
 80041b4:	50c7      	str	r7, [r0, r3]
 80041b6:	428d      	cmp	r5, r1
 80041b8:	5106      	str	r6, [r0, r4]
 80041ba:	d3e6      	bcc.n	800418a <arm_bitreversal_32+0xa>
 80041bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041be:	4770      	bx	lr

080041c0 <arm_cmplx_mag_f32>:
 80041c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c4:	ed2d 8b02 	vpush	{d8}
 80041c8:	0897      	lsrs	r7, r2, #2
 80041ca:	b084      	sub	sp, #16
 80041cc:	d077      	beq.n	80042be <arm_cmplx_mag_f32+0xfe>
 80041ce:	f04f 0800 	mov.w	r8, #0
 80041d2:	f100 0420 	add.w	r4, r0, #32
 80041d6:	f101 0510 	add.w	r5, r1, #16
 80041da:	463e      	mov	r6, r7
 80041dc:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 80041e0:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 80041e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80041e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80041f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	f2c0 80c5 	blt.w	8004386 <arm_cmplx_mag_f32+0x1c6>
 80041fc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004208:	f100 80cb 	bmi.w	80043a2 <arm_cmplx_mag_f32+0x1e2>
 800420c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8004210:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8004214:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8004218:	ee20 0a00 	vmul.f32	s0, s0, s0
 800421c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004220:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004224:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	f2c0 80a8 	blt.w	8004380 <arm_cmplx_mag_f32+0x1c0>
 8004230:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004238:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800423c:	f100 80a8 	bmi.w	8004390 <arm_cmplx_mag_f32+0x1d0>
 8004240:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004244:	ed14 0a04 	vldr	s0, [r4, #-16]
 8004248:	ed54 7a03 	vldr	s15, [r4, #-12]
 800424c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004250:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004254:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004258:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004260:	f2c0 808b 	blt.w	800437a <arm_cmplx_mag_f32+0x1ba>
 8004264:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004270:	f100 80a9 	bmi.w	80043c6 <arm_cmplx_mag_f32+0x206>
 8004274:	ed05 8a02 	vstr	s16, [r5, #-8]
 8004278:	ed14 0a02 	vldr	s0, [r4, #-8]
 800427c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004280:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004288:	ee30 0a27 	vadd.f32	s0, s0, s15
 800428c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	db6e      	blt.n	8004374 <arm_cmplx_mag_f32+0x1b4>
 8004296:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80042a2:	f100 8087 	bmi.w	80043b4 <arm_cmplx_mag_f32+0x1f4>
 80042a6:	ed05 8a01 	vstr	s16, [r5, #-4]
 80042aa:	3e01      	subs	r6, #1
 80042ac:	f104 0420 	add.w	r4, r4, #32
 80042b0:	f105 0510 	add.w	r5, r5, #16
 80042b4:	d192      	bne.n	80041dc <arm_cmplx_mag_f32+0x1c>
 80042b6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80042ba:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80042be:	f012 0203 	ands.w	r2, r2, #3
 80042c2:	d052      	beq.n	800436a <arm_cmplx_mag_f32+0x1aa>
 80042c4:	ed90 0a00 	vldr	s0, [r0]
 80042c8:	edd0 7a01 	vldr	s15, [r0, #4]
 80042cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80042d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042d4:	2300      	movs	r3, #0
 80042d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80042da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	bfb8      	it	lt
 80042e4:	600b      	strlt	r3, [r1, #0]
 80042e6:	db08      	blt.n	80042fa <arm_cmplx_mag_f32+0x13a>
 80042e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80042f4:	d479      	bmi.n	80043ea <arm_cmplx_mag_f32+0x22a>
 80042f6:	ed81 8a00 	vstr	s16, [r1]
 80042fa:	3a01      	subs	r2, #1
 80042fc:	d035      	beq.n	800436a <arm_cmplx_mag_f32+0x1aa>
 80042fe:	ed90 0a02 	vldr	s0, [r0, #8]
 8004302:	edd0 7a03 	vldr	s15, [r0, #12]
 8004306:	ee20 0a00 	vmul.f32	s0, s0, s0
 800430a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800430e:	2300      	movs	r3, #0
 8004310:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004314:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	bfb8      	it	lt
 800431e:	604b      	strlt	r3, [r1, #4]
 8004320:	db08      	blt.n	8004334 <arm_cmplx_mag_f32+0x174>
 8004322:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800432e:	d453      	bmi.n	80043d8 <arm_cmplx_mag_f32+0x218>
 8004330:	ed81 8a01 	vstr	s16, [r1, #4]
 8004334:	2a01      	cmp	r2, #1
 8004336:	d018      	beq.n	800436a <arm_cmplx_mag_f32+0x1aa>
 8004338:	ed90 0a04 	vldr	s0, [r0, #16]
 800433c:	edd0 7a05 	vldr	s15, [r0, #20]
 8004340:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004348:	2300      	movs	r3, #0
 800434a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800434e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	db19      	blt.n	800438c <arm_cmplx_mag_f32+0x1cc>
 8004358:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004364:	d44a      	bmi.n	80043fc <arm_cmplx_mag_f32+0x23c>
 8004366:	ed81 8a02 	vstr	s16, [r1, #8]
 800436a:	b004      	add	sp, #16
 800436c:	ecbd 8b02 	vpop	{d8}
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004374:	f845 8c04 	str.w	r8, [r5, #-4]
 8004378:	e797      	b.n	80042aa <arm_cmplx_mag_f32+0xea>
 800437a:	f845 8c08 	str.w	r8, [r5, #-8]
 800437e:	e77b      	b.n	8004278 <arm_cmplx_mag_f32+0xb8>
 8004380:	f845 8c0c 	str.w	r8, [r5, #-12]
 8004384:	e75e      	b.n	8004244 <arm_cmplx_mag_f32+0x84>
 8004386:	f845 8c10 	str.w	r8, [r5, #-16]
 800438a:	e741      	b.n	8004210 <arm_cmplx_mag_f32+0x50>
 800438c:	608b      	str	r3, [r1, #8]
 800438e:	e7ec      	b.n	800436a <arm_cmplx_mag_f32+0x1aa>
 8004390:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004394:	9001      	str	r0, [sp, #4]
 8004396:	f002 ff89 	bl	80072ac <sqrtf>
 800439a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800439e:	9801      	ldr	r0, [sp, #4]
 80043a0:	e74e      	b.n	8004240 <arm_cmplx_mag_f32+0x80>
 80043a2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043a6:	9001      	str	r0, [sp, #4]
 80043a8:	f002 ff80 	bl	80072ac <sqrtf>
 80043ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043b0:	9801      	ldr	r0, [sp, #4]
 80043b2:	e72b      	b.n	800420c <arm_cmplx_mag_f32+0x4c>
 80043b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043b8:	9001      	str	r0, [sp, #4]
 80043ba:	f002 ff77 	bl	80072ac <sqrtf>
 80043be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043c2:	9801      	ldr	r0, [sp, #4]
 80043c4:	e76f      	b.n	80042a6 <arm_cmplx_mag_f32+0xe6>
 80043c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043ca:	9001      	str	r0, [sp, #4]
 80043cc:	f002 ff6e 	bl	80072ac <sqrtf>
 80043d0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043d4:	9801      	ldr	r0, [sp, #4]
 80043d6:	e74d      	b.n	8004274 <arm_cmplx_mag_f32+0xb4>
 80043d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043dc:	9201      	str	r2, [sp, #4]
 80043de:	f002 ff65 	bl	80072ac <sqrtf>
 80043e2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80043e6:	9903      	ldr	r1, [sp, #12]
 80043e8:	e7a2      	b.n	8004330 <arm_cmplx_mag_f32+0x170>
 80043ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ee:	9201      	str	r2, [sp, #4]
 80043f0:	f002 ff5c 	bl	80072ac <sqrtf>
 80043f4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80043f8:	9903      	ldr	r1, [sp, #12]
 80043fa:	e77c      	b.n	80042f6 <arm_cmplx_mag_f32+0x136>
 80043fc:	9101      	str	r1, [sp, #4]
 80043fe:	f002 ff55 	bl	80072ac <sqrtf>
 8004402:	9901      	ldr	r1, [sp, #4]
 8004404:	e7af      	b.n	8004366 <arm_cmplx_mag_f32+0x1a6>
 8004406:	bf00      	nop

08004408 <arm_radix8_butterfly_f32>:
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440c:	ed2d 8b10 	vpush	{d8-d15}
 8004410:	b095      	sub	sp, #84	@ 0x54
 8004412:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8004416:	4603      	mov	r3, r0
 8004418:	3304      	adds	r3, #4
 800441a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8004700 <arm_radix8_butterfly_f32+0x2f8>
 800441e:	9012      	str	r0, [sp, #72]	@ 0x48
 8004420:	468b      	mov	fp, r1
 8004422:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004424:	4689      	mov	r9, r1
 8004426:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800442a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800442c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800442e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8004432:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8004436:	eb03 0508 	add.w	r5, r3, r8
 800443a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800443e:	eb05 040e 	add.w	r4, r5, lr
 8004442:	0137      	lsls	r7, r6, #4
 8004444:	eba6 030a 	sub.w	r3, r6, sl
 8004448:	eb04 000e 	add.w	r0, r4, lr
 800444c:	44b2      	add	sl, r6
 800444e:	1d3a      	adds	r2, r7, #4
 8004450:	9702      	str	r7, [sp, #8]
 8004452:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004456:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800445a:	ebae 0c06 	sub.w	ip, lr, r6
 800445e:	9703      	str	r7, [sp, #12]
 8004460:	eb03 0708 	add.w	r7, r3, r8
 8004464:	9701      	str	r7, [sp, #4]
 8004466:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800446a:	9706      	str	r7, [sp, #24]
 800446c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800446e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004472:	f10e 0104 	add.w	r1, lr, #4
 8004476:	4439      	add	r1, r7
 8004478:	443a      	add	r2, r7
 800447a:	0137      	lsls	r7, r6, #4
 800447c:	00f6      	lsls	r6, r6, #3
 800447e:	9704      	str	r7, [sp, #16]
 8004480:	9605      	str	r6, [sp, #20]
 8004482:	9f01      	ldr	r7, [sp, #4]
 8004484:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004486:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800448a:	f04f 0c00 	mov.w	ip, #0
 800448e:	edd4 6a00 	vldr	s13, [r4]
 8004492:	edd7 1a00 	vldr	s3, [r7]
 8004496:	ed16 aa01 	vldr	s20, [r6, #-4]
 800449a:	edd5 5a00 	vldr	s11, [r5]
 800449e:	ed52 9a01 	vldr	s19, [r2, #-4]
 80044a2:	ed90 6a00 	vldr	s12, [r0]
 80044a6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80044aa:	ed93 3a00 	vldr	s6, [r3]
 80044ae:	ee39 0a86 	vadd.f32	s0, s19, s12
 80044b2:	ee33 2a21 	vadd.f32	s4, s6, s3
 80044b6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80044ba:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80044be:	ee35 7a02 	vadd.f32	s14, s10, s4
 80044c2:	ee34 4a80 	vadd.f32	s8, s9, s0
 80044c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80044ca:	ee74 6a07 	vadd.f32	s13, s8, s14
 80044ce:	ee34 4a47 	vsub.f32	s8, s8, s14
 80044d2:	ed46 6a01 	vstr	s13, [r6, #-4]
 80044d6:	ed85 4a00 	vstr	s8, [r5]
 80044da:	edd1 6a00 	vldr	s13, [r1]
 80044de:	ed94 9a01 	vldr	s18, [r4, #4]
 80044e2:	edd3 2a01 	vldr	s5, [r3, #4]
 80044e6:	edd7 8a01 	vldr	s17, [r7, #4]
 80044ea:	edd6 0a00 	vldr	s1, [r6]
 80044ee:	edd5 3a01 	vldr	s7, [r5, #4]
 80044f2:	ed90 8a01 	vldr	s16, [r0, #4]
 80044f6:	ed92 7a00 	vldr	s14, [r2]
 80044fa:	ee33 3a61 	vsub.f32	s6, s6, s3
 80044fe:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004502:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004506:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800450a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800450e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004512:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004516:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800451a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800451e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004522:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004526:	ee77 0a08 	vadd.f32	s1, s14, s16
 800452a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800452e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004532:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004536:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800453a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800453e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004542:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004546:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800454a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800454e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004552:	ee33 2a20 	vadd.f32	s4, s6, s1
 8004556:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800455a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800455e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004562:	ee77 0a01 	vadd.f32	s1, s14, s2
 8004566:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800456a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800456e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004572:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004576:	ee76 3a27 	vadd.f32	s7, s12, s15
 800457a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800457e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8004582:	ee33 1a45 	vsub.f32	s2, s6, s10
 8004586:	ee32 2a40 	vsub.f32	s4, s4, s0
 800458a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800458e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8004592:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8004596:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800459a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800459e:	ee75 4a87 	vadd.f32	s9, s11, s14
 80045a2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80045a6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80045aa:	ee77 7a84 	vadd.f32	s15, s15, s8
 80045ae:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80045b2:	44dc      	add	ip, fp
 80045b4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80045b8:	45e1      	cmp	r9, ip
 80045ba:	ed86 8a00 	vstr	s16, [r6]
 80045be:	ed85 2a01 	vstr	s4, [r5, #4]
 80045c2:	4456      	add	r6, sl
 80045c4:	ed02 0a01 	vstr	s0, [r2, #-4]
 80045c8:	4455      	add	r5, sl
 80045ca:	edc0 6a00 	vstr	s13, [r0]
 80045ce:	ed82 1a00 	vstr	s2, [r2]
 80045d2:	ed80 5a01 	vstr	s10, [r0, #4]
 80045d6:	4452      	add	r2, sl
 80045d8:	ed01 3a01 	vstr	s6, [r1, #-4]
 80045dc:	4450      	add	r0, sl
 80045de:	edc7 2a00 	vstr	s5, [r7]
 80045e2:	edc4 4a00 	vstr	s9, [r4]
 80045e6:	ed83 7a00 	vstr	s14, [r3]
 80045ea:	edc1 5a00 	vstr	s11, [r1]
 80045ee:	edc7 3a01 	vstr	s7, [r7, #4]
 80045f2:	4451      	add	r1, sl
 80045f4:	ed84 6a01 	vstr	s12, [r4, #4]
 80045f8:	4457      	add	r7, sl
 80045fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80045fe:	4454      	add	r4, sl
 8004600:	4453      	add	r3, sl
 8004602:	f63f af44 	bhi.w	800448e <arm_radix8_butterfly_f32+0x86>
 8004606:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004608:	2b07      	cmp	r3, #7
 800460a:	f240 81b7 	bls.w	800497c <arm_radix8_butterfly_f32+0x574>
 800460e:	9b06      	ldr	r3, [sp, #24]
 8004610:	9903      	ldr	r1, [sp, #12]
 8004612:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004614:	9e05      	ldr	r6, [sp, #20]
 8004616:	9a04      	ldr	r2, [sp, #16]
 8004618:	f103 0c08 	add.w	ip, r3, #8
 800461c:	9b02      	ldr	r3, [sp, #8]
 800461e:	3108      	adds	r1, #8
 8004620:	f108 0808 	add.w	r8, r8, #8
 8004624:	1841      	adds	r1, r0, r1
 8004626:	3608      	adds	r6, #8
 8004628:	330c      	adds	r3, #12
 800462a:	4604      	mov	r4, r0
 800462c:	4444      	add	r4, r8
 800462e:	18c3      	adds	r3, r0, r3
 8004630:	9109      	str	r1, [sp, #36]	@ 0x24
 8004632:	1981      	adds	r1, r0, r6
 8004634:	f10e 0e08 	add.w	lr, lr, #8
 8004638:	3208      	adds	r2, #8
 800463a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800463c:	9107      	str	r1, [sp, #28]
 800463e:	4604      	mov	r4, r0
 8004640:	4601      	mov	r1, r0
 8004642:	9304      	str	r3, [sp, #16]
 8004644:	f100 030c 	add.w	r3, r0, #12
 8004648:	4474      	add	r4, lr
 800464a:	f04f 0801 	mov.w	r8, #1
 800464e:	1882      	adds	r2, r0, r2
 8004650:	4461      	add	r1, ip
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	464b      	mov	r3, r9
 8004656:	940a      	str	r4, [sp, #40]	@ 0x28
 8004658:	46c1      	mov	r9, r8
 800465a:	9208      	str	r2, [sp, #32]
 800465c:	46d8      	mov	r8, fp
 800465e:	9106      	str	r1, [sp, #24]
 8004660:	f04f 0e00 	mov.w	lr, #0
 8004664:	469b      	mov	fp, r3
 8004666:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004668:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800466a:	449e      	add	lr, r3
 800466c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004670:	441a      	add	r2, r3
 8004672:	920e      	str	r2, [sp, #56]	@ 0x38
 8004674:	441a      	add	r2, r3
 8004676:	18d4      	adds	r4, r2, r3
 8004678:	18e5      	adds	r5, r4, r3
 800467a:	18ee      	adds	r6, r5, r3
 800467c:	18f7      	adds	r7, r6, r3
 800467e:	eb07 0c03 	add.w	ip, r7, r3
 8004682:	920d      	str	r2, [sp, #52]	@ 0x34
 8004684:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8004688:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800468c:	910c      	str	r1, [sp, #48]	@ 0x30
 800468e:	4419      	add	r1, r3
 8004690:	9103      	str	r1, [sp, #12]
 8004692:	4419      	add	r1, r3
 8004694:	18ca      	adds	r2, r1, r3
 8004696:	9202      	str	r2, [sp, #8]
 8004698:	441a      	add	r2, r3
 800469a:	18d0      	adds	r0, r2, r3
 800469c:	ed92 ea01 	vldr	s28, [r2, #4]
 80046a0:	9a02      	ldr	r2, [sp, #8]
 80046a2:	edd4 7a00 	vldr	s15, [r4]
 80046a6:	edd2 da01 	vldr	s27, [r2, #4]
 80046aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80046ac:	ed91 da01 	vldr	s26, [r1, #4]
 80046b0:	ed92 ca01 	vldr	s24, [r2, #4]
 80046b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80046b6:	9903      	ldr	r1, [sp, #12]
 80046b8:	edcd 7a03 	vstr	s15, [sp, #12]
 80046bc:	edd2 7a00 	vldr	s15, [r2]
 80046c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046c2:	edcd 7a02 	vstr	s15, [sp, #8]
 80046c6:	edd2 7a00 	vldr	s15, [r2]
 80046ca:	edd0 ea01 	vldr	s29, [r0, #4]
 80046ce:	edd1 ca01 	vldr	s25, [r1, #4]
 80046d2:	eddc ba00 	vldr	s23, [ip]
 80046d6:	edd7 aa00 	vldr	s21, [r7]
 80046da:	ed96 aa00 	vldr	s20, [r6]
 80046de:	edd5 9a00 	vldr	s19, [r5]
 80046e2:	edcd 7a01 	vstr	s15, [sp, #4]
 80046e6:	4403      	add	r3, r0
 80046e8:	ed93 fa01 	vldr	s30, [r3, #4]
 80046ec:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80046f0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80046f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80046f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80046fc:	46cc      	mov	ip, r9
 80046fe:	e001      	b.n	8004704 <arm_radix8_butterfly_f32+0x2fc>
 8004700:	3f3504f3 	.word	0x3f3504f3
 8004704:	ed91 6a00 	vldr	s12, [r1]
 8004708:	ed93 5a00 	vldr	s10, [r3]
 800470c:	edd0 fa00 	vldr	s31, [r0]
 8004710:	edd4 7a00 	vldr	s15, [r4]
 8004714:	ed95 7a00 	vldr	s14, [r5]
 8004718:	ed56 3a01 	vldr	s7, [r6, #-4]
 800471c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004720:	ed92 2a00 	vldr	s4, [r2]
 8004724:	ed96 0a00 	vldr	s0, [r6]
 8004728:	ee33 8a85 	vadd.f32	s16, s7, s10
 800472c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004730:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004734:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004738:	ee78 1a04 	vadd.f32	s3, s16, s8
 800473c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004740:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004744:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800474c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004750:	edd4 8a01 	vldr	s17, [r4, #4]
 8004754:	ed92 9a01 	vldr	s18, [r2, #4]
 8004758:	edd7 0a00 	vldr	s1, [r7]
 800475c:	edd1 2a01 	vldr	s5, [r1, #4]
 8004760:	ed95 7a01 	vldr	s14, [r5, #4]
 8004764:	ed93 6a01 	vldr	s12, [r3, #4]
 8004768:	edd0 5a01 	vldr	s11, [r0, #4]
 800476c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004770:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004774:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004778:	ee78 fac7 	vsub.f32	s31, s17, s14
 800477c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004780:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004784:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004788:	ee79 2a22 	vadd.f32	s5, s18, s5
 800478c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004790:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004794:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004798:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800479c:	ee71 4a64 	vsub.f32	s9, s2, s9
 80047a0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80047a4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80047a8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80047ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 80047b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80047b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80047b8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80047bc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80047c0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80047c4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80047c8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80047cc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80047d0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80047d4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80047d8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80047dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 80047e0:	ee36 6a68 	vsub.f32	s12, s12, s17
 80047e4:	ee32 4a64 	vsub.f32	s8, s4, s9
 80047e8:	ee73 8a09 	vadd.f32	s17, s6, s18
 80047ec:	ee74 4a82 	vadd.f32	s9, s9, s4
 80047f0:	ee33 9a49 	vsub.f32	s18, s6, s18
 80047f4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80047f8:	ee35 3a85 	vadd.f32	s6, s11, s10
 80047fc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004800:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004804:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004808:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800480c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004810:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004814:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004818:	ee73 3a82 	vadd.f32	s7, s7, s4
 800481c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004820:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004824:	eddd 1a02 	vldr	s3, [sp, #8]
 8004828:	ee35 5a43 	vsub.f32	s10, s10, s6
 800482c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004830:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004834:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004838:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800483c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004840:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004844:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004848:	ee39 6a06 	vadd.f32	s12, s18, s12
 800484c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8004850:	ee21 4a84 	vmul.f32	s8, s3, s8
 8004854:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8004858:	ee22 7a07 	vmul.f32	s14, s4, s14
 800485c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004860:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004864:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8004868:	ee31 1a09 	vadd.f32	s2, s2, s18
 800486c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004870:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8004874:	ee74 0a60 	vsub.f32	s1, s8, s1
 8004878:	ee37 7a48 	vsub.f32	s14, s14, s16
 800487c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004880:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8004884:	ee72 1a21 	vadd.f32	s3, s4, s3
 8004888:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800488c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004890:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8004894:	ee38 8a04 	vadd.f32	s16, s16, s8
 8004898:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800489c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80048a0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80048a4:	eddd 5a03 	vldr	s11, [sp, #12]
 80048a8:	edc6 fa00 	vstr	s31, [r6]
 80048ac:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80048b0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80048b4:	ee30 0a45 	vsub.f32	s0, s0, s10
 80048b8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80048bc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80048c0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80048c4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80048c8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80048cc:	ee25 6a86 	vmul.f32	s12, s11, s12
 80048d0:	ee74 4a89 	vadd.f32	s9, s9, s18
 80048d4:	ee34 3a43 	vsub.f32	s6, s8, s6
 80048d8:	ee78 8a85 	vadd.f32	s17, s17, s10
 80048dc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80048e0:	44c4      	add	ip, r8
 80048e2:	45e3      	cmp	fp, ip
 80048e4:	edc3 3a00 	vstr	s7, [r3]
 80048e8:	edc3 6a01 	vstr	s13, [r3, #4]
 80048ec:	4456      	add	r6, sl
 80048ee:	ed07 1a01 	vstr	s2, [r7, #-4]
 80048f2:	edc7 0a00 	vstr	s1, [r7]
 80048f6:	4453      	add	r3, sl
 80048f8:	ed80 2a00 	vstr	s4, [r0]
 80048fc:	edc0 2a01 	vstr	s5, [r0, #4]
 8004900:	4457      	add	r7, sl
 8004902:	edc2 1a00 	vstr	s3, [r2]
 8004906:	ed82 7a01 	vstr	s14, [r2, #4]
 800490a:	4450      	add	r0, sl
 800490c:	ed85 8a00 	vstr	s16, [r5]
 8004910:	ed85 0a01 	vstr	s0, [r5, #4]
 8004914:	4452      	add	r2, sl
 8004916:	edc1 4a00 	vstr	s9, [r1]
 800491a:	4455      	add	r5, sl
 800491c:	ed81 3a01 	vstr	s6, [r1, #4]
 8004920:	edc4 8a00 	vstr	s17, [r4]
 8004924:	ed84 6a01 	vstr	s12, [r4, #4]
 8004928:	4451      	add	r1, sl
 800492a:	4454      	add	r4, sl
 800492c:	f63f aeea 	bhi.w	8004704 <arm_radix8_butterfly_f32+0x2fc>
 8004930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004932:	3308      	adds	r3, #8
 8004934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004938:	3308      	adds	r3, #8
 800493a:	930a      	str	r3, [sp, #40]	@ 0x28
 800493c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800493e:	3308      	adds	r3, #8
 8004940:	9309      	str	r3, [sp, #36]	@ 0x24
 8004942:	9b08      	ldr	r3, [sp, #32]
 8004944:	3308      	adds	r3, #8
 8004946:	9308      	str	r3, [sp, #32]
 8004948:	9b07      	ldr	r3, [sp, #28]
 800494a:	3308      	adds	r3, #8
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	9b06      	ldr	r3, [sp, #24]
 8004950:	3308      	adds	r3, #8
 8004952:	9306      	str	r3, [sp, #24]
 8004954:	9b05      	ldr	r3, [sp, #20]
 8004956:	3308      	adds	r3, #8
 8004958:	9305      	str	r3, [sp, #20]
 800495a:	9b04      	ldr	r3, [sp, #16]
 800495c:	3308      	adds	r3, #8
 800495e:	9304      	str	r3, [sp, #16]
 8004960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004962:	f109 0901 	add.w	r9, r9, #1
 8004966:	454b      	cmp	r3, r9
 8004968:	f47f ae7d 	bne.w	8004666 <arm_radix8_butterfly_f32+0x25e>
 800496c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	b29b      	uxth	r3, r3
 8004972:	46d9      	mov	r9, fp
 8004974:	9310      	str	r3, [sp, #64]	@ 0x40
 8004976:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800497a:	e554      	b.n	8004426 <arm_radix8_butterfly_f32+0x1e>
 800497c:	b015      	add	sp, #84	@ 0x54
 800497e:	ecbd 8b10 	vpop	{d8-d15}
 8004982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop

08004988 <__cvt>:
 8004988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	ec57 6b10 	vmov	r6, r7, d0
 8004990:	2f00      	cmp	r7, #0
 8004992:	460c      	mov	r4, r1
 8004994:	4619      	mov	r1, r3
 8004996:	463b      	mov	r3, r7
 8004998:	bfbb      	ittet	lt
 800499a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800499e:	461f      	movlt	r7, r3
 80049a0:	2300      	movge	r3, #0
 80049a2:	232d      	movlt	r3, #45	@ 0x2d
 80049a4:	700b      	strb	r3, [r1, #0]
 80049a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049ac:	4691      	mov	r9, r2
 80049ae:	f023 0820 	bic.w	r8, r3, #32
 80049b2:	bfbc      	itt	lt
 80049b4:	4632      	movlt	r2, r6
 80049b6:	4616      	movlt	r6, r2
 80049b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049bc:	d005      	beq.n	80049ca <__cvt+0x42>
 80049be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049c2:	d100      	bne.n	80049c6 <__cvt+0x3e>
 80049c4:	3401      	adds	r4, #1
 80049c6:	2102      	movs	r1, #2
 80049c8:	e000      	b.n	80049cc <__cvt+0x44>
 80049ca:	2103      	movs	r1, #3
 80049cc:	ab03      	add	r3, sp, #12
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	ab02      	add	r3, sp, #8
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	ec47 6b10 	vmov	d0, r6, r7
 80049d8:	4653      	mov	r3, sl
 80049da:	4622      	mov	r2, r4
 80049dc:	f000 fe4c 	bl	8005678 <_dtoa_r>
 80049e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049e4:	4605      	mov	r5, r0
 80049e6:	d119      	bne.n	8004a1c <__cvt+0x94>
 80049e8:	f019 0f01 	tst.w	r9, #1
 80049ec:	d00e      	beq.n	8004a0c <__cvt+0x84>
 80049ee:	eb00 0904 	add.w	r9, r0, r4
 80049f2:	2200      	movs	r2, #0
 80049f4:	2300      	movs	r3, #0
 80049f6:	4630      	mov	r0, r6
 80049f8:	4639      	mov	r1, r7
 80049fa:	f7fc f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80049fe:	b108      	cbz	r0, 8004a04 <__cvt+0x7c>
 8004a00:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a04:	2230      	movs	r2, #48	@ 0x30
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	454b      	cmp	r3, r9
 8004a0a:	d31e      	bcc.n	8004a4a <__cvt+0xc2>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a10:	1b5b      	subs	r3, r3, r5
 8004a12:	4628      	mov	r0, r5
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	b004      	add	sp, #16
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a20:	eb00 0904 	add.w	r9, r0, r4
 8004a24:	d1e5      	bne.n	80049f2 <__cvt+0x6a>
 8004a26:	7803      	ldrb	r3, [r0, #0]
 8004a28:	2b30      	cmp	r3, #48	@ 0x30
 8004a2a:	d10a      	bne.n	8004a42 <__cvt+0xba>
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fc f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a38:	b918      	cbnz	r0, 8004a42 <__cvt+0xba>
 8004a3a:	f1c4 0401 	rsb	r4, r4, #1
 8004a3e:	f8ca 4000 	str.w	r4, [sl]
 8004a42:	f8da 3000 	ldr.w	r3, [sl]
 8004a46:	4499      	add	r9, r3
 8004a48:	e7d3      	b.n	80049f2 <__cvt+0x6a>
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	9103      	str	r1, [sp, #12]
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e7d9      	b.n	8004a06 <__cvt+0x7e>

08004a52 <__exponent>:
 8004a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a54:	2900      	cmp	r1, #0
 8004a56:	bfba      	itte	lt
 8004a58:	4249      	neglt	r1, r1
 8004a5a:	232d      	movlt	r3, #45	@ 0x2d
 8004a5c:	232b      	movge	r3, #43	@ 0x2b
 8004a5e:	2909      	cmp	r1, #9
 8004a60:	7002      	strb	r2, [r0, #0]
 8004a62:	7043      	strb	r3, [r0, #1]
 8004a64:	dd29      	ble.n	8004aba <__exponent+0x68>
 8004a66:	f10d 0307 	add.w	r3, sp, #7
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	270a      	movs	r7, #10
 8004a6e:	461a      	mov	r2, r3
 8004a70:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a74:	fb07 1416 	mls	r4, r7, r6, r1
 8004a78:	3430      	adds	r4, #48	@ 0x30
 8004a7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a7e:	460c      	mov	r4, r1
 8004a80:	2c63      	cmp	r4, #99	@ 0x63
 8004a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a86:	4631      	mov	r1, r6
 8004a88:	dcf1      	bgt.n	8004a6e <__exponent+0x1c>
 8004a8a:	3130      	adds	r1, #48	@ 0x30
 8004a8c:	1e94      	subs	r4, r2, #2
 8004a8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a92:	1c41      	adds	r1, r0, #1
 8004a94:	4623      	mov	r3, r4
 8004a96:	42ab      	cmp	r3, r5
 8004a98:	d30a      	bcc.n	8004ab0 <__exponent+0x5e>
 8004a9a:	f10d 0309 	add.w	r3, sp, #9
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	42ac      	cmp	r4, r5
 8004aa2:	bf88      	it	hi
 8004aa4:	2300      	movhi	r3, #0
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	4403      	add	r3, r0
 8004aaa:	1a18      	subs	r0, r3, r0
 8004aac:	b003      	add	sp, #12
 8004aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ab4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ab8:	e7ed      	b.n	8004a96 <__exponent+0x44>
 8004aba:	2330      	movs	r3, #48	@ 0x30
 8004abc:	3130      	adds	r1, #48	@ 0x30
 8004abe:	7083      	strb	r3, [r0, #2]
 8004ac0:	70c1      	strb	r1, [r0, #3]
 8004ac2:	1d03      	adds	r3, r0, #4
 8004ac4:	e7f1      	b.n	8004aaa <__exponent+0x58>
	...

08004ac8 <_printf_float>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	b08d      	sub	sp, #52	@ 0x34
 8004ace:	460c      	mov	r4, r1
 8004ad0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	4605      	mov	r5, r0
 8004ada:	f000 fccd 	bl	8005478 <_localeconv_r>
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	9304      	str	r3, [sp, #16]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fb fbcc 	bl	8000280 <strlen>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aec:	f8d8 3000 	ldr.w	r3, [r8]
 8004af0:	9005      	str	r0, [sp, #20]
 8004af2:	3307      	adds	r3, #7
 8004af4:	f023 0307 	bic.w	r3, r3, #7
 8004af8:	f103 0208 	add.w	r2, r3, #8
 8004afc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b00:	f8d4 b000 	ldr.w	fp, [r4]
 8004b04:	f8c8 2000 	str.w	r2, [r8]
 8004b08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b10:	9307      	str	r3, [sp, #28]
 8004b12:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004d90 <_printf_float+0x2c8>)
 8004b20:	f04f 32ff 	mov.w	r2, #4294967295
 8004b24:	f7fc f80a 	bl	8000b3c <__aeabi_dcmpun>
 8004b28:	bb70      	cbnz	r0, 8004b88 <_printf_float+0xc0>
 8004b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b2e:	4b98      	ldr	r3, [pc, #608]	@ (8004d90 <_printf_float+0x2c8>)
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	f7fb ffe4 	bl	8000b00 <__aeabi_dcmple>
 8004b38:	bb30      	cbnz	r0, 8004b88 <_printf_float+0xc0>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4649      	mov	r1, r9
 8004b42:	f7fb ffd3 	bl	8000aec <__aeabi_dcmplt>
 8004b46:	b110      	cbz	r0, 8004b4e <_printf_float+0x86>
 8004b48:	232d      	movs	r3, #45	@ 0x2d
 8004b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b4e:	4a91      	ldr	r2, [pc, #580]	@ (8004d94 <_printf_float+0x2cc>)
 8004b50:	4b91      	ldr	r3, [pc, #580]	@ (8004d98 <_printf_float+0x2d0>)
 8004b52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b56:	bf94      	ite	ls
 8004b58:	4690      	movls	r8, r2
 8004b5a:	4698      	movhi	r8, r3
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	f02b 0304 	bic.w	r3, fp, #4
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	f04f 0900 	mov.w	r9, #0
 8004b6a:	9700      	str	r7, [sp, #0]
 8004b6c:	4633      	mov	r3, r6
 8004b6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 f9d2 	bl	8004f1c <_printf_common>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f040 808d 	bne.w	8004c98 <_printf_float+0x1d0>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	b00d      	add	sp, #52	@ 0x34
 8004b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f7fb ffd4 	bl	8000b3c <__aeabi_dcmpun>
 8004b94:	b140      	cbz	r0, 8004ba8 <_printf_float+0xe0>
 8004b96:	464b      	mov	r3, r9
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bfbc      	itt	lt
 8004b9c:	232d      	movlt	r3, #45	@ 0x2d
 8004b9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8004d9c <_printf_float+0x2d4>)
 8004ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8004da0 <_printf_float+0x2d8>)
 8004ba6:	e7d4      	b.n	8004b52 <_printf_float+0x8a>
 8004ba8:	6863      	ldr	r3, [r4, #4]
 8004baa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004bae:	9206      	str	r2, [sp, #24]
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	d13b      	bne.n	8004c2c <_printf_float+0x164>
 8004bb4:	2306      	movs	r3, #6
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6022      	str	r2, [r4, #0]
 8004bc0:	9303      	str	r3, [sp, #12]
 8004bc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8004bc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bc8:	ab09      	add	r3, sp, #36	@ 0x24
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	6861      	ldr	r1, [r4, #4]
 8004bce:	ec49 8b10 	vmov	d0, r8, r9
 8004bd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7ff fed6 	bl	8004988 <__cvt>
 8004bdc:	9b06      	ldr	r3, [sp, #24]
 8004bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004be0:	2b47      	cmp	r3, #71	@ 0x47
 8004be2:	4680      	mov	r8, r0
 8004be4:	d129      	bne.n	8004c3a <_printf_float+0x172>
 8004be6:	1cc8      	adds	r0, r1, #3
 8004be8:	db02      	blt.n	8004bf0 <_printf_float+0x128>
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	4299      	cmp	r1, r3
 8004bee:	dd41      	ble.n	8004c74 <_printf_float+0x1ac>
 8004bf0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bf4:	fa5f fa8a 	uxtb.w	sl, sl
 8004bf8:	3901      	subs	r1, #1
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c00:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c02:	f7ff ff26 	bl	8004a52 <__exponent>
 8004c06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c08:	1813      	adds	r3, r2, r0
 8004c0a:	2a01      	cmp	r2, #1
 8004c0c:	4681      	mov	r9, r0
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	dc02      	bgt.n	8004c18 <_printf_float+0x150>
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	07d2      	lsls	r2, r2, #31
 8004c16:	d501      	bpl.n	8004c1c <_printf_float+0x154>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0a2      	beq.n	8004b6a <_printf_float+0xa2>
 8004c24:	232d      	movs	r3, #45	@ 0x2d
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c2a:	e79e      	b.n	8004b6a <_printf_float+0xa2>
 8004c2c:	9a06      	ldr	r2, [sp, #24]
 8004c2e:	2a47      	cmp	r2, #71	@ 0x47
 8004c30:	d1c2      	bne.n	8004bb8 <_printf_float+0xf0>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1c0      	bne.n	8004bb8 <_printf_float+0xf0>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e7bd      	b.n	8004bb6 <_printf_float+0xee>
 8004c3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c3e:	d9db      	bls.n	8004bf8 <_printf_float+0x130>
 8004c40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c44:	d118      	bne.n	8004c78 <_printf_float+0x1b0>
 8004c46:	2900      	cmp	r1, #0
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	dd0b      	ble.n	8004c64 <_printf_float+0x19c>
 8004c4c:	6121      	str	r1, [r4, #16]
 8004c4e:	b913      	cbnz	r3, 8004c56 <_printf_float+0x18e>
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	07d0      	lsls	r0, r2, #31
 8004c54:	d502      	bpl.n	8004c5c <_printf_float+0x194>
 8004c56:	3301      	adds	r3, #1
 8004c58:	440b      	add	r3, r1
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c5e:	f04f 0900 	mov.w	r9, #0
 8004c62:	e7db      	b.n	8004c1c <_printf_float+0x154>
 8004c64:	b913      	cbnz	r3, 8004c6c <_printf_float+0x1a4>
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	07d2      	lsls	r2, r2, #31
 8004c6a:	d501      	bpl.n	8004c70 <_printf_float+0x1a8>
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	e7f4      	b.n	8004c5a <_printf_float+0x192>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e7f2      	b.n	8004c5a <_printf_float+0x192>
 8004c74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c7a:	4299      	cmp	r1, r3
 8004c7c:	db05      	blt.n	8004c8a <_printf_float+0x1c2>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	6121      	str	r1, [r4, #16]
 8004c82:	07d8      	lsls	r0, r3, #31
 8004c84:	d5ea      	bpl.n	8004c5c <_printf_float+0x194>
 8004c86:	1c4b      	adds	r3, r1, #1
 8004c88:	e7e7      	b.n	8004c5a <_printf_float+0x192>
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	bfd4      	ite	le
 8004c8e:	f1c1 0202 	rsble	r2, r1, #2
 8004c92:	2201      	movgt	r2, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	e7e0      	b.n	8004c5a <_printf_float+0x192>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	055a      	lsls	r2, r3, #21
 8004c9c:	d407      	bmi.n	8004cae <_printf_float+0x1e6>
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d12b      	bne.n	8004d04 <_printf_float+0x23c>
 8004cac:	e767      	b.n	8004b7e <_printf_float+0xb6>
 8004cae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cb2:	f240 80dd 	bls.w	8004e70 <_printf_float+0x3a8>
 8004cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f7fb ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d033      	beq.n	8004d2e <_printf_float+0x266>
 8004cc6:	4a37      	ldr	r2, [pc, #220]	@ (8004da4 <_printf_float+0x2dc>)
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f43f af54 	beq.w	8004b7e <_printf_float+0xb6>
 8004cd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004cda:	4543      	cmp	r3, r8
 8004cdc:	db02      	blt.n	8004ce4 <_printf_float+0x21c>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	07d8      	lsls	r0, r3, #31
 8004ce2:	d50f      	bpl.n	8004d04 <_printf_float+0x23c>
 8004ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f43f af45 	beq.w	8004b7e <_printf_float+0xb6>
 8004cf4:	f04f 0900 	mov.w	r9, #0
 8004cf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cfc:	f104 0a1a 	add.w	sl, r4, #26
 8004d00:	45c8      	cmp	r8, r9
 8004d02:	dc09      	bgt.n	8004d18 <_printf_float+0x250>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	079b      	lsls	r3, r3, #30
 8004d08:	f100 8103 	bmi.w	8004f12 <_printf_float+0x44a>
 8004d0c:	68e0      	ldr	r0, [r4, #12]
 8004d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d10:	4298      	cmp	r0, r3
 8004d12:	bfb8      	it	lt
 8004d14:	4618      	movlt	r0, r3
 8004d16:	e734      	b.n	8004b82 <_printf_float+0xba>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4652      	mov	r2, sl
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f af2b 	beq.w	8004b7e <_printf_float+0xb6>
 8004d28:	f109 0901 	add.w	r9, r9, #1
 8004d2c:	e7e8      	b.n	8004d00 <_printf_float+0x238>
 8004d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	dc39      	bgt.n	8004da8 <_printf_float+0x2e0>
 8004d34:	4a1b      	ldr	r2, [pc, #108]	@ (8004da4 <_printf_float+0x2dc>)
 8004d36:	2301      	movs	r3, #1
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f43f af1d 	beq.w	8004b7e <_printf_float+0xb6>
 8004d44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d48:	ea59 0303 	orrs.w	r3, r9, r3
 8004d4c:	d102      	bne.n	8004d54 <_printf_float+0x28c>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	07d9      	lsls	r1, r3, #31
 8004d52:	d5d7      	bpl.n	8004d04 <_printf_float+0x23c>
 8004d54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b8      	blx	r7
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f43f af0d 	beq.w	8004b7e <_printf_float+0xb6>
 8004d64:	f04f 0a00 	mov.w	sl, #0
 8004d68:	f104 0b1a 	add.w	fp, r4, #26
 8004d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6e:	425b      	negs	r3, r3
 8004d70:	4553      	cmp	r3, sl
 8004d72:	dc01      	bgt.n	8004d78 <_printf_float+0x2b0>
 8004d74:	464b      	mov	r3, r9
 8004d76:	e793      	b.n	8004ca0 <_printf_float+0x1d8>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	465a      	mov	r2, fp
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f aefb 	beq.w	8004b7e <_printf_float+0xb6>
 8004d88:	f10a 0a01 	add.w	sl, sl, #1
 8004d8c:	e7ee      	b.n	8004d6c <_printf_float+0x2a4>
 8004d8e:	bf00      	nop
 8004d90:	7fefffff 	.word	0x7fefffff
 8004d94:	0800a178 	.word	0x0800a178
 8004d98:	0800a17c 	.word	0x0800a17c
 8004d9c:	0800a180 	.word	0x0800a180
 8004da0:	0800a184 	.word	0x0800a184
 8004da4:	0800a188 	.word	0x0800a188
 8004da8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004daa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dae:	4553      	cmp	r3, sl
 8004db0:	bfa8      	it	ge
 8004db2:	4653      	movge	r3, sl
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	4699      	mov	r9, r3
 8004db8:	dc36      	bgt.n	8004e28 <_printf_float+0x360>
 8004dba:	f04f 0b00 	mov.w	fp, #0
 8004dbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dc2:	f104 021a 	add.w	r2, r4, #26
 8004dc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dc8:	9306      	str	r3, [sp, #24]
 8004dca:	eba3 0309 	sub.w	r3, r3, r9
 8004dce:	455b      	cmp	r3, fp
 8004dd0:	dc31      	bgt.n	8004e36 <_printf_float+0x36e>
 8004dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd4:	459a      	cmp	sl, r3
 8004dd6:	dc3a      	bgt.n	8004e4e <_printf_float+0x386>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	07da      	lsls	r2, r3, #31
 8004ddc:	d437      	bmi.n	8004e4e <_printf_float+0x386>
 8004dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de0:	ebaa 0903 	sub.w	r9, sl, r3
 8004de4:	9b06      	ldr	r3, [sp, #24]
 8004de6:	ebaa 0303 	sub.w	r3, sl, r3
 8004dea:	4599      	cmp	r9, r3
 8004dec:	bfa8      	it	ge
 8004dee:	4699      	movge	r9, r3
 8004df0:	f1b9 0f00 	cmp.w	r9, #0
 8004df4:	dc33      	bgt.n	8004e5e <_printf_float+0x396>
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dfe:	f104 0b1a 	add.w	fp, r4, #26
 8004e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e04:	ebaa 0303 	sub.w	r3, sl, r3
 8004e08:	eba3 0309 	sub.w	r3, r3, r9
 8004e0c:	4543      	cmp	r3, r8
 8004e0e:	f77f af79 	ble.w	8004d04 <_printf_float+0x23c>
 8004e12:	2301      	movs	r3, #1
 8004e14:	465a      	mov	r2, fp
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f43f aeae 	beq.w	8004b7e <_printf_float+0xb6>
 8004e22:	f108 0801 	add.w	r8, r8, #1
 8004e26:	e7ec      	b.n	8004e02 <_printf_float+0x33a>
 8004e28:	4642      	mov	r2, r8
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	d1c2      	bne.n	8004dba <_printf_float+0x2f2>
 8004e34:	e6a3      	b.n	8004b7e <_printf_float+0xb6>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	9206      	str	r2, [sp, #24]
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	f43f ae9c 	beq.w	8004b7e <_printf_float+0xb6>
 8004e46:	9a06      	ldr	r2, [sp, #24]
 8004e48:	f10b 0b01 	add.w	fp, fp, #1
 8004e4c:	e7bb      	b.n	8004dc6 <_printf_float+0x2fe>
 8004e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d1c0      	bne.n	8004dde <_printf_float+0x316>
 8004e5c:	e68f      	b.n	8004b7e <_printf_float+0xb6>
 8004e5e:	9a06      	ldr	r2, [sp, #24]
 8004e60:	464b      	mov	r3, r9
 8004e62:	4442      	add	r2, r8
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d1c3      	bne.n	8004df6 <_printf_float+0x32e>
 8004e6e:	e686      	b.n	8004b7e <_printf_float+0xb6>
 8004e70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e74:	f1ba 0f01 	cmp.w	sl, #1
 8004e78:	dc01      	bgt.n	8004e7e <_printf_float+0x3b6>
 8004e7a:	07db      	lsls	r3, r3, #31
 8004e7c:	d536      	bpl.n	8004eec <_printf_float+0x424>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4642      	mov	r2, r8
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f ae78 	beq.w	8004b7e <_printf_float+0xb6>
 8004e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f43f ae70 	beq.w	8004b7e <_printf_float+0xb6>
 8004e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eaa:	f7fb fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eae:	b9c0      	cbnz	r0, 8004ee2 <_printf_float+0x41a>
 8004eb0:	4653      	mov	r3, sl
 8004eb2:	f108 0201 	add.w	r2, r8, #1
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d10c      	bne.n	8004eda <_printf_float+0x412>
 8004ec0:	e65d      	b.n	8004b7e <_printf_float+0xb6>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	465a      	mov	r2, fp
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f43f ae56 	beq.w	8004b7e <_printf_float+0xb6>
 8004ed2:	f108 0801 	add.w	r8, r8, #1
 8004ed6:	45d0      	cmp	r8, sl
 8004ed8:	dbf3      	blt.n	8004ec2 <_printf_float+0x3fa>
 8004eda:	464b      	mov	r3, r9
 8004edc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ee0:	e6df      	b.n	8004ca2 <_printf_float+0x1da>
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	f104 0b1a 	add.w	fp, r4, #26
 8004eea:	e7f4      	b.n	8004ed6 <_printf_float+0x40e>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4642      	mov	r2, r8
 8004ef0:	e7e1      	b.n	8004eb6 <_printf_float+0x3ee>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	464a      	mov	r2, r9
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	f43f ae3e 	beq.w	8004b7e <_printf_float+0xb6>
 8004f02:	f108 0801 	add.w	r8, r8, #1
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f0a:	1a5b      	subs	r3, r3, r1
 8004f0c:	4543      	cmp	r3, r8
 8004f0e:	dcf0      	bgt.n	8004ef2 <_printf_float+0x42a>
 8004f10:	e6fc      	b.n	8004d0c <_printf_float+0x244>
 8004f12:	f04f 0800 	mov.w	r8, #0
 8004f16:	f104 0919 	add.w	r9, r4, #25
 8004f1a:	e7f4      	b.n	8004f06 <_printf_float+0x43e>

08004f1c <_printf_common>:
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	4616      	mov	r6, r2
 8004f22:	4698      	mov	r8, r3
 8004f24:	688a      	ldr	r2, [r1, #8]
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bfb8      	it	lt
 8004f30:	4613      	movlt	r3, r2
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f38:	4607      	mov	r7, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	b10a      	cbz	r2, 8004f42 <_printf_common+0x26>
 8004f3e:	3301      	adds	r3, #1
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	0699      	lsls	r1, r3, #26
 8004f46:	bf42      	ittt	mi
 8004f48:	6833      	ldrmi	r3, [r6, #0]
 8004f4a:	3302      	addmi	r3, #2
 8004f4c:	6033      	strmi	r3, [r6, #0]
 8004f4e:	6825      	ldr	r5, [r4, #0]
 8004f50:	f015 0506 	ands.w	r5, r5, #6
 8004f54:	d106      	bne.n	8004f64 <_printf_common+0x48>
 8004f56:	f104 0a19 	add.w	sl, r4, #25
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	6832      	ldr	r2, [r6, #0]
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dc26      	bgt.n	8004fb2 <_printf_common+0x96>
 8004f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	3b00      	subs	r3, #0
 8004f6c:	bf18      	it	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	0692      	lsls	r2, r2, #26
 8004f72:	d42b      	bmi.n	8004fcc <_printf_common+0xb0>
 8004f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f78:	4641      	mov	r1, r8
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	47c8      	blx	r9
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d01e      	beq.n	8004fc0 <_printf_common+0xa4>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	f003 0306 	and.w	r3, r3, #6
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	bf02      	ittt	eq
 8004f8e:	68e5      	ldreq	r5, [r4, #12]
 8004f90:	6833      	ldreq	r3, [r6, #0]
 8004f92:	1aed      	subeq	r5, r5, r3
 8004f94:	68a3      	ldr	r3, [r4, #8]
 8004f96:	bf0c      	ite	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	2500      	movne	r5, #0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bfc4      	itt	gt
 8004fa2:	1a9b      	subgt	r3, r3, r2
 8004fa4:	18ed      	addgt	r5, r5, r3
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	341a      	adds	r4, #26
 8004faa:	42b5      	cmp	r5, r6
 8004fac:	d11a      	bne.n	8004fe4 <_printf_common+0xc8>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e008      	b.n	8004fc4 <_printf_common+0xa8>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4652      	mov	r2, sl
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	4638      	mov	r0, r7
 8004fba:	47c8      	blx	r9
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d103      	bne.n	8004fc8 <_printf_common+0xac>
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc8:	3501      	adds	r5, #1
 8004fca:	e7c6      	b.n	8004f5a <_printf_common+0x3e>
 8004fcc:	18e1      	adds	r1, r4, r3
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	2030      	movs	r0, #48	@ 0x30
 8004fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fd6:	4422      	add	r2, r4
 8004fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	e7c7      	b.n	8004f74 <_printf_common+0x58>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	4641      	mov	r1, r8
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c8      	blx	r9
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d0e6      	beq.n	8004fc0 <_printf_common+0xa4>
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7d9      	b.n	8004faa <_printf_common+0x8e>
	...

08004ff8 <_printf_i>:
 8004ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	7e0f      	ldrb	r7, [r1, #24]
 8004ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005000:	2f78      	cmp	r7, #120	@ 0x78
 8005002:	4691      	mov	r9, r2
 8005004:	4680      	mov	r8, r0
 8005006:	460c      	mov	r4, r1
 8005008:	469a      	mov	sl, r3
 800500a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800500e:	d807      	bhi.n	8005020 <_printf_i+0x28>
 8005010:	2f62      	cmp	r7, #98	@ 0x62
 8005012:	d80a      	bhi.n	800502a <_printf_i+0x32>
 8005014:	2f00      	cmp	r7, #0
 8005016:	f000 80d2 	beq.w	80051be <_printf_i+0x1c6>
 800501a:	2f58      	cmp	r7, #88	@ 0x58
 800501c:	f000 80b9 	beq.w	8005192 <_printf_i+0x19a>
 8005020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005028:	e03a      	b.n	80050a0 <_printf_i+0xa8>
 800502a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800502e:	2b15      	cmp	r3, #21
 8005030:	d8f6      	bhi.n	8005020 <_printf_i+0x28>
 8005032:	a101      	add	r1, pc, #4	@ (adr r1, 8005038 <_printf_i+0x40>)
 8005034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005038:	08005091 	.word	0x08005091
 800503c:	080050a5 	.word	0x080050a5
 8005040:	08005021 	.word	0x08005021
 8005044:	08005021 	.word	0x08005021
 8005048:	08005021 	.word	0x08005021
 800504c:	08005021 	.word	0x08005021
 8005050:	080050a5 	.word	0x080050a5
 8005054:	08005021 	.word	0x08005021
 8005058:	08005021 	.word	0x08005021
 800505c:	08005021 	.word	0x08005021
 8005060:	08005021 	.word	0x08005021
 8005064:	080051a5 	.word	0x080051a5
 8005068:	080050cf 	.word	0x080050cf
 800506c:	0800515f 	.word	0x0800515f
 8005070:	08005021 	.word	0x08005021
 8005074:	08005021 	.word	0x08005021
 8005078:	080051c7 	.word	0x080051c7
 800507c:	08005021 	.word	0x08005021
 8005080:	080050cf 	.word	0x080050cf
 8005084:	08005021 	.word	0x08005021
 8005088:	08005021 	.word	0x08005021
 800508c:	08005167 	.word	0x08005167
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6032      	str	r2, [r6, #0]
 8005098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800509c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050a0:	2301      	movs	r3, #1
 80050a2:	e09d      	b.n	80051e0 <_printf_i+0x1e8>
 80050a4:	6833      	ldr	r3, [r6, #0]
 80050a6:	6820      	ldr	r0, [r4, #0]
 80050a8:	1d19      	adds	r1, r3, #4
 80050aa:	6031      	str	r1, [r6, #0]
 80050ac:	0606      	lsls	r6, r0, #24
 80050ae:	d501      	bpl.n	80050b4 <_printf_i+0xbc>
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	e003      	b.n	80050bc <_printf_i+0xc4>
 80050b4:	0645      	lsls	r5, r0, #25
 80050b6:	d5fb      	bpl.n	80050b0 <_printf_i+0xb8>
 80050b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050bc:	2d00      	cmp	r5, #0
 80050be:	da03      	bge.n	80050c8 <_printf_i+0xd0>
 80050c0:	232d      	movs	r3, #45	@ 0x2d
 80050c2:	426d      	negs	r5, r5
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c8:	4859      	ldr	r0, [pc, #356]	@ (8005230 <_printf_i+0x238>)
 80050ca:	230a      	movs	r3, #10
 80050cc:	e011      	b.n	80050f2 <_printf_i+0xfa>
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	0608      	lsls	r0, r1, #24
 80050d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d8:	d402      	bmi.n	80050e0 <_printf_i+0xe8>
 80050da:	0649      	lsls	r1, r1, #25
 80050dc:	bf48      	it	mi
 80050de:	b2ad      	uxthmi	r5, r5
 80050e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050e2:	4853      	ldr	r0, [pc, #332]	@ (8005230 <_printf_i+0x238>)
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	bf14      	ite	ne
 80050e8:	230a      	movne	r3, #10
 80050ea:	2308      	moveq	r3, #8
 80050ec:	2100      	movs	r1, #0
 80050ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050f2:	6866      	ldr	r6, [r4, #4]
 80050f4:	60a6      	str	r6, [r4, #8]
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	bfa2      	ittt	ge
 80050fa:	6821      	ldrge	r1, [r4, #0]
 80050fc:	f021 0104 	bicge.w	r1, r1, #4
 8005100:	6021      	strge	r1, [r4, #0]
 8005102:	b90d      	cbnz	r5, 8005108 <_printf_i+0x110>
 8005104:	2e00      	cmp	r6, #0
 8005106:	d04b      	beq.n	80051a0 <_printf_i+0x1a8>
 8005108:	4616      	mov	r6, r2
 800510a:	fbb5 f1f3 	udiv	r1, r5, r3
 800510e:	fb03 5711 	mls	r7, r3, r1, r5
 8005112:	5dc7      	ldrb	r7, [r0, r7]
 8005114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005118:	462f      	mov	r7, r5
 800511a:	42bb      	cmp	r3, r7
 800511c:	460d      	mov	r5, r1
 800511e:	d9f4      	bls.n	800510a <_printf_i+0x112>
 8005120:	2b08      	cmp	r3, #8
 8005122:	d10b      	bne.n	800513c <_printf_i+0x144>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07df      	lsls	r7, r3, #31
 8005128:	d508      	bpl.n	800513c <_printf_i+0x144>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	6861      	ldr	r1, [r4, #4]
 800512e:	4299      	cmp	r1, r3
 8005130:	bfde      	ittt	le
 8005132:	2330      	movle	r3, #48	@ 0x30
 8005134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800513c:	1b92      	subs	r2, r2, r6
 800513e:	6122      	str	r2, [r4, #16]
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	464b      	mov	r3, r9
 8005146:	aa03      	add	r2, sp, #12
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fee6 	bl	8004f1c <_printf_common>
 8005150:	3001      	adds	r0, #1
 8005152:	d14a      	bne.n	80051ea <_printf_i+0x1f2>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b004      	add	sp, #16
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f043 0320 	orr.w	r3, r3, #32
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	4833      	ldr	r0, [pc, #204]	@ (8005234 <_printf_i+0x23c>)
 8005168:	2778      	movs	r7, #120	@ 0x78
 800516a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6831      	ldr	r1, [r6, #0]
 8005172:	061f      	lsls	r7, r3, #24
 8005174:	f851 5b04 	ldr.w	r5, [r1], #4
 8005178:	d402      	bmi.n	8005180 <_printf_i+0x188>
 800517a:	065f      	lsls	r7, r3, #25
 800517c:	bf48      	it	mi
 800517e:	b2ad      	uxthmi	r5, r5
 8005180:	6031      	str	r1, [r6, #0]
 8005182:	07d9      	lsls	r1, r3, #31
 8005184:	bf44      	itt	mi
 8005186:	f043 0320 	orrmi.w	r3, r3, #32
 800518a:	6023      	strmi	r3, [r4, #0]
 800518c:	b11d      	cbz	r5, 8005196 <_printf_i+0x19e>
 800518e:	2310      	movs	r3, #16
 8005190:	e7ac      	b.n	80050ec <_printf_i+0xf4>
 8005192:	4827      	ldr	r0, [pc, #156]	@ (8005230 <_printf_i+0x238>)
 8005194:	e7e9      	b.n	800516a <_printf_i+0x172>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	f023 0320 	bic.w	r3, r3, #32
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	e7f6      	b.n	800518e <_printf_i+0x196>
 80051a0:	4616      	mov	r6, r2
 80051a2:	e7bd      	b.n	8005120 <_printf_i+0x128>
 80051a4:	6833      	ldr	r3, [r6, #0]
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	6961      	ldr	r1, [r4, #20]
 80051aa:	1d18      	adds	r0, r3, #4
 80051ac:	6030      	str	r0, [r6, #0]
 80051ae:	062e      	lsls	r6, r5, #24
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	d501      	bpl.n	80051b8 <_printf_i+0x1c0>
 80051b4:	6019      	str	r1, [r3, #0]
 80051b6:	e002      	b.n	80051be <_printf_i+0x1c6>
 80051b8:	0668      	lsls	r0, r5, #25
 80051ba:	d5fb      	bpl.n	80051b4 <_printf_i+0x1bc>
 80051bc:	8019      	strh	r1, [r3, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	4616      	mov	r6, r2
 80051c4:	e7bc      	b.n	8005140 <_printf_i+0x148>
 80051c6:	6833      	ldr	r3, [r6, #0]
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	6032      	str	r2, [r6, #0]
 80051cc:	681e      	ldr	r6, [r3, #0]
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	2100      	movs	r1, #0
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7fb f804 	bl	80001e0 <memchr>
 80051d8:	b108      	cbz	r0, 80051de <_printf_i+0x1e6>
 80051da:	1b80      	subs	r0, r0, r6
 80051dc:	6060      	str	r0, [r4, #4]
 80051de:	6863      	ldr	r3, [r4, #4]
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	2300      	movs	r3, #0
 80051e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e8:	e7aa      	b.n	8005140 <_printf_i+0x148>
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	4632      	mov	r2, r6
 80051ee:	4649      	mov	r1, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	47d0      	blx	sl
 80051f4:	3001      	adds	r0, #1
 80051f6:	d0ad      	beq.n	8005154 <_printf_i+0x15c>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	079b      	lsls	r3, r3, #30
 80051fc:	d413      	bmi.n	8005226 <_printf_i+0x22e>
 80051fe:	68e0      	ldr	r0, [r4, #12]
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	4298      	cmp	r0, r3
 8005204:	bfb8      	it	lt
 8005206:	4618      	movlt	r0, r3
 8005208:	e7a6      	b.n	8005158 <_printf_i+0x160>
 800520a:	2301      	movs	r3, #1
 800520c:	4632      	mov	r2, r6
 800520e:	4649      	mov	r1, r9
 8005210:	4640      	mov	r0, r8
 8005212:	47d0      	blx	sl
 8005214:	3001      	adds	r0, #1
 8005216:	d09d      	beq.n	8005154 <_printf_i+0x15c>
 8005218:	3501      	adds	r5, #1
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	9903      	ldr	r1, [sp, #12]
 800521e:	1a5b      	subs	r3, r3, r1
 8005220:	42ab      	cmp	r3, r5
 8005222:	dcf2      	bgt.n	800520a <_printf_i+0x212>
 8005224:	e7eb      	b.n	80051fe <_printf_i+0x206>
 8005226:	2500      	movs	r5, #0
 8005228:	f104 0619 	add.w	r6, r4, #25
 800522c:	e7f5      	b.n	800521a <_printf_i+0x222>
 800522e:	bf00      	nop
 8005230:	0800a18a 	.word	0x0800a18a
 8005234:	0800a19b 	.word	0x0800a19b

08005238 <std>:
 8005238:	2300      	movs	r3, #0
 800523a:	b510      	push	{r4, lr}
 800523c:	4604      	mov	r4, r0
 800523e:	e9c0 3300 	strd	r3, r3, [r0]
 8005242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005246:	6083      	str	r3, [r0, #8]
 8005248:	8181      	strh	r1, [r0, #12]
 800524a:	6643      	str	r3, [r0, #100]	@ 0x64
 800524c:	81c2      	strh	r2, [r0, #14]
 800524e:	6183      	str	r3, [r0, #24]
 8005250:	4619      	mov	r1, r3
 8005252:	2208      	movs	r2, #8
 8005254:	305c      	adds	r0, #92	@ 0x5c
 8005256:	f000 f906 	bl	8005466 <memset>
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <std+0x58>)
 800525c:	6263      	str	r3, [r4, #36]	@ 0x24
 800525e:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <std+0x5c>)
 8005260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <std+0x60>)
 8005264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <std+0x64>)
 8005268:	6323      	str	r3, [r4, #48]	@ 0x30
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <std+0x68>)
 800526c:	6224      	str	r4, [r4, #32]
 800526e:	429c      	cmp	r4, r3
 8005270:	d006      	beq.n	8005280 <std+0x48>
 8005272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005276:	4294      	cmp	r4, r2
 8005278:	d002      	beq.n	8005280 <std+0x48>
 800527a:	33d0      	adds	r3, #208	@ 0xd0
 800527c:	429c      	cmp	r4, r3
 800527e:	d105      	bne.n	800528c <std+0x54>
 8005280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005288:	f000 b96a 	b.w	8005560 <__retarget_lock_init_recursive>
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	080053e1 	.word	0x080053e1
 8005294:	08005403 	.word	0x08005403
 8005298:	0800543b 	.word	0x0800543b
 800529c:	0800545f 	.word	0x0800545f
 80052a0:	20005294 	.word	0x20005294

080052a4 <stdio_exit_handler>:
 80052a4:	4a02      	ldr	r2, [pc, #8]	@ (80052b0 <stdio_exit_handler+0xc>)
 80052a6:	4903      	ldr	r1, [pc, #12]	@ (80052b4 <stdio_exit_handler+0x10>)
 80052a8:	4803      	ldr	r0, [pc, #12]	@ (80052b8 <stdio_exit_handler+0x14>)
 80052aa:	f000 b869 	b.w	8005380 <_fwalk_sglue>
 80052ae:	bf00      	nop
 80052b0:	20004018 	.word	0x20004018
 80052b4:	08006e91 	.word	0x08006e91
 80052b8:	20004028 	.word	0x20004028

080052bc <cleanup_stdio>:
 80052bc:	6841      	ldr	r1, [r0, #4]
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <cleanup_stdio+0x34>)
 80052c0:	4299      	cmp	r1, r3
 80052c2:	b510      	push	{r4, lr}
 80052c4:	4604      	mov	r4, r0
 80052c6:	d001      	beq.n	80052cc <cleanup_stdio+0x10>
 80052c8:	f001 fde2 	bl	8006e90 <_fflush_r>
 80052cc:	68a1      	ldr	r1, [r4, #8]
 80052ce:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <cleanup_stdio+0x38>)
 80052d0:	4299      	cmp	r1, r3
 80052d2:	d002      	beq.n	80052da <cleanup_stdio+0x1e>
 80052d4:	4620      	mov	r0, r4
 80052d6:	f001 fddb 	bl	8006e90 <_fflush_r>
 80052da:	68e1      	ldr	r1, [r4, #12]
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <cleanup_stdio+0x3c>)
 80052de:	4299      	cmp	r1, r3
 80052e0:	d004      	beq.n	80052ec <cleanup_stdio+0x30>
 80052e2:	4620      	mov	r0, r4
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	f001 bdd2 	b.w	8006e90 <_fflush_r>
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	bf00      	nop
 80052f0:	20005294 	.word	0x20005294
 80052f4:	200052fc 	.word	0x200052fc
 80052f8:	20005364 	.word	0x20005364

080052fc <global_stdio_init.part.0>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4b0b      	ldr	r3, [pc, #44]	@ (800532c <global_stdio_init.part.0+0x30>)
 8005300:	4c0b      	ldr	r4, [pc, #44]	@ (8005330 <global_stdio_init.part.0+0x34>)
 8005302:	4a0c      	ldr	r2, [pc, #48]	@ (8005334 <global_stdio_init.part.0+0x38>)
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	4620      	mov	r0, r4
 8005308:	2200      	movs	r2, #0
 800530a:	2104      	movs	r1, #4
 800530c:	f7ff ff94 	bl	8005238 <std>
 8005310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005314:	2201      	movs	r2, #1
 8005316:	2109      	movs	r1, #9
 8005318:	f7ff ff8e 	bl	8005238 <std>
 800531c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005320:	2202      	movs	r2, #2
 8005322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005326:	2112      	movs	r1, #18
 8005328:	f7ff bf86 	b.w	8005238 <std>
 800532c:	200053cc 	.word	0x200053cc
 8005330:	20005294 	.word	0x20005294
 8005334:	080052a5 	.word	0x080052a5

08005338 <__sfp_lock_acquire>:
 8005338:	4801      	ldr	r0, [pc, #4]	@ (8005340 <__sfp_lock_acquire+0x8>)
 800533a:	f000 b912 	b.w	8005562 <__retarget_lock_acquire_recursive>
 800533e:	bf00      	nop
 8005340:	200053d5 	.word	0x200053d5

08005344 <__sfp_lock_release>:
 8005344:	4801      	ldr	r0, [pc, #4]	@ (800534c <__sfp_lock_release+0x8>)
 8005346:	f000 b90d 	b.w	8005564 <__retarget_lock_release_recursive>
 800534a:	bf00      	nop
 800534c:	200053d5 	.word	0x200053d5

08005350 <__sinit>:
 8005350:	b510      	push	{r4, lr}
 8005352:	4604      	mov	r4, r0
 8005354:	f7ff fff0 	bl	8005338 <__sfp_lock_acquire>
 8005358:	6a23      	ldr	r3, [r4, #32]
 800535a:	b11b      	cbz	r3, 8005364 <__sinit+0x14>
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005360:	f7ff bff0 	b.w	8005344 <__sfp_lock_release>
 8005364:	4b04      	ldr	r3, [pc, #16]	@ (8005378 <__sinit+0x28>)
 8005366:	6223      	str	r3, [r4, #32]
 8005368:	4b04      	ldr	r3, [pc, #16]	@ (800537c <__sinit+0x2c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f5      	bne.n	800535c <__sinit+0xc>
 8005370:	f7ff ffc4 	bl	80052fc <global_stdio_init.part.0>
 8005374:	e7f2      	b.n	800535c <__sinit+0xc>
 8005376:	bf00      	nop
 8005378:	080052bd 	.word	0x080052bd
 800537c:	200053cc 	.word	0x200053cc

08005380 <_fwalk_sglue>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	4607      	mov	r7, r0
 8005386:	4688      	mov	r8, r1
 8005388:	4614      	mov	r4, r2
 800538a:	2600      	movs	r6, #0
 800538c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005390:	f1b9 0901 	subs.w	r9, r9, #1
 8005394:	d505      	bpl.n	80053a2 <_fwalk_sglue+0x22>
 8005396:	6824      	ldr	r4, [r4, #0]
 8005398:	2c00      	cmp	r4, #0
 800539a:	d1f7      	bne.n	800538c <_fwalk_sglue+0xc>
 800539c:	4630      	mov	r0, r6
 800539e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a2:	89ab      	ldrh	r3, [r5, #12]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d907      	bls.n	80053b8 <_fwalk_sglue+0x38>
 80053a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ac:	3301      	adds	r3, #1
 80053ae:	d003      	beq.n	80053b8 <_fwalk_sglue+0x38>
 80053b0:	4629      	mov	r1, r5
 80053b2:	4638      	mov	r0, r7
 80053b4:	47c0      	blx	r8
 80053b6:	4306      	orrs	r6, r0
 80053b8:	3568      	adds	r5, #104	@ 0x68
 80053ba:	e7e9      	b.n	8005390 <_fwalk_sglue+0x10>

080053bc <iprintf>:
 80053bc:	b40f      	push	{r0, r1, r2, r3}
 80053be:	b507      	push	{r0, r1, r2, lr}
 80053c0:	4906      	ldr	r1, [pc, #24]	@ (80053dc <iprintf+0x20>)
 80053c2:	ab04      	add	r3, sp, #16
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ca:	6881      	ldr	r1, [r0, #8]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	f001 fbc3 	bl	8006b58 <_vfiprintf_r>
 80053d2:	b003      	add	sp, #12
 80053d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d8:	b004      	add	sp, #16
 80053da:	4770      	bx	lr
 80053dc:	20004024 	.word	0x20004024

080053e0 <__sread>:
 80053e0:	b510      	push	{r4, lr}
 80053e2:	460c      	mov	r4, r1
 80053e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e8:	f000 f86c 	bl	80054c4 <_read_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	bfab      	itete	ge
 80053f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053f2:	89a3      	ldrhlt	r3, [r4, #12]
 80053f4:	181b      	addge	r3, r3, r0
 80053f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053fa:	bfac      	ite	ge
 80053fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053fe:	81a3      	strhlt	r3, [r4, #12]
 8005400:	bd10      	pop	{r4, pc}

08005402 <__swrite>:
 8005402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005406:	461f      	mov	r7, r3
 8005408:	898b      	ldrh	r3, [r1, #12]
 800540a:	05db      	lsls	r3, r3, #23
 800540c:	4605      	mov	r5, r0
 800540e:	460c      	mov	r4, r1
 8005410:	4616      	mov	r6, r2
 8005412:	d505      	bpl.n	8005420 <__swrite+0x1e>
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	2302      	movs	r3, #2
 800541a:	2200      	movs	r2, #0
 800541c:	f000 f840 	bl	80054a0 <_lseek_r>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	4632      	mov	r2, r6
 800542e:	463b      	mov	r3, r7
 8005430:	4628      	mov	r0, r5
 8005432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005436:	f000 b857 	b.w	80054e8 <_write_r>

0800543a <__sseek>:
 800543a:	b510      	push	{r4, lr}
 800543c:	460c      	mov	r4, r1
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 f82d 	bl	80054a0 <_lseek_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	bf15      	itete	ne
 800544c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800544e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005452:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005456:	81a3      	strheq	r3, [r4, #12]
 8005458:	bf18      	it	ne
 800545a:	81a3      	strhne	r3, [r4, #12]
 800545c:	bd10      	pop	{r4, pc}

0800545e <__sclose>:
 800545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005462:	f000 b80d 	b.w	8005480 <_close_r>

08005466 <memset>:
 8005466:	4402      	add	r2, r0
 8005468:	4603      	mov	r3, r0
 800546a:	4293      	cmp	r3, r2
 800546c:	d100      	bne.n	8005470 <memset+0xa>
 800546e:	4770      	bx	lr
 8005470:	f803 1b01 	strb.w	r1, [r3], #1
 8005474:	e7f9      	b.n	800546a <memset+0x4>
	...

08005478 <_localeconv_r>:
 8005478:	4800      	ldr	r0, [pc, #0]	@ (800547c <_localeconv_r+0x4>)
 800547a:	4770      	bx	lr
 800547c:	20004164 	.word	0x20004164

08005480 <_close_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4d06      	ldr	r5, [pc, #24]	@ (800549c <_close_r+0x1c>)
 8005484:	2300      	movs	r3, #0
 8005486:	4604      	mov	r4, r0
 8005488:	4608      	mov	r0, r1
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	f7fb ff5f 	bl	800134e <_close>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_close_r+0x1a>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_close_r+0x1a>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	200053d0 	.word	0x200053d0

080054a0 <_lseek_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d07      	ldr	r5, [pc, #28]	@ (80054c0 <_lseek_r+0x20>)
 80054a4:	4604      	mov	r4, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	4611      	mov	r1, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	602a      	str	r2, [r5, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f7fb ff74 	bl	800139c <_lseek>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_lseek_r+0x1e>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_lseek_r+0x1e>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	200053d0 	.word	0x200053d0

080054c4 <_read_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	@ (80054e4 <_read_r+0x20>)
 80054c8:	4604      	mov	r4, r0
 80054ca:	4608      	mov	r0, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	602a      	str	r2, [r5, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f7fb ff1e 	bl	8001314 <_read>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_read_r+0x1e>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_read_r+0x1e>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200053d0 	.word	0x200053d0

080054e8 <_write_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	@ (8005508 <_write_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fb fe20 	bl	800113c <_write>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_write_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_write_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200053d0 	.word	0x200053d0

0800550c <__errno>:
 800550c:	4b01      	ldr	r3, [pc, #4]	@ (8005514 <__errno+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20004024 	.word	0x20004024

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4d0d      	ldr	r5, [pc, #52]	@ (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	@ (8005554 <__libc_init_array+0x3c>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2600      	movs	r6, #0
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4d0b      	ldr	r5, [pc, #44]	@ (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	@ (800555c <__libc_init_array+0x44>)
 800552c:	f001 fee0 	bl	80072f0 <_init>
 8005530:	1b64      	subs	r4, r4, r5
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2600      	movs	r6, #0
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f855 3b04 	ldr.w	r3, [r5], #4
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	0800a4f0 	.word	0x0800a4f0
 8005554:	0800a4f0 	.word	0x0800a4f0
 8005558:	0800a4f0 	.word	0x0800a4f0
 800555c:	0800a4f4 	.word	0x0800a4f4

08005560 <__retarget_lock_init_recursive>:
 8005560:	4770      	bx	lr

08005562 <__retarget_lock_acquire_recursive>:
 8005562:	4770      	bx	lr

08005564 <__retarget_lock_release_recursive>:
 8005564:	4770      	bx	lr

08005566 <quorem>:
 8005566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	6903      	ldr	r3, [r0, #16]
 800556c:	690c      	ldr	r4, [r1, #16]
 800556e:	42a3      	cmp	r3, r4
 8005570:	4607      	mov	r7, r0
 8005572:	db7e      	blt.n	8005672 <quorem+0x10c>
 8005574:	3c01      	subs	r4, #1
 8005576:	f101 0814 	add.w	r8, r1, #20
 800557a:	00a3      	lsls	r3, r4, #2
 800557c:	f100 0514 	add.w	r5, r0, #20
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800558c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005590:	3301      	adds	r3, #1
 8005592:	429a      	cmp	r2, r3
 8005594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005598:	fbb2 f6f3 	udiv	r6, r2, r3
 800559c:	d32e      	bcc.n	80055fc <quorem+0x96>
 800559e:	f04f 0a00 	mov.w	sl, #0
 80055a2:	46c4      	mov	ip, r8
 80055a4:	46ae      	mov	lr, r5
 80055a6:	46d3      	mov	fp, sl
 80055a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055ac:	b298      	uxth	r0, r3
 80055ae:	fb06 a000 	mla	r0, r6, r0, sl
 80055b2:	0c02      	lsrs	r2, r0, #16
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	fb06 2303 	mla	r3, r6, r3, r2
 80055ba:	f8de 2000 	ldr.w	r2, [lr]
 80055be:	b280      	uxth	r0, r0
 80055c0:	b292      	uxth	r2, r2
 80055c2:	1a12      	subs	r2, r2, r0
 80055c4:	445a      	add	r2, fp
 80055c6:	f8de 0000 	ldr.w	r0, [lr]
 80055ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055d8:	b292      	uxth	r2, r2
 80055da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055de:	45e1      	cmp	r9, ip
 80055e0:	f84e 2b04 	str.w	r2, [lr], #4
 80055e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055e8:	d2de      	bcs.n	80055a8 <quorem+0x42>
 80055ea:	9b00      	ldr	r3, [sp, #0]
 80055ec:	58eb      	ldr	r3, [r5, r3]
 80055ee:	b92b      	cbnz	r3, 80055fc <quorem+0x96>
 80055f0:	9b01      	ldr	r3, [sp, #4]
 80055f2:	3b04      	subs	r3, #4
 80055f4:	429d      	cmp	r5, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	d32f      	bcc.n	800565a <quorem+0xf4>
 80055fa:	613c      	str	r4, [r7, #16]
 80055fc:	4638      	mov	r0, r7
 80055fe:	f001 f979 	bl	80068f4 <__mcmp>
 8005602:	2800      	cmp	r0, #0
 8005604:	db25      	blt.n	8005652 <quorem+0xec>
 8005606:	4629      	mov	r1, r5
 8005608:	2000      	movs	r0, #0
 800560a:	f858 2b04 	ldr.w	r2, [r8], #4
 800560e:	f8d1 c000 	ldr.w	ip, [r1]
 8005612:	fa1f fe82 	uxth.w	lr, r2
 8005616:	fa1f f38c 	uxth.w	r3, ip
 800561a:	eba3 030e 	sub.w	r3, r3, lr
 800561e:	4403      	add	r3, r0
 8005620:	0c12      	lsrs	r2, r2, #16
 8005622:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005626:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800562a:	b29b      	uxth	r3, r3
 800562c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005630:	45c1      	cmp	r9, r8
 8005632:	f841 3b04 	str.w	r3, [r1], #4
 8005636:	ea4f 4022 	mov.w	r0, r2, asr #16
 800563a:	d2e6      	bcs.n	800560a <quorem+0xa4>
 800563c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005640:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005644:	b922      	cbnz	r2, 8005650 <quorem+0xea>
 8005646:	3b04      	subs	r3, #4
 8005648:	429d      	cmp	r5, r3
 800564a:	461a      	mov	r2, r3
 800564c:	d30b      	bcc.n	8005666 <quorem+0x100>
 800564e:	613c      	str	r4, [r7, #16]
 8005650:	3601      	adds	r6, #1
 8005652:	4630      	mov	r0, r6
 8005654:	b003      	add	sp, #12
 8005656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	3b04      	subs	r3, #4
 800565e:	2a00      	cmp	r2, #0
 8005660:	d1cb      	bne.n	80055fa <quorem+0x94>
 8005662:	3c01      	subs	r4, #1
 8005664:	e7c6      	b.n	80055f4 <quorem+0x8e>
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	3b04      	subs	r3, #4
 800566a:	2a00      	cmp	r2, #0
 800566c:	d1ef      	bne.n	800564e <quorem+0xe8>
 800566e:	3c01      	subs	r4, #1
 8005670:	e7ea      	b.n	8005648 <quorem+0xe2>
 8005672:	2000      	movs	r0, #0
 8005674:	e7ee      	b.n	8005654 <quorem+0xee>
	...

08005678 <_dtoa_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	69c7      	ldr	r7, [r0, #28]
 800567e:	b099      	sub	sp, #100	@ 0x64
 8005680:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005684:	ec55 4b10 	vmov	r4, r5, d0
 8005688:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800568a:	9109      	str	r1, [sp, #36]	@ 0x24
 800568c:	4683      	mov	fp, r0
 800568e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005690:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005692:	b97f      	cbnz	r7, 80056b4 <_dtoa_r+0x3c>
 8005694:	2010      	movs	r0, #16
 8005696:	f000 fdfd 	bl	8006294 <malloc>
 800569a:	4602      	mov	r2, r0
 800569c:	f8cb 001c 	str.w	r0, [fp, #28]
 80056a0:	b920      	cbnz	r0, 80056ac <_dtoa_r+0x34>
 80056a2:	4ba7      	ldr	r3, [pc, #668]	@ (8005940 <_dtoa_r+0x2c8>)
 80056a4:	21ef      	movs	r1, #239	@ 0xef
 80056a6:	48a7      	ldr	r0, [pc, #668]	@ (8005944 <_dtoa_r+0x2cc>)
 80056a8:	f001 fccc 	bl	8007044 <__assert_func>
 80056ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056b0:	6007      	str	r7, [r0, #0]
 80056b2:	60c7      	str	r7, [r0, #12]
 80056b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	b159      	cbz	r1, 80056d4 <_dtoa_r+0x5c>
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	604a      	str	r2, [r1, #4]
 80056c0:	2301      	movs	r3, #1
 80056c2:	4093      	lsls	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
 80056c6:	4658      	mov	r0, fp
 80056c8:	f000 feda 	bl	8006480 <_Bfree>
 80056cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	1e2b      	subs	r3, r5, #0
 80056d6:	bfb9      	ittee	lt
 80056d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056dc:	9303      	strlt	r3, [sp, #12]
 80056de:	2300      	movge	r3, #0
 80056e0:	6033      	strge	r3, [r6, #0]
 80056e2:	9f03      	ldr	r7, [sp, #12]
 80056e4:	4b98      	ldr	r3, [pc, #608]	@ (8005948 <_dtoa_r+0x2d0>)
 80056e6:	bfbc      	itt	lt
 80056e8:	2201      	movlt	r2, #1
 80056ea:	6032      	strlt	r2, [r6, #0]
 80056ec:	43bb      	bics	r3, r7
 80056ee:	d112      	bne.n	8005716 <_dtoa_r+0x9e>
 80056f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056fc:	4323      	orrs	r3, r4
 80056fe:	f000 854d 	beq.w	800619c <_dtoa_r+0xb24>
 8005702:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005704:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800595c <_dtoa_r+0x2e4>
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 854f 	beq.w	80061ac <_dtoa_r+0xb34>
 800570e:	f10a 0303 	add.w	r3, sl, #3
 8005712:	f000 bd49 	b.w	80061a8 <_dtoa_r+0xb30>
 8005716:	ed9d 7b02 	vldr	d7, [sp, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	ec51 0b17 	vmov	r0, r1, d7
 8005720:	2300      	movs	r3, #0
 8005722:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005726:	f7fb f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800572a:	4680      	mov	r8, r0
 800572c:	b158      	cbz	r0, 8005746 <_dtoa_r+0xce>
 800572e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005730:	2301      	movs	r3, #1
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005736:	b113      	cbz	r3, 800573e <_dtoa_r+0xc6>
 8005738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800573a:	4b84      	ldr	r3, [pc, #528]	@ (800594c <_dtoa_r+0x2d4>)
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005960 <_dtoa_r+0x2e8>
 8005742:	f000 bd33 	b.w	80061ac <_dtoa_r+0xb34>
 8005746:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800574a:	aa16      	add	r2, sp, #88	@ 0x58
 800574c:	a917      	add	r1, sp, #92	@ 0x5c
 800574e:	4658      	mov	r0, fp
 8005750:	f001 f980 	bl	8006a54 <__d2b>
 8005754:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005758:	4681      	mov	r9, r0
 800575a:	2e00      	cmp	r6, #0
 800575c:	d077      	beq.n	800584e <_dtoa_r+0x1d6>
 800575e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005760:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800576c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005770:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005774:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005778:	4619      	mov	r1, r3
 800577a:	2200      	movs	r2, #0
 800577c:	4b74      	ldr	r3, [pc, #464]	@ (8005950 <_dtoa_r+0x2d8>)
 800577e:	f7fa fd8b 	bl	8000298 <__aeabi_dsub>
 8005782:	a369      	add	r3, pc, #420	@ (adr r3, 8005928 <_dtoa_r+0x2b0>)
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f7fa ff3e 	bl	8000608 <__aeabi_dmul>
 800578c:	a368      	add	r3, pc, #416	@ (adr r3, 8005930 <_dtoa_r+0x2b8>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa fd83 	bl	800029c <__adddf3>
 8005796:	4604      	mov	r4, r0
 8005798:	4630      	mov	r0, r6
 800579a:	460d      	mov	r5, r1
 800579c:	f7fa feca 	bl	8000534 <__aeabi_i2d>
 80057a0:	a365      	add	r3, pc, #404	@ (adr r3, 8005938 <_dtoa_r+0x2c0>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa ff2f 	bl	8000608 <__aeabi_dmul>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4620      	mov	r0, r4
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7fa fd73 	bl	800029c <__adddf3>
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	f7fb f9d5 	bl	8000b68 <__aeabi_d2iz>
 80057be:	2200      	movs	r2, #0
 80057c0:	4607      	mov	r7, r0
 80057c2:	2300      	movs	r3, #0
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	f7fb f990 	bl	8000aec <__aeabi_dcmplt>
 80057cc:	b140      	cbz	r0, 80057e0 <_dtoa_r+0x168>
 80057ce:	4638      	mov	r0, r7
 80057d0:	f7fa feb0 	bl	8000534 <__aeabi_i2d>
 80057d4:	4622      	mov	r2, r4
 80057d6:	462b      	mov	r3, r5
 80057d8:	f7fb f97e 	bl	8000ad8 <__aeabi_dcmpeq>
 80057dc:	b900      	cbnz	r0, 80057e0 <_dtoa_r+0x168>
 80057de:	3f01      	subs	r7, #1
 80057e0:	2f16      	cmp	r7, #22
 80057e2:	d851      	bhi.n	8005888 <_dtoa_r+0x210>
 80057e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005954 <_dtoa_r+0x2dc>)
 80057e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057f2:	f7fb f97b 	bl	8000aec <__aeabi_dcmplt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d048      	beq.n	800588c <_dtoa_r+0x214>
 80057fa:	3f01      	subs	r7, #1
 80057fc:	2300      	movs	r3, #0
 80057fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8005800:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005802:	1b9b      	subs	r3, r3, r6
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	bf44      	itt	mi
 8005808:	f1c3 0801 	rsbmi	r8, r3, #1
 800580c:	2300      	movmi	r3, #0
 800580e:	9208      	str	r2, [sp, #32]
 8005810:	bf54      	ite	pl
 8005812:	f04f 0800 	movpl.w	r8, #0
 8005816:	9308      	strmi	r3, [sp, #32]
 8005818:	2f00      	cmp	r7, #0
 800581a:	db39      	blt.n	8005890 <_dtoa_r+0x218>
 800581c:	9b08      	ldr	r3, [sp, #32]
 800581e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005820:	443b      	add	r3, r7
 8005822:	9308      	str	r3, [sp, #32]
 8005824:	2300      	movs	r3, #0
 8005826:	930a      	str	r3, [sp, #40]	@ 0x28
 8005828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800582a:	2b09      	cmp	r3, #9
 800582c:	d864      	bhi.n	80058f8 <_dtoa_r+0x280>
 800582e:	2b05      	cmp	r3, #5
 8005830:	bfc4      	itt	gt
 8005832:	3b04      	subgt	r3, #4
 8005834:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005838:	f1a3 0302 	sub.w	r3, r3, #2
 800583c:	bfcc      	ite	gt
 800583e:	2400      	movgt	r4, #0
 8005840:	2401      	movle	r4, #1
 8005842:	2b03      	cmp	r3, #3
 8005844:	d863      	bhi.n	800590e <_dtoa_r+0x296>
 8005846:	e8df f003 	tbb	[pc, r3]
 800584a:	372a      	.short	0x372a
 800584c:	5535      	.short	0x5535
 800584e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005852:	441e      	add	r6, r3
 8005854:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005858:	2b20      	cmp	r3, #32
 800585a:	bfc1      	itttt	gt
 800585c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005860:	409f      	lslgt	r7, r3
 8005862:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005866:	fa24 f303 	lsrgt.w	r3, r4, r3
 800586a:	bfd6      	itet	le
 800586c:	f1c3 0320 	rsble	r3, r3, #32
 8005870:	ea47 0003 	orrgt.w	r0, r7, r3
 8005874:	fa04 f003 	lslle.w	r0, r4, r3
 8005878:	f7fa fe4c 	bl	8000514 <__aeabi_ui2d>
 800587c:	2201      	movs	r2, #1
 800587e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005882:	3e01      	subs	r6, #1
 8005884:	9214      	str	r2, [sp, #80]	@ 0x50
 8005886:	e777      	b.n	8005778 <_dtoa_r+0x100>
 8005888:	2301      	movs	r3, #1
 800588a:	e7b8      	b.n	80057fe <_dtoa_r+0x186>
 800588c:	9012      	str	r0, [sp, #72]	@ 0x48
 800588e:	e7b7      	b.n	8005800 <_dtoa_r+0x188>
 8005890:	427b      	negs	r3, r7
 8005892:	930a      	str	r3, [sp, #40]	@ 0x28
 8005894:	2300      	movs	r3, #0
 8005896:	eba8 0807 	sub.w	r8, r8, r7
 800589a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800589c:	e7c4      	b.n	8005828 <_dtoa_r+0x1b0>
 800589e:	2300      	movs	r3, #0
 80058a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dc35      	bgt.n	8005914 <_dtoa_r+0x29c>
 80058a8:	2301      	movs	r3, #1
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	461a      	mov	r2, r3
 80058b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80058b2:	e00b      	b.n	80058cc <_dtoa_r+0x254>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e7f3      	b.n	80058a0 <_dtoa_r+0x228>
 80058b8:	2300      	movs	r3, #0
 80058ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	3301      	adds	r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	bfb8      	it	lt
 80058ca:	2301      	movlt	r3, #1
 80058cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058d0:	2100      	movs	r1, #0
 80058d2:	2204      	movs	r2, #4
 80058d4:	f102 0514 	add.w	r5, r2, #20
 80058d8:	429d      	cmp	r5, r3
 80058da:	d91f      	bls.n	800591c <_dtoa_r+0x2a4>
 80058dc:	6041      	str	r1, [r0, #4]
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 fd8e 	bl	8006400 <_Balloc>
 80058e4:	4682      	mov	sl, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d13c      	bne.n	8005964 <_dtoa_r+0x2ec>
 80058ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005958 <_dtoa_r+0x2e0>)
 80058ec:	4602      	mov	r2, r0
 80058ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80058f2:	e6d8      	b.n	80056a6 <_dtoa_r+0x2e>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e7e0      	b.n	80058ba <_dtoa_r+0x242>
 80058f8:	2401      	movs	r4, #1
 80058fa:	2300      	movs	r3, #0
 80058fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	2200      	movs	r2, #0
 800590a:	2312      	movs	r3, #18
 800590c:	e7d0      	b.n	80058b0 <_dtoa_r+0x238>
 800590e:	2301      	movs	r3, #1
 8005910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005912:	e7f5      	b.n	8005900 <_dtoa_r+0x288>
 8005914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	9307      	str	r3, [sp, #28]
 800591a:	e7d7      	b.n	80058cc <_dtoa_r+0x254>
 800591c:	3101      	adds	r1, #1
 800591e:	0052      	lsls	r2, r2, #1
 8005920:	e7d8      	b.n	80058d4 <_dtoa_r+0x25c>
 8005922:	bf00      	nop
 8005924:	f3af 8000 	nop.w
 8005928:	636f4361 	.word	0x636f4361
 800592c:	3fd287a7 	.word	0x3fd287a7
 8005930:	8b60c8b3 	.word	0x8b60c8b3
 8005934:	3fc68a28 	.word	0x3fc68a28
 8005938:	509f79fb 	.word	0x509f79fb
 800593c:	3fd34413 	.word	0x3fd34413
 8005940:	0800a1b9 	.word	0x0800a1b9
 8005944:	0800a1d0 	.word	0x0800a1d0
 8005948:	7ff00000 	.word	0x7ff00000
 800594c:	0800a189 	.word	0x0800a189
 8005950:	3ff80000 	.word	0x3ff80000
 8005954:	0800a2c8 	.word	0x0800a2c8
 8005958:	0800a228 	.word	0x0800a228
 800595c:	0800a1b5 	.word	0x0800a1b5
 8005960:	0800a188 	.word	0x0800a188
 8005964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005968:	6018      	str	r0, [r3, #0]
 800596a:	9b07      	ldr	r3, [sp, #28]
 800596c:	2b0e      	cmp	r3, #14
 800596e:	f200 80a4 	bhi.w	8005aba <_dtoa_r+0x442>
 8005972:	2c00      	cmp	r4, #0
 8005974:	f000 80a1 	beq.w	8005aba <_dtoa_r+0x442>
 8005978:	2f00      	cmp	r7, #0
 800597a:	dd33      	ble.n	80059e4 <_dtoa_r+0x36c>
 800597c:	4bad      	ldr	r3, [pc, #692]	@ (8005c34 <_dtoa_r+0x5bc>)
 800597e:	f007 020f 	and.w	r2, r7, #15
 8005982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005986:	ed93 7b00 	vldr	d7, [r3]
 800598a:	05f8      	lsls	r0, r7, #23
 800598c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005990:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005994:	d516      	bpl.n	80059c4 <_dtoa_r+0x34c>
 8005996:	4ba8      	ldr	r3, [pc, #672]	@ (8005c38 <_dtoa_r+0x5c0>)
 8005998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800599c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059a0:	f7fa ff5c 	bl	800085c <__aeabi_ddiv>
 80059a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a8:	f004 040f 	and.w	r4, r4, #15
 80059ac:	2603      	movs	r6, #3
 80059ae:	4da2      	ldr	r5, [pc, #648]	@ (8005c38 <_dtoa_r+0x5c0>)
 80059b0:	b954      	cbnz	r4, 80059c8 <_dtoa_r+0x350>
 80059b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ba:	f7fa ff4f 	bl	800085c <__aeabi_ddiv>
 80059be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059c2:	e028      	b.n	8005a16 <_dtoa_r+0x39e>
 80059c4:	2602      	movs	r6, #2
 80059c6:	e7f2      	b.n	80059ae <_dtoa_r+0x336>
 80059c8:	07e1      	lsls	r1, r4, #31
 80059ca:	d508      	bpl.n	80059de <_dtoa_r+0x366>
 80059cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059d4:	f7fa fe18 	bl	8000608 <__aeabi_dmul>
 80059d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059dc:	3601      	adds	r6, #1
 80059de:	1064      	asrs	r4, r4, #1
 80059e0:	3508      	adds	r5, #8
 80059e2:	e7e5      	b.n	80059b0 <_dtoa_r+0x338>
 80059e4:	f000 80d2 	beq.w	8005b8c <_dtoa_r+0x514>
 80059e8:	427c      	negs	r4, r7
 80059ea:	4b92      	ldr	r3, [pc, #584]	@ (8005c34 <_dtoa_r+0x5bc>)
 80059ec:	4d92      	ldr	r5, [pc, #584]	@ (8005c38 <_dtoa_r+0x5c0>)
 80059ee:	f004 020f 	and.w	r2, r4, #15
 80059f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059fe:	f7fa fe03 	bl	8000608 <__aeabi_dmul>
 8005a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a06:	1124      	asrs	r4, r4, #4
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2602      	movs	r6, #2
 8005a0c:	2c00      	cmp	r4, #0
 8005a0e:	f040 80b2 	bne.w	8005b76 <_dtoa_r+0x4fe>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1d3      	bne.n	80059be <_dtoa_r+0x346>
 8005a16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80b7 	beq.w	8005b90 <_dtoa_r+0x518>
 8005a22:	4b86      	ldr	r3, [pc, #536]	@ (8005c3c <_dtoa_r+0x5c4>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fb f85f 	bl	8000aec <__aeabi_dcmplt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f000 80ae 	beq.w	8005b90 <_dtoa_r+0x518>
 8005a34:	9b07      	ldr	r3, [sp, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80aa 	beq.w	8005b90 <_dtoa_r+0x518>
 8005a3c:	9b00      	ldr	r3, [sp, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dd37      	ble.n	8005ab2 <_dtoa_r+0x43a>
 8005a42:	1e7b      	subs	r3, r7, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	4620      	mov	r0, r4
 8005a48:	4b7d      	ldr	r3, [pc, #500]	@ (8005c40 <_dtoa_r+0x5c8>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fa fddb 	bl	8000608 <__aeabi_dmul>
 8005a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a56:	9c00      	ldr	r4, [sp, #0]
 8005a58:	3601      	adds	r6, #1
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7fa fd6a 	bl	8000534 <__aeabi_i2d>
 8005a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a64:	f7fa fdd0 	bl	8000608 <__aeabi_dmul>
 8005a68:	4b76      	ldr	r3, [pc, #472]	@ (8005c44 <_dtoa_r+0x5cc>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f7fa fc16 	bl	800029c <__adddf3>
 8005a70:	4605      	mov	r5, r0
 8005a72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	f040 808d 	bne.w	8005b96 <_dtoa_r+0x51e>
 8005a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a80:	4b71      	ldr	r3, [pc, #452]	@ (8005c48 <_dtoa_r+0x5d0>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	f7fa fc08 	bl	8000298 <__aeabi_dsub>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4633      	mov	r3, r6
 8005a94:	f7fb f848 	bl	8000b28 <__aeabi_dcmpgt>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f040 828b 	bne.w	8005fb4 <_dtoa_r+0x93c>
 8005a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa2:	462a      	mov	r2, r5
 8005aa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005aa8:	f7fb f820 	bl	8000aec <__aeabi_dcmplt>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	f040 8128 	bne.w	8005d02 <_dtoa_r+0x68a>
 8005ab2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ab6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f2c0 815a 	blt.w	8005d76 <_dtoa_r+0x6fe>
 8005ac2:	2f0e      	cmp	r7, #14
 8005ac4:	f300 8157 	bgt.w	8005d76 <_dtoa_r+0x6fe>
 8005ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c34 <_dtoa_r+0x5bc>)
 8005aca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ace:	ed93 7b00 	vldr	d7, [r3]
 8005ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	ed8d 7b00 	vstr	d7, [sp]
 8005ada:	da03      	bge.n	8005ae4 <_dtoa_r+0x46c>
 8005adc:	9b07      	ldr	r3, [sp, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f340 8101 	ble.w	8005ce6 <_dtoa_r+0x66e>
 8005ae4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ae8:	4656      	mov	r6, sl
 8005aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fa feb3 	bl	800085c <__aeabi_ddiv>
 8005af6:	f7fb f837 	bl	8000b68 <__aeabi_d2iz>
 8005afa:	4680      	mov	r8, r0
 8005afc:	f7fa fd1a 	bl	8000534 <__aeabi_i2d>
 8005b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b04:	f7fa fd80 	bl	8000608 <__aeabi_dmul>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b14:	f7fa fbc0 	bl	8000298 <__aeabi_dsub>
 8005b18:	f806 4b01 	strb.w	r4, [r6], #1
 8005b1c:	9d07      	ldr	r5, [sp, #28]
 8005b1e:	eba6 040a 	sub.w	r4, r6, sl
 8005b22:	42a5      	cmp	r5, r4
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	f040 8117 	bne.w	8005d5a <_dtoa_r+0x6e2>
 8005b2c:	f7fa fbb6 	bl	800029c <__adddf3>
 8005b30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b34:	4604      	mov	r4, r0
 8005b36:	460d      	mov	r5, r1
 8005b38:	f7fa fff6 	bl	8000b28 <__aeabi_dcmpgt>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f040 80f9 	bne.w	8005d34 <_dtoa_r+0x6bc>
 8005b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b4e:	b118      	cbz	r0, 8005b58 <_dtoa_r+0x4e0>
 8005b50:	f018 0f01 	tst.w	r8, #1
 8005b54:	f040 80ee 	bne.w	8005d34 <_dtoa_r+0x6bc>
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4658      	mov	r0, fp
 8005b5c:	f000 fc90 	bl	8006480 <_Bfree>
 8005b60:	2300      	movs	r3, #0
 8005b62:	7033      	strb	r3, [r6, #0]
 8005b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b66:	3701      	adds	r7, #1
 8005b68:	601f      	str	r7, [r3, #0]
 8005b6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 831d 	beq.w	80061ac <_dtoa_r+0xb34>
 8005b72:	601e      	str	r6, [r3, #0]
 8005b74:	e31a      	b.n	80061ac <_dtoa_r+0xb34>
 8005b76:	07e2      	lsls	r2, r4, #31
 8005b78:	d505      	bpl.n	8005b86 <_dtoa_r+0x50e>
 8005b7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b7e:	f7fa fd43 	bl	8000608 <__aeabi_dmul>
 8005b82:	3601      	adds	r6, #1
 8005b84:	2301      	movs	r3, #1
 8005b86:	1064      	asrs	r4, r4, #1
 8005b88:	3508      	adds	r5, #8
 8005b8a:	e73f      	b.n	8005a0c <_dtoa_r+0x394>
 8005b8c:	2602      	movs	r6, #2
 8005b8e:	e742      	b.n	8005a16 <_dtoa_r+0x39e>
 8005b90:	9c07      	ldr	r4, [sp, #28]
 8005b92:	9704      	str	r7, [sp, #16]
 8005b94:	e761      	b.n	8005a5a <_dtoa_r+0x3e2>
 8005b96:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <_dtoa_r+0x5bc>)
 8005b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ba2:	4454      	add	r4, sl
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d053      	beq.n	8005c50 <_dtoa_r+0x5d8>
 8005ba8:	4928      	ldr	r1, [pc, #160]	@ (8005c4c <_dtoa_r+0x5d4>)
 8005baa:	2000      	movs	r0, #0
 8005bac:	f7fa fe56 	bl	800085c <__aeabi_ddiv>
 8005bb0:	4633      	mov	r3, r6
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	f7fa fb70 	bl	8000298 <__aeabi_dsub>
 8005bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bbc:	4656      	mov	r6, sl
 8005bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc2:	f7fa ffd1 	bl	8000b68 <__aeabi_d2iz>
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	f7fa fcb4 	bl	8000534 <__aeabi_i2d>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd4:	f7fa fb60 	bl	8000298 <__aeabi_dsub>
 8005bd8:	3530      	adds	r5, #48	@ 0x30
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005be2:	f806 5b01 	strb.w	r5, [r6], #1
 8005be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bea:	f7fa ff7f 	bl	8000aec <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d171      	bne.n	8005cd6 <_dtoa_r+0x65e>
 8005bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bf6:	4911      	ldr	r1, [pc, #68]	@ (8005c3c <_dtoa_r+0x5c4>)
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f7fa fb4d 	bl	8000298 <__aeabi_dsub>
 8005bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c02:	f7fa ff73 	bl	8000aec <__aeabi_dcmplt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f040 8095 	bne.w	8005d36 <_dtoa_r+0x6be>
 8005c0c:	42a6      	cmp	r6, r4
 8005c0e:	f43f af50 	beq.w	8005ab2 <_dtoa_r+0x43a>
 8005c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c16:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <_dtoa_r+0x5c8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f7fa fcf5 	bl	8000608 <__aeabi_dmul>
 8005c1e:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <_dtoa_r+0x5c8>)
 8005c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c24:	2200      	movs	r2, #0
 8005c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2a:	f7fa fced 	bl	8000608 <__aeabi_dmul>
 8005c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c32:	e7c4      	b.n	8005bbe <_dtoa_r+0x546>
 8005c34:	0800a2c8 	.word	0x0800a2c8
 8005c38:	0800a2a0 	.word	0x0800a2a0
 8005c3c:	3ff00000 	.word	0x3ff00000
 8005c40:	40240000 	.word	0x40240000
 8005c44:	401c0000 	.word	0x401c0000
 8005c48:	40140000 	.word	0x40140000
 8005c4c:	3fe00000 	.word	0x3fe00000
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7fa fcd8 	bl	8000608 <__aeabi_dmul>
 8005c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c5e:	4656      	mov	r6, sl
 8005c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c64:	f7fa ff80 	bl	8000b68 <__aeabi_d2iz>
 8005c68:	4605      	mov	r5, r0
 8005c6a:	f7fa fc63 	bl	8000534 <__aeabi_i2d>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c76:	f7fa fb0f 	bl	8000298 <__aeabi_dsub>
 8005c7a:	3530      	adds	r5, #48	@ 0x30
 8005c7c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	42a6      	cmp	r6, r4
 8005c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	d124      	bne.n	8005cda <_dtoa_r+0x662>
 8005c90:	4bac      	ldr	r3, [pc, #688]	@ (8005f44 <_dtoa_r+0x8cc>)
 8005c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c96:	f7fa fb01 	bl	800029c <__adddf3>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca2:	f7fa ff41 	bl	8000b28 <__aeabi_dcmpgt>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d145      	bne.n	8005d36 <_dtoa_r+0x6be>
 8005caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cae:	49a5      	ldr	r1, [pc, #660]	@ (8005f44 <_dtoa_r+0x8cc>)
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f7fa faf1 	bl	8000298 <__aeabi_dsub>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cbe:	f7fa ff15 	bl	8000aec <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f43f aef5 	beq.w	8005ab2 <_dtoa_r+0x43a>
 8005cc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cca:	1e73      	subs	r3, r6, #1
 8005ccc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cd2:	2b30      	cmp	r3, #48	@ 0x30
 8005cd4:	d0f8      	beq.n	8005cc8 <_dtoa_r+0x650>
 8005cd6:	9f04      	ldr	r7, [sp, #16]
 8005cd8:	e73e      	b.n	8005b58 <_dtoa_r+0x4e0>
 8005cda:	4b9b      	ldr	r3, [pc, #620]	@ (8005f48 <_dtoa_r+0x8d0>)
 8005cdc:	f7fa fc94 	bl	8000608 <__aeabi_dmul>
 8005ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce4:	e7bc      	b.n	8005c60 <_dtoa_r+0x5e8>
 8005ce6:	d10c      	bne.n	8005d02 <_dtoa_r+0x68a>
 8005ce8:	4b98      	ldr	r3, [pc, #608]	@ (8005f4c <_dtoa_r+0x8d4>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cf0:	f7fa fc8a 	bl	8000608 <__aeabi_dmul>
 8005cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cf8:	f7fa ff0c 	bl	8000b14 <__aeabi_dcmpge>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f000 8157 	beq.w	8005fb0 <_dtoa_r+0x938>
 8005d02:	2400      	movs	r4, #0
 8005d04:	4625      	mov	r5, r4
 8005d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	4656      	mov	r6, sl
 8005d0e:	2700      	movs	r7, #0
 8005d10:	4621      	mov	r1, r4
 8005d12:	4658      	mov	r0, fp
 8005d14:	f000 fbb4 	bl	8006480 <_Bfree>
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d0dc      	beq.n	8005cd6 <_dtoa_r+0x65e>
 8005d1c:	b12f      	cbz	r7, 8005d2a <_dtoa_r+0x6b2>
 8005d1e:	42af      	cmp	r7, r5
 8005d20:	d003      	beq.n	8005d2a <_dtoa_r+0x6b2>
 8005d22:	4639      	mov	r1, r7
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fbab 	bl	8006480 <_Bfree>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	f000 fba7 	bl	8006480 <_Bfree>
 8005d32:	e7d0      	b.n	8005cd6 <_dtoa_r+0x65e>
 8005d34:	9704      	str	r7, [sp, #16]
 8005d36:	4633      	mov	r3, r6
 8005d38:	461e      	mov	r6, r3
 8005d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d3e:	2a39      	cmp	r2, #57	@ 0x39
 8005d40:	d107      	bne.n	8005d52 <_dtoa_r+0x6da>
 8005d42:	459a      	cmp	sl, r3
 8005d44:	d1f8      	bne.n	8005d38 <_dtoa_r+0x6c0>
 8005d46:	9a04      	ldr	r2, [sp, #16]
 8005d48:	3201      	adds	r2, #1
 8005d4a:	9204      	str	r2, [sp, #16]
 8005d4c:	2230      	movs	r2, #48	@ 0x30
 8005d4e:	f88a 2000 	strb.w	r2, [sl]
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	3201      	adds	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	e7bd      	b.n	8005cd6 <_dtoa_r+0x65e>
 8005d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f48 <_dtoa_r+0x8d0>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f7fa fc53 	bl	8000608 <__aeabi_dmul>
 8005d62:	2200      	movs	r2, #0
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	f7fa feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	f43f aebb 	beq.w	8005aea <_dtoa_r+0x472>
 8005d74:	e6f0      	b.n	8005b58 <_dtoa_r+0x4e0>
 8005d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	f000 80db 	beq.w	8005f34 <_dtoa_r+0x8bc>
 8005d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d80:	2a01      	cmp	r2, #1
 8005d82:	f300 80bf 	bgt.w	8005f04 <_dtoa_r+0x88c>
 8005d86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	f000 80b7 	beq.w	8005efc <_dtoa_r+0x884>
 8005d8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d94:	4646      	mov	r6, r8
 8005d96:	9a08      	ldr	r2, [sp, #32]
 8005d98:	2101      	movs	r1, #1
 8005d9a:	441a      	add	r2, r3
 8005d9c:	4658      	mov	r0, fp
 8005d9e:	4498      	add	r8, r3
 8005da0:	9208      	str	r2, [sp, #32]
 8005da2:	f000 fc21 	bl	80065e8 <__i2b>
 8005da6:	4605      	mov	r5, r0
 8005da8:	b15e      	cbz	r6, 8005dc2 <_dtoa_r+0x74a>
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dd08      	ble.n	8005dc2 <_dtoa_r+0x74a>
 8005db0:	42b3      	cmp	r3, r6
 8005db2:	9a08      	ldr	r2, [sp, #32]
 8005db4:	bfa8      	it	ge
 8005db6:	4633      	movge	r3, r6
 8005db8:	eba8 0803 	sub.w	r8, r8, r3
 8005dbc:	1af6      	subs	r6, r6, r3
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	9308      	str	r3, [sp, #32]
 8005dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dc4:	b1f3      	cbz	r3, 8005e04 <_dtoa_r+0x78c>
 8005dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80b7 	beq.w	8005f3c <_dtoa_r+0x8c4>
 8005dce:	b18c      	cbz	r4, 8005df4 <_dtoa_r+0x77c>
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f000 fcc7 	bl	8006768 <__pow5mult>
 8005dda:	464a      	mov	r2, r9
 8005ddc:	4601      	mov	r1, r0
 8005dde:	4605      	mov	r5, r0
 8005de0:	4658      	mov	r0, fp
 8005de2:	f000 fc17 	bl	8006614 <__multiply>
 8005de6:	4649      	mov	r1, r9
 8005de8:	9004      	str	r0, [sp, #16]
 8005dea:	4658      	mov	r0, fp
 8005dec:	f000 fb48 	bl	8006480 <_Bfree>
 8005df0:	9b04      	ldr	r3, [sp, #16]
 8005df2:	4699      	mov	r9, r3
 8005df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005df6:	1b1a      	subs	r2, r3, r4
 8005df8:	d004      	beq.n	8005e04 <_dtoa_r+0x78c>
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4658      	mov	r0, fp
 8005dfe:	f000 fcb3 	bl	8006768 <__pow5mult>
 8005e02:	4681      	mov	r9, r0
 8005e04:	2101      	movs	r1, #1
 8005e06:	4658      	mov	r0, fp
 8005e08:	f000 fbee 	bl	80065e8 <__i2b>
 8005e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e0e:	4604      	mov	r4, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 81cf 	beq.w	80061b4 <_dtoa_r+0xb3c>
 8005e16:	461a      	mov	r2, r3
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4658      	mov	r0, fp
 8005e1c:	f000 fca4 	bl	8006768 <__pow5mult>
 8005e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	4604      	mov	r4, r0
 8005e26:	f300 8095 	bgt.w	8005f54 <_dtoa_r+0x8dc>
 8005e2a:	9b02      	ldr	r3, [sp, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f040 8087 	bne.w	8005f40 <_dtoa_r+0x8c8>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 8089 	bne.w	8005f50 <_dtoa_r+0x8d8>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e44:	0d1b      	lsrs	r3, r3, #20
 8005e46:	051b      	lsls	r3, r3, #20
 8005e48:	b12b      	cbz	r3, 8005e56 <_dtoa_r+0x7de>
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	9308      	str	r3, [sp, #32]
 8005e50:	f108 0801 	add.w	r8, r8, #1
 8005e54:	2301      	movs	r3, #1
 8005e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 81b0 	beq.w	80061c0 <_dtoa_r+0xb48>
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e66:	6918      	ldr	r0, [r3, #16]
 8005e68:	f000 fb72 	bl	8006550 <__hi0bits>
 8005e6c:	f1c0 0020 	rsb	r0, r0, #32
 8005e70:	9b08      	ldr	r3, [sp, #32]
 8005e72:	4418      	add	r0, r3
 8005e74:	f010 001f 	ands.w	r0, r0, #31
 8005e78:	d077      	beq.n	8005f6a <_dtoa_r+0x8f2>
 8005e7a:	f1c0 0320 	rsb	r3, r0, #32
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	dd6b      	ble.n	8005f5a <_dtoa_r+0x8e2>
 8005e82:	9b08      	ldr	r3, [sp, #32]
 8005e84:	f1c0 001c 	rsb	r0, r0, #28
 8005e88:	4403      	add	r3, r0
 8005e8a:	4480      	add	r8, r0
 8005e8c:	4406      	add	r6, r0
 8005e8e:	9308      	str	r3, [sp, #32]
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	dd05      	ble.n	8005ea2 <_dtoa_r+0x82a>
 8005e96:	4649      	mov	r1, r9
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4658      	mov	r0, fp
 8005e9c:	f000 fcbe 	bl	800681c <__lshift>
 8005ea0:	4681      	mov	r9, r0
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dd05      	ble.n	8005eb4 <_dtoa_r+0x83c>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4658      	mov	r0, fp
 8005eae:	f000 fcb5 	bl	800681c <__lshift>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d059      	beq.n	8005f6e <_dtoa_r+0x8f6>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4648      	mov	r0, r9
 8005ebe:	f000 fd19 	bl	80068f4 <__mcmp>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	da53      	bge.n	8005f6e <_dtoa_r+0x8f6>
 8005ec6:	1e7b      	subs	r3, r7, #1
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	4649      	mov	r1, r9
 8005ecc:	2300      	movs	r3, #0
 8005ece:	220a      	movs	r2, #10
 8005ed0:	4658      	mov	r0, fp
 8005ed2:	f000 faf7 	bl	80064c4 <__multadd>
 8005ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ed8:	4681      	mov	r9, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8172 	beq.w	80061c4 <_dtoa_r+0xb4c>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	220a      	movs	r2, #10
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	f000 faec 	bl	80064c4 <__multadd>
 8005eec:	9b00      	ldr	r3, [sp, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	dc67      	bgt.n	8005fc4 <_dtoa_r+0x94c>
 8005ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	dc41      	bgt.n	8005f7e <_dtoa_r+0x906>
 8005efa:	e063      	b.n	8005fc4 <_dtoa_r+0x94c>
 8005efc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005efe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f02:	e746      	b.n	8005d92 <_dtoa_r+0x71a>
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	1e5c      	subs	r4, r3, #1
 8005f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	bfbf      	itttt	lt
 8005f0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f14:	1ae3      	sublt	r3, r4, r3
 8005f16:	bfb4      	ite	lt
 8005f18:	18d2      	addlt	r2, r2, r3
 8005f1a:	1b1c      	subge	r4, r3, r4
 8005f1c:	9b07      	ldr	r3, [sp, #28]
 8005f1e:	bfbc      	itt	lt
 8005f20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f22:	2400      	movlt	r4, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfb5      	itete	lt
 8005f28:	eba8 0603 	sublt.w	r6, r8, r3
 8005f2c:	9b07      	ldrge	r3, [sp, #28]
 8005f2e:	2300      	movlt	r3, #0
 8005f30:	4646      	movge	r6, r8
 8005f32:	e730      	b.n	8005d96 <_dtoa_r+0x71e>
 8005f34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f38:	4646      	mov	r6, r8
 8005f3a:	e735      	b.n	8005da8 <_dtoa_r+0x730>
 8005f3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f3e:	e75c      	b.n	8005dfa <_dtoa_r+0x782>
 8005f40:	2300      	movs	r3, #0
 8005f42:	e788      	b.n	8005e56 <_dtoa_r+0x7de>
 8005f44:	3fe00000 	.word	0x3fe00000
 8005f48:	40240000 	.word	0x40240000
 8005f4c:	40140000 	.word	0x40140000
 8005f50:	9b02      	ldr	r3, [sp, #8]
 8005f52:	e780      	b.n	8005e56 <_dtoa_r+0x7de>
 8005f54:	2300      	movs	r3, #0
 8005f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f58:	e782      	b.n	8005e60 <_dtoa_r+0x7e8>
 8005f5a:	d099      	beq.n	8005e90 <_dtoa_r+0x818>
 8005f5c:	9a08      	ldr	r2, [sp, #32]
 8005f5e:	331c      	adds	r3, #28
 8005f60:	441a      	add	r2, r3
 8005f62:	4498      	add	r8, r3
 8005f64:	441e      	add	r6, r3
 8005f66:	9208      	str	r2, [sp, #32]
 8005f68:	e792      	b.n	8005e90 <_dtoa_r+0x818>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	e7f6      	b.n	8005f5c <_dtoa_r+0x8e4>
 8005f6e:	9b07      	ldr	r3, [sp, #28]
 8005f70:	9704      	str	r7, [sp, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dc20      	bgt.n	8005fb8 <_dtoa_r+0x940>
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	dd1e      	ble.n	8005fbc <_dtoa_r+0x944>
 8005f7e:	9b00      	ldr	r3, [sp, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f aec0 	bne.w	8005d06 <_dtoa_r+0x68e>
 8005f86:	4621      	mov	r1, r4
 8005f88:	2205      	movs	r2, #5
 8005f8a:	4658      	mov	r0, fp
 8005f8c:	f000 fa9a 	bl	80064c4 <__multadd>
 8005f90:	4601      	mov	r1, r0
 8005f92:	4604      	mov	r4, r0
 8005f94:	4648      	mov	r0, r9
 8005f96:	f000 fcad 	bl	80068f4 <__mcmp>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f77f aeb3 	ble.w	8005d06 <_dtoa_r+0x68e>
 8005fa0:	4656      	mov	r6, sl
 8005fa2:	2331      	movs	r3, #49	@ 0x31
 8005fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	3301      	adds	r3, #1
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	e6ae      	b.n	8005d0e <_dtoa_r+0x696>
 8005fb0:	9c07      	ldr	r4, [sp, #28]
 8005fb2:	9704      	str	r7, [sp, #16]
 8005fb4:	4625      	mov	r5, r4
 8005fb6:	e7f3      	b.n	8005fa0 <_dtoa_r+0x928>
 8005fb8:	9b07      	ldr	r3, [sp, #28]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8104 	beq.w	80061cc <_dtoa_r+0xb54>
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	dd05      	ble.n	8005fd4 <_dtoa_r+0x95c>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4632      	mov	r2, r6
 8005fcc:	4658      	mov	r0, fp
 8005fce:	f000 fc25 	bl	800681c <__lshift>
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d05a      	beq.n	8006090 <_dtoa_r+0xa18>
 8005fda:	6869      	ldr	r1, [r5, #4]
 8005fdc:	4658      	mov	r0, fp
 8005fde:	f000 fa0f 	bl	8006400 <_Balloc>
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	b928      	cbnz	r0, 8005ff2 <_dtoa_r+0x97a>
 8005fe6:	4b84      	ldr	r3, [pc, #528]	@ (80061f8 <_dtoa_r+0xb80>)
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fee:	f7ff bb5a 	b.w	80056a6 <_dtoa_r+0x2e>
 8005ff2:	692a      	ldr	r2, [r5, #16]
 8005ff4:	3202      	adds	r2, #2
 8005ff6:	0092      	lsls	r2, r2, #2
 8005ff8:	f105 010c 	add.w	r1, r5, #12
 8005ffc:	300c      	adds	r0, #12
 8005ffe:	f001 f813 	bl	8007028 <memcpy>
 8006002:	2201      	movs	r2, #1
 8006004:	4631      	mov	r1, r6
 8006006:	4658      	mov	r0, fp
 8006008:	f000 fc08 	bl	800681c <__lshift>
 800600c:	f10a 0301 	add.w	r3, sl, #1
 8006010:	9307      	str	r3, [sp, #28]
 8006012:	9b00      	ldr	r3, [sp, #0]
 8006014:	4453      	add	r3, sl
 8006016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006018:	9b02      	ldr	r3, [sp, #8]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	462f      	mov	r7, r5
 8006020:	930a      	str	r3, [sp, #40]	@ 0x28
 8006022:	4605      	mov	r5, r0
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	4621      	mov	r1, r4
 8006028:	3b01      	subs	r3, #1
 800602a:	4648      	mov	r0, r9
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	f7ff fa9a 	bl	8005566 <quorem>
 8006032:	4639      	mov	r1, r7
 8006034:	9002      	str	r0, [sp, #8]
 8006036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800603a:	4648      	mov	r0, r9
 800603c:	f000 fc5a 	bl	80068f4 <__mcmp>
 8006040:	462a      	mov	r2, r5
 8006042:	9008      	str	r0, [sp, #32]
 8006044:	4621      	mov	r1, r4
 8006046:	4658      	mov	r0, fp
 8006048:	f000 fc70 	bl	800692c <__mdiff>
 800604c:	68c2      	ldr	r2, [r0, #12]
 800604e:	4606      	mov	r6, r0
 8006050:	bb02      	cbnz	r2, 8006094 <_dtoa_r+0xa1c>
 8006052:	4601      	mov	r1, r0
 8006054:	4648      	mov	r0, r9
 8006056:	f000 fc4d 	bl	80068f4 <__mcmp>
 800605a:	4602      	mov	r2, r0
 800605c:	4631      	mov	r1, r6
 800605e:	4658      	mov	r0, fp
 8006060:	920e      	str	r2, [sp, #56]	@ 0x38
 8006062:	f000 fa0d 	bl	8006480 <_Bfree>
 8006066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800606a:	9e07      	ldr	r6, [sp, #28]
 800606c:	ea43 0102 	orr.w	r1, r3, r2
 8006070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006072:	4319      	orrs	r1, r3
 8006074:	d110      	bne.n	8006098 <_dtoa_r+0xa20>
 8006076:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800607a:	d029      	beq.n	80060d0 <_dtoa_r+0xa58>
 800607c:	9b08      	ldr	r3, [sp, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dd02      	ble.n	8006088 <_dtoa_r+0xa10>
 8006082:	9b02      	ldr	r3, [sp, #8]
 8006084:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006088:	9b00      	ldr	r3, [sp, #0]
 800608a:	f883 8000 	strb.w	r8, [r3]
 800608e:	e63f      	b.n	8005d10 <_dtoa_r+0x698>
 8006090:	4628      	mov	r0, r5
 8006092:	e7bb      	b.n	800600c <_dtoa_r+0x994>
 8006094:	2201      	movs	r2, #1
 8006096:	e7e1      	b.n	800605c <_dtoa_r+0x9e4>
 8006098:	9b08      	ldr	r3, [sp, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	db04      	blt.n	80060a8 <_dtoa_r+0xa30>
 800609e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060a0:	430b      	orrs	r3, r1
 80060a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060a4:	430b      	orrs	r3, r1
 80060a6:	d120      	bne.n	80060ea <_dtoa_r+0xa72>
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	dded      	ble.n	8006088 <_dtoa_r+0xa10>
 80060ac:	4649      	mov	r1, r9
 80060ae:	2201      	movs	r2, #1
 80060b0:	4658      	mov	r0, fp
 80060b2:	f000 fbb3 	bl	800681c <__lshift>
 80060b6:	4621      	mov	r1, r4
 80060b8:	4681      	mov	r9, r0
 80060ba:	f000 fc1b 	bl	80068f4 <__mcmp>
 80060be:	2800      	cmp	r0, #0
 80060c0:	dc03      	bgt.n	80060ca <_dtoa_r+0xa52>
 80060c2:	d1e1      	bne.n	8006088 <_dtoa_r+0xa10>
 80060c4:	f018 0f01 	tst.w	r8, #1
 80060c8:	d0de      	beq.n	8006088 <_dtoa_r+0xa10>
 80060ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060ce:	d1d8      	bne.n	8006082 <_dtoa_r+0xa0a>
 80060d0:	9a00      	ldr	r2, [sp, #0]
 80060d2:	2339      	movs	r3, #57	@ 0x39
 80060d4:	7013      	strb	r3, [r2, #0]
 80060d6:	4633      	mov	r3, r6
 80060d8:	461e      	mov	r6, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060e0:	2a39      	cmp	r2, #57	@ 0x39
 80060e2:	d052      	beq.n	800618a <_dtoa_r+0xb12>
 80060e4:	3201      	adds	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e612      	b.n	8005d10 <_dtoa_r+0x698>
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	dd07      	ble.n	80060fe <_dtoa_r+0xa86>
 80060ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060f2:	d0ed      	beq.n	80060d0 <_dtoa_r+0xa58>
 80060f4:	9a00      	ldr	r2, [sp, #0]
 80060f6:	f108 0301 	add.w	r3, r8, #1
 80060fa:	7013      	strb	r3, [r2, #0]
 80060fc:	e608      	b.n	8005d10 <_dtoa_r+0x698>
 80060fe:	9b07      	ldr	r3, [sp, #28]
 8006100:	9a07      	ldr	r2, [sp, #28]
 8006102:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006108:	4293      	cmp	r3, r2
 800610a:	d028      	beq.n	800615e <_dtoa_r+0xae6>
 800610c:	4649      	mov	r1, r9
 800610e:	2300      	movs	r3, #0
 8006110:	220a      	movs	r2, #10
 8006112:	4658      	mov	r0, fp
 8006114:	f000 f9d6 	bl	80064c4 <__multadd>
 8006118:	42af      	cmp	r7, r5
 800611a:	4681      	mov	r9, r0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	f04f 020a 	mov.w	r2, #10
 8006124:	4639      	mov	r1, r7
 8006126:	4658      	mov	r0, fp
 8006128:	d107      	bne.n	800613a <_dtoa_r+0xac2>
 800612a:	f000 f9cb 	bl	80064c4 <__multadd>
 800612e:	4607      	mov	r7, r0
 8006130:	4605      	mov	r5, r0
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	9307      	str	r3, [sp, #28]
 8006138:	e774      	b.n	8006024 <_dtoa_r+0x9ac>
 800613a:	f000 f9c3 	bl	80064c4 <__multadd>
 800613e:	4629      	mov	r1, r5
 8006140:	4607      	mov	r7, r0
 8006142:	2300      	movs	r3, #0
 8006144:	220a      	movs	r2, #10
 8006146:	4658      	mov	r0, fp
 8006148:	f000 f9bc 	bl	80064c4 <__multadd>
 800614c:	4605      	mov	r5, r0
 800614e:	e7f0      	b.n	8006132 <_dtoa_r+0xaba>
 8006150:	9b00      	ldr	r3, [sp, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfcc      	ite	gt
 8006156:	461e      	movgt	r6, r3
 8006158:	2601      	movle	r6, #1
 800615a:	4456      	add	r6, sl
 800615c:	2700      	movs	r7, #0
 800615e:	4649      	mov	r1, r9
 8006160:	2201      	movs	r2, #1
 8006162:	4658      	mov	r0, fp
 8006164:	f000 fb5a 	bl	800681c <__lshift>
 8006168:	4621      	mov	r1, r4
 800616a:	4681      	mov	r9, r0
 800616c:	f000 fbc2 	bl	80068f4 <__mcmp>
 8006170:	2800      	cmp	r0, #0
 8006172:	dcb0      	bgt.n	80060d6 <_dtoa_r+0xa5e>
 8006174:	d102      	bne.n	800617c <_dtoa_r+0xb04>
 8006176:	f018 0f01 	tst.w	r8, #1
 800617a:	d1ac      	bne.n	80060d6 <_dtoa_r+0xa5e>
 800617c:	4633      	mov	r3, r6
 800617e:	461e      	mov	r6, r3
 8006180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006184:	2a30      	cmp	r2, #48	@ 0x30
 8006186:	d0fa      	beq.n	800617e <_dtoa_r+0xb06>
 8006188:	e5c2      	b.n	8005d10 <_dtoa_r+0x698>
 800618a:	459a      	cmp	sl, r3
 800618c:	d1a4      	bne.n	80060d8 <_dtoa_r+0xa60>
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	2331      	movs	r3, #49	@ 0x31
 8006196:	f88a 3000 	strb.w	r3, [sl]
 800619a:	e5b9      	b.n	8005d10 <_dtoa_r+0x698>
 800619c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800619e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061fc <_dtoa_r+0xb84>
 80061a2:	b11b      	cbz	r3, 80061ac <_dtoa_r+0xb34>
 80061a4:	f10a 0308 	add.w	r3, sl, #8
 80061a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	4650      	mov	r0, sl
 80061ae:	b019      	add	sp, #100	@ 0x64
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	f77f ae37 	ble.w	8005e2a <_dtoa_r+0x7b2>
 80061bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061be:	930a      	str	r3, [sp, #40]	@ 0x28
 80061c0:	2001      	movs	r0, #1
 80061c2:	e655      	b.n	8005e70 <_dtoa_r+0x7f8>
 80061c4:	9b00      	ldr	r3, [sp, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f77f aed6 	ble.w	8005f78 <_dtoa_r+0x900>
 80061cc:	4656      	mov	r6, sl
 80061ce:	4621      	mov	r1, r4
 80061d0:	4648      	mov	r0, r9
 80061d2:	f7ff f9c8 	bl	8005566 <quorem>
 80061d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061da:	f806 8b01 	strb.w	r8, [r6], #1
 80061de:	9b00      	ldr	r3, [sp, #0]
 80061e0:	eba6 020a 	sub.w	r2, r6, sl
 80061e4:	4293      	cmp	r3, r2
 80061e6:	ddb3      	ble.n	8006150 <_dtoa_r+0xad8>
 80061e8:	4649      	mov	r1, r9
 80061ea:	2300      	movs	r3, #0
 80061ec:	220a      	movs	r2, #10
 80061ee:	4658      	mov	r0, fp
 80061f0:	f000 f968 	bl	80064c4 <__multadd>
 80061f4:	4681      	mov	r9, r0
 80061f6:	e7ea      	b.n	80061ce <_dtoa_r+0xb56>
 80061f8:	0800a228 	.word	0x0800a228
 80061fc:	0800a1ac 	.word	0x0800a1ac

08006200 <_free_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4605      	mov	r5, r0
 8006204:	2900      	cmp	r1, #0
 8006206:	d041      	beq.n	800628c <_free_r+0x8c>
 8006208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800620c:	1f0c      	subs	r4, r1, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	bfb8      	it	lt
 8006212:	18e4      	addlt	r4, r4, r3
 8006214:	f000 f8e8 	bl	80063e8 <__malloc_lock>
 8006218:	4a1d      	ldr	r2, [pc, #116]	@ (8006290 <_free_r+0x90>)
 800621a:	6813      	ldr	r3, [r2, #0]
 800621c:	b933      	cbnz	r3, 800622c <_free_r+0x2c>
 800621e:	6063      	str	r3, [r4, #4]
 8006220:	6014      	str	r4, [r2, #0]
 8006222:	4628      	mov	r0, r5
 8006224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006228:	f000 b8e4 	b.w	80063f4 <__malloc_unlock>
 800622c:	42a3      	cmp	r3, r4
 800622e:	d908      	bls.n	8006242 <_free_r+0x42>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	1821      	adds	r1, r4, r0
 8006234:	428b      	cmp	r3, r1
 8006236:	bf01      	itttt	eq
 8006238:	6819      	ldreq	r1, [r3, #0]
 800623a:	685b      	ldreq	r3, [r3, #4]
 800623c:	1809      	addeq	r1, r1, r0
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	e7ed      	b.n	800621e <_free_r+0x1e>
 8006242:	461a      	mov	r2, r3
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	b10b      	cbz	r3, 800624c <_free_r+0x4c>
 8006248:	42a3      	cmp	r3, r4
 800624a:	d9fa      	bls.n	8006242 <_free_r+0x42>
 800624c:	6811      	ldr	r1, [r2, #0]
 800624e:	1850      	adds	r0, r2, r1
 8006250:	42a0      	cmp	r0, r4
 8006252:	d10b      	bne.n	800626c <_free_r+0x6c>
 8006254:	6820      	ldr	r0, [r4, #0]
 8006256:	4401      	add	r1, r0
 8006258:	1850      	adds	r0, r2, r1
 800625a:	4283      	cmp	r3, r0
 800625c:	6011      	str	r1, [r2, #0]
 800625e:	d1e0      	bne.n	8006222 <_free_r+0x22>
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	6053      	str	r3, [r2, #4]
 8006266:	4408      	add	r0, r1
 8006268:	6010      	str	r0, [r2, #0]
 800626a:	e7da      	b.n	8006222 <_free_r+0x22>
 800626c:	d902      	bls.n	8006274 <_free_r+0x74>
 800626e:	230c      	movs	r3, #12
 8006270:	602b      	str	r3, [r5, #0]
 8006272:	e7d6      	b.n	8006222 <_free_r+0x22>
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	1821      	adds	r1, r4, r0
 8006278:	428b      	cmp	r3, r1
 800627a:	bf04      	itt	eq
 800627c:	6819      	ldreq	r1, [r3, #0]
 800627e:	685b      	ldreq	r3, [r3, #4]
 8006280:	6063      	str	r3, [r4, #4]
 8006282:	bf04      	itt	eq
 8006284:	1809      	addeq	r1, r1, r0
 8006286:	6021      	streq	r1, [r4, #0]
 8006288:	6054      	str	r4, [r2, #4]
 800628a:	e7ca      	b.n	8006222 <_free_r+0x22>
 800628c:	bd38      	pop	{r3, r4, r5, pc}
 800628e:	bf00      	nop
 8006290:	200053dc 	.word	0x200053dc

08006294 <malloc>:
 8006294:	4b02      	ldr	r3, [pc, #8]	@ (80062a0 <malloc+0xc>)
 8006296:	4601      	mov	r1, r0
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f000 b825 	b.w	80062e8 <_malloc_r>
 800629e:	bf00      	nop
 80062a0:	20004024 	.word	0x20004024

080062a4 <sbrk_aligned>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	4e0f      	ldr	r6, [pc, #60]	@ (80062e4 <sbrk_aligned+0x40>)
 80062a8:	460c      	mov	r4, r1
 80062aa:	6831      	ldr	r1, [r6, #0]
 80062ac:	4605      	mov	r5, r0
 80062ae:	b911      	cbnz	r1, 80062b6 <sbrk_aligned+0x12>
 80062b0:	f000 feaa 	bl	8007008 <_sbrk_r>
 80062b4:	6030      	str	r0, [r6, #0]
 80062b6:	4621      	mov	r1, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	f000 fea5 	bl	8007008 <_sbrk_r>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	d103      	bne.n	80062ca <sbrk_aligned+0x26>
 80062c2:	f04f 34ff 	mov.w	r4, #4294967295
 80062c6:	4620      	mov	r0, r4
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	1cc4      	adds	r4, r0, #3
 80062cc:	f024 0403 	bic.w	r4, r4, #3
 80062d0:	42a0      	cmp	r0, r4
 80062d2:	d0f8      	beq.n	80062c6 <sbrk_aligned+0x22>
 80062d4:	1a21      	subs	r1, r4, r0
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 fe96 	bl	8007008 <_sbrk_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	d1f2      	bne.n	80062c6 <sbrk_aligned+0x22>
 80062e0:	e7ef      	b.n	80062c2 <sbrk_aligned+0x1e>
 80062e2:	bf00      	nop
 80062e4:	200053d8 	.word	0x200053d8

080062e8 <_malloc_r>:
 80062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	1ccd      	adds	r5, r1, #3
 80062ee:	f025 0503 	bic.w	r5, r5, #3
 80062f2:	3508      	adds	r5, #8
 80062f4:	2d0c      	cmp	r5, #12
 80062f6:	bf38      	it	cc
 80062f8:	250c      	movcc	r5, #12
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	4606      	mov	r6, r0
 80062fe:	db01      	blt.n	8006304 <_malloc_r+0x1c>
 8006300:	42a9      	cmp	r1, r5
 8006302:	d904      	bls.n	800630e <_malloc_r+0x26>
 8006304:	230c      	movs	r3, #12
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	2000      	movs	r0, #0
 800630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063e4 <_malloc_r+0xfc>
 8006312:	f000 f869 	bl	80063e8 <__malloc_lock>
 8006316:	f8d8 3000 	ldr.w	r3, [r8]
 800631a:	461c      	mov	r4, r3
 800631c:	bb44      	cbnz	r4, 8006370 <_malloc_r+0x88>
 800631e:	4629      	mov	r1, r5
 8006320:	4630      	mov	r0, r6
 8006322:	f7ff ffbf 	bl	80062a4 <sbrk_aligned>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	4604      	mov	r4, r0
 800632a:	d158      	bne.n	80063de <_malloc_r+0xf6>
 800632c:	f8d8 4000 	ldr.w	r4, [r8]
 8006330:	4627      	mov	r7, r4
 8006332:	2f00      	cmp	r7, #0
 8006334:	d143      	bne.n	80063be <_malloc_r+0xd6>
 8006336:	2c00      	cmp	r4, #0
 8006338:	d04b      	beq.n	80063d2 <_malloc_r+0xea>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	4639      	mov	r1, r7
 800633e:	4630      	mov	r0, r6
 8006340:	eb04 0903 	add.w	r9, r4, r3
 8006344:	f000 fe60 	bl	8007008 <_sbrk_r>
 8006348:	4581      	cmp	r9, r0
 800634a:	d142      	bne.n	80063d2 <_malloc_r+0xea>
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	1a6d      	subs	r5, r5, r1
 8006350:	4629      	mov	r1, r5
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ffa6 	bl	80062a4 <sbrk_aligned>
 8006358:	3001      	adds	r0, #1
 800635a:	d03a      	beq.n	80063d2 <_malloc_r+0xea>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	442b      	add	r3, r5
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	f8d8 3000 	ldr.w	r3, [r8]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	bb62      	cbnz	r2, 80063c4 <_malloc_r+0xdc>
 800636a:	f8c8 7000 	str.w	r7, [r8]
 800636e:	e00f      	b.n	8006390 <_malloc_r+0xa8>
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	1b52      	subs	r2, r2, r5
 8006374:	d420      	bmi.n	80063b8 <_malloc_r+0xd0>
 8006376:	2a0b      	cmp	r2, #11
 8006378:	d917      	bls.n	80063aa <_malloc_r+0xc2>
 800637a:	1961      	adds	r1, r4, r5
 800637c:	42a3      	cmp	r3, r4
 800637e:	6025      	str	r5, [r4, #0]
 8006380:	bf18      	it	ne
 8006382:	6059      	strne	r1, [r3, #4]
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	bf08      	it	eq
 8006388:	f8c8 1000 	streq.w	r1, [r8]
 800638c:	5162      	str	r2, [r4, r5]
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	4630      	mov	r0, r6
 8006392:	f000 f82f 	bl	80063f4 <__malloc_unlock>
 8006396:	f104 000b 	add.w	r0, r4, #11
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	f020 0007 	bic.w	r0, r0, #7
 80063a0:	1ac2      	subs	r2, r0, r3
 80063a2:	bf1c      	itt	ne
 80063a4:	1a1b      	subne	r3, r3, r0
 80063a6:	50a3      	strne	r3, [r4, r2]
 80063a8:	e7af      	b.n	800630a <_malloc_r+0x22>
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	bf0c      	ite	eq
 80063b0:	f8c8 2000 	streq.w	r2, [r8]
 80063b4:	605a      	strne	r2, [r3, #4]
 80063b6:	e7eb      	b.n	8006390 <_malloc_r+0xa8>
 80063b8:	4623      	mov	r3, r4
 80063ba:	6864      	ldr	r4, [r4, #4]
 80063bc:	e7ae      	b.n	800631c <_malloc_r+0x34>
 80063be:	463c      	mov	r4, r7
 80063c0:	687f      	ldr	r7, [r7, #4]
 80063c2:	e7b6      	b.n	8006332 <_malloc_r+0x4a>
 80063c4:	461a      	mov	r2, r3
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d1fb      	bne.n	80063c4 <_malloc_r+0xdc>
 80063cc:	2300      	movs	r3, #0
 80063ce:	6053      	str	r3, [r2, #4]
 80063d0:	e7de      	b.n	8006390 <_malloc_r+0xa8>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f80c 	bl	80063f4 <__malloc_unlock>
 80063dc:	e794      	b.n	8006308 <_malloc_r+0x20>
 80063de:	6005      	str	r5, [r0, #0]
 80063e0:	e7d6      	b.n	8006390 <_malloc_r+0xa8>
 80063e2:	bf00      	nop
 80063e4:	200053dc 	.word	0x200053dc

080063e8 <__malloc_lock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	@ (80063f0 <__malloc_lock+0x8>)
 80063ea:	f7ff b8ba 	b.w	8005562 <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	200053d4 	.word	0x200053d4

080063f4 <__malloc_unlock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	@ (80063fc <__malloc_unlock+0x8>)
 80063f6:	f7ff b8b5 	b.w	8005564 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	200053d4 	.word	0x200053d4

08006400 <_Balloc>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	69c6      	ldr	r6, [r0, #28]
 8006404:	4604      	mov	r4, r0
 8006406:	460d      	mov	r5, r1
 8006408:	b976      	cbnz	r6, 8006428 <_Balloc+0x28>
 800640a:	2010      	movs	r0, #16
 800640c:	f7ff ff42 	bl	8006294 <malloc>
 8006410:	4602      	mov	r2, r0
 8006412:	61e0      	str	r0, [r4, #28]
 8006414:	b920      	cbnz	r0, 8006420 <_Balloc+0x20>
 8006416:	4b18      	ldr	r3, [pc, #96]	@ (8006478 <_Balloc+0x78>)
 8006418:	4818      	ldr	r0, [pc, #96]	@ (800647c <_Balloc+0x7c>)
 800641a:	216b      	movs	r1, #107	@ 0x6b
 800641c:	f000 fe12 	bl	8007044 <__assert_func>
 8006420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006424:	6006      	str	r6, [r0, #0]
 8006426:	60c6      	str	r6, [r0, #12]
 8006428:	69e6      	ldr	r6, [r4, #28]
 800642a:	68f3      	ldr	r3, [r6, #12]
 800642c:	b183      	cbz	r3, 8006450 <_Balloc+0x50>
 800642e:	69e3      	ldr	r3, [r4, #28]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006436:	b9b8      	cbnz	r0, 8006468 <_Balloc+0x68>
 8006438:	2101      	movs	r1, #1
 800643a:	fa01 f605 	lsl.w	r6, r1, r5
 800643e:	1d72      	adds	r2, r6, #5
 8006440:	0092      	lsls	r2, r2, #2
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fe1c 	bl	8007080 <_calloc_r>
 8006448:	b160      	cbz	r0, 8006464 <_Balloc+0x64>
 800644a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800644e:	e00e      	b.n	800646e <_Balloc+0x6e>
 8006450:	2221      	movs	r2, #33	@ 0x21
 8006452:	2104      	movs	r1, #4
 8006454:	4620      	mov	r0, r4
 8006456:	f000 fe13 	bl	8007080 <_calloc_r>
 800645a:	69e3      	ldr	r3, [r4, #28]
 800645c:	60f0      	str	r0, [r6, #12]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e4      	bne.n	800642e <_Balloc+0x2e>
 8006464:	2000      	movs	r0, #0
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	6802      	ldr	r2, [r0, #0]
 800646a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800646e:	2300      	movs	r3, #0
 8006470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006474:	e7f7      	b.n	8006466 <_Balloc+0x66>
 8006476:	bf00      	nop
 8006478:	0800a1b9 	.word	0x0800a1b9
 800647c:	0800a239 	.word	0x0800a239

08006480 <_Bfree>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	69c6      	ldr	r6, [r0, #28]
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b976      	cbnz	r6, 80064a8 <_Bfree+0x28>
 800648a:	2010      	movs	r0, #16
 800648c:	f7ff ff02 	bl	8006294 <malloc>
 8006490:	4602      	mov	r2, r0
 8006492:	61e8      	str	r0, [r5, #28]
 8006494:	b920      	cbnz	r0, 80064a0 <_Bfree+0x20>
 8006496:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <_Bfree+0x3c>)
 8006498:	4809      	ldr	r0, [pc, #36]	@ (80064c0 <_Bfree+0x40>)
 800649a:	218f      	movs	r1, #143	@ 0x8f
 800649c:	f000 fdd2 	bl	8007044 <__assert_func>
 80064a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064a4:	6006      	str	r6, [r0, #0]
 80064a6:	60c6      	str	r6, [r0, #12]
 80064a8:	b13c      	cbz	r4, 80064ba <_Bfree+0x3a>
 80064aa:	69eb      	ldr	r3, [r5, #28]
 80064ac:	6862      	ldr	r2, [r4, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064b4:	6021      	str	r1, [r4, #0]
 80064b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	0800a1b9 	.word	0x0800a1b9
 80064c0:	0800a239 	.word	0x0800a239

080064c4 <__multadd>:
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	690d      	ldr	r5, [r1, #16]
 80064ca:	4607      	mov	r7, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	461e      	mov	r6, r3
 80064d0:	f101 0c14 	add.w	ip, r1, #20
 80064d4:	2000      	movs	r0, #0
 80064d6:	f8dc 3000 	ldr.w	r3, [ip]
 80064da:	b299      	uxth	r1, r3
 80064dc:	fb02 6101 	mla	r1, r2, r1, r6
 80064e0:	0c1e      	lsrs	r6, r3, #16
 80064e2:	0c0b      	lsrs	r3, r1, #16
 80064e4:	fb02 3306 	mla	r3, r2, r6, r3
 80064e8:	b289      	uxth	r1, r1
 80064ea:	3001      	adds	r0, #1
 80064ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064f0:	4285      	cmp	r5, r0
 80064f2:	f84c 1b04 	str.w	r1, [ip], #4
 80064f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064fa:	dcec      	bgt.n	80064d6 <__multadd+0x12>
 80064fc:	b30e      	cbz	r6, 8006542 <__multadd+0x7e>
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	42ab      	cmp	r3, r5
 8006502:	dc19      	bgt.n	8006538 <__multadd+0x74>
 8006504:	6861      	ldr	r1, [r4, #4]
 8006506:	4638      	mov	r0, r7
 8006508:	3101      	adds	r1, #1
 800650a:	f7ff ff79 	bl	8006400 <_Balloc>
 800650e:	4680      	mov	r8, r0
 8006510:	b928      	cbnz	r0, 800651e <__multadd+0x5a>
 8006512:	4602      	mov	r2, r0
 8006514:	4b0c      	ldr	r3, [pc, #48]	@ (8006548 <__multadd+0x84>)
 8006516:	480d      	ldr	r0, [pc, #52]	@ (800654c <__multadd+0x88>)
 8006518:	21ba      	movs	r1, #186	@ 0xba
 800651a:	f000 fd93 	bl	8007044 <__assert_func>
 800651e:	6922      	ldr	r2, [r4, #16]
 8006520:	3202      	adds	r2, #2
 8006522:	f104 010c 	add.w	r1, r4, #12
 8006526:	0092      	lsls	r2, r2, #2
 8006528:	300c      	adds	r0, #12
 800652a:	f000 fd7d 	bl	8007028 <memcpy>
 800652e:	4621      	mov	r1, r4
 8006530:	4638      	mov	r0, r7
 8006532:	f7ff ffa5 	bl	8006480 <_Bfree>
 8006536:	4644      	mov	r4, r8
 8006538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800653c:	3501      	adds	r5, #1
 800653e:	615e      	str	r6, [r3, #20]
 8006540:	6125      	str	r5, [r4, #16]
 8006542:	4620      	mov	r0, r4
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	0800a228 	.word	0x0800a228
 800654c:	0800a239 	.word	0x0800a239

08006550 <__hi0bits>:
 8006550:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006554:	4603      	mov	r3, r0
 8006556:	bf36      	itet	cc
 8006558:	0403      	lslcc	r3, r0, #16
 800655a:	2000      	movcs	r0, #0
 800655c:	2010      	movcc	r0, #16
 800655e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006562:	bf3c      	itt	cc
 8006564:	021b      	lslcc	r3, r3, #8
 8006566:	3008      	addcc	r0, #8
 8006568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800656c:	bf3c      	itt	cc
 800656e:	011b      	lslcc	r3, r3, #4
 8006570:	3004      	addcc	r0, #4
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006576:	bf3c      	itt	cc
 8006578:	009b      	lslcc	r3, r3, #2
 800657a:	3002      	addcc	r0, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	db05      	blt.n	800658c <__hi0bits+0x3c>
 8006580:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006584:	f100 0001 	add.w	r0, r0, #1
 8006588:	bf08      	it	eq
 800658a:	2020      	moveq	r0, #32
 800658c:	4770      	bx	lr

0800658e <__lo0bits>:
 800658e:	6803      	ldr	r3, [r0, #0]
 8006590:	4602      	mov	r2, r0
 8006592:	f013 0007 	ands.w	r0, r3, #7
 8006596:	d00b      	beq.n	80065b0 <__lo0bits+0x22>
 8006598:	07d9      	lsls	r1, r3, #31
 800659a:	d421      	bmi.n	80065e0 <__lo0bits+0x52>
 800659c:	0798      	lsls	r0, r3, #30
 800659e:	bf49      	itett	mi
 80065a0:	085b      	lsrmi	r3, r3, #1
 80065a2:	089b      	lsrpl	r3, r3, #2
 80065a4:	2001      	movmi	r0, #1
 80065a6:	6013      	strmi	r3, [r2, #0]
 80065a8:	bf5c      	itt	pl
 80065aa:	6013      	strpl	r3, [r2, #0]
 80065ac:	2002      	movpl	r0, #2
 80065ae:	4770      	bx	lr
 80065b0:	b299      	uxth	r1, r3
 80065b2:	b909      	cbnz	r1, 80065b8 <__lo0bits+0x2a>
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	2010      	movs	r0, #16
 80065b8:	b2d9      	uxtb	r1, r3
 80065ba:	b909      	cbnz	r1, 80065c0 <__lo0bits+0x32>
 80065bc:	3008      	adds	r0, #8
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	0719      	lsls	r1, r3, #28
 80065c2:	bf04      	itt	eq
 80065c4:	091b      	lsreq	r3, r3, #4
 80065c6:	3004      	addeq	r0, #4
 80065c8:	0799      	lsls	r1, r3, #30
 80065ca:	bf04      	itt	eq
 80065cc:	089b      	lsreq	r3, r3, #2
 80065ce:	3002      	addeq	r0, #2
 80065d0:	07d9      	lsls	r1, r3, #31
 80065d2:	d403      	bmi.n	80065dc <__lo0bits+0x4e>
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	f100 0001 	add.w	r0, r0, #1
 80065da:	d003      	beq.n	80065e4 <__lo0bits+0x56>
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	4770      	bx	lr
 80065e0:	2000      	movs	r0, #0
 80065e2:	4770      	bx	lr
 80065e4:	2020      	movs	r0, #32
 80065e6:	4770      	bx	lr

080065e8 <__i2b>:
 80065e8:	b510      	push	{r4, lr}
 80065ea:	460c      	mov	r4, r1
 80065ec:	2101      	movs	r1, #1
 80065ee:	f7ff ff07 	bl	8006400 <_Balloc>
 80065f2:	4602      	mov	r2, r0
 80065f4:	b928      	cbnz	r0, 8006602 <__i2b+0x1a>
 80065f6:	4b05      	ldr	r3, [pc, #20]	@ (800660c <__i2b+0x24>)
 80065f8:	4805      	ldr	r0, [pc, #20]	@ (8006610 <__i2b+0x28>)
 80065fa:	f240 1145 	movw	r1, #325	@ 0x145
 80065fe:	f000 fd21 	bl	8007044 <__assert_func>
 8006602:	2301      	movs	r3, #1
 8006604:	6144      	str	r4, [r0, #20]
 8006606:	6103      	str	r3, [r0, #16]
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	0800a228 	.word	0x0800a228
 8006610:	0800a239 	.word	0x0800a239

08006614 <__multiply>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	4614      	mov	r4, r2
 800661a:	690a      	ldr	r2, [r1, #16]
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	429a      	cmp	r2, r3
 8006620:	bfa8      	it	ge
 8006622:	4623      	movge	r3, r4
 8006624:	460f      	mov	r7, r1
 8006626:	bfa4      	itt	ge
 8006628:	460c      	movge	r4, r1
 800662a:	461f      	movge	r7, r3
 800662c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006630:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	6861      	ldr	r1, [r4, #4]
 8006638:	eb0a 0609 	add.w	r6, sl, r9
 800663c:	42b3      	cmp	r3, r6
 800663e:	b085      	sub	sp, #20
 8006640:	bfb8      	it	lt
 8006642:	3101      	addlt	r1, #1
 8006644:	f7ff fedc 	bl	8006400 <_Balloc>
 8006648:	b930      	cbnz	r0, 8006658 <__multiply+0x44>
 800664a:	4602      	mov	r2, r0
 800664c:	4b44      	ldr	r3, [pc, #272]	@ (8006760 <__multiply+0x14c>)
 800664e:	4845      	ldr	r0, [pc, #276]	@ (8006764 <__multiply+0x150>)
 8006650:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006654:	f000 fcf6 	bl	8007044 <__assert_func>
 8006658:	f100 0514 	add.w	r5, r0, #20
 800665c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006660:	462b      	mov	r3, r5
 8006662:	2200      	movs	r2, #0
 8006664:	4543      	cmp	r3, r8
 8006666:	d321      	bcc.n	80066ac <__multiply+0x98>
 8006668:	f107 0114 	add.w	r1, r7, #20
 800666c:	f104 0214 	add.w	r2, r4, #20
 8006670:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006674:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006678:	9302      	str	r3, [sp, #8]
 800667a:	1b13      	subs	r3, r2, r4
 800667c:	3b15      	subs	r3, #21
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	3304      	adds	r3, #4
 8006684:	f104 0715 	add.w	r7, r4, #21
 8006688:	42ba      	cmp	r2, r7
 800668a:	bf38      	it	cc
 800668c:	2304      	movcc	r3, #4
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	9b02      	ldr	r3, [sp, #8]
 8006692:	9103      	str	r1, [sp, #12]
 8006694:	428b      	cmp	r3, r1
 8006696:	d80c      	bhi.n	80066b2 <__multiply+0x9e>
 8006698:	2e00      	cmp	r6, #0
 800669a:	dd03      	ble.n	80066a4 <__multiply+0x90>
 800669c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d05b      	beq.n	800675c <__multiply+0x148>
 80066a4:	6106      	str	r6, [r0, #16]
 80066a6:	b005      	add	sp, #20
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	f843 2b04 	str.w	r2, [r3], #4
 80066b0:	e7d8      	b.n	8006664 <__multiply+0x50>
 80066b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80066b6:	f1ba 0f00 	cmp.w	sl, #0
 80066ba:	d024      	beq.n	8006706 <__multiply+0xf2>
 80066bc:	f104 0e14 	add.w	lr, r4, #20
 80066c0:	46a9      	mov	r9, r5
 80066c2:	f04f 0c00 	mov.w	ip, #0
 80066c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066ca:	f8d9 3000 	ldr.w	r3, [r9]
 80066ce:	fa1f fb87 	uxth.w	fp, r7
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80066d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80066dc:	f8d9 7000 	ldr.w	r7, [r9]
 80066e0:	4463      	add	r3, ip
 80066e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80066ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066f4:	4572      	cmp	r2, lr
 80066f6:	f849 3b04 	str.w	r3, [r9], #4
 80066fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066fe:	d8e2      	bhi.n	80066c6 <__multiply+0xb2>
 8006700:	9b01      	ldr	r3, [sp, #4]
 8006702:	f845 c003 	str.w	ip, [r5, r3]
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800670c:	3104      	adds	r1, #4
 800670e:	f1b9 0f00 	cmp.w	r9, #0
 8006712:	d021      	beq.n	8006758 <__multiply+0x144>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	f104 0c14 	add.w	ip, r4, #20
 800671a:	46ae      	mov	lr, r5
 800671c:	f04f 0a00 	mov.w	sl, #0
 8006720:	f8bc b000 	ldrh.w	fp, [ip]
 8006724:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006728:	fb09 770b 	mla	r7, r9, fp, r7
 800672c:	4457      	add	r7, sl
 800672e:	b29b      	uxth	r3, r3
 8006730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006734:	f84e 3b04 	str.w	r3, [lr], #4
 8006738:	f85c 3b04 	ldr.w	r3, [ip], #4
 800673c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006740:	f8be 3000 	ldrh.w	r3, [lr]
 8006744:	fb09 330a 	mla	r3, r9, sl, r3
 8006748:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800674c:	4562      	cmp	r2, ip
 800674e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006752:	d8e5      	bhi.n	8006720 <__multiply+0x10c>
 8006754:	9f01      	ldr	r7, [sp, #4]
 8006756:	51eb      	str	r3, [r5, r7]
 8006758:	3504      	adds	r5, #4
 800675a:	e799      	b.n	8006690 <__multiply+0x7c>
 800675c:	3e01      	subs	r6, #1
 800675e:	e79b      	b.n	8006698 <__multiply+0x84>
 8006760:	0800a228 	.word	0x0800a228
 8006764:	0800a239 	.word	0x0800a239

08006768 <__pow5mult>:
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800676c:	4615      	mov	r5, r2
 800676e:	f012 0203 	ands.w	r2, r2, #3
 8006772:	4607      	mov	r7, r0
 8006774:	460e      	mov	r6, r1
 8006776:	d007      	beq.n	8006788 <__pow5mult+0x20>
 8006778:	4c25      	ldr	r4, [pc, #148]	@ (8006810 <__pow5mult+0xa8>)
 800677a:	3a01      	subs	r2, #1
 800677c:	2300      	movs	r3, #0
 800677e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006782:	f7ff fe9f 	bl	80064c4 <__multadd>
 8006786:	4606      	mov	r6, r0
 8006788:	10ad      	asrs	r5, r5, #2
 800678a:	d03d      	beq.n	8006808 <__pow5mult+0xa0>
 800678c:	69fc      	ldr	r4, [r7, #28]
 800678e:	b97c      	cbnz	r4, 80067b0 <__pow5mult+0x48>
 8006790:	2010      	movs	r0, #16
 8006792:	f7ff fd7f 	bl	8006294 <malloc>
 8006796:	4602      	mov	r2, r0
 8006798:	61f8      	str	r0, [r7, #28]
 800679a:	b928      	cbnz	r0, 80067a8 <__pow5mult+0x40>
 800679c:	4b1d      	ldr	r3, [pc, #116]	@ (8006814 <__pow5mult+0xac>)
 800679e:	481e      	ldr	r0, [pc, #120]	@ (8006818 <__pow5mult+0xb0>)
 80067a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067a4:	f000 fc4e 	bl	8007044 <__assert_func>
 80067a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067ac:	6004      	str	r4, [r0, #0]
 80067ae:	60c4      	str	r4, [r0, #12]
 80067b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067b8:	b94c      	cbnz	r4, 80067ce <__pow5mult+0x66>
 80067ba:	f240 2171 	movw	r1, #625	@ 0x271
 80067be:	4638      	mov	r0, r7
 80067c0:	f7ff ff12 	bl	80065e8 <__i2b>
 80067c4:	2300      	movs	r3, #0
 80067c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80067ca:	4604      	mov	r4, r0
 80067cc:	6003      	str	r3, [r0, #0]
 80067ce:	f04f 0900 	mov.w	r9, #0
 80067d2:	07eb      	lsls	r3, r5, #31
 80067d4:	d50a      	bpl.n	80067ec <__pow5mult+0x84>
 80067d6:	4631      	mov	r1, r6
 80067d8:	4622      	mov	r2, r4
 80067da:	4638      	mov	r0, r7
 80067dc:	f7ff ff1a 	bl	8006614 <__multiply>
 80067e0:	4631      	mov	r1, r6
 80067e2:	4680      	mov	r8, r0
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7ff fe4b 	bl	8006480 <_Bfree>
 80067ea:	4646      	mov	r6, r8
 80067ec:	106d      	asrs	r5, r5, #1
 80067ee:	d00b      	beq.n	8006808 <__pow5mult+0xa0>
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	b938      	cbnz	r0, 8006804 <__pow5mult+0x9c>
 80067f4:	4622      	mov	r2, r4
 80067f6:	4621      	mov	r1, r4
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff ff0b 	bl	8006614 <__multiply>
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	f8c0 9000 	str.w	r9, [r0]
 8006804:	4604      	mov	r4, r0
 8006806:	e7e4      	b.n	80067d2 <__pow5mult+0x6a>
 8006808:	4630      	mov	r0, r6
 800680a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680e:	bf00      	nop
 8006810:	0800a294 	.word	0x0800a294
 8006814:	0800a1b9 	.word	0x0800a1b9
 8006818:	0800a239 	.word	0x0800a239

0800681c <__lshift>:
 800681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006820:	460c      	mov	r4, r1
 8006822:	6849      	ldr	r1, [r1, #4]
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	4607      	mov	r7, r0
 800682e:	4691      	mov	r9, r2
 8006830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006834:	f108 0601 	add.w	r6, r8, #1
 8006838:	42b3      	cmp	r3, r6
 800683a:	db0b      	blt.n	8006854 <__lshift+0x38>
 800683c:	4638      	mov	r0, r7
 800683e:	f7ff fddf 	bl	8006400 <_Balloc>
 8006842:	4605      	mov	r5, r0
 8006844:	b948      	cbnz	r0, 800685a <__lshift+0x3e>
 8006846:	4602      	mov	r2, r0
 8006848:	4b28      	ldr	r3, [pc, #160]	@ (80068ec <__lshift+0xd0>)
 800684a:	4829      	ldr	r0, [pc, #164]	@ (80068f0 <__lshift+0xd4>)
 800684c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006850:	f000 fbf8 	bl	8007044 <__assert_func>
 8006854:	3101      	adds	r1, #1
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	e7ee      	b.n	8006838 <__lshift+0x1c>
 800685a:	2300      	movs	r3, #0
 800685c:	f100 0114 	add.w	r1, r0, #20
 8006860:	f100 0210 	add.w	r2, r0, #16
 8006864:	4618      	mov	r0, r3
 8006866:	4553      	cmp	r3, sl
 8006868:	db33      	blt.n	80068d2 <__lshift+0xb6>
 800686a:	6920      	ldr	r0, [r4, #16]
 800686c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006870:	f104 0314 	add.w	r3, r4, #20
 8006874:	f019 091f 	ands.w	r9, r9, #31
 8006878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800687c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006880:	d02b      	beq.n	80068da <__lshift+0xbe>
 8006882:	f1c9 0e20 	rsb	lr, r9, #32
 8006886:	468a      	mov	sl, r1
 8006888:	2200      	movs	r2, #0
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	fa00 f009 	lsl.w	r0, r0, r9
 8006890:	4310      	orrs	r0, r2
 8006892:	f84a 0b04 	str.w	r0, [sl], #4
 8006896:	f853 2b04 	ldr.w	r2, [r3], #4
 800689a:	459c      	cmp	ip, r3
 800689c:	fa22 f20e 	lsr.w	r2, r2, lr
 80068a0:	d8f3      	bhi.n	800688a <__lshift+0x6e>
 80068a2:	ebac 0304 	sub.w	r3, ip, r4
 80068a6:	3b15      	subs	r3, #21
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	3304      	adds	r3, #4
 80068ae:	f104 0015 	add.w	r0, r4, #21
 80068b2:	4584      	cmp	ip, r0
 80068b4:	bf38      	it	cc
 80068b6:	2304      	movcc	r3, #4
 80068b8:	50ca      	str	r2, [r1, r3]
 80068ba:	b10a      	cbz	r2, 80068c0 <__lshift+0xa4>
 80068bc:	f108 0602 	add.w	r6, r8, #2
 80068c0:	3e01      	subs	r6, #1
 80068c2:	4638      	mov	r0, r7
 80068c4:	612e      	str	r6, [r5, #16]
 80068c6:	4621      	mov	r1, r4
 80068c8:	f7ff fdda 	bl	8006480 <_Bfree>
 80068cc:	4628      	mov	r0, r5
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80068d6:	3301      	adds	r3, #1
 80068d8:	e7c5      	b.n	8006866 <__lshift+0x4a>
 80068da:	3904      	subs	r1, #4
 80068dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80068e4:	459c      	cmp	ip, r3
 80068e6:	d8f9      	bhi.n	80068dc <__lshift+0xc0>
 80068e8:	e7ea      	b.n	80068c0 <__lshift+0xa4>
 80068ea:	bf00      	nop
 80068ec:	0800a228 	.word	0x0800a228
 80068f0:	0800a239 	.word	0x0800a239

080068f4 <__mcmp>:
 80068f4:	690a      	ldr	r2, [r1, #16]
 80068f6:	4603      	mov	r3, r0
 80068f8:	6900      	ldr	r0, [r0, #16]
 80068fa:	1a80      	subs	r0, r0, r2
 80068fc:	b530      	push	{r4, r5, lr}
 80068fe:	d10e      	bne.n	800691e <__mcmp+0x2a>
 8006900:	3314      	adds	r3, #20
 8006902:	3114      	adds	r1, #20
 8006904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800690c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006914:	4295      	cmp	r5, r2
 8006916:	d003      	beq.n	8006920 <__mcmp+0x2c>
 8006918:	d205      	bcs.n	8006926 <__mcmp+0x32>
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	bd30      	pop	{r4, r5, pc}
 8006920:	42a3      	cmp	r3, r4
 8006922:	d3f3      	bcc.n	800690c <__mcmp+0x18>
 8006924:	e7fb      	b.n	800691e <__mcmp+0x2a>
 8006926:	2001      	movs	r0, #1
 8006928:	e7f9      	b.n	800691e <__mcmp+0x2a>
	...

0800692c <__mdiff>:
 800692c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	4689      	mov	r9, r1
 8006932:	4606      	mov	r6, r0
 8006934:	4611      	mov	r1, r2
 8006936:	4648      	mov	r0, r9
 8006938:	4614      	mov	r4, r2
 800693a:	f7ff ffdb 	bl	80068f4 <__mcmp>
 800693e:	1e05      	subs	r5, r0, #0
 8006940:	d112      	bne.n	8006968 <__mdiff+0x3c>
 8006942:	4629      	mov	r1, r5
 8006944:	4630      	mov	r0, r6
 8006946:	f7ff fd5b 	bl	8006400 <_Balloc>
 800694a:	4602      	mov	r2, r0
 800694c:	b928      	cbnz	r0, 800695a <__mdiff+0x2e>
 800694e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a4c <__mdiff+0x120>)
 8006950:	f240 2137 	movw	r1, #567	@ 0x237
 8006954:	483e      	ldr	r0, [pc, #248]	@ (8006a50 <__mdiff+0x124>)
 8006956:	f000 fb75 	bl	8007044 <__assert_func>
 800695a:	2301      	movs	r3, #1
 800695c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006960:	4610      	mov	r0, r2
 8006962:	b003      	add	sp, #12
 8006964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006968:	bfbc      	itt	lt
 800696a:	464b      	movlt	r3, r9
 800696c:	46a1      	movlt	r9, r4
 800696e:	4630      	mov	r0, r6
 8006970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006974:	bfba      	itte	lt
 8006976:	461c      	movlt	r4, r3
 8006978:	2501      	movlt	r5, #1
 800697a:	2500      	movge	r5, #0
 800697c:	f7ff fd40 	bl	8006400 <_Balloc>
 8006980:	4602      	mov	r2, r0
 8006982:	b918      	cbnz	r0, 800698c <__mdiff+0x60>
 8006984:	4b31      	ldr	r3, [pc, #196]	@ (8006a4c <__mdiff+0x120>)
 8006986:	f240 2145 	movw	r1, #581	@ 0x245
 800698a:	e7e3      	b.n	8006954 <__mdiff+0x28>
 800698c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006990:	6926      	ldr	r6, [r4, #16]
 8006992:	60c5      	str	r5, [r0, #12]
 8006994:	f109 0310 	add.w	r3, r9, #16
 8006998:	f109 0514 	add.w	r5, r9, #20
 800699c:	f104 0e14 	add.w	lr, r4, #20
 80069a0:	f100 0b14 	add.w	fp, r0, #20
 80069a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	46d9      	mov	r9, fp
 80069b0:	f04f 0c00 	mov.w	ip, #0
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	fa1f f38a 	uxth.w	r3, sl
 80069c4:	4619      	mov	r1, r3
 80069c6:	b283      	uxth	r3, r0
 80069c8:	1acb      	subs	r3, r1, r3
 80069ca:	0c00      	lsrs	r0, r0, #16
 80069cc:	4463      	add	r3, ip
 80069ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069dc:	4576      	cmp	r6, lr
 80069de:	f849 3b04 	str.w	r3, [r9], #4
 80069e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069e6:	d8e5      	bhi.n	80069b4 <__mdiff+0x88>
 80069e8:	1b33      	subs	r3, r6, r4
 80069ea:	3b15      	subs	r3, #21
 80069ec:	f023 0303 	bic.w	r3, r3, #3
 80069f0:	3415      	adds	r4, #21
 80069f2:	3304      	adds	r3, #4
 80069f4:	42a6      	cmp	r6, r4
 80069f6:	bf38      	it	cc
 80069f8:	2304      	movcc	r3, #4
 80069fa:	441d      	add	r5, r3
 80069fc:	445b      	add	r3, fp
 80069fe:	461e      	mov	r6, r3
 8006a00:	462c      	mov	r4, r5
 8006a02:	4544      	cmp	r4, r8
 8006a04:	d30e      	bcc.n	8006a24 <__mdiff+0xf8>
 8006a06:	f108 0103 	add.w	r1, r8, #3
 8006a0a:	1b49      	subs	r1, r1, r5
 8006a0c:	f021 0103 	bic.w	r1, r1, #3
 8006a10:	3d03      	subs	r5, #3
 8006a12:	45a8      	cmp	r8, r5
 8006a14:	bf38      	it	cc
 8006a16:	2100      	movcc	r1, #0
 8006a18:	440b      	add	r3, r1
 8006a1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a1e:	b191      	cbz	r1, 8006a46 <__mdiff+0x11a>
 8006a20:	6117      	str	r7, [r2, #16]
 8006a22:	e79d      	b.n	8006960 <__mdiff+0x34>
 8006a24:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a28:	46e6      	mov	lr, ip
 8006a2a:	0c08      	lsrs	r0, r1, #16
 8006a2c:	fa1c fc81 	uxtah	ip, ip, r1
 8006a30:	4471      	add	r1, lr
 8006a32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a36:	b289      	uxth	r1, r1
 8006a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a3c:	f846 1b04 	str.w	r1, [r6], #4
 8006a40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a44:	e7dd      	b.n	8006a02 <__mdiff+0xd6>
 8006a46:	3f01      	subs	r7, #1
 8006a48:	e7e7      	b.n	8006a1a <__mdiff+0xee>
 8006a4a:	bf00      	nop
 8006a4c:	0800a228 	.word	0x0800a228
 8006a50:	0800a239 	.word	0x0800a239

08006a54 <__d2b>:
 8006a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a58:	460f      	mov	r7, r1
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	ec59 8b10 	vmov	r8, r9, d0
 8006a60:	4616      	mov	r6, r2
 8006a62:	f7ff fccd 	bl	8006400 <_Balloc>
 8006a66:	4604      	mov	r4, r0
 8006a68:	b930      	cbnz	r0, 8006a78 <__d2b+0x24>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	4b23      	ldr	r3, [pc, #140]	@ (8006afc <__d2b+0xa8>)
 8006a6e:	4824      	ldr	r0, [pc, #144]	@ (8006b00 <__d2b+0xac>)
 8006a70:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a74:	f000 fae6 	bl	8007044 <__assert_func>
 8006a78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a80:	b10d      	cbz	r5, 8006a86 <__d2b+0x32>
 8006a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f1b8 0300 	subs.w	r3, r8, #0
 8006a8c:	d023      	beq.n	8006ad6 <__d2b+0x82>
 8006a8e:	4668      	mov	r0, sp
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	f7ff fd7c 	bl	800658e <__lo0bits>
 8006a96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a9a:	b1d0      	cbz	r0, 8006ad2 <__d2b+0x7e>
 8006a9c:	f1c0 0320 	rsb	r3, r0, #32
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	40c2      	lsrs	r2, r0
 8006aa8:	6163      	str	r3, [r4, #20]
 8006aaa:	9201      	str	r2, [sp, #4]
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	61a3      	str	r3, [r4, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2201      	moveq	r2, #1
 8006ab6:	2202      	movne	r2, #2
 8006ab8:	6122      	str	r2, [r4, #16]
 8006aba:	b1a5      	cbz	r5, 8006ae6 <__d2b+0x92>
 8006abc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ac0:	4405      	add	r5, r0
 8006ac2:	603d      	str	r5, [r7, #0]
 8006ac4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ac8:	6030      	str	r0, [r6, #0]
 8006aca:	4620      	mov	r0, r4
 8006acc:	b003      	add	sp, #12
 8006ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ad2:	6161      	str	r1, [r4, #20]
 8006ad4:	e7ea      	b.n	8006aac <__d2b+0x58>
 8006ad6:	a801      	add	r0, sp, #4
 8006ad8:	f7ff fd59 	bl	800658e <__lo0bits>
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	6163      	str	r3, [r4, #20]
 8006ae0:	3020      	adds	r0, #32
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	e7e8      	b.n	8006ab8 <__d2b+0x64>
 8006ae6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006aea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006aee:	6038      	str	r0, [r7, #0]
 8006af0:	6918      	ldr	r0, [r3, #16]
 8006af2:	f7ff fd2d 	bl	8006550 <__hi0bits>
 8006af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006afa:	e7e5      	b.n	8006ac8 <__d2b+0x74>
 8006afc:	0800a228 	.word	0x0800a228
 8006b00:	0800a239 	.word	0x0800a239

08006b04 <__sfputc_r>:
 8006b04:	6893      	ldr	r3, [r2, #8]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	b410      	push	{r4}
 8006b0c:	6093      	str	r3, [r2, #8]
 8006b0e:	da08      	bge.n	8006b22 <__sfputc_r+0x1e>
 8006b10:	6994      	ldr	r4, [r2, #24]
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	db01      	blt.n	8006b1a <__sfputc_r+0x16>
 8006b16:	290a      	cmp	r1, #10
 8006b18:	d103      	bne.n	8006b22 <__sfputc_r+0x1e>
 8006b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b1e:	f000 b9df 	b.w	8006ee0 <__swbuf_r>
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	1c58      	adds	r0, r3, #1
 8006b26:	6010      	str	r0, [r2, #0]
 8006b28:	7019      	strb	r1, [r3, #0]
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <__sfputs_r>:
 8006b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b34:	4606      	mov	r6, r0
 8006b36:	460f      	mov	r7, r1
 8006b38:	4614      	mov	r4, r2
 8006b3a:	18d5      	adds	r5, r2, r3
 8006b3c:	42ac      	cmp	r4, r5
 8006b3e:	d101      	bne.n	8006b44 <__sfputs_r+0x12>
 8006b40:	2000      	movs	r0, #0
 8006b42:	e007      	b.n	8006b54 <__sfputs_r+0x22>
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	463a      	mov	r2, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7ff ffda 	bl	8006b04 <__sfputc_r>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d1f3      	bne.n	8006b3c <__sfputs_r+0xa>
 8006b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b58 <_vfiprintf_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	b09d      	sub	sp, #116	@ 0x74
 8006b60:	4614      	mov	r4, r2
 8006b62:	4698      	mov	r8, r3
 8006b64:	4606      	mov	r6, r0
 8006b66:	b118      	cbz	r0, 8006b70 <_vfiprintf_r+0x18>
 8006b68:	6a03      	ldr	r3, [r0, #32]
 8006b6a:	b90b      	cbnz	r3, 8006b70 <_vfiprintf_r+0x18>
 8006b6c:	f7fe fbf0 	bl	8005350 <__sinit>
 8006b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b72:	07d9      	lsls	r1, r3, #31
 8006b74:	d405      	bmi.n	8006b82 <_vfiprintf_r+0x2a>
 8006b76:	89ab      	ldrh	r3, [r5, #12]
 8006b78:	059a      	lsls	r2, r3, #22
 8006b7a:	d402      	bmi.n	8006b82 <_vfiprintf_r+0x2a>
 8006b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b7e:	f7fe fcf0 	bl	8005562 <__retarget_lock_acquire_recursive>
 8006b82:	89ab      	ldrh	r3, [r5, #12]
 8006b84:	071b      	lsls	r3, r3, #28
 8006b86:	d501      	bpl.n	8006b8c <_vfiprintf_r+0x34>
 8006b88:	692b      	ldr	r3, [r5, #16]
 8006b8a:	b99b      	cbnz	r3, 8006bb4 <_vfiprintf_r+0x5c>
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f000 f9e4 	bl	8006f5c <__swsetup_r>
 8006b94:	b170      	cbz	r0, 8006bb4 <_vfiprintf_r+0x5c>
 8006b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b98:	07dc      	lsls	r4, r3, #31
 8006b9a:	d504      	bpl.n	8006ba6 <_vfiprintf_r+0x4e>
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	b01d      	add	sp, #116	@ 0x74
 8006ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d4f7      	bmi.n	8006b9c <_vfiprintf_r+0x44>
 8006bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bae:	f7fe fcd9 	bl	8005564 <__retarget_lock_release_recursive>
 8006bb2:	e7f3      	b.n	8006b9c <_vfiprintf_r+0x44>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bb8:	2320      	movs	r3, #32
 8006bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc2:	2330      	movs	r3, #48	@ 0x30
 8006bc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d74 <_vfiprintf_r+0x21c>
 8006bc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bcc:	f04f 0901 	mov.w	r9, #1
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	469a      	mov	sl, r3
 8006bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd8:	b10a      	cbz	r2, 8006bde <_vfiprintf_r+0x86>
 8006bda:	2a25      	cmp	r2, #37	@ 0x25
 8006bdc:	d1f9      	bne.n	8006bd2 <_vfiprintf_r+0x7a>
 8006bde:	ebba 0b04 	subs.w	fp, sl, r4
 8006be2:	d00b      	beq.n	8006bfc <_vfiprintf_r+0xa4>
 8006be4:	465b      	mov	r3, fp
 8006be6:	4622      	mov	r2, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ffa1 	bl	8006b32 <__sfputs_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f000 80a7 	beq.w	8006d44 <_vfiprintf_r+0x1ec>
 8006bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf8:	445a      	add	r2, fp
 8006bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 809f 	beq.w	8006d44 <_vfiprintf_r+0x1ec>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c10:	f10a 0a01 	add.w	sl, sl, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c1e:	4654      	mov	r4, sl
 8006c20:	2205      	movs	r2, #5
 8006c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c26:	4853      	ldr	r0, [pc, #332]	@ (8006d74 <_vfiprintf_r+0x21c>)
 8006c28:	f7f9 fada 	bl	80001e0 <memchr>
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	b9d8      	cbnz	r0, 8006c68 <_vfiprintf_r+0x110>
 8006c30:	06d1      	lsls	r1, r2, #27
 8006c32:	bf44      	itt	mi
 8006c34:	2320      	movmi	r3, #32
 8006c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c3a:	0713      	lsls	r3, r2, #28
 8006c3c:	bf44      	itt	mi
 8006c3e:	232b      	movmi	r3, #43	@ 0x2b
 8006c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c44:	f89a 3000 	ldrb.w	r3, [sl]
 8006c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c4a:	d015      	beq.n	8006c78 <_vfiprintf_r+0x120>
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	4654      	mov	r4, sl
 8006c50:	2000      	movs	r0, #0
 8006c52:	f04f 0c0a 	mov.w	ip, #10
 8006c56:	4621      	mov	r1, r4
 8006c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5c:	3b30      	subs	r3, #48	@ 0x30
 8006c5e:	2b09      	cmp	r3, #9
 8006c60:	d94b      	bls.n	8006cfa <_vfiprintf_r+0x1a2>
 8006c62:	b1b0      	cbz	r0, 8006c92 <_vfiprintf_r+0x13a>
 8006c64:	9207      	str	r2, [sp, #28]
 8006c66:	e014      	b.n	8006c92 <_vfiprintf_r+0x13a>
 8006c68:	eba0 0308 	sub.w	r3, r0, r8
 8006c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c70:	4313      	orrs	r3, r2
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	46a2      	mov	sl, r4
 8006c76:	e7d2      	b.n	8006c1e <_vfiprintf_r+0xc6>
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	1d19      	adds	r1, r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	9103      	str	r1, [sp, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfbb      	ittet	lt
 8006c84:	425b      	neglt	r3, r3
 8006c86:	f042 0202 	orrlt.w	r2, r2, #2
 8006c8a:	9307      	strge	r3, [sp, #28]
 8006c8c:	9307      	strlt	r3, [sp, #28]
 8006c8e:	bfb8      	it	lt
 8006c90:	9204      	strlt	r2, [sp, #16]
 8006c92:	7823      	ldrb	r3, [r4, #0]
 8006c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c96:	d10a      	bne.n	8006cae <_vfiprintf_r+0x156>
 8006c98:	7863      	ldrb	r3, [r4, #1]
 8006c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c9c:	d132      	bne.n	8006d04 <_vfiprintf_r+0x1ac>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	9203      	str	r2, [sp, #12]
 8006ca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006caa:	3402      	adds	r4, #2
 8006cac:	9305      	str	r3, [sp, #20]
 8006cae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d84 <_vfiprintf_r+0x22c>
 8006cb2:	7821      	ldrb	r1, [r4, #0]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f7f9 fa92 	bl	80001e0 <memchr>
 8006cbc:	b138      	cbz	r0, 8006cce <_vfiprintf_r+0x176>
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	eba0 000a 	sub.w	r0, r0, sl
 8006cc4:	2240      	movs	r2, #64	@ 0x40
 8006cc6:	4082      	lsls	r2, r0
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	3401      	adds	r4, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd2:	4829      	ldr	r0, [pc, #164]	@ (8006d78 <_vfiprintf_r+0x220>)
 8006cd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cd8:	2206      	movs	r2, #6
 8006cda:	f7f9 fa81 	bl	80001e0 <memchr>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d03f      	beq.n	8006d62 <_vfiprintf_r+0x20a>
 8006ce2:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <_vfiprintf_r+0x224>)
 8006ce4:	bb1b      	cbnz	r3, 8006d2e <_vfiprintf_r+0x1d6>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	3307      	adds	r3, #7
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	3308      	adds	r3, #8
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf4:	443b      	add	r3, r7
 8006cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf8:	e76a      	b.n	8006bd0 <_vfiprintf_r+0x78>
 8006cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cfe:	460c      	mov	r4, r1
 8006d00:	2001      	movs	r0, #1
 8006d02:	e7a8      	b.n	8006c56 <_vfiprintf_r+0xfe>
 8006d04:	2300      	movs	r3, #0
 8006d06:	3401      	adds	r4, #1
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f04f 0c0a 	mov.w	ip, #10
 8006d10:	4620      	mov	r0, r4
 8006d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d16:	3a30      	subs	r2, #48	@ 0x30
 8006d18:	2a09      	cmp	r2, #9
 8006d1a:	d903      	bls.n	8006d24 <_vfiprintf_r+0x1cc>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0c6      	beq.n	8006cae <_vfiprintf_r+0x156>
 8006d20:	9105      	str	r1, [sp, #20]
 8006d22:	e7c4      	b.n	8006cae <_vfiprintf_r+0x156>
 8006d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d28:	4604      	mov	r4, r0
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e7f0      	b.n	8006d10 <_vfiprintf_r+0x1b8>
 8006d2e:	ab03      	add	r3, sp, #12
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	462a      	mov	r2, r5
 8006d34:	4b12      	ldr	r3, [pc, #72]	@ (8006d80 <_vfiprintf_r+0x228>)
 8006d36:	a904      	add	r1, sp, #16
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7fd fec5 	bl	8004ac8 <_printf_float>
 8006d3e:	4607      	mov	r7, r0
 8006d40:	1c78      	adds	r0, r7, #1
 8006d42:	d1d6      	bne.n	8006cf2 <_vfiprintf_r+0x19a>
 8006d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d46:	07d9      	lsls	r1, r3, #31
 8006d48:	d405      	bmi.n	8006d56 <_vfiprintf_r+0x1fe>
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	059a      	lsls	r2, r3, #22
 8006d4e:	d402      	bmi.n	8006d56 <_vfiprintf_r+0x1fe>
 8006d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d52:	f7fe fc07 	bl	8005564 <__retarget_lock_release_recursive>
 8006d56:	89ab      	ldrh	r3, [r5, #12]
 8006d58:	065b      	lsls	r3, r3, #25
 8006d5a:	f53f af1f 	bmi.w	8006b9c <_vfiprintf_r+0x44>
 8006d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d60:	e71e      	b.n	8006ba0 <_vfiprintf_r+0x48>
 8006d62:	ab03      	add	r3, sp, #12
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	462a      	mov	r2, r5
 8006d68:	4b05      	ldr	r3, [pc, #20]	@ (8006d80 <_vfiprintf_r+0x228>)
 8006d6a:	a904      	add	r1, sp, #16
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7fe f943 	bl	8004ff8 <_printf_i>
 8006d72:	e7e4      	b.n	8006d3e <_vfiprintf_r+0x1e6>
 8006d74:	0800a390 	.word	0x0800a390
 8006d78:	0800a39a 	.word	0x0800a39a
 8006d7c:	08004ac9 	.word	0x08004ac9
 8006d80:	08006b33 	.word	0x08006b33
 8006d84:	0800a396 	.word	0x0800a396

08006d88 <__sflush_r>:
 8006d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	0716      	lsls	r6, r2, #28
 8006d92:	4605      	mov	r5, r0
 8006d94:	460c      	mov	r4, r1
 8006d96:	d454      	bmi.n	8006e42 <__sflush_r+0xba>
 8006d98:	684b      	ldr	r3, [r1, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dc02      	bgt.n	8006da4 <__sflush_r+0x1c>
 8006d9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dd48      	ble.n	8006e36 <__sflush_r+0xae>
 8006da4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006da6:	2e00      	cmp	r6, #0
 8006da8:	d045      	beq.n	8006e36 <__sflush_r+0xae>
 8006daa:	2300      	movs	r3, #0
 8006dac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006db0:	682f      	ldr	r7, [r5, #0]
 8006db2:	6a21      	ldr	r1, [r4, #32]
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	d030      	beq.n	8006e1a <__sflush_r+0x92>
 8006db8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	0759      	lsls	r1, r3, #29
 8006dbe:	d505      	bpl.n	8006dcc <__sflush_r+0x44>
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	1ad2      	subs	r2, r2, r3
 8006dc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dc6:	b10b      	cbz	r3, 8006dcc <__sflush_r+0x44>
 8006dc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dca:	1ad2      	subs	r2, r2, r3
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dd0:	6a21      	ldr	r1, [r4, #32]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b0      	blx	r6
 8006dd6:	1c43      	adds	r3, r0, #1
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	d106      	bne.n	8006dea <__sflush_r+0x62>
 8006ddc:	6829      	ldr	r1, [r5, #0]
 8006dde:	291d      	cmp	r1, #29
 8006de0:	d82b      	bhi.n	8006e3a <__sflush_r+0xb2>
 8006de2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e8c <__sflush_r+0x104>)
 8006de4:	410a      	asrs	r2, r1
 8006de6:	07d6      	lsls	r6, r2, #31
 8006de8:	d427      	bmi.n	8006e3a <__sflush_r+0xb2>
 8006dea:	2200      	movs	r2, #0
 8006dec:	6062      	str	r2, [r4, #4]
 8006dee:	04d9      	lsls	r1, r3, #19
 8006df0:	6922      	ldr	r2, [r4, #16]
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	d504      	bpl.n	8006e00 <__sflush_r+0x78>
 8006df6:	1c42      	adds	r2, r0, #1
 8006df8:	d101      	bne.n	8006dfe <__sflush_r+0x76>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	b903      	cbnz	r3, 8006e00 <__sflush_r+0x78>
 8006dfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e02:	602f      	str	r7, [r5, #0]
 8006e04:	b1b9      	cbz	r1, 8006e36 <__sflush_r+0xae>
 8006e06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	d002      	beq.n	8006e14 <__sflush_r+0x8c>
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f7ff f9f6 	bl	8006200 <_free_r>
 8006e14:	2300      	movs	r3, #0
 8006e16:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e18:	e00d      	b.n	8006e36 <__sflush_r+0xae>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b0      	blx	r6
 8006e20:	4602      	mov	r2, r0
 8006e22:	1c50      	adds	r0, r2, #1
 8006e24:	d1c9      	bne.n	8006dba <__sflush_r+0x32>
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0c6      	beq.n	8006dba <__sflush_r+0x32>
 8006e2c:	2b1d      	cmp	r3, #29
 8006e2e:	d001      	beq.n	8006e34 <__sflush_r+0xac>
 8006e30:	2b16      	cmp	r3, #22
 8006e32:	d11e      	bne.n	8006e72 <__sflush_r+0xea>
 8006e34:	602f      	str	r7, [r5, #0]
 8006e36:	2000      	movs	r0, #0
 8006e38:	e022      	b.n	8006e80 <__sflush_r+0xf8>
 8006e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3e:	b21b      	sxth	r3, r3
 8006e40:	e01b      	b.n	8006e7a <__sflush_r+0xf2>
 8006e42:	690f      	ldr	r7, [r1, #16]
 8006e44:	2f00      	cmp	r7, #0
 8006e46:	d0f6      	beq.n	8006e36 <__sflush_r+0xae>
 8006e48:	0793      	lsls	r3, r2, #30
 8006e4a:	680e      	ldr	r6, [r1, #0]
 8006e4c:	bf08      	it	eq
 8006e4e:	694b      	ldreq	r3, [r1, #20]
 8006e50:	600f      	str	r7, [r1, #0]
 8006e52:	bf18      	it	ne
 8006e54:	2300      	movne	r3, #0
 8006e56:	eba6 0807 	sub.w	r8, r6, r7
 8006e5a:	608b      	str	r3, [r1, #8]
 8006e5c:	f1b8 0f00 	cmp.w	r8, #0
 8006e60:	dde9      	ble.n	8006e36 <__sflush_r+0xae>
 8006e62:	6a21      	ldr	r1, [r4, #32]
 8006e64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e66:	4643      	mov	r3, r8
 8006e68:	463a      	mov	r2, r7
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b0      	blx	r6
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	dc08      	bgt.n	8006e84 <__sflush_r+0xfc>
 8006e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	4407      	add	r7, r0
 8006e86:	eba8 0800 	sub.w	r8, r8, r0
 8006e8a:	e7e7      	b.n	8006e5c <__sflush_r+0xd4>
 8006e8c:	dfbffffe 	.word	0xdfbffffe

08006e90 <_fflush_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	690b      	ldr	r3, [r1, #16]
 8006e94:	4605      	mov	r5, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	b913      	cbnz	r3, 8006ea0 <_fflush_r+0x10>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	b118      	cbz	r0, 8006eaa <_fflush_r+0x1a>
 8006ea2:	6a03      	ldr	r3, [r0, #32]
 8006ea4:	b90b      	cbnz	r3, 8006eaa <_fflush_r+0x1a>
 8006ea6:	f7fe fa53 	bl	8005350 <__sinit>
 8006eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f3      	beq.n	8006e9a <_fflush_r+0xa>
 8006eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006eb4:	07d0      	lsls	r0, r2, #31
 8006eb6:	d404      	bmi.n	8006ec2 <_fflush_r+0x32>
 8006eb8:	0599      	lsls	r1, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_fflush_r+0x32>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ebe:	f7fe fb50 	bl	8005562 <__retarget_lock_acquire_recursive>
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	f7ff ff5f 	bl	8006d88 <__sflush_r>
 8006eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ecc:	07da      	lsls	r2, r3, #31
 8006ece:	4605      	mov	r5, r0
 8006ed0:	d4e4      	bmi.n	8006e9c <_fflush_r+0xc>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	059b      	lsls	r3, r3, #22
 8006ed6:	d4e1      	bmi.n	8006e9c <_fflush_r+0xc>
 8006ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eda:	f7fe fb43 	bl	8005564 <__retarget_lock_release_recursive>
 8006ede:	e7dd      	b.n	8006e9c <_fflush_r+0xc>

08006ee0 <__swbuf_r>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	b118      	cbz	r0, 8006ef2 <__swbuf_r+0x12>
 8006eea:	6a03      	ldr	r3, [r0, #32]
 8006eec:	b90b      	cbnz	r3, 8006ef2 <__swbuf_r+0x12>
 8006eee:	f7fe fa2f 	bl	8005350 <__sinit>
 8006ef2:	69a3      	ldr	r3, [r4, #24]
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	071a      	lsls	r2, r3, #28
 8006efa:	d501      	bpl.n	8006f00 <__swbuf_r+0x20>
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	b943      	cbnz	r3, 8006f12 <__swbuf_r+0x32>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f82a 	bl	8006f5c <__swsetup_r>
 8006f08:	b118      	cbz	r0, 8006f12 <__swbuf_r+0x32>
 8006f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8006f0e:	4638      	mov	r0, r7
 8006f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	6922      	ldr	r2, [r4, #16]
 8006f16:	1a98      	subs	r0, r3, r2
 8006f18:	6963      	ldr	r3, [r4, #20]
 8006f1a:	b2f6      	uxtb	r6, r6
 8006f1c:	4283      	cmp	r3, r0
 8006f1e:	4637      	mov	r7, r6
 8006f20:	dc05      	bgt.n	8006f2e <__swbuf_r+0x4e>
 8006f22:	4621      	mov	r1, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f7ff ffb3 	bl	8006e90 <_fflush_r>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d1ed      	bne.n	8006f0a <__swbuf_r+0x2a>
 8006f2e:	68a3      	ldr	r3, [r4, #8]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	60a3      	str	r3, [r4, #8]
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	6022      	str	r2, [r4, #0]
 8006f3a:	701e      	strb	r6, [r3, #0]
 8006f3c:	6962      	ldr	r2, [r4, #20]
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d004      	beq.n	8006f4e <__swbuf_r+0x6e>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	07db      	lsls	r3, r3, #31
 8006f48:	d5e1      	bpl.n	8006f0e <__swbuf_r+0x2e>
 8006f4a:	2e0a      	cmp	r6, #10
 8006f4c:	d1df      	bne.n	8006f0e <__swbuf_r+0x2e>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7ff ff9d 	bl	8006e90 <_fflush_r>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d0d9      	beq.n	8006f0e <__swbuf_r+0x2e>
 8006f5a:	e7d6      	b.n	8006f0a <__swbuf_r+0x2a>

08006f5c <__swsetup_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4b29      	ldr	r3, [pc, #164]	@ (8007004 <__swsetup_r+0xa8>)
 8006f60:	4605      	mov	r5, r0
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	460c      	mov	r4, r1
 8006f66:	b118      	cbz	r0, 8006f70 <__swsetup_r+0x14>
 8006f68:	6a03      	ldr	r3, [r0, #32]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <__swsetup_r+0x14>
 8006f6c:	f7fe f9f0 	bl	8005350 <__sinit>
 8006f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f74:	0719      	lsls	r1, r3, #28
 8006f76:	d422      	bmi.n	8006fbe <__swsetup_r+0x62>
 8006f78:	06da      	lsls	r2, r3, #27
 8006f7a:	d407      	bmi.n	8006f8c <__swsetup_r+0x30>
 8006f7c:	2209      	movs	r2, #9
 8006f7e:	602a      	str	r2, [r5, #0]
 8006f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	e033      	b.n	8006ff4 <__swsetup_r+0x98>
 8006f8c:	0758      	lsls	r0, r3, #29
 8006f8e:	d512      	bpl.n	8006fb6 <__swsetup_r+0x5a>
 8006f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f92:	b141      	cbz	r1, 8006fa6 <__swsetup_r+0x4a>
 8006f94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	d002      	beq.n	8006fa2 <__swsetup_r+0x46>
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f7ff f92f 	bl	8006200 <_free_r>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f043 0308 	orr.w	r3, r3, #8
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	b94b      	cbnz	r3, 8006fd6 <__swsetup_r+0x7a>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fcc:	d003      	beq.n	8006fd6 <__swsetup_r+0x7a>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f000 f8c1 	bl	8007158 <__smakebuf_r>
 8006fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fda:	f013 0201 	ands.w	r2, r3, #1
 8006fde:	d00a      	beq.n	8006ff6 <__swsetup_r+0x9a>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	60a2      	str	r2, [r4, #8]
 8006fe4:	6962      	ldr	r2, [r4, #20]
 8006fe6:	4252      	negs	r2, r2
 8006fe8:	61a2      	str	r2, [r4, #24]
 8006fea:	6922      	ldr	r2, [r4, #16]
 8006fec:	b942      	cbnz	r2, 8007000 <__swsetup_r+0xa4>
 8006fee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ff2:	d1c5      	bne.n	8006f80 <__swsetup_r+0x24>
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	0799      	lsls	r1, r3, #30
 8006ff8:	bf58      	it	pl
 8006ffa:	6962      	ldrpl	r2, [r4, #20]
 8006ffc:	60a2      	str	r2, [r4, #8]
 8006ffe:	e7f4      	b.n	8006fea <__swsetup_r+0x8e>
 8007000:	2000      	movs	r0, #0
 8007002:	e7f7      	b.n	8006ff4 <__swsetup_r+0x98>
 8007004:	20004024 	.word	0x20004024

08007008 <_sbrk_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	@ (8007024 <_sbrk_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fa f9d0 	bl	80013b8 <_sbrk>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_sbrk_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_sbrk_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	200053d0 	.word	0x200053d0

08007028 <memcpy>:
 8007028:	440a      	add	r2, r1
 800702a:	4291      	cmp	r1, r2
 800702c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007030:	d100      	bne.n	8007034 <memcpy+0xc>
 8007032:	4770      	bx	lr
 8007034:	b510      	push	{r4, lr}
 8007036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800703e:	4291      	cmp	r1, r2
 8007040:	d1f9      	bne.n	8007036 <memcpy+0xe>
 8007042:	bd10      	pop	{r4, pc}

08007044 <__assert_func>:
 8007044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007046:	4614      	mov	r4, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <__assert_func+0x2c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4605      	mov	r5, r0
 8007050:	68d8      	ldr	r0, [r3, #12]
 8007052:	b954      	cbnz	r4, 800706a <__assert_func+0x26>
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <__assert_func+0x30>)
 8007056:	461c      	mov	r4, r3
 8007058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800705c:	9100      	str	r1, [sp, #0]
 800705e:	462b      	mov	r3, r5
 8007060:	4905      	ldr	r1, [pc, #20]	@ (8007078 <__assert_func+0x34>)
 8007062:	f000 f841 	bl	80070e8 <fiprintf>
 8007066:	f000 f8d5 	bl	8007214 <abort>
 800706a:	4b04      	ldr	r3, [pc, #16]	@ (800707c <__assert_func+0x38>)
 800706c:	e7f4      	b.n	8007058 <__assert_func+0x14>
 800706e:	bf00      	nop
 8007070:	20004024 	.word	0x20004024
 8007074:	0800a3e6 	.word	0x0800a3e6
 8007078:	0800a3b8 	.word	0x0800a3b8
 800707c:	0800a3ab 	.word	0x0800a3ab

08007080 <_calloc_r>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	fba1 5402 	umull	r5, r4, r1, r2
 8007086:	b93c      	cbnz	r4, 8007098 <_calloc_r+0x18>
 8007088:	4629      	mov	r1, r5
 800708a:	f7ff f92d 	bl	80062e8 <_malloc_r>
 800708e:	4606      	mov	r6, r0
 8007090:	b928      	cbnz	r0, 800709e <_calloc_r+0x1e>
 8007092:	2600      	movs	r6, #0
 8007094:	4630      	mov	r0, r6
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	220c      	movs	r2, #12
 800709a:	6002      	str	r2, [r0, #0]
 800709c:	e7f9      	b.n	8007092 <_calloc_r+0x12>
 800709e:	462a      	mov	r2, r5
 80070a0:	4621      	mov	r1, r4
 80070a2:	f7fe f9e0 	bl	8005466 <memset>
 80070a6:	e7f5      	b.n	8007094 <_calloc_r+0x14>

080070a8 <__ascii_mbtowc>:
 80070a8:	b082      	sub	sp, #8
 80070aa:	b901      	cbnz	r1, 80070ae <__ascii_mbtowc+0x6>
 80070ac:	a901      	add	r1, sp, #4
 80070ae:	b142      	cbz	r2, 80070c2 <__ascii_mbtowc+0x1a>
 80070b0:	b14b      	cbz	r3, 80070c6 <__ascii_mbtowc+0x1e>
 80070b2:	7813      	ldrb	r3, [r2, #0]
 80070b4:	600b      	str	r3, [r1, #0]
 80070b6:	7812      	ldrb	r2, [r2, #0]
 80070b8:	1e10      	subs	r0, r2, #0
 80070ba:	bf18      	it	ne
 80070bc:	2001      	movne	r0, #1
 80070be:	b002      	add	sp, #8
 80070c0:	4770      	bx	lr
 80070c2:	4610      	mov	r0, r2
 80070c4:	e7fb      	b.n	80070be <__ascii_mbtowc+0x16>
 80070c6:	f06f 0001 	mvn.w	r0, #1
 80070ca:	e7f8      	b.n	80070be <__ascii_mbtowc+0x16>

080070cc <__ascii_wctomb>:
 80070cc:	4603      	mov	r3, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	b141      	cbz	r1, 80070e4 <__ascii_wctomb+0x18>
 80070d2:	2aff      	cmp	r2, #255	@ 0xff
 80070d4:	d904      	bls.n	80070e0 <__ascii_wctomb+0x14>
 80070d6:	228a      	movs	r2, #138	@ 0x8a
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	4770      	bx	lr
 80070e0:	700a      	strb	r2, [r1, #0]
 80070e2:	2001      	movs	r0, #1
 80070e4:	4770      	bx	lr
	...

080070e8 <fiprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b503      	push	{r0, r1, lr}
 80070ec:	4601      	mov	r1, r0
 80070ee:	ab03      	add	r3, sp, #12
 80070f0:	4805      	ldr	r0, [pc, #20]	@ (8007108 <fiprintf+0x20>)
 80070f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	f7ff fd2d 	bl	8006b58 <_vfiprintf_r>
 80070fe:	b002      	add	sp, #8
 8007100:	f85d eb04 	ldr.w	lr, [sp], #4
 8007104:	b003      	add	sp, #12
 8007106:	4770      	bx	lr
 8007108:	20004024 	.word	0x20004024

0800710c <__swhatbuf_r>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	460c      	mov	r4, r1
 8007110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007114:	2900      	cmp	r1, #0
 8007116:	b096      	sub	sp, #88	@ 0x58
 8007118:	4615      	mov	r5, r2
 800711a:	461e      	mov	r6, r3
 800711c:	da0d      	bge.n	800713a <__swhatbuf_r+0x2e>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007124:	f04f 0100 	mov.w	r1, #0
 8007128:	bf14      	ite	ne
 800712a:	2340      	movne	r3, #64	@ 0x40
 800712c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007130:	2000      	movs	r0, #0
 8007132:	6031      	str	r1, [r6, #0]
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	b016      	add	sp, #88	@ 0x58
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	466a      	mov	r2, sp
 800713c:	f000 f848 	bl	80071d0 <_fstat_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	dbec      	blt.n	800711e <__swhatbuf_r+0x12>
 8007144:	9901      	ldr	r1, [sp, #4]
 8007146:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800714a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800714e:	4259      	negs	r1, r3
 8007150:	4159      	adcs	r1, r3
 8007152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007156:	e7eb      	b.n	8007130 <__swhatbuf_r+0x24>

08007158 <__smakebuf_r>:
 8007158:	898b      	ldrh	r3, [r1, #12]
 800715a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800715c:	079d      	lsls	r5, r3, #30
 800715e:	4606      	mov	r6, r0
 8007160:	460c      	mov	r4, r1
 8007162:	d507      	bpl.n	8007174 <__smakebuf_r+0x1c>
 8007164:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	6123      	str	r3, [r4, #16]
 800716c:	2301      	movs	r3, #1
 800716e:	6163      	str	r3, [r4, #20]
 8007170:	b003      	add	sp, #12
 8007172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007174:	ab01      	add	r3, sp, #4
 8007176:	466a      	mov	r2, sp
 8007178:	f7ff ffc8 	bl	800710c <__swhatbuf_r>
 800717c:	9f00      	ldr	r7, [sp, #0]
 800717e:	4605      	mov	r5, r0
 8007180:	4639      	mov	r1, r7
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff f8b0 	bl	80062e8 <_malloc_r>
 8007188:	b948      	cbnz	r0, 800719e <__smakebuf_r+0x46>
 800718a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718e:	059a      	lsls	r2, r3, #22
 8007190:	d4ee      	bmi.n	8007170 <__smakebuf_r+0x18>
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	f043 0302 	orr.w	r3, r3, #2
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	e7e2      	b.n	8007164 <__smakebuf_r+0xc>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	6020      	str	r0, [r4, #0]
 80071a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071ae:	b15b      	cbz	r3, 80071c8 <__smakebuf_r+0x70>
 80071b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 f81d 	bl	80071f4 <_isatty_r>
 80071ba:	b128      	cbz	r0, 80071c8 <__smakebuf_r+0x70>
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	431d      	orrs	r5, r3
 80071cc:	81a5      	strh	r5, [r4, #12]
 80071ce:	e7cf      	b.n	8007170 <__smakebuf_r+0x18>

080071d0 <_fstat_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	@ (80071f0 <_fstat_r+0x20>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	602b      	str	r3, [r5, #0]
 80071de:	f7fa f8c2 	bl	8001366 <_fstat>
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d102      	bne.n	80071ec <_fstat_r+0x1c>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	b103      	cbz	r3, 80071ec <_fstat_r+0x1c>
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	200053d0 	.word	0x200053d0

080071f4 <_isatty_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d06      	ldr	r5, [pc, #24]	@ (8007210 <_isatty_r+0x1c>)
 80071f8:	2300      	movs	r3, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	f7fa f8c1 	bl	8001386 <_isatty>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_isatty_r+0x1a>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_isatty_r+0x1a>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	200053d0 	.word	0x200053d0

08007214 <abort>:
 8007214:	b508      	push	{r3, lr}
 8007216:	2006      	movs	r0, #6
 8007218:	f000 f82c 	bl	8007274 <raise>
 800721c:	2001      	movs	r0, #1
 800721e:	f7fa f86e 	bl	80012fe <_exit>

08007222 <_raise_r>:
 8007222:	291f      	cmp	r1, #31
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4605      	mov	r5, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d904      	bls.n	8007236 <_raise_r+0x14>
 800722c:	2316      	movs	r3, #22
 800722e:	6003      	str	r3, [r0, #0]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	bd38      	pop	{r3, r4, r5, pc}
 8007236:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007238:	b112      	cbz	r2, 8007240 <_raise_r+0x1e>
 800723a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800723e:	b94b      	cbnz	r3, 8007254 <_raise_r+0x32>
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f831 	bl	80072a8 <_getpid_r>
 8007246:	4622      	mov	r2, r4
 8007248:	4601      	mov	r1, r0
 800724a:	4628      	mov	r0, r5
 800724c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007250:	f000 b818 	b.w	8007284 <_kill_r>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d00a      	beq.n	800726e <_raise_r+0x4c>
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	d103      	bne.n	8007264 <_raise_r+0x42>
 800725c:	2316      	movs	r3, #22
 800725e:	6003      	str	r3, [r0, #0]
 8007260:	2001      	movs	r0, #1
 8007262:	e7e7      	b.n	8007234 <_raise_r+0x12>
 8007264:	2100      	movs	r1, #0
 8007266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800726a:	4620      	mov	r0, r4
 800726c:	4798      	blx	r3
 800726e:	2000      	movs	r0, #0
 8007270:	e7e0      	b.n	8007234 <_raise_r+0x12>
	...

08007274 <raise>:
 8007274:	4b02      	ldr	r3, [pc, #8]	@ (8007280 <raise+0xc>)
 8007276:	4601      	mov	r1, r0
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f7ff bfd2 	b.w	8007222 <_raise_r>
 800727e:	bf00      	nop
 8007280:	20004024 	.word	0x20004024

08007284 <_kill_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4d07      	ldr	r5, [pc, #28]	@ (80072a4 <_kill_r+0x20>)
 8007288:	2300      	movs	r3, #0
 800728a:	4604      	mov	r4, r0
 800728c:	4608      	mov	r0, r1
 800728e:	4611      	mov	r1, r2
 8007290:	602b      	str	r3, [r5, #0]
 8007292:	f7fa f824 	bl	80012de <_kill>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d102      	bne.n	80072a0 <_kill_r+0x1c>
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	b103      	cbz	r3, 80072a0 <_kill_r+0x1c>
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	bd38      	pop	{r3, r4, r5, pc}
 80072a2:	bf00      	nop
 80072a4:	200053d0 	.word	0x200053d0

080072a8 <_getpid_r>:
 80072a8:	f7fa b811 	b.w	80012ce <_getpid>

080072ac <sqrtf>:
 80072ac:	b508      	push	{r3, lr}
 80072ae:	ed2d 8b02 	vpush	{d8}
 80072b2:	eeb0 8a40 	vmov.f32	s16, s0
 80072b6:	f000 f817 	bl	80072e8 <__ieee754_sqrtf>
 80072ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	d60c      	bvs.n	80072de <sqrtf+0x32>
 80072c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80072e4 <sqrtf+0x38>
 80072c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80072cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d0:	d505      	bpl.n	80072de <sqrtf+0x32>
 80072d2:	f7fe f91b 	bl	800550c <__errno>
 80072d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80072da:	2321      	movs	r3, #33	@ 0x21
 80072dc:	6003      	str	r3, [r0, #0]
 80072de:	ecbd 8b02 	vpop	{d8}
 80072e2:	bd08      	pop	{r3, pc}
 80072e4:	00000000 	.word	0x00000000

080072e8 <__ieee754_sqrtf>:
 80072e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80072ec:	4770      	bx	lr
	...

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
