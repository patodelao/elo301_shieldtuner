
ELO301 FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031f0  08009c60  08009c60  0000ac60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce50  0800ce50  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce50  0800ce50  0000de50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce58  0800ce58  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce58  0800ce58  0000de58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce5c  0800ce5c  0000de5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000021dc  20000000  0800ce60  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002364  200021dc  0800f03c  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004540  0800f03c  00010540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba01  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003582  00000000  00000000  0002bc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0002f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c74  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eb7  00000000  00000000  00030f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014958  00000000  00000000  00055de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e57a4  00000000  00000000  0006a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0014fedf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b0  00000000  00000000  0014ff98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00155748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002baf  00000000  00000000  001557cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  0015837e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021dc 	.word	0x200021dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c48 	.word	0x08009c48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021e0 	.word	0x200021e0
 80001dc:	08009c48 	.word	0x08009c48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint16_t sample_counter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	81fb      	strh	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 feaf 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f8dd 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 fa47 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f000 fa27 	bl	8001310 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f9f5 	bl	80012b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f927 	bl	8001118 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000eca:	f000 f98d 	bl	80011e8 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  arm_status status;
  float32_t maxValue;
if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t *)dfsdm_buffer, TEST_LENGTH_SAMPLES/2) != HAL_OK){
 8000ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed2:	4958      	ldr	r1, [pc, #352]	@ (8001034 <main+0x18c>)
 8000ed4:	4858      	ldr	r0, [pc, #352]	@ (8001038 <main+0x190>)
 8000ed6:	f002 fb53 	bl	8003580 <HAL_DFSDM_FilterRegularStart_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <main+0x3c>
  Error_Handler();
 8000ee0:	f000 fb0e 	bl	8001500 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  //HAL_ADC_Start_IT( &hadc1 );

  while (1)
  {
	  if (mic_status == 1) {
 8000ee4:	4b55      	ldr	r3, [pc, #340]	@ (800103c <main+0x194>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d15c      	bne.n	8000fa6 <main+0xfe>
	  			  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*)dfsdm_buffer, TEST_LENGTH_SAMPLES/2);
 8000eec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef0:	4950      	ldr	r1, [pc, #320]	@ (8001034 <main+0x18c>)
 8000ef2:	4851      	ldr	r0, [pc, #324]	@ (8001038 <main+0x190>)
 8000ef4:	f002 fb44 	bl	8003580 <HAL_DFSDM_FilterRegularStart_DMA>

	  			/* Fill testInput_f32_10khz buffer with dfsdm_buffer */
	  			for (int i = 0; i < (TEST_LENGTH_SAMPLES/2); i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	e020      	b.n	8000f40 <main+0x98>
	  				mic_value = dfsdm_buffer[i];
 8000efe:	4a4d      	ldr	r2, [pc, #308]	@ (8001034 <main+0x18c>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <main+0x198>)
 8000f10:	edc3 7a00 	vstr	s15, [r3]
	  				testInput_f32_10khz[sample_counter++] = (float32_t) mic_value;
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	81fa      	strh	r2, [r7, #14]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4b48      	ldr	r3, [pc, #288]	@ (8001040 <main+0x198>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4948      	ldr	r1, [pc, #288]	@ (8001044 <main+0x19c>)
 8000f22:	0083      	lsls	r3, r0, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	601a      	str	r2, [r3, #0]
	  				testInput_f32_10khz[sample_counter++] = 0;
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	81fa      	strh	r2, [r7, #14]
 8000f2e:	4a45      	ldr	r2, [pc, #276]	@ (8001044 <main+0x19c>)
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	  			for (int i = 0; i < (TEST_LENGTH_SAMPLES/2); i++) {
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f46:	dbda      	blt.n	8000efe <main+0x56>
	  			}


	      mic_status = 0;
 8000f48:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <main+0x194>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	      if(sample_counter >= TEST_LENGTH_SAMPLES){
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f54:	d327      	bcc.n	8000fa6 <main+0xfe>
	      	/* Process the data through the CFFT/CIFFT module */
	      	  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8000f56:	4b3c      	ldr	r3, [pc, #240]	@ (8001048 <main+0x1a0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <main+0x1a4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4938      	ldr	r1, [pc, #224]	@ (8001044 <main+0x19c>)
 8000f64:	483a      	ldr	r0, [pc, #232]	@ (8001050 <main+0x1a8>)
 8000f66:	f005 fd3f 	bl	80069e8 <arm_cfft_f32>

	      	  /* Process the data through the Complex Magnitude Module for
	      	  calculating the magnitude at each bin */
	      	  arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001054 <main+0x1ac>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4939      	ldr	r1, [pc, #228]	@ (8001058 <main+0x1b0>)
 8000f72:	4834      	ldr	r0, [pc, #208]	@ (8001044 <main+0x19c>)
 8000f74:	f005 fdd0 	bl	8006b18 <arm_cmplx_mag_f32>

	      	  /* Calculates maxValue and returns corresponding BIN value */
	      	  arm_max_f32(testOutput+1, (fftSize/2)-1, &maxValue, &testIndex);
 8000f78:	4838      	ldr	r0, [pc, #224]	@ (800105c <main+0x1b4>)
 8000f7a:	4b36      	ldr	r3, [pc, #216]	@ (8001054 <main+0x1ac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	085b      	lsrs	r3, r3, #1
 8000f80:	1e59      	subs	r1, r3, #1
 8000f82:	1d3a      	adds	r2, r7, #4
 8000f84:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <main+0x1b8>)
 8000f86:	f005 f99d 	bl	80062c4 <arm_max_f32>
	      	  sample_counter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	81fb      	strh	r3, [r7, #14]
	      	  printf("Frecuencia %lu Hz  \r\n",  (1000*(testIndex+1))/1024);
 8000f8e:	4b34      	ldr	r3, [pc, #208]	@ (8001060 <main+0x1b8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	0a9b      	lsrs	r3, r3, #10
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4830      	ldr	r0, [pc, #192]	@ (8001064 <main+0x1bc>)
 8000fa2:	f006 feb7 	bl	8007d14 <iprintf>
	      }

    }

	  if (adc_status == 1)
 8000fa6:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <main+0x1c0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <main+0x114>
	      {
	        /* Start filling testInput_f32_10khz buffer up to sample_counter is full */
	        adc_value = HAL_ADC_GetValue( &hadc1 );}
 8000fae:	482f      	ldr	r0, [pc, #188]	@ (800106c <main+0x1c4>)
 8000fb0:	f001 f9dc 	bl	800236c <HAL_ADC_GetValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <main+0x1c8>)
 8000fba:	801a      	strh	r2, [r3, #0]

#if 1
      testInput_f32_10khz[sample_counter++] = (float32_t)mic_value;//adc_value;
 8000fbc:	89fb      	ldrh	r3, [r7, #14]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	81fa      	strh	r2, [r7, #14]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <main+0x198>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	491e      	ldr	r1, [pc, #120]	@ (8001044 <main+0x19c>)
 8000fca:	0083      	lsls	r3, r0, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	601a      	str	r2, [r3, #0]
      testInput_f32_10khz[sample_counter++] = 0;
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	81fa      	strh	r2, [r7, #14]
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <main+0x19c>)
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
#else
      sample_counter+=2;
#endif
      adc_status = 0;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <main+0x1c0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
      /* Check if the input buffer is full */
      if (sample_counter >= TEST_LENGTH_SAMPLES)
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000fee:	f4ff af79 	bcc.w	8000ee4 <main+0x3c>
      {
        /* Process the data through the CFFT/CIFFT module */
        arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <main+0x1a0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <main+0x1a4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4911      	ldr	r1, [pc, #68]	@ (8001044 <main+0x19c>)
 8001000:	4813      	ldr	r0, [pc, #76]	@ (8001050 <main+0x1a8>)
 8001002:	f005 fcf1 	bl	80069e8 <arm_cfft_f32>

        /* Process the data through the Complex Magnitude Module for
        calculating the magnitude at each bin */
        arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <main+0x1ac>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4912      	ldr	r1, [pc, #72]	@ (8001058 <main+0x1b0>)
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <main+0x19c>)
 8001010:	f005 fd82 	bl	8006b18 <arm_cmplx_mag_f32>

        /* Calculates maxValue and returns corresponding BIN value */
        arm_max_f32(testOutput+1, fftSize-1, &maxValue, &testIndex);
 8001014:	4811      	ldr	r0, [pc, #68]	@ (800105c <main+0x1b4>)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <main+0x1ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1e59      	subs	r1, r3, #1
 800101c:	1d3a      	adds	r2, r7, #4
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <main+0x1b8>)
 8001020:	f005 f950 	bl	80062c4 <arm_max_f32>

        /* Reset the sample counter */
        sample_counter = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	81fb      	strh	r3, [r7, #14]
            	//HAL_GPIO_WritePin(LED_GPIO_PORT, LED_LOW_FREQ_PIN, GPIO_PIN_SET);
                printf("\r\n Frecuencia dentro de la tolerancia\n\r");
                printf("\r\nFrecuencia fundamental: %.2f Hz, f_ref: %i  \n\n", fundamental_freq, testOutput[testIndex]);
            }*/

           HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102c:	f000 fe6e 	bl	8001d0c <HAL_Delay>
	  if (mic_status == 1) {
 8001030:	e758      	b.n	8000ee4 <main+0x3c>
 8001032:	bf00      	nop
 8001034:	200033bc 	.word	0x200033bc
 8001038:	20002260 	.word	0x20002260
 800103c:	200043c4 	.word	0x200043c4
 8001040:	200043c8 	.word	0x200043c8
 8001044:	20000000 	.word	0x20000000
 8001048:	200043bc 	.word	0x200043bc
 800104c:	20002004 	.word	0x20002004
 8001050:	08009cc0 	.word	0x08009cc0
 8001054:	20002000 	.word	0x20002000
 8001058:	200023bc 	.word	0x200023bc
 800105c:	200023c0 	.word	0x200023c0
 8001060:	200043cc 	.word	0x200043cc
 8001064:	08009c60 	.word	0x08009c60
 8001068:	200043c0 	.word	0x200043c0
 800106c:	200021f8 	.word	0x200021f8
 8001070:	200043c2 	.word	0x200043c2

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b096      	sub	sp, #88	@ 0x58
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2244      	movs	r2, #68	@ 0x44
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fe9b 	bl	8007dbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001096:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800109a:	f003 f9ad 	bl	80043f8 <HAL_PWREx_ControlVoltageScaling>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a4:	f000 fa2c 	bl	8001500 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80010b2:	2340      	movs	r3, #64	@ 0x40
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010c2:	230a      	movs	r3, #10
 80010c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f9e4 	bl	80044a4 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010e2:	f000 fa0d 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	2104      	movs	r1, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fde4 	bl	8004ccc <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800110a:	f000 f9f9 	bl	8001500 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3758      	adds	r7, #88	@ 0x58
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800112e:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <MX_ADC1_Init+0xc8>)
 8001132:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001134:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001136:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 800113a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <MX_ADC1_Init+0xc4>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_ADC1_Init+0xc4>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001150:	2204      	movs	r2, #4
 8001152:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001156:	2200      	movs	r2, #0
 8001158:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <MX_ADC1_Init+0xc4>)
 800115c:	2201      	movs	r2, #1
 800115e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116e:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_ADC1_Init+0xc4>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_ADC1_Init+0xc4>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_DISABLE;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001192:	2200      	movs	r2, #0
 8001194:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001196:	4811      	ldr	r0, [pc, #68]	@ (80011dc <MX_ADC1_Init+0xc4>)
 8001198:	f000 ffa2 	bl	80020e0 <HAL_ADC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011a2:	f000 f9ad 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_ADC1_Init+0xcc>)
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011aa:	2306      	movs	r3, #6
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011ae:	2302      	movs	r3, #2
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b2:	237f      	movs	r3, #127	@ 0x7f
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b6:	2304      	movs	r3, #4
 80011b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_ADC1_Init+0xc4>)
 80011c4:	f001 faa8 	bl	8002718 <HAL_ADC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80011ce:	f000 f997 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200021f8 	.word	0x200021f8
 80011e0:	50040000 	.word	0x50040000
 80011e4:	04300002 	.word	0x04300002

080011e8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80011ec:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 80011ee:	4a2d      	ldr	r2, [pc, #180]	@ (80012a4 <MX_DFSDM1_Init+0xbc>)
 80011f0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 8001200:	2201      	movs	r2, #1
 8001202:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 500;
 800120a:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 800120c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001210:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 8001214:	2201      	movs	r2, #1
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001218:	4821      	ldr	r0, [pc, #132]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 800121a:	f002 f891 	bl	8003340 <HAL_DFSDM_FilterInit>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001224:	f000 f96c 	bl	8001500 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 800122a:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <MX_DFSDM1_Init+0xc4>)
 800122c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001230:	2201      	movs	r2, #1
 8001232:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 40;
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 800123c:	2228      	movs	r2, #40	@ 0x28
 800123e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 800124e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001252:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 800125c:	2204      	movs	r2, #4
 800125e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001268:	2201      	movs	r2, #1
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001278:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <MX_DFSDM1_Init+0xc0>)
 800127a:	f001 ff8d 	bl	8003198 <HAL_DFSDM_ChannelInit>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8001284:	f000 f93c 	bl	8001500 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001288:	2201      	movs	r2, #1
 800128a:	2101      	movs	r1, #1
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_DFSDM1_Init+0xb8>)
 800128e:	f002 f931 	bl	80034f4 <HAL_DFSDM_FilterConfigRegChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8001298:	f000 f932 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20002260 	.word	0x20002260
 80012a4:	40016100 	.word	0x40016100
 80012a8:	200022b4 	.word	0x200022b4
 80012ac:	40016000 	.word	0x40016000

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	@ (800130c <MX_USART2_UART_Init+0x5c>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_USART2_UART_Init+0x58>)
 80012f4:	f004 fa6c 	bl	80057d0 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8ff 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20002334 	.word	0x20002334
 800130c:	40004400 	.word	0x40004400

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_DMA_Init+0x38>)
 8001318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131a:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <MX_DMA_Init+0x38>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6493      	str	r3, [r2, #72]	@ 0x48
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_DMA_Init+0x38>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	200e      	movs	r0, #14
 8001334:	f001 fef9 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001338:	200e      	movs	r0, #14
 800133a:	f001 ff12 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a3f      	ldr	r2, [pc, #252]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <MX_GPIO_Init+0x118>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a39      	ldr	r2, [pc, #228]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a33      	ldr	r2, [pc, #204]	@ (8001464 <MX_GPIO_Init+0x118>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b31      	ldr	r3, [pc, #196]	@ (8001464 <MX_GPIO_Init+0x118>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <MX_GPIO_Init+0x118>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001464 <MX_GPIO_Init+0x118>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <MX_GPIO_Init+0x118>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_GPIO_Port, TP_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2102      	movs	r1, #2
 80013c6:	4828      	ldr	r0, [pc, #160]	@ (8001468 <MX_GPIO_Init+0x11c>)
 80013c8:	f002 ffd6 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|LED1_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d6:	f002 ffcf 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e0:	4822      	ldr	r0, [pc, #136]	@ (800146c <MX_GPIO_Init+0x120>)
 80013e2:	f002 ffc9 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	481a      	ldr	r0, [pc, #104]	@ (8001468 <MX_GPIO_Init+0x11c>)
 80013fe:	f002 fe41 	bl	8004084 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_Pin */
  GPIO_InitStruct.Pin = TP_Pin;
 8001402:	2302      	movs	r3, #2
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4813      	ldr	r0, [pc, #76]	@ (8001468 <MX_GPIO_Init+0x11c>)
 800141a:	f002 fe33 	bl	8004084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LED1_Pin;
 800141e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f002 fe23 	bl	8004084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_GPIO_Init+0x120>)
 8001458:	f002 fe14 	bl	8004084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	48000800 	.word	0x48000800
 800146c:	48000400 	.word	0x48000400

08001470 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  adc_status =1;
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <HAL_ADC_ConvCpltCallback+0x1c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(TP_GPIO_Port, TP_Pin);
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200043c0 	.word	0x200043c0

08001490 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterInjectedStop_DMA(hdfsdm_filter);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f002 f912 	bl	80036c2 <HAL_DFSDM_FilterInjectedStop_DMA>
  mic_status =1;
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(TP_GPIO_Port, TP_Pin);
 80014a4:	2102      	movs	r1, #2
 80014a6:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 80014a8:	f002 ff7e 	bl	80043a8 <HAL_GPIO_TogglePin>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200043c4 	.word	0x200043c4
 80014b8:	48000800 	.word	0x48000800

080014bc <HAL_DFSDM_FilterErrorCallback>:
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0,0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <HAL_DFSDM_FilterErrorCallback+0x18>)
 80014c8:	f002 f8dc 	bl	8003684 <HAL_DFSDM_FilterGetRegularValue>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20002260 	.word	0x20002260

080014d8 <_write>:



/* Add _write function to print over the uart */
int _write( int file, char *ptr, int len )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( &huart2, (uint8_t*) ptr, len, 50 );
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	2332      	movs	r3, #50	@ 0x32
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <_write+0x24>)
 80014ee:	f004 f9bd 	bl	800586c <HAL_UART_Transmit>
  return len;
 80014f2:	687b      	ldr	r3, [r7, #4]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20002334 	.word	0x20002334

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_MspInit+0x44>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <HAL_MspInit+0x44>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	@ 0x60
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <HAL_MspInit+0x44>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_MspInit+0x44>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <HAL_MspInit+0x44>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	@ 0x58
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_MspInit+0x44>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0a4      	sub	sp, #144	@ 0x90
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2268      	movs	r2, #104	@ 0x68
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f006 fc22 	bl	8007dbe <memset>
  if(hadc->Instance==ADC1)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2a      	ldr	r2, [pc, #168]	@ (8001628 <HAL_ADC_MspInit+0xd4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d14c      	bne.n	800161e <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001584:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001588:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800158a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800158e:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001594:	2301      	movs	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800159c:	2307      	movs	r3, #7
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80015a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ac:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fdae 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80015be:	f7ff ff9f 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_ADC_MspInit+0xd8>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a19      	ldr	r2, [pc, #100]	@ (800162c <HAL_ADC_MspInit+0xd8>)
 80015c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_ADC_MspInit+0xd8>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_ADC_MspInit+0xd8>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4a13      	ldr	r2, [pc, #76]	@ (800162c <HAL_ADC_MspInit+0xd8>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_ADC_MspInit+0xd8>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f2:	2301      	movs	r3, #1
 80015f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f6:	230b      	movs	r3, #11
 80015f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001606:	4619      	mov	r1, r3
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <HAL_ADC_MspInit+0xdc>)
 800160a:	f002 fd3b 	bl	8004084 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2012      	movs	r0, #18
 8001614:	f001 fd89 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001618:	2012      	movs	r0, #18
 800161a:	f001 fda2 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3790      	adds	r7, #144	@ 0x90
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	50040000 	.word	0x50040000
 800162c:	40021000 	.word	0x40021000
 8001630:	48000800 	.word	0x48000800

08001634 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0a4      	sub	sp, #144	@ 0x90
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2268      	movs	r2, #104	@ 0x68
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f006 fbb2 	bl	8007dbe <memset>
  if(DFSDM1_Init == 0)
 800165a:	4b58      	ldr	r3, [pc, #352]	@ (80017bc <HAL_DFSDM_FilterMspInit+0x188>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d172      	bne.n	8001748 <HAL_DFSDM_FilterMspInit+0x114>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001662:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001668:	2300      	movs	r3, #0
 800166a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fd4f 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_DFSDM_FilterMspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff ff40 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001680:	4b4f      	ldr	r3, [pc, #316]	@ (80017c0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a4e      	ldr	r2, [pc, #312]	@ (80017c0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001688:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800168a:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <HAL_DFSDM_FilterMspInit+0x18c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10b      	bne.n	80016aa <HAL_DFSDM_FilterMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001692:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	4a4b      	ldr	r2, [pc, #300]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 8001698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800169c:	6613      	str	r3, [r2, #96]	@ 0x60
 800169e:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b40      	ldr	r3, [pc, #256]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a3f      	ldr	r2, [pc, #252]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_DFSDM_FilterMspInit+0x190>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PA9     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016da:	2304      	movs	r3, #4
 80016dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016f0:	2306      	movs	r3, #6
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4832      	ldr	r0, [pc, #200]	@ (80017c8 <HAL_DFSDM_FilterMspInit+0x194>)
 80016fe:	f002 fcc1 	bl	8004084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001706:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800171a:	2306      	movs	r3, #6
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172a:	f002 fcab 	bl	8004084 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	203d      	movs	r0, #61	@ 0x3d
 8001734:	f001 fcf9 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8001738:	203d      	movs	r0, #61	@ 0x3d
 800173a:	f001 fd12 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <HAL_DFSDM_FilterMspInit+0x188>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_DFSDM_FilterMspInit+0x188>)
 8001746:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1f      	ldr	r2, [pc, #124]	@ (80017cc <HAL_DFSDM_FilterMspInit+0x198>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d130      	bne.n	80017b4 <HAL_DFSDM_FilterMspInit+0x180>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 8001754:	4a1f      	ldr	r2, [pc, #124]	@ (80017d4 <HAL_DFSDM_FilterMspInit+0x1a0>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 8001772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001776:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 800177a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800177e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800178c:	4810      	ldr	r0, [pc, #64]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 800178e:	f002 fa43 	bl	8003c18 <HAL_DMA_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_DFSDM_FilterMspInit+0x168>
    {
      Error_Handler();
 8001798:	f7ff feb2 	bl	8001500 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a09      	ldr	r2, [pc, #36]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ae:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <HAL_DFSDM_FilterMspInit+0x19c>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 80017b4:	bf00      	nop
 80017b6:	3790      	adds	r7, #144	@ 0x90
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200043d4 	.word	0x200043d4
 80017c0:	200043d0 	.word	0x200043d0
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000800 	.word	0x48000800
 80017cc:	40016100 	.word	0x40016100
 80017d0:	200022ec 	.word	0x200022ec
 80017d4:	40020044 	.word	0x40020044

080017d8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0a4      	sub	sp, #144	@ 0x90
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2268      	movs	r2, #104	@ 0x68
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 fae0 	bl	8007dbe <memset>
  if(DFSDM1_Init == 0)
 80017fe:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d16a      	bne.n	80018dc <HAL_DFSDM_ChannelMspInit+0x104>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001806:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800180a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800180c:	2300      	movs	r3, #0
 800180e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fc7d 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_DFSDM_ChannelMspInit+0x4c>
    {
      Error_Handler();
 8001820:	f7ff fe6e 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001824:	4b30      	ldr	r3, [pc, #192]	@ (80018e8 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a2f      	ldr	r2, [pc, #188]	@ (80018e8 <HAL_DFSDM_ChannelMspInit+0x110>)
 800182c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800182e:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10b      	bne.n	800184e <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a2c      	ldr	r2, [pc, #176]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 800183c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a26      	ldr	r2, [pc, #152]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a20      	ldr	r2, [pc, #128]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <HAL_DFSDM_ChannelMspInit+0x114>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PA9     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187e:	2304      	movs	r3, #4
 8001880:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001894:	2306      	movs	r3, #6
 8001896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800189e:	4619      	mov	r1, r3
 80018a0:	4813      	ldr	r0, [pc, #76]	@ (80018f0 <HAL_DFSDM_ChannelMspInit+0x118>)
 80018a2:	f002 fbef 	bl	8004084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018be:	2306      	movs	r3, #6
 80018c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ce:	f002 fbd9 	bl	8004084 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018d2:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a02      	ldr	r2, [pc, #8]	@ (80018e4 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80018da:	6013      	str	r3, [r2, #0]
  }

}
 80018dc:	bf00      	nop
 80018de:	3790      	adds	r7, #144	@ 0x90
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200043d4 	.word	0x200043d4
 80018e8:	200043d0 	.word	0x200043d0
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000800 	.word	0x48000800

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0a4      	sub	sp, #144	@ 0x90
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2268      	movs	r2, #104	@ 0x68
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f006 fa52 	bl	8007dbe <memset>
  if(huart->Instance==USART2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <HAL_UART_MspInit+0xb0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d13a      	bne.n	800199a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001928:	2300      	movs	r3, #0
 800192a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fbef 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800193c:	f7ff fde0 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 8001946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001970:	230c      	movs	r3, #12
 8001972:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001986:	2307      	movs	r3, #7
 8001988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f002 fb75 	bl	8004084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3790      	adds	r7, #144	@ 0x90
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f963 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <DMA1_Channel4_IRQHandler+0x10>)
 8001a12:	f002 fa57 	bl	8003ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200022ec 	.word	0x200022ec

08001a20 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <ADC1_IRQHandler+0x10>)
 8001a26:	f000 fcae 	bl	8002386 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200021f8 	.word	0x200021f8

08001a34 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <DFSDM1_FLT0_IRQHandler+0x10>)
 8001a3a:	f001 fe63 	bl	8003704 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20002260 	.word	0x20002260

08001a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_kill>:

int _kill(int pid, int sig)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a62:	f006 f9ff 	bl	8007e64 <__errno>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2216      	movs	r2, #22
 8001a6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_exit>:

void _exit (int status)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffe7 	bl	8001a58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a8a:	bf00      	nop
 8001a8c:	e7fd      	b.n	8001a8a <_exit+0x12>

08001a8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e00a      	b.n	8001ab6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa0:	f3af 8000 	nop.w
 8001aa4:	4601      	mov	r1, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dbf0      	blt.n	8001aa0 <_read+0x12>
  }

  return len;
 8001abe:	687b      	ldr	r3, [r7, #4]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af0:	605a      	str	r2, [r3, #4]
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_isatty>:

int _isatty(int file)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f006 f980 	bl	8007e64 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20028000 	.word	0x20028000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	200043d8 	.word	0x200043d8
 8001b98:	20004540 	.word	0x20004540

08001b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc4:	f7ff ffea 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c0c <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bee:	f006 f93f 	bl	8007e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf2:	f7ff f959 	bl	8000ea8 <main>

08001bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf6:	e7fe      	b.n	8001bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	200021dc 	.word	0x200021dc
  ldr r2, =_sidata
 8001c04:	0800ce60 	.word	0x0800ce60
  ldr r2, =_sbss
 8001c08:	200021dc 	.word	0x200021dc
  ldr r4, =_ebss
 8001c0c:	20004540 	.word	0x20004540

08001c10 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <CAN1_RX0_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_Init+0x3c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <HAL_Init+0x3c>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f001 fa72 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 f80f 	bl	8001c54 <HAL_InitTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	71fb      	strb	r3, [r7, #7]
 8001c40:	e001      	b.n	8001c46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c42:	f7ff fc63 	bl	800150c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40022000 	.word	0x40022000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c60:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <HAL_InitTick+0x6c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c68:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <HAL_InitTick+0x70>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_InitTick+0x6c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 fa7d 	bl	800317e <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10f      	bne.n	8001caa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d809      	bhi.n	8001ca4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f001 fa47 	bl	800312a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <HAL_InitTick+0x74>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e007      	b.n	8001cb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e004      	b.n	8001cb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e001      	b.n	8001cb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20002010 	.word	0x20002010
 8001cc4:	20002008 	.word	0x20002008
 8001cc8:	2000200c 	.word	0x2000200c

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20002010 	.word	0x20002010
 8001cf0:	200043dc 	.word	0x200043dc

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200043dc 	.word	0x200043dc

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20002010 	.word	0x20002010

08001d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3360      	adds	r3, #96	@ 0x60
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <LL_ADC_SetOffset+0x44>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001df4:	bf00      	nop
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	03fff000 	.word	0x03fff000

08001e04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3360      	adds	r3, #96	@ 0x60
 8001e12:	461a      	mov	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3360      	adds	r3, #96	@ 0x60
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	615a      	str	r2, [r3, #20]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b087      	sub	sp, #28
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3330      	adds	r3, #48	@ 0x30
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	211f      	movs	r1, #31
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 011f 	and.w	r1, r3, #31
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0d1b      	lsrs	r3, r3, #20
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2107      	movs	r1, #7
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0d1b      	lsrs	r3, r3, #20
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0318 	and.w	r3, r3, #24
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	0007ffff 	.word	0x0007ffff

08001fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002030:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d101      	bne.n	80020d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e129      	b.n	800234e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fa23 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff67 	bl	8001ff4 <LL_ADC_IsDeepPowerDownEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff4d 	bl	8001fd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff82 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff66 	bl	800201c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002150:	4b81      	ldr	r3, [pc, #516]	@ (8002358 <HAL_ADC_Init+0x278>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	4a81      	ldr	r2, [pc, #516]	@ (800235c <HAL_ADC_Init+0x27c>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	3301      	adds	r3, #1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002164:	e002      	b.n	800216c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f9      	bne.n	8002166 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff64 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff75 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80021a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80c2 	bne.w	800233c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80be 	bne.w	800233c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021c8:	f043 0202 	orr.w	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff49 	bl	800206c <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e0:	485f      	ldr	r0, [pc, #380]	@ (8002360 <HAL_ADC_Init+0x280>)
 80021e2:	f7ff ff43 	bl	800206c <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4619      	mov	r1, r3
 80021f2:	485c      	ldr	r0, [pc, #368]	@ (8002364 <HAL_ADC_Init+0x284>)
 80021f4:	f7ff fdae 	bl	8001d54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e5b      	ldrb	r3, [r3, #25]
 80021fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002202:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002208:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800220e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002216:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d106      	bne.n	8002234 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	045b      	lsls	r3, r3, #17
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	4b44      	ldr	r3, [pc, #272]	@ (8002368 <HAL_ADC_Init+0x288>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	430b      	orrs	r3, r1
 8002262:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff25 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 800226e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d140      	bne.n	80022f8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d13d      	bne.n	80022f8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7e1b      	ldrb	r3, [r3, #24]
 8002284:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002286:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800228e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800229e:	f023 0306 	bic.w	r3, r3, #6
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d118      	bne.n	80022e8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d8:	430a      	orrs	r2, r1
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	e007      	b.n	80022f8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f023 010f 	bic.w	r1, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020f 	bic.w	r2, r2, #15
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	@ 0x58
 800233a:	e007      	b.n	800234c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800234c:	7ffb      	ldrb	r3, [r7, #31]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20002008 	.word	0x20002008
 800235c:	053e2d63 	.word	0x053e2d63
 8002360:	50040000 	.word	0x50040000
 8002364:	50040300 	.word	0x50040300
 8002368:	fff0c007 	.word	0xfff0c007

0800236c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b088      	sub	sp, #32
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d017      	beq.n	80023dc <HAL_ADC_IRQHandler+0x56>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d012      	beq.n	80023dc <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fdc6 	bl	8002f60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x6a>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d05e      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d059      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fd33 	bl	8001e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d03e      	beq.n	80024aa <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d135      	bne.n	80024aa <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d12e      	bne.n	80024aa <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe1e 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11a      	bne.n	8002492 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020c 	bic.w	r2, r2, #12
 800246a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d112      	bne.n	80024aa <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002490:	e00b      	b.n	80024aa <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe ffe0 	bl	8001470 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	220c      	movs	r2, #12
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_IRQHandler+0x146>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d072      	beq.n	80025bc <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06d      	beq.n	80025bc <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fd04 	bl	8001f0a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002502:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fcbf 	bl	8001e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 800250e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d047      	beq.n	80025ae <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_ADC_IRQHandler+0x1b2>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03f      	beq.n	80025ae <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002534:	2b00      	cmp	r3, #0
 8002536:	d13a      	bne.n	80025ae <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d133      	bne.n	80025ae <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d12e      	bne.n	80025ae <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fdaf 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11a      	bne.n	8002596 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800256e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d112      	bne.n	80025ae <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	659a      	str	r2, [r3, #88]	@ 0x58
 8002594:	e00b      	b.n	80025ae <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fcae 	bl	8002f10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2260      	movs	r2, #96	@ 0x60
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d011      	beq.n	80025ea <HAL_ADC_IRQHandler+0x264>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f886 	bl	80026ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2280      	movs	r2, #128	@ 0x80
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_ADC_IRQHandler+0x294>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fc94 	bl	8002f38 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d012      	beq.n	800264a <HAL_ADC_IRQHandler+0x2c4>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fc86 	bl	8002f4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02a      	beq.n	80026aa <HAL_ADC_IRQHandler+0x324>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d025      	beq.n	80026aa <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002666:	2301      	movs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e008      	b.n	800267e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800267a:	2301      	movs	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10e      	bne.n	80026a2 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	f043 0202 	orr.w	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f830 	bl	8002702 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2210      	movs	r2, #16
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x360>
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	f043 0208 	orr.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fc1f 	bl	8002f24 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0b6      	sub	sp, #216	@ 0xd8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_ConfigChannel+0x22>
 8002736:	2302      	movs	r3, #2
 8002738:	e3d5      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x7ce>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fca3 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 83ba 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d824      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	3b02      	subs	r3, #2
 800276a:	2b03      	cmp	r3, #3
 800276c:	d81b      	bhi.n	80027a6 <HAL_ADC_ConfigChannel+0x8e>
 800276e:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <HAL_ADC_ConfigChannel+0x5c>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002785 	.word	0x08002785
 8002778:	0800278d 	.word	0x0800278d
 800277c:	08002795 	.word	0x08002795
 8002780:	0800279d 	.word	0x0800279d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002784:	230c      	movs	r3, #12
 8002786:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800278a:	e010      	b.n	80027ae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800278c:	2312      	movs	r3, #18
 800278e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002792:	e00c      	b.n	80027ae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002794:	2318      	movs	r3, #24
 8002796:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800279a:	e008      	b.n	80027ae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800279c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027a4:	e003      	b.n	80027ae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027a6:	2306      	movs	r3, #6
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027ac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80027bc:	f7ff fb79 	bl	8001eb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fc64 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80027ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fc70 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 80027d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 81bf 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 81ba 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027f8:	d10f      	bne.n	800281a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	f7ff fb93 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fb27 	bl	8001e66 <LL_ADC_SetSamplingTimeCommonConfig>
 8002818:	e00e      	b.n	8002838 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	461a      	mov	r2, r3
 8002828:	f7ff fb82 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fb17 	bl	8001e66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	08db      	lsrs	r3, r3, #3
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00a      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800286a:	f7ff faa7 	bl	8001dbc <LL_ADC_SetOffset>
 800286e:	e179      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fac4 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <HAL_ADC_ConfigChannel+0x184>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fab9 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	e01e      	b.n	80028da <HAL_ADC_ConfigChannel+0x1c2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff faae 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e004      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80028ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x1da>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	e018      	b.n	8002924 <HAL_ADC_ConfigChannel+0x20c>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800290a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800290e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800291a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002924:	429a      	cmp	r2, r3
 8002926:	d106      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fa7d 	bl	8001e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fa61 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x24a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fa56 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	e01e      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x288>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2101      	movs	r1, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fa4b 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e004      	b.n	800299e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x2a0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	e018      	b.n	80029ea <HAL_ADC_ConfigChannel+0x2d2>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80029cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80029e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d106      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fa1a 	bl	8001e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f9fe 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x310>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff f9f3 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	e01e      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x34e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f9e8 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e004      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x366>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	e014      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x390>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e004      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d106      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f9bb 	bl	8001e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2103      	movs	r1, #3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f99f 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x3ce>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f994 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	e017      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x3fe>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2103      	movs	r1, #3
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff f989 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b00:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e003      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x416>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	e011      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x43a>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e003      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d106      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2103      	movs	r1, #3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f966 	bl	8001e30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fa7f 	bl	800206c <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 813f 	bne.w	8002df4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7ff fa00 	bl	8001f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a8e      	ldr	r2, [pc, #568]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f040 8130 	bne.w	8002df4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x4a4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	3301      	adds	r3, #1
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e019      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x4d8>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e003      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	bf94      	ite	ls
 8002bea:	2301      	movls	r3, #1
 8002bec:	2300      	movhi	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d079      	beq.n	8002ce8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x4f8>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	3301      	adds	r3, #1
 8002c08:	069b      	lsls	r3, r3, #26
 8002c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c0e:	e015      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x524>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e003      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	069b      	lsls	r3, r3, #26
 8002c38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x544>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	e017      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x574>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x59a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	051b      	lsls	r3, r3, #20
 8002cb0:	e018      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x5cc>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e003      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	e080      	b.n	8002dea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x5ec>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	069b      	lsls	r3, r3, #26
 8002cfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d02:	e015      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x618>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	069b      	lsls	r3, r3, #26
 8002d2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x638>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	e017      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x668>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	ea42 0103 	orr.w	r1, r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x694>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	3301      	adds	r3, #1
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	3b1e      	subs	r3, #30
 8002da4:	051b      	lsls	r3, r3, #20
 8002da6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	e01d      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x6d0>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	60fb      	str	r3, [r7, #12]
  return result;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e005      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x6bc>
 8002dc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	051b      	lsls	r3, r3, #20
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7ff f89e 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d06c      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e00:	483c      	ldr	r0, [pc, #240]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e02:	f7fe ffcd 	bl	8001da0 <LL_ADC_GetCommonPathInternalCh>
 8002e06:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d127      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d121      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a35      	ldr	r2, [pc, #212]	@ (8002efc <HAL_ADC_ConfigChannel+0x7e4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d157      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e32:	4619      	mov	r1, r3
 8002e34:	482f      	ldr	r0, [pc, #188]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e36:	f7fe ffa0 	bl	8001d7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3a:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	4a30      	ldr	r2, [pc, #192]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7ec>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f9      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e62:	e03a      	b.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a27      	ldr	r2, [pc, #156]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d113      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002efc <HAL_ADC_ConfigChannel+0x7e4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d12a      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4819      	ldr	r0, [pc, #100]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e90:	f7fe ff73 	bl	8001d7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e94:	e021      	b.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7f4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d11c      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <HAL_ADC_ConfigChannel+0x7e4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ec2:	f7fe ff5a 	bl	8001d7a <LL_ADC_SetCommonPathInternalCh>
 8002ec6:	e008      	b.n	8002eda <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ee2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	37d8      	adds	r7, #216	@ 0xd8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	80080000 	.word	0x80080000
 8002ef4:	50040300 	.word	0x50040300
 8002ef8:	c7520000 	.word	0xc7520000
 8002efc:	50040000 	.word	0x50040000
 8002f00:	20002008 	.word	0x20002008
 8002f04:	053e2d63 	.word	0x053e2d63
 8002f08:	cb840000 	.word	0xcb840000
 8002f0c:	80000001 	.word	0x80000001

08002f10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	@ (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	@ (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	@ (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0ac      	b.n	8003304 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fc5a 	bl	8003a68 <DFSDM_GetChannelFromInstance>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4a55      	ldr	r2, [pc, #340]	@ (800330c <HAL_DFSDM_ChannelInit+0x174>)
 80031b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e09f      	b.n	8003304 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fe fb07 	bl	80017d8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80031ca:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <HAL_DFSDM_ChannelInit+0x178>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003310 <HAL_DFSDM_ChannelInit+0x178>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80031d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003310 <HAL_DFSDM_ChannelInit+0x178>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d125      	bne.n	8003228 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80031dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 80031e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031e6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80031e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4948      	ldr	r1, [pc, #288]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a46      	ldr	r2, [pc, #280]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 80031fc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003200:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	791b      	ldrb	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800320a:	4b42      	ldr	r3, [pc, #264]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	493f      	ldr	r1, [pc, #252]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800321c:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3c      	ldr	r2, [pc, #240]	@ (8003314 <HAL_DFSDM_ChannelInit+0x17c>)
 8003222:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003226:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003236:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003246:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800324c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 020f 	bic.w	r2, r2, #15
 8003264:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800328c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f002 0207 	and.w	r2, r2, #7
 80032b8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fbb8 	bl	8003a68 <DFSDM_GetChannelFromInstance>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4904      	ldr	r1, [pc, #16]	@ (800330c <HAL_DFSDM_ChannelInit+0x174>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200043e4 	.word	0x200043e4
 8003310:	200043e0 	.word	0x200043e0
 8003314:	40016000 	.word	0x40016000

08003318 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0ca      	b.n	80034e8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a66      	ldr	r2, [pc, #408]	@ (80034f0 <HAL_DFSDM_FilterInit+0x1b0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d109      	bne.n	8003370 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003360:	2b01      	cmp	r3, #1
 8003362:	d003      	beq.n	800336c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0bb      	b.n	80034e8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fe f953 	bl	8001634 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800339c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7a1b      	ldrb	r3, [r3, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d108      	bne.n	80033b8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e007      	b.n	80033c8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80033c6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7a5b      	ldrb	r3, [r3, #9]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d108      	bne.n	80033e2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e007      	b.n	80033f2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8003400:	f023 0308 	bic.w	r3, r3, #8
 8003404:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d108      	bne.n	8003420 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7c1b      	ldrb	r3, [r3, #16]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d108      	bne.n	800343a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0210 	orr.w	r2, r2, #16
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e007      	b.n	800344a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0210 	bic.w	r2, r2, #16
 8003448:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7c5b      	ldrb	r3, [r3, #17]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d108      	bne.n	8003464 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e007      	b.n	8003474 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0220 	bic.w	r2, r2, #32
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8003482:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8003486:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6959      	ldr	r1, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	3b01      	subs	r3, #1
 8003498:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800349a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80034a2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7c1a      	ldrb	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40016100 	.word	0x40016100

080034f4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02e      	beq.n	800356c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003514:	2bff      	cmp	r3, #255	@ 0xff
 8003516:	d029      	beq.n	800356c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10d      	bne.n	800354e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e00a      	b.n	8003564 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
 800356a:	e001      	b.n	8003570 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
 80035a0:	e064      	b.n	800366c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035b0:	d002      	beq.n	80035b8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
 80035b6:	e059      	b.n	800366c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d002      	beq.n	80035de <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
 80035dc:	e046      	b.n	800366c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d102      	bne.n	80035fe <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
 80035fc:	e036      	b.n	800366c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d004      	beq.n	8003612 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800360e:	2b03      	cmp	r3, #3
 8003610:	d12a      	bne.n	8003668 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003618:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	4a17      	ldr	r2, [pc, #92]	@ (800367c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003628:	2b20      	cmp	r3, #32
 800362a:	d101      	bne.n	8003630 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800362c:	4a14      	ldr	r2, [pc, #80]	@ (8003680 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800362e:	e000      	b.n	8003632 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003630:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	331c      	adds	r3, #28
 8003642:	4619      	mov	r1, r3
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f000 fb9e 	bl	8003d88 <HAL_DMA_Start_IT>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	22ff      	movs	r2, #255	@ 0xff
 8003656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800365e:	e005      	b.n	800366c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fa29 	bl	8003ab8 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003666:	e001      	b.n	800366c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08003a29 	.word	0x08003a29
 800367c:	08003a45 	.word	0x08003a45
 8003680:	08003a0d 	.word	0x08003a0d

08003684 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(const DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0207 	and.w	r2, r3, #7
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036a6:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da00      	bge.n	80036b0 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 80036ae:	33ff      	adds	r3, #255	@ 0xff
 80036b0:	121b      	asrs	r3, r3, #8
 80036b2:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 80036b4:	68bb      	ldr	r3, [r7, #8]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_DFSDM_FilterInjectedStop_DMA>:
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInjectedStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_INJ) && \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d007      	beq.n	80036e8 <HAL_DFSDM_FilterInjectedStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_INJ) && \
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d002      	beq.n	80036e8 <HAL_DFSDM_FilterInjectedStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e007      	b.n	80036f8 <HAL_DFSDM_FilterInjectedStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaInj);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fbab 	bl	8003e48 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_InjConvStop(hdfsdm_filter);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa36 	bl	8003b64 <DFSDM_InjConvStop>
  }
  /* Return function status */
  return status;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08c      	sub	sp, #48	@ 0x30
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00f      	beq.n	8003746 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2208      	movs	r2, #8
 8003736:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd febc 	bl	80014bc <HAL_DFSDM_FilterErrorCallback>
 8003744:	e13a      	b.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00f      	beq.n	8003770 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2204      	movs	r2, #4
 8003760:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd fea7 	bl	80014bc <HAL_DFSDM_FilterErrorCallback>
 800376e:	e125      	b.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d025      	beq.n	80037c6 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fd fe83 	bl	8001490 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 8113 	bne.w	80039ba <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 810e 	bne.w	80039ba <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0202 	bic.w	r2, r2, #2
 80037ac:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d101      	bne.n	80037bc <HAL_DFSDM_IRQHandler+0xb8>
 80037b8:	2201      	movs	r2, #1
 80037ba:	e000      	b.n	80037be <HAL_DFSDM_IRQHandler+0xba>
 80037bc:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80037c4:	e0f9      	b.n	80039ba <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d034      	beq.n	800383a <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d02f      	beq.n	800383a <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f900 	bl	80039e0 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e4:	1e5a      	subs	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80e4 	bne.w	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d112      	bne.n	8003822 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8003812:	2b03      	cmp	r3, #3
 8003814:	d101      	bne.n	800381a <HAL_DFSDM_IRQHandler+0x116>
 8003816:	2201      	movs	r2, #1
 8003818:	e000      	b.n	800381c <HAL_DFSDM_IRQHandler+0x118>
 800381a:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <HAL_DFSDM_IRQHandler+0x12e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003830:	e000      	b.n	8003834 <HAL_DFSDM_IRQHandler+0x130>
 8003832:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8003838:	e0c0      	b.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03d      	beq.n	80038c0 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800384a:	2b00      	cmp	r3, #0
 800384c:	d038      	beq.n	80038c0 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_DFSDM_IRQHandler+0x162>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_DFSDM_IRQHandler+0x164>
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8003870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003876:	e005      	b.n	8003884 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	3301      	adds	r3, #1
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 800387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_DFSDM_IRQHandler+0x190>
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	2b02      	cmp	r3, #2
 8003892:	d9f1      	bls.n	8003878 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_DFSDM_IRQHandler+0x1a2>
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	3308      	adds	r3, #8
 800389e:	2201      	movs	r2, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	e003      	b.n	80038ae <HAL_DFSDM_IRQHandler+0x1aa>
 80038a6:	2201      	movs	r2, #1
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f89b 	bl	80039f4 <HAL_DFSDM_FilterAwdCallback>
  {
 80038be:	e07d      	b.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3f      	ldr	r2, [pc, #252]	@ (80039c4 <HAL_DFSDM_IRQHandler+0x2c0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d141      	bne.n	800394e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03c      	beq.n	800394e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d037      	beq.n	800394e <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80038ee:	e02a      	b.n	8003946 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01f      	beq.n	800393a <HAL_DFSDM_IRQHandler+0x236>
 80038fa:	4a33      	ldr	r2, [pc, #204]	@ (80039c8 <HAL_DFSDM_IRQHandler+0x2c4>)
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d019      	beq.n	800393a <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8003906:	4a30      	ldr	r2, [pc, #192]	@ (80039c8 <HAL_DFSDM_IRQHandler+0x2c4>)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00f      	beq.n	800393a <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f103 0210 	add.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 800392c:	4a26      	ldr	r2, [pc, #152]	@ (80039c8 <HAL_DFSDM_IRQHandler+0x2c4>)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fcef 	bl	8003318 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	3301      	adds	r3, #1
 800393e:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d9d1      	bls.n	80038f0 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 800394c:	e036      	b.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_DFSDM_IRQHandler+0x2c0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d131      	bne.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395e:	d32d      	bcc.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	0e1b      	lsrs	r3, r3, #24
 8003976:	b2db      	uxtb	r3, r3
 8003978:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800397a:	e005      	b.n	8003988 <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	3301      	adds	r3, #1
 8003980:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <HAL_DFSDM_IRQHandler+0x294>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d9f1      	bls.n	800397c <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f103 0218 	add.w	r2, r3, #24
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80039aa:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <HAL_DFSDM_IRQHandler+0x2c4>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fcba 	bl	800332c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80039b8:	e000      	b.n	80039bc <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80039ba:	bf00      	nop
}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	@ 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40016100 	.word	0x40016100
 80039c8:	200043e4 	.word	0x200043e4

080039cc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff ffd6 	bl	80039cc <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7fd fd2a 	bl	8001490 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2203      	movs	r2, #3
 8003a56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7fd fd2f 	bl	80014bc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0e      	ldr	r2, [pc, #56]	@ (8003aac <DFSDM_GetChannelFromInstance+0x44>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d102      	bne.n	8003a7e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e00f      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab0 <DFSDM_GetChannelFromInstance+0x48>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d102      	bne.n	8003a8c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e008      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <DFSDM_GetChannelFromInstance+0x4c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a94:	2302      	movs	r3, #2
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e001      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x36>
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40016000 	.word	0x40016000
 8003ab0:	40016020 	.word	0x40016020
 8003ab4:	40016040 	.word	0x40016040

08003ab8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d108      	bne.n	8003ada <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e033      	b.n	8003b42 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003af8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d116      	bne.n	8003b42 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0202 	orr.w	r2, r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <DFSDM_RegConvStart+0x84>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	e000      	b.n	8003b3e <DFSDM_RegConvStart+0x86>
 8003b3c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <DFSDM_RegConvStart+0x98>
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	e000      	b.n	8003b52 <DFSDM_RegConvStart+0x9a>
 8003b50:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <DFSDM_InjConvStop>:
  * @brief  This function allows to really stop injected conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_InjConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* If injected trigger was synchronous, reset JSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d108      	bne.n	8003b96 <DFSDM_InjConvStop+0x32>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0208 	bic.w	r2, r2, #8
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e00b      	b.n	8003bae <DFSDM_InjConvStop+0x4a>
  }
  else if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_EXT_TRIGGER)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <DFSDM_InjConvStop+0x4a>
  {
    /* Reset JEXTEN[1:0] bits in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JEXTEN);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003bac:	601a      	str	r2, [r3, #0]
  {
    /* Nothing to do */
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* If regular conversion was in progress, restart it */
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ) && \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d10b      	bne.n	8003be0 <DFSDM_InjConvStop+0x7c>
      (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ) && \
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <DFSDM_InjConvStop+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Update remaining injected conversions */
  hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                    hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d102      	bne.n	8003bf0 <DFSDM_InjConvStop+0x8c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	e000      	b.n	8003bf2 <DFSDM_InjConvStop+0x8e>
 8003bf0:	2301      	movs	r3, #1
  hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d101      	bne.n	8003c04 <DFSDM_InjConvStop+0xa0>
 8003c00:	2201      	movs	r2, #1
 8003c02:	e000      	b.n	8003c06 <DFSDM_InjConvStop+0xa2>
 8003c04:	2202      	movs	r2, #2
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e098      	b.n	8003d5c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b4d      	ldr	r3, [pc, #308]	@ (8003d68 <HAL_DMA_Init+0x150>)
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d80f      	bhi.n	8003c56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d6c <HAL_DMA_Init+0x154>)
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a4b      	ldr	r2, [pc, #300]	@ (8003d70 <HAL_DMA_Init+0x158>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a48      	ldr	r2, [pc, #288]	@ (8003d74 <HAL_DMA_Init+0x15c>)
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c54:	e00e      	b.n	8003c74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b46      	ldr	r3, [pc, #280]	@ (8003d78 <HAL_DMA_Init+0x160>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a43      	ldr	r2, [pc, #268]	@ (8003d70 <HAL_DMA_Init+0x158>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	009a      	lsls	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a42      	ldr	r2, [pc, #264]	@ (8003d7c <HAL_DMA_Init+0x164>)
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cce:	d039      	beq.n	8003d44 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <HAL_DMA_Init+0x15c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d11a      	bne.n	8003d10 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cda:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <HAL_DMA_Init+0x168>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f003 031c 	and.w	r3, r3, #28
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4924      	ldr	r1, [pc, #144]	@ (8003d80 <HAL_DMA_Init+0x168>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cf4:	4b22      	ldr	r3, [pc, #136]	@ (8003d80 <HAL_DMA_Init+0x168>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	f003 031c 	and.w	r3, r3, #28
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	491d      	ldr	r1, [pc, #116]	@ (8003d80 <HAL_DMA_Init+0x168>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]
 8003d0e:	e019      	b.n	8003d44 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d10:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <HAL_DMA_Init+0x16c>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d18:	f003 031c 	and.w	r3, r3, #28
 8003d1c:	210f      	movs	r1, #15
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	4917      	ldr	r1, [pc, #92]	@ (8003d84 <HAL_DMA_Init+0x16c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d2a:	4b16      	ldr	r3, [pc, #88]	@ (8003d84 <HAL_DMA_Init+0x16c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f003 031c 	and.w	r3, r3, #28
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	4911      	ldr	r1, [pc, #68]	@ (8003d84 <HAL_DMA_Init+0x16c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40020407 	.word	0x40020407
 8003d6c:	bffdfff8 	.word	0xbffdfff8
 8003d70:	cccccccd 	.word	0xcccccccd
 8003d74:	40020000 	.word	0x40020000
 8003d78:	bffdfbf8 	.word	0xbffdfbf8
 8003d7c:	40020400 	.word	0x40020400
 8003d80:	400200a8 	.word	0x400200a8
 8003d84:	400204a8 	.word	0x400204a8

08003d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_DMA_Start_IT+0x20>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e04b      	b.n	8003e40 <HAL_DMA_Start_IT+0xb8>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d13a      	bne.n	8003e32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f91e 	bl	8004022 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 020e 	orr.w	r2, r2, #14
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e00f      	b.n	8003e20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 020a 	orr.w	r2, r2, #10
 8003e1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e005      	b.n	8003e3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d008      	beq.n	8003e72 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2204      	movs	r2, #4
 8003e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e022      	b.n	8003eb8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 020e 	bic.w	r2, r2, #14
 8003e80:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f003 021c 	and.w	r2, r3, #28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	f003 031c 	and.w	r3, r3, #28
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d026      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x7a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d021      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	f003 021c 	and.w	r2, r3, #28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	2104      	movs	r1, #4
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d071      	beq.n	8004018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f3c:	e06c      	b.n	8004018 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f003 031c 	and.w	r3, r3, #28
 8003f46:	2202      	movs	r2, #2
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xec>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d029      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 020a 	bic.w	r2, r2, #10
 8003f78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f003 021c 	and.w	r2, r3, #28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	2102      	movs	r1, #2
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d038      	beq.n	8004018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fae:	e033      	b.n	8004018 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb4:	f003 031c 	and.w	r3, r3, #28
 8003fb8:	2208      	movs	r2, #8
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02a      	beq.n	800401a <HAL_DMA_IRQHandler+0x156>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d025      	beq.n	800401a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020e 	bic.w	r2, r2, #14
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f003 021c 	and.w	r2, r3, #28
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004018:	bf00      	nop
 800401a:	bf00      	nop
}
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	f003 021c 	and.w	r2, r3, #28
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	2101      	movs	r1, #1
 800403e:	fa01 f202 	lsl.w	r2, r1, r2
 8004042:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b10      	cmp	r3, #16
 8004052:	d108      	bne.n	8004066 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004064:	e007      	b.n	8004076 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	60da      	str	r2, [r3, #12]
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004092:	e154      	b.n	800433e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	4013      	ands	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8146 	beq.w	8004338 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d005      	beq.n	80040c4 <HAL_GPIO_Init+0x40>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d130      	bne.n	8004126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	2203      	movs	r2, #3
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040fa:	2201      	movs	r2, #1
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 0201 	and.w	r2, r3, #1
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b03      	cmp	r3, #3
 8004130:	d017      	beq.n	8004162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2203      	movs	r2, #3
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d123      	bne.n	80041b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	08da      	lsrs	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3208      	adds	r2, #8
 8004176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	08da      	lsrs	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3208      	adds	r2, #8
 80041b0:	6939      	ldr	r1, [r7, #16]
 80041b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0203 	and.w	r2, r3, #3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80a0 	beq.w	8004338 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f8:	4b58      	ldr	r3, [pc, #352]	@ (800435c <HAL_GPIO_Init+0x2d8>)
 80041fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fc:	4a57      	ldr	r2, [pc, #348]	@ (800435c <HAL_GPIO_Init+0x2d8>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6613      	str	r3, [r2, #96]	@ 0x60
 8004204:	4b55      	ldr	r3, [pc, #340]	@ (800435c <HAL_GPIO_Init+0x2d8>)
 8004206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004210:	4a53      	ldr	r2, [pc, #332]	@ (8004360 <HAL_GPIO_Init+0x2dc>)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	220f      	movs	r2, #15
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800423a:	d019      	beq.n	8004270 <HAL_GPIO_Init+0x1ec>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a49      	ldr	r2, [pc, #292]	@ (8004364 <HAL_GPIO_Init+0x2e0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_GPIO_Init+0x1e8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a48      	ldr	r2, [pc, #288]	@ (8004368 <HAL_GPIO_Init+0x2e4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00d      	beq.n	8004268 <HAL_GPIO_Init+0x1e4>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a47      	ldr	r2, [pc, #284]	@ (800436c <HAL_GPIO_Init+0x2e8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <HAL_GPIO_Init+0x1e0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a46      	ldr	r2, [pc, #280]	@ (8004370 <HAL_GPIO_Init+0x2ec>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_GPIO_Init+0x1dc>
 800425c:	2304      	movs	r3, #4
 800425e:	e008      	b.n	8004272 <HAL_GPIO_Init+0x1ee>
 8004260:	2307      	movs	r3, #7
 8004262:	e006      	b.n	8004272 <HAL_GPIO_Init+0x1ee>
 8004264:	2303      	movs	r3, #3
 8004266:	e004      	b.n	8004272 <HAL_GPIO_Init+0x1ee>
 8004268:	2302      	movs	r3, #2
 800426a:	e002      	b.n	8004272 <HAL_GPIO_Init+0x1ee>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_GPIO_Init+0x1ee>
 8004270:	2300      	movs	r3, #0
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	f002 0203 	and.w	r2, r2, #3
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	4093      	lsls	r3, r2
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004282:	4937      	ldr	r1, [pc, #220]	@ (8004360 <HAL_GPIO_Init+0x2dc>)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	3302      	adds	r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004290:	4b38      	ldr	r3, [pc, #224]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042de:	4a25      	ldr	r2, [pc, #148]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042e4:	4b23      	ldr	r3, [pc, #140]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004308:	4a1a      	ldr	r2, [pc, #104]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43db      	mvns	r3, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004332:	4a10      	ldr	r2, [pc, #64]	@ (8004374 <HAL_GPIO_Init+0x2f0>)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3301      	adds	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f aea3 	bne.w	8004094 <HAL_GPIO_Init+0x10>
  }
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40021000 	.word	0x40021000
 8004360:	40010000 	.word	0x40010000
 8004364:	48000400 	.word	0x48000400
 8004368:	48000800 	.word	0x48000800
 800436c:	48000c00 	.word	0x48000c00
 8004370:	48001000 	.word	0x48001000
 8004374:	40010400 	.word	0x40010400

08004378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
 8004384:	4613      	mov	r3, r2
 8004386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004388:	787b      	ldrb	r3, [r7, #1]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004394:	e002      	b.n	800439c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	041a      	lsls	r2, r3, #16
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43d9      	mvns	r1, r3
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	400b      	ands	r3, r1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	619a      	str	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40007000 	.word	0x40007000

080043f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004406:	d130      	bne.n	800446a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004408:	4b23      	ldr	r3, [pc, #140]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004414:	d038      	beq.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800441e:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004420:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004424:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004426:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2232      	movs	r2, #50	@ 0x32
 800442c:	fb02 f303 	mul.w	r3, r2, r3
 8004430:	4a1b      	ldr	r2, [pc, #108]	@ (80044a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	0c9b      	lsrs	r3, r3, #18
 8004438:	3301      	adds	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800443c:	e002      	b.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b01      	subs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004444:	4b14      	ldr	r3, [pc, #80]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004450:	d102      	bne.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f2      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004464:	d110      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00f      	b.n	800448a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800446a:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d007      	beq.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004478:	4b07      	ldr	r3, [pc, #28]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004480:	4a05      	ldr	r2, [pc, #20]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004486:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40007000 	.word	0x40007000
 800449c:	20002008 	.word	0x20002008
 80044a0:	431bde83 	.word	0x431bde83

080044a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f000 bc02 	b.w	8004cbc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b8:	4b96      	ldr	r3, [pc, #600]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c2:	4b94      	ldr	r3, [pc, #592]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80e4 	beq.w	80046a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4c>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	f040 808b 	bne.w	80045fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	f040 8087 	bne.w	80045fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f0:	4b88      	ldr	r3, [pc, #544]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_OscConfig+0x64>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e3d9      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	4b81      	ldr	r3, [pc, #516]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <HAL_RCC_OscConfig+0x7e>
 8004518:	4b7e      	ldr	r3, [pc, #504]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004520:	e005      	b.n	800452e <HAL_RCC_OscConfig+0x8a>
 8004522:	4b7c      	ldr	r3, [pc, #496]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800452e:	4293      	cmp	r3, r2
 8004530:	d223      	bcs.n	800457a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fd8c 	bl	8005054 <RCC_SetFlashLatencyFromMSIRange>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e3ba      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004546:	4b73      	ldr	r3, [pc, #460]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a72      	ldr	r2, [pc, #456]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800454c:	f043 0308 	orr.w	r3, r3, #8
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b70      	ldr	r3, [pc, #448]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	496d      	ldr	r1, [pc, #436]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004564:	4b6b      	ldr	r3, [pc, #428]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	4968      	ldr	r1, [pc, #416]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
 8004578:	e025      	b.n	80045c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800457a:	4b66      	ldr	r3, [pc, #408]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a65      	ldr	r2, [pc, #404]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b63      	ldr	r3, [pc, #396]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4960      	ldr	r1, [pc, #384]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004598:	4b5e      	ldr	r3, [pc, #376]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	495b      	ldr	r1, [pc, #364]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fd4c 	bl	8005054 <RCC_SetFlashLatencyFromMSIRange>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e37a      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045c6:	f000 fc81 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b51      	ldr	r3, [pc, #324]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	4950      	ldr	r1, [pc, #320]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80045d8:	5ccb      	ldrb	r3, [r1, r3]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a4e      	ldr	r2, [pc, #312]	@ (800471c <HAL_RCC_OscConfig+0x278>)
 80045e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004720 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fb32 	bl	8001c54 <HAL_InitTick>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d052      	beq.n	80046a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	e35e      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d032      	beq.n	800466c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004606:	4b43      	ldr	r3, [pc, #268]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a42      	ldr	r2, [pc, #264]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004612:	f7fd fb6f 	bl	8001cf4 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800461a:	f7fd fb6b 	bl	8001cf4 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e347      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800462c:	4b39      	ldr	r3, [pc, #228]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004638:	4b36      	ldr	r3, [pc, #216]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a35      	ldr	r2, [pc, #212]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800463e:	f043 0308 	orr.w	r3, r3, #8
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4930      	ldr	r1, [pc, #192]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004656:	4b2f      	ldr	r3, [pc, #188]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	492b      	ldr	r1, [pc, #172]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
 800466a:	e01a      	b.n	80046a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800466c:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a28      	ldr	r2, [pc, #160]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004678:	f7fd fb3c 	bl	8001cf4 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004680:	f7fd fb38 	bl	8001cf4 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e314      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004692:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1dc>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d073      	beq.n	8004796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_OscConfig+0x21c>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d10e      	bne.n	80046d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d10b      	bne.n	80046d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d063      	beq.n	8004794 <HAL_RCC_OscConfig+0x2f0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d15f      	bne.n	8004794 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e2f1      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e0:	d106      	bne.n	80046f0 <HAL_RCC_OscConfig+0x24c>
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e025      	b.n	800473c <HAL_RCC_OscConfig+0x298>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f8:	d114      	bne.n	8004724 <HAL_RCC_OscConfig+0x280>
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a05      	ldr	r2, [pc, #20]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a02      	ldr	r2, [pc, #8]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e013      	b.n	800473c <HAL_RCC_OscConfig+0x298>
 8004714:	40021000 	.word	0x40021000
 8004718:	08009c78 	.word	0x08009c78
 800471c:	20002008 	.word	0x20002008
 8004720:	2000200c 	.word	0x2000200c
 8004724:	4ba0      	ldr	r3, [pc, #640]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a9f      	ldr	r2, [pc, #636]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800472a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b9d      	ldr	r3, [pc, #628]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a9c      	ldr	r2, [pc, #624]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd fad6 	bl	8001cf4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd fad2 	bl	8001cf4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e2ae      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475e:	4b92      	ldr	r3, [pc, #584]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x2a8>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fd fac2 	bl	8001cf4 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7fd fabe 	bl	8001cf4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e29a      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004786:	4b88      	ldr	r3, [pc, #544]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x2d0>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d060      	beq.n	8004864 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_OscConfig+0x310>
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d119      	bne.n	80047e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d116      	bne.n	80047e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b4:	4b7c      	ldr	r3, [pc, #496]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_OscConfig+0x328>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e277      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047cc:	4b76      	ldr	r3, [pc, #472]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	061b      	lsls	r3, r3, #24
 80047da:	4973      	ldr	r1, [pc, #460]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e0:	e040      	b.n	8004864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d023      	beq.n	8004832 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ea:	4b6f      	ldr	r3, [pc, #444]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6e      	ldr	r2, [pc, #440]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80047f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fa7d 	bl	8001cf4 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd fa79 	bl	8001cf4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e255      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004810:	4b65      	ldr	r3, [pc, #404]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b62      	ldr	r3, [pc, #392]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	495f      	ldr	r1, [pc, #380]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
 8004830:	e018      	b.n	8004864 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004832:	4b5d      	ldr	r3, [pc, #372]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a5c      	ldr	r2, [pc, #368]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7fd fa59 	bl	8001cf4 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004846:	f7fd fa55 	bl	8001cf4 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e231      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004858:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03c      	beq.n	80048ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01c      	beq.n	80048b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004878:	4b4b      	ldr	r3, [pc, #300]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800487e:	4a4a      	ldr	r2, [pc, #296]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd fa34 	bl	8001cf4 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004890:	f7fd fa30 	bl	8001cf4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e20c      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a2:	4b41      	ldr	r3, [pc, #260]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ef      	beq.n	8004890 <HAL_RCC_OscConfig+0x3ec>
 80048b0:	e01b      	b.n	80048ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b2:	4b3d      	ldr	r3, [pc, #244]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80048b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b8:	4a3b      	ldr	r2, [pc, #236]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fd fa17 	bl	8001cf4 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fd fa13 	bl	8001cf4 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e1ef      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048dc:	4b32      	ldr	r3, [pc, #200]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80048de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1ef      	bne.n	80048ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80a6 	beq.w	8004a44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048fc:	4b2a      	ldr	r3, [pc, #168]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10d      	bne.n	8004924 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4b27      	ldr	r3, [pc, #156]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	4a26      	ldr	r2, [pc, #152]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	@ 0x58
 8004914:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004920:	2301      	movs	r3, #1
 8004922:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004924:	4b21      	ldr	r3, [pc, #132]	@ (80049ac <HAL_RCC_OscConfig+0x508>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d118      	bne.n	8004962 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004930:	4b1e      	ldr	r3, [pc, #120]	@ (80049ac <HAL_RCC_OscConfig+0x508>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1d      	ldr	r2, [pc, #116]	@ (80049ac <HAL_RCC_OscConfig+0x508>)
 8004936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493c:	f7fd f9da 	bl	8001cf4 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004944:	f7fd f9d6 	bl	8001cf4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1b2      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004956:	4b15      	ldr	r3, [pc, #84]	@ (80049ac <HAL_RCC_OscConfig+0x508>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0f0      	beq.n	8004944 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d108      	bne.n	800497c <HAL_RCC_OscConfig+0x4d8>
 800496a:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004970:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800497a:	e029      	b.n	80049d0 <HAL_RCC_OscConfig+0x52c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b05      	cmp	r3, #5
 8004982:	d115      	bne.n	80049b0 <HAL_RCC_OscConfig+0x50c>
 8004984:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	4a07      	ldr	r2, [pc, #28]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499a:	4a03      	ldr	r2, [pc, #12]	@ (80049a8 <HAL_RCC_OscConfig+0x504>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a4:	e014      	b.n	80049d0 <HAL_RCC_OscConfig+0x52c>
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
 80049b0:	4b9a      	ldr	r3, [pc, #616]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b6:	4a99      	ldr	r2, [pc, #612]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c0:	4b96      	ldr	r3, [pc, #600]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	4a95      	ldr	r2, [pc, #596]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d016      	beq.n	8004a06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fd f98c 	bl	8001cf4 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd f988 	bl	8001cf4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e162      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	4b89      	ldr	r3, [pc, #548]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ed      	beq.n	80049e0 <HAL_RCC_OscConfig+0x53c>
 8004a04:	e015      	b.n	8004a32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a06:	f7fd f975 	bl	8001cf4 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fd f971 	bl	8001cf4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e14b      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a24:	4b7d      	ldr	r3, [pc, #500]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ed      	bne.n	8004a0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a32:	7ffb      	ldrb	r3, [r7, #31]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a38:	4b78      	ldr	r3, [pc, #480]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3c:	4a77      	ldr	r2, [pc, #476]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d03c      	beq.n	8004aca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01c      	beq.n	8004a92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a58:	4b70      	ldr	r3, [pc, #448]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a68:	f7fd f944 	bl	8001cf4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a70:	f7fd f940 	bl	8001cf4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e11c      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a82:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ef      	beq.n	8004a70 <HAL_RCC_OscConfig+0x5cc>
 8004a90:	e01b      	b.n	8004aca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a92:	4b62      	ldr	r3, [pc, #392]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a98:	4a60      	ldr	r2, [pc, #384]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fd f927 	bl	8001cf4 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aaa:	f7fd f923 	bl	8001cf4 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0ff      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004abc:	4b57      	ldr	r3, [pc, #348]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1ef      	bne.n	8004aaa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80f3 	beq.w	8004cba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	f040 80c9 	bne.w	8004c70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ade:	4b4f      	ldr	r3, [pc, #316]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d12c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	3b01      	subs	r3, #1
 8004afe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d123      	bne.n	8004b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d11b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d113      	bne.n	8004b4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d109      	bne.n	8004b4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d06b      	beq.n	8004c24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d062      	beq.n	8004c18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b52:	4b32      	ldr	r3, [pc, #200]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0ac      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b62:	4b2e      	ldr	r3, [pc, #184]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2d      	ldr	r2, [pc, #180]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004b68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b6e:	f7fd f8c1 	bl	8001cf4 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fd f8bd 	bl	8001cf4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e099      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b88:	4b24      	ldr	r3, [pc, #144]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b94:	4b21      	ldr	r3, [pc, #132]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	4b21      	ldr	r3, [pc, #132]	@ (8004c20 <HAL_RCC_OscConfig+0x77c>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ba4:	3a01      	subs	r2, #1
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	4311      	orrs	r1, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bae:	0212      	lsls	r2, r2, #8
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bb6:	0852      	lsrs	r2, r2, #1
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	0552      	lsls	r2, r2, #21
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bc2:	0852      	lsrs	r2, r2, #1
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	0652      	lsls	r2, r2, #25
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bce:	06d2      	lsls	r2, r2, #27
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	4912      	ldr	r1, [pc, #72]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bd8:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bf0:	f7fd f880 	bl	8001cf4 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fd f87c 	bl	8001cf4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e058      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <HAL_RCC_OscConfig+0x778>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c16:	e050      	b.n	8004cba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e04f      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c24:	4b27      	ldr	r3, [pc, #156]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d144      	bne.n	8004cba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c30:	4b24      	ldr	r3, [pc, #144]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a23      	ldr	r2, [pc, #140]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c3c:	4b21      	ldr	r3, [pc, #132]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a20      	ldr	r2, [pc, #128]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c48:	f7fd f854 	bl	8001cf4 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fd f850 	bl	8001cf4 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e02c      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c62:	4b18      	ldr	r3, [pc, #96]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x7ac>
 8004c6e:	e024      	b.n	8004cba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b0c      	cmp	r3, #12
 8004c74:	d01f      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a12      	ldr	r2, [pc, #72]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd f837 	bl	8001cf4 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7fd f833 	bl	8001cf4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e00f      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4905      	ldr	r1, [pc, #20]	@ (8004cc4 <HAL_RCC_OscConfig+0x820>)
 8004cae:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <HAL_RCC_OscConfig+0x824>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60cb      	str	r3, [r1, #12]
 8004cb4:	e001      	b.n	8004cba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	feeefffc 	.word	0xfeeefffc

08004ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0e7      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b75      	ldr	r3, [pc, #468]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d910      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b72      	ldr	r3, [pc, #456]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 0207 	bic.w	r2, r3, #7
 8004cf6:	4970      	ldr	r1, [pc, #448]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0cf      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	4b66      	ldr	r3, [pc, #408]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d908      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b63      	ldr	r3, [pc, #396]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4960      	ldr	r1, [pc, #384]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04c      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	4b5a      	ldr	r3, [pc, #360]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d121      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0a6      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d107      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d6a:	4b54      	ldr	r3, [pc, #336]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d115      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e09a      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d82:	4b4e      	ldr	r3, [pc, #312]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e08e      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d92:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e086      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004da2:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 0203 	bic.w	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4943      	ldr	r1, [pc, #268]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fc ff9e 	bl	8001cf4 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbc:	f7fc ff9a 	bl	8001cf4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e06e      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 020c 	and.w	r2, r3, #12
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d1eb      	bne.n	8004dbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d010      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	4b31      	ldr	r3, [pc, #196]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d208      	bcs.n	8004e12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e00:	4b2e      	ldr	r3, [pc, #184]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	492b      	ldr	r1, [pc, #172]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e12:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d210      	bcs.n	8004e42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e20:	4b25      	ldr	r3, [pc, #148]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 0207 	bic.w	r2, r3, #7
 8004e28:	4923      	ldr	r1, [pc, #140]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e30:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e036      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	4918      	ldr	r1, [pc, #96]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6c:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4910      	ldr	r1, [pc, #64]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e80:	f000 f824 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	490b      	ldr	r1, [pc, #44]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ea0:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1fc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fc fed5 	bl	8001c54 <HAL_InitTick>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	72fb      	strb	r3, [r7, #11]

  return status;
 8004eae:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40022000 	.word	0x40022000
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	08009c78 	.word	0x08009c78
 8004ec4:	20002008 	.word	0x20002008
 8004ec8:	2000200c 	.word	0x2000200c

08004ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eda:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x34>
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b0c      	cmp	r3, #12
 8004ef8:	d121      	bne.n	8004f3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d11e      	bne.n	8004f3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f00:	4b34      	ldr	r3, [pc, #208]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f0c:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f28:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10d      	bne.n	8004f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d102      	bne.n	8004f4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f44:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e004      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f50:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d134      	bne.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d003      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0xac>
 8004f70:	e005      	b.n	8004f7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f72:	4b1a      	ldr	r3, [pc, #104]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8004f74:	617b      	str	r3, [r7, #20]
      break;
 8004f76:	e005      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f78:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f7a:	617b      	str	r3, [r7, #20]
      break;
 8004f7c:	e002      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	617b      	str	r3, [r7, #20]
      break;
 8004f82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f84:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	3301      	adds	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	fb03 f202 	mul.w	r2, r3, r2
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004faa:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	0e5b      	lsrs	r3, r3, #25
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3724      	adds	r7, #36	@ 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	08009c90 	.word	0x08009c90
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20002008 	.word	0x20002008

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4904      	ldr	r1, [pc, #16]	@ (8005024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	08009c88 	.word	0x08009c88

08005028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800502c:	f7ff ffda 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0adb      	lsrs	r3, r3, #11
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4904      	ldr	r1, [pc, #16]	@ (8005050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40021000 	.word	0x40021000
 8005050:	08009c88 	.word	0x08009c88

08005054 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005060:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800506c:	f7ff f9b6 	bl	80043dc <HAL_PWREx_GetVoltageRange>
 8005070:	6178      	str	r0, [r7, #20]
 8005072:	e014      	b.n	800509e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005074:	4b25      	ldr	r3, [pc, #148]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	4a24      	ldr	r2, [pc, #144]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005080:	4b22      	ldr	r3, [pc, #136]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800508c:	f7ff f9a6 	bl	80043dc <HAL_PWREx_GetVoltageRange>
 8005090:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005092:	4b1e      	ldr	r3, [pc, #120]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005096:	4a1d      	ldr	r2, [pc, #116]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a4:	d10b      	bne.n	80050be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b80      	cmp	r3, #128	@ 0x80
 80050aa:	d919      	bls.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80050b0:	d902      	bls.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050b2:	2302      	movs	r3, #2
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e013      	b.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b8:	2301      	movs	r3, #1
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	e010      	b.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d902      	bls.n	80050ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050c4:	2303      	movs	r3, #3
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	e00a      	b.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b80      	cmp	r3, #128	@ 0x80
 80050ce:	d102      	bne.n	80050d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050d0:	2302      	movs	r3, #2
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e004      	b.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b70      	cmp	r3, #112	@ 0x70
 80050da:	d101      	bne.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050dc:	2301      	movs	r3, #1
 80050de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 0207 	bic.w	r2, r3, #7
 80050e8:	4909      	ldr	r1, [pc, #36]	@ (8005110 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050f0:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d001      	beq.n	8005102 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40021000 	.word	0x40021000
 8005110:	40022000 	.word	0x40022000

08005114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800511c:	2300      	movs	r3, #0
 800511e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005120:	2300      	movs	r3, #0
 8005122:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800512c:	2b00      	cmp	r3, #0
 800512e:	d031      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005134:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005138:	d01a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800513a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800513e:	d814      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005144:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005148:	d10f      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800514a:	4b5d      	ldr	r3, [pc, #372]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4a5c      	ldr	r2, [pc, #368]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005154:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005156:	e00c      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fa44 	bl	80055ec <RCCEx_PLLSAI1_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005168:	e003      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	74fb      	strb	r3, [r7, #19]
      break;
 800516e:	e000      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005178:	4b51      	ldr	r3, [pc, #324]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005186:	494e      	ldr	r1, [pc, #312]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 809e 	beq.w	80052de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051a6:	4b46      	ldr	r3, [pc, #280]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051bc:	4b40      	ldr	r3, [pc, #256]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c0:	4a3f      	ldr	r2, [pc, #252]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c8:	4b3d      	ldr	r3, [pc, #244]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d4:	2301      	movs	r3, #1
 80051d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d8:	4b3a      	ldr	r3, [pc, #232]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a39      	ldr	r2, [pc, #228]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80051de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e4:	f7fc fd86 	bl	8001cf4 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051ea:	e009      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ec:	f7fc fd82 	bl	8001cf4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d902      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	74fb      	strb	r3, [r7, #19]
        break;
 80051fe:	e005      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005200:	4b30      	ldr	r3, [pc, #192]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0ef      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d15a      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005212:	4b2b      	ldr	r3, [pc, #172]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01e      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	429a      	cmp	r2, r3
 800522c:	d019      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800522e:	4b24      	ldr	r3, [pc, #144]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005238:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800523a:	4b21      	ldr	r3, [pc, #132]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005240:	4a1f      	ldr	r2, [pc, #124]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800524a:	4b1d      	ldr	r3, [pc, #116]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800525a:	4a19      	ldr	r2, [pc, #100]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d016      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fc fd42 	bl	8001cf4 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005272:	e00b      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fc fd3e 	bl	8001cf4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d902      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	74fb      	strb	r3, [r7, #19]
            break;
 800528a:	e006      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528c:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ec      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a0:	4b07      	ldr	r3, [pc, #28]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ae:	4904      	ldr	r1, [pc, #16]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052b6:	e009      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052b8:	7cfb      	ldrb	r3, [r7, #19]
 80052ba:	74bb      	strb	r3, [r7, #18]
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052cc:	7c7b      	ldrb	r3, [r7, #17]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b9e      	ldr	r3, [pc, #632]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	4a9d      	ldr	r2, [pc, #628]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ea:	4b98      	ldr	r3, [pc, #608]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f0:	f023 0203 	bic.w	r2, r3, #3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4994      	ldr	r1, [pc, #592]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800530c:	4b8f      	ldr	r3, [pc, #572]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f023 020c 	bic.w	r2, r3, #12
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	498c      	ldr	r1, [pc, #560]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800532e:	4b87      	ldr	r3, [pc, #540]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005334:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	4983      	ldr	r1, [pc, #524]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005350:	4b7e      	ldr	r3, [pc, #504]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	497b      	ldr	r1, [pc, #492]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005372:	4b76      	ldr	r3, [pc, #472]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	4972      	ldr	r1, [pc, #456]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005394:	4b6d      	ldr	r3, [pc, #436]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	496a      	ldr	r1, [pc, #424]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b6:	4b65      	ldr	r3, [pc, #404]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c4:	4961      	ldr	r1, [pc, #388]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d8:	4b5c      	ldr	r3, [pc, #368]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e6:	4959      	ldr	r1, [pc, #356]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053fa:	4b54      	ldr	r3, [pc, #336]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	4950      	ldr	r1, [pc, #320]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800541c:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	4948      	ldr	r1, [pc, #288]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800543e:	4b43      	ldr	r3, [pc, #268]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005444:	f023 0203 	bic.w	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	493f      	ldr	r1, [pc, #252]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d028      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005460:	4b3a      	ldr	r3, [pc, #232]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546e:	4937      	ldr	r1, [pc, #220]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800547e:	d106      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005480:	4b32      	ldr	r3, [pc, #200]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a31      	ldr	r2, [pc, #196]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800548a:	60d3      	str	r3, [r2, #12]
 800548c:	e011      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005496:	d10c      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	2101      	movs	r1, #1
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f8a4 	bl	80055ec <RCCEx_PLLSAI1_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d028      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054be:	4b23      	ldr	r3, [pc, #140]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054cc:	491f      	ldr	r1, [pc, #124]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054dc:	d106      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054de:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054e8:	60d3      	str	r3, [r2, #12]
 80054ea:	e011      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054f4:	d10c      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	2101      	movs	r1, #1
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f875 	bl	80055ec <RCCEx_PLLSAI1_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02b      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800551c:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005522:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	4908      	ldr	r1, [pc, #32]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800553a:	d109      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553c:	4b03      	ldr	r3, [pc, #12]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a02      	ldr	r2, [pc, #8]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005546:	60d3      	str	r3, [r2, #12]
 8005548:	e014      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f843 	bl	80055ec <RCCEx_PLLSAI1_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01c      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005586:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558e:	4916      	ldr	r1, [pc, #88]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800559e:	d10c      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	2102      	movs	r1, #2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f820 	bl	80055ec <RCCEx_PLLSAI1_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055c6:	4b08      	ldr	r3, [pc, #32]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	4904      	ldr	r1, [pc, #16]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000

080055ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055fa:	4b74      	ldr	r3, [pc, #464]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d018      	beq.n	8005638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005606:	4b71      	ldr	r3, [pc, #452]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0203 	and.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d10d      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
       ||
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800561e:	4b6b      	ldr	r3, [pc, #428]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
       ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d047      	beq.n	80056c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
 8005636:	e044      	b.n	80056c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d018      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0x86>
 8005640:	2b03      	cmp	r3, #3
 8005642:	d825      	bhi.n	8005690 <RCCEx_PLLSAI1_Config+0xa4>
 8005644:	2b01      	cmp	r3, #1
 8005646:	d002      	beq.n	800564e <RCCEx_PLLSAI1_Config+0x62>
 8005648:	2b02      	cmp	r3, #2
 800564a:	d009      	beq.n	8005660 <RCCEx_PLLSAI1_Config+0x74>
 800564c:	e020      	b.n	8005690 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800564e:	4b5f      	ldr	r3, [pc, #380]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d11d      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565e:	e01a      	b.n	8005696 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005660:	4b5a      	ldr	r3, [pc, #360]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005670:	e013      	b.n	800569a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005672:	4b56      	ldr	r3, [pc, #344]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800567e:	4b53      	ldr	r3, [pc, #332]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800568e:	e006      	b.n	800569e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e004      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800569e:	bf00      	nop
    }

    if(status == HAL_OK)
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056a6:	4b49      	ldr	r3, [pc, #292]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	430b      	orrs	r3, r1
 80056bc:	4943      	ldr	r1, [pc, #268]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d17c      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056c8:	4b40      	ldr	r3, [pc, #256]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3f      	ldr	r2, [pc, #252]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d4:	f7fc fb0e 	bl	8001cf4 <HAL_GetTick>
 80056d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056da:	e009      	b.n	80056f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056dc:	f7fc fb0a 	bl	8001cf4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d902      	bls.n	80056f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	73fb      	strb	r3, [r7, #15]
        break;
 80056ee:	e005      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056f0:	4b36      	ldr	r3, [pc, #216]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ef      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d15f      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d110      	bne.n	800572a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005708:	4b30      	ldr	r3, [pc, #192]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005710:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6892      	ldr	r2, [r2, #8]
 8005718:	0211      	lsls	r1, r2, #8
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68d2      	ldr	r2, [r2, #12]
 800571e:	06d2      	lsls	r2, r2, #27
 8005720:	430a      	orrs	r2, r1
 8005722:	492a      	ldr	r1, [pc, #168]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005724:	4313      	orrs	r3, r2
 8005726:	610b      	str	r3, [r1, #16]
 8005728:	e027      	b.n	800577a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d112      	bne.n	8005756 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005730:	4b26      	ldr	r3, [pc, #152]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005738:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6892      	ldr	r2, [r2, #8]
 8005740:	0211      	lsls	r1, r2, #8
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6912      	ldr	r2, [r2, #16]
 8005746:	0852      	lsrs	r2, r2, #1
 8005748:	3a01      	subs	r2, #1
 800574a:	0552      	lsls	r2, r2, #21
 800574c:	430a      	orrs	r2, r1
 800574e:	491f      	ldr	r1, [pc, #124]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005750:	4313      	orrs	r3, r2
 8005752:	610b      	str	r3, [r1, #16]
 8005754:	e011      	b.n	800577a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005756:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800575e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	0211      	lsls	r1, r2, #8
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6952      	ldr	r2, [r2, #20]
 800576c:	0852      	lsrs	r2, r2, #1
 800576e:	3a01      	subs	r2, #1
 8005770:	0652      	lsls	r2, r2, #25
 8005772:	430a      	orrs	r2, r1
 8005774:	4915      	ldr	r1, [pc, #84]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800577a:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a13      	ldr	r2, [pc, #76]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005780:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005784:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005786:	f7fc fab5 	bl	8001cf4 <HAL_GetTick>
 800578a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800578c:	e009      	b.n	80057a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800578e:	f7fc fab1 	bl	8001cf4 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d902      	bls.n	80057a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	73fb      	strb	r3, [r7, #15]
          break;
 80057a0:	e005      	b.n	80057ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057a2:	4b0a      	ldr	r3, [pc, #40]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ef      	beq.n	800578e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4903      	ldr	r1, [pc, #12]	@ (80057cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000

080057d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e040      	b.n	8005864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc f87e 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	@ 0x24
 80057fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fb38 	bl	8005e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8af 	bl	8005980 <UART_SetConfig>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e01b      	b.n	8005864 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800583a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800584a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fbb7 	bl	8005fd0 <UART_CheckIdleState>
 8005862:	4603      	mov	r3, r0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	@ 0x28
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005880:	2b20      	cmp	r3, #32
 8005882:	d177      	bne.n	8005974 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_UART_Transmit+0x24>
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e070      	b.n	8005976 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2221      	movs	r2, #33	@ 0x21
 80058a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a2:	f7fc fa27 	bl	8001cf4 <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_UART_Transmit+0x68>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058dc:	e02f      	b.n	800593e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	@ 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fc19 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e03b      	b.n	8005976 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	881a      	ldrh	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005910:	b292      	uxth	r2, r2
 8005912:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3302      	adds	r3, #2
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e007      	b.n	800592c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3301      	adds	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1c9      	bne.n	80058de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	2140      	movs	r1, #64	@ 0x40
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fbe3 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e005      	b.n	8005976 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	e000      	b.n	8005976 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005974:	2302      	movs	r3, #2
  }
}
 8005976:	4618      	mov	r0, r3
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b08a      	sub	sp, #40	@ 0x28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	431a      	orrs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4ba5      	ldr	r3, [pc, #660]	@ (8005c44 <UART_SetConfig+0x2c4>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a9a      	ldr	r2, [pc, #616]	@ (8005c48 <UART_SetConfig+0x2c8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e8:	4313      	orrs	r3, r2
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a91      	ldr	r2, [pc, #580]	@ (8005c4c <UART_SetConfig+0x2cc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d126      	bne.n	8005a58 <UART_SetConfig+0xd8>
 8005a0a:	4b91      	ldr	r3, [pc, #580]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d81b      	bhi.n	8005a50 <UART_SetConfig+0xd0>
 8005a18:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <UART_SetConfig+0xa0>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	08005a39 	.word	0x08005a39
 8005a2c:	08005a49 	.word	0x08005a49
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a36:	e0d6      	b.n	8005be6 <UART_SetConfig+0x266>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3e:	e0d2      	b.n	8005be6 <UART_SetConfig+0x266>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a46:	e0ce      	b.n	8005be6 <UART_SetConfig+0x266>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	e0ca      	b.n	8005be6 <UART_SetConfig+0x266>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a56:	e0c6      	b.n	8005be6 <UART_SetConfig+0x266>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a7d      	ldr	r2, [pc, #500]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d138      	bne.n	8005ad4 <UART_SetConfig+0x154>
 8005a62:	4b7b      	ldr	r3, [pc, #492]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a68:	f003 030c 	and.w	r3, r3, #12
 8005a6c:	2b0c      	cmp	r3, #12
 8005a6e:	d82d      	bhi.n	8005acc <UART_SetConfig+0x14c>
 8005a70:	a201      	add	r2, pc, #4	@ (adr r2, 8005a78 <UART_SetConfig+0xf8>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005acd 	.word	0x08005acd
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005acd 	.word	0x08005acd
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab2:	e098      	b.n	8005be6 <UART_SetConfig+0x266>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aba:	e094      	b.n	8005be6 <UART_SetConfig+0x266>
 8005abc:	2304      	movs	r3, #4
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac2:	e090      	b.n	8005be6 <UART_SetConfig+0x266>
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aca:	e08c      	b.n	8005be6 <UART_SetConfig+0x266>
 8005acc:	2310      	movs	r3, #16
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad2:	e088      	b.n	8005be6 <UART_SetConfig+0x266>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8005c58 <UART_SetConfig+0x2d8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d125      	bne.n	8005b2a <UART_SetConfig+0x1aa>
 8005ade:	4b5c      	ldr	r3, [pc, #368]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ae8:	2b30      	cmp	r3, #48	@ 0x30
 8005aea:	d016      	beq.n	8005b1a <UART_SetConfig+0x19a>
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d818      	bhi.n	8005b22 <UART_SetConfig+0x1a2>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d00a      	beq.n	8005b0a <UART_SetConfig+0x18a>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d814      	bhi.n	8005b22 <UART_SetConfig+0x1a2>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <UART_SetConfig+0x182>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d008      	beq.n	8005b12 <UART_SetConfig+0x192>
 8005b00:	e00f      	b.n	8005b22 <UART_SetConfig+0x1a2>
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b08:	e06d      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b10:	e069      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b12:	2304      	movs	r3, #4
 8005b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b18:	e065      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b20:	e061      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b22:	2310      	movs	r3, #16
 8005b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b28:	e05d      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8005c5c <UART_SetConfig+0x2dc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d125      	bne.n	8005b80 <UART_SetConfig+0x200>
 8005b34:	4b46      	ldr	r3, [pc, #280]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b40:	d016      	beq.n	8005b70 <UART_SetConfig+0x1f0>
 8005b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b44:	d818      	bhi.n	8005b78 <UART_SetConfig+0x1f8>
 8005b46:	2b80      	cmp	r3, #128	@ 0x80
 8005b48:	d00a      	beq.n	8005b60 <UART_SetConfig+0x1e0>
 8005b4a:	2b80      	cmp	r3, #128	@ 0x80
 8005b4c:	d814      	bhi.n	8005b78 <UART_SetConfig+0x1f8>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <UART_SetConfig+0x1d8>
 8005b52:	2b40      	cmp	r3, #64	@ 0x40
 8005b54:	d008      	beq.n	8005b68 <UART_SetConfig+0x1e8>
 8005b56:	e00f      	b.n	8005b78 <UART_SetConfig+0x1f8>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5e:	e042      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b60:	2302      	movs	r3, #2
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b66:	e03e      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6e:	e03a      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b76:	e036      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7e:	e032      	b.n	8005be6 <UART_SetConfig+0x266>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a30      	ldr	r2, [pc, #192]	@ (8005c48 <UART_SetConfig+0x2c8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d12a      	bne.n	8005be0 <UART_SetConfig+0x260>
 8005b8a:	4b31      	ldr	r3, [pc, #196]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b98:	d01a      	beq.n	8005bd0 <UART_SetConfig+0x250>
 8005b9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b9e:	d81b      	bhi.n	8005bd8 <UART_SetConfig+0x258>
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba4:	d00c      	beq.n	8005bc0 <UART_SetConfig+0x240>
 8005ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005baa:	d815      	bhi.n	8005bd8 <UART_SetConfig+0x258>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <UART_SetConfig+0x238>
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb4:	d008      	beq.n	8005bc8 <UART_SetConfig+0x248>
 8005bb6:	e00f      	b.n	8005bd8 <UART_SetConfig+0x258>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	e012      	b.n	8005be6 <UART_SetConfig+0x266>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc6:	e00e      	b.n	8005be6 <UART_SetConfig+0x266>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bce:	e00a      	b.n	8005be6 <UART_SetConfig+0x266>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd6:	e006      	b.n	8005be6 <UART_SetConfig+0x266>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bde:	e002      	b.n	8005be6 <UART_SetConfig+0x266>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <UART_SetConfig+0x2c8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	f040 808b 	bne.w	8005d08 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d834      	bhi.n	8005c64 <UART_SetConfig+0x2e4>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0x280>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c33 	.word	0x08005c33
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c65 	.word	0x08005c65
 8005c20:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7ff f9ea 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005c28:	61f8      	str	r0, [r7, #28]
        break;
 8005c2a:	e021      	b.n	8005c70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <UART_SetConfig+0x2e0>)
 8005c2e:	61fb      	str	r3, [r7, #28]
        break;
 8005c30:	e01e      	b.n	8005c70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7ff f94b 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8005c36:	61f8      	str	r0, [r7, #28]
        break;
 8005c38:	e01a      	b.n	8005c70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c3e:	61fb      	str	r3, [r7, #28]
        break;
 8005c40:	e016      	b.n	8005c70 <UART_SetConfig+0x2f0>
 8005c42:	bf00      	nop
 8005c44:	efff69f3 	.word	0xefff69f3
 8005c48:	40008000 	.word	0x40008000
 8005c4c:	40013800 	.word	0x40013800
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40004400 	.word	0x40004400
 8005c58:	40004800 	.word	0x40004800
 8005c5c:	40004c00 	.word	0x40004c00
 8005c60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80fa 	beq.w	8005e6c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d305      	bcc.n	8005c94 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d903      	bls.n	8005c9c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c9a:	e0e7      	b.n	8005e6c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	461c      	mov	r4, r3
 8005ca2:	4615      	mov	r5, r2
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	022b      	lsls	r3, r5, #8
 8005cae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005cb2:	0222      	lsls	r2, r4, #8
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	6849      	ldr	r1, [r1, #4]
 8005cb8:	0849      	lsrs	r1, r1, #1
 8005cba:	2000      	movs	r0, #0
 8005cbc:	4688      	mov	r8, r1
 8005cbe:	4681      	mov	r9, r0
 8005cc0:	eb12 0a08 	adds.w	sl, r2, r8
 8005cc4:	eb43 0b09 	adc.w	fp, r3, r9
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd6:	4650      	mov	r0, sl
 8005cd8:	4659      	mov	r1, fp
 8005cda:	f7fa ff6d 	bl	8000bb8 <__aeabi_uldivmod>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cec:	d308      	bcc.n	8005d00 <UART_SetConfig+0x380>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cf4:	d204      	bcs.n	8005d00 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	e0b5      	b.n	8005e6c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d06:	e0b1      	b.n	8005e6c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d10:	d15d      	bne.n	8005dce <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005d12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d827      	bhi.n	8005d6a <UART_SetConfig+0x3ea>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <UART_SetConfig+0x3a0>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d6b 	.word	0x08005d6b
 8005d30:	08005d5b 	.word	0x08005d5b
 8005d34:	08005d6b 	.word	0x08005d6b
 8005d38:	08005d6b 	.word	0x08005d6b
 8005d3c:	08005d6b 	.word	0x08005d6b
 8005d40:	08005d63 	.word	0x08005d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7ff f95a 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005d48:	61f8      	str	r0, [r7, #28]
        break;
 8005d4a:	e014      	b.n	8005d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d4c:	f7ff f96c 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 8005d50:	61f8      	str	r0, [r7, #28]
        break;
 8005d52:	e010      	b.n	8005d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b4c      	ldr	r3, [pc, #304]	@ (8005e88 <UART_SetConfig+0x508>)
 8005d56:	61fb      	str	r3, [r7, #28]
        break;
 8005d58:	e00d      	b.n	8005d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5a:	f7ff f8b7 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8005d5e:	61f8      	str	r0, [r7, #28]
        break;
 8005d60:	e009      	b.n	8005d76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d66:	61fb      	str	r3, [r7, #28]
        break;
 8005d68:	e005      	b.n	8005d76 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d077      	beq.n	8005e6c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005a      	lsls	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b0f      	cmp	r3, #15
 8005d96:	d916      	bls.n	8005dc6 <UART_SetConfig+0x446>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d9e:	d212      	bcs.n	8005dc6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f023 030f 	bic.w	r3, r3, #15
 8005da8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	8afb      	ldrh	r3, [r7, #22]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	8afa      	ldrh	r2, [r7, #22]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e052      	b.n	8005e6c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dcc:	e04e      	b.n	8005e6c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d827      	bhi.n	8005e26 <UART_SetConfig+0x4a6>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x45c>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	08005e27 	.word	0x08005e27
 8005dec:	08005e17 	.word	0x08005e17
 8005df0:	08005e27 	.word	0x08005e27
 8005df4:	08005e27 	.word	0x08005e27
 8005df8:	08005e27 	.word	0x08005e27
 8005dfc:	08005e1f 	.word	0x08005e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7ff f8fc 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005e04:	61f8      	str	r0, [r7, #28]
        break;
 8005e06:	e014      	b.n	8005e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7ff f90e 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 8005e0c:	61f8      	str	r0, [r7, #28]
        break;
 8005e0e:	e010      	b.n	8005e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	@ (8005e88 <UART_SetConfig+0x508>)
 8005e12:	61fb      	str	r3, [r7, #28]
        break;
 8005e14:	e00d      	b.n	8005e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e16:	f7ff f859 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8005e1a:	61f8      	str	r0, [r7, #28]
        break;
 8005e1c:	e009      	b.n	8005e32 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e22:	61fb      	str	r3, [r7, #28]
        break;
 8005e24:	e005      	b.n	8005e32 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e30:	bf00      	nop
    }

    if (pclk != 0U)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d019      	beq.n	8005e6c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	085a      	lsrs	r2, r3, #1
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	441a      	add	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	d909      	bls.n	8005e66 <UART_SetConfig+0x4e6>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d205      	bcs.n	8005e66 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	e002      	b.n	8005e6c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3728      	adds	r7, #40	@ 0x28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e86:	bf00      	nop
 8005e88:	00f42400 	.word	0x00f42400

08005e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8a:	d10a      	bne.n	8005fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b098      	sub	sp, #96	@ 0x60
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe0:	f7fb fe88 	bl	8001cf4 <HAL_GetTick>
 8005fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d12e      	bne.n	8006052 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f88c 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d021      	beq.n	8006052 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800601c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006022:	653b      	str	r3, [r7, #80]	@ 0x50
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602c:	647b      	str	r3, [r7, #68]	@ 0x44
 800602e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800603a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e062      	b.n	8006118 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b04      	cmp	r3, #4
 800605e:	d149      	bne.n	80060f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f856 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d03c      	beq.n	80060f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	623b      	str	r3, [r7, #32]
   return(result);
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800608e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30
 800609a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800609e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3308      	adds	r3, #8
 80060b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060cc:	61fa      	str	r2, [r7, #28]
 80060ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e011      	b.n	8006118 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3758      	adds	r7, #88	@ 0x58
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	e04f      	b.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d04b      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fb fddb 	bl	8001cf4 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <UART_WaitOnFlagUntilTimeout+0x30>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e04e      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d037      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b80      	cmp	r3, #128	@ 0x80
 8006166:	d034      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b40      	cmp	r3, #64	@ 0x40
 800616c:	d031      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b08      	cmp	r3, #8
 800617a:	d110      	bne.n	800619e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2208      	movs	r2, #8
 8006182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f838 	bl	80061fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2208      	movs	r2, #8
 800618e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e029      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ac:	d111      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f81e 	bl	80061fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e00f      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d0a0      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b095      	sub	sp, #84	@ 0x54
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006220:	643b      	str	r3, [r7, #64]	@ 0x40
 8006222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	61fb      	str	r3, [r7, #28]
   return(result);
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006254:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626c:	2b01      	cmp	r3, #1
 800626e:	d118      	bne.n	80062a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	60bb      	str	r3, [r7, #8]
   return(result);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 0310 	bic.w	r3, r3, #16
 8006284:	647b      	str	r3, [r7, #68]	@ 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	613b      	str	r3, [r7, #16]
   return(result);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e6      	bne.n	8006270 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062b6:	bf00      	nop
 80062b8:	3754      	adds	r7, #84	@ 0x54
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <arm_max_f32>:
 80062c4:	f101 3cff 	add.w	ip, r1, #4294967295
 80062c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ca:	4607      	mov	r7, r0
 80062cc:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80062d0:	ecf7 7a01 	vldmia	r7!, {s15}
 80062d4:	d060      	beq.n	8006398 <arm_max_f32+0xd4>
 80062d6:	2400      	movs	r4, #0
 80062d8:	3014      	adds	r0, #20
 80062da:	4625      	mov	r5, r4
 80062dc:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80062e0:	ed10 7a04 	vldr	s14, [r0, #-16]
 80062e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	bf48      	it	mi
 80062ee:	eef0 7a47 	vmovmi.f32	s15, s14
 80062f2:	ed10 7a03 	vldr	s14, [r0, #-12]
 80062f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fa:	bf48      	it	mi
 80062fc:	1c65      	addmi	r5, r4, #1
 80062fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006302:	bf48      	it	mi
 8006304:	eef0 7a47 	vmovmi.f32	s15, s14
 8006308:	ed10 7a02 	vldr	s14, [r0, #-8]
 800630c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006310:	bf48      	it	mi
 8006312:	1ca5      	addmi	r5, r4, #2
 8006314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006318:	bf48      	it	mi
 800631a:	eef0 7a47 	vmovmi.f32	s15, s14
 800631e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006326:	bf48      	it	mi
 8006328:	1ce5      	addmi	r5, r4, #3
 800632a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632e:	f104 0404 	add.w	r4, r4, #4
 8006332:	bf44      	itt	mi
 8006334:	eef0 7a47 	vmovmi.f32	s15, s14
 8006338:	4625      	movmi	r5, r4
 800633a:	42a6      	cmp	r6, r4
 800633c:	f100 0010 	add.w	r0, r0, #16
 8006340:	d1ce      	bne.n	80062e0 <arm_max_f32+0x1c>
 8006342:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8006346:	f01c 0003 	ands.w	r0, ip, #3
 800634a:	d021      	beq.n	8006390 <arm_max_f32+0xcc>
 800634c:	ed97 7a00 	vldr	s14, [r7]
 8006350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006358:	bfc4      	itt	gt
 800635a:	eef0 7a47 	vmovgt.f32	s15, s14
 800635e:	1a0d      	subgt	r5, r1, r0
 8006360:	3801      	subs	r0, #1
 8006362:	d015      	beq.n	8006390 <arm_max_f32+0xcc>
 8006364:	ed97 7a01 	vldr	s14, [r7, #4]
 8006368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006370:	bf44      	itt	mi
 8006372:	eef0 7a47 	vmovmi.f32	s15, s14
 8006376:	1a0d      	submi	r5, r1, r0
 8006378:	2801      	cmp	r0, #1
 800637a:	d009      	beq.n	8006390 <arm_max_f32+0xcc>
 800637c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006388:	bfc4      	itt	gt
 800638a:	eef0 7a47 	vmovgt.f32	s15, s14
 800638e:	4665      	movgt	r5, ip
 8006390:	edc2 7a00 	vstr	s15, [r2]
 8006394:	601d      	str	r5, [r3, #0]
 8006396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006398:	4675      	mov	r5, lr
 800639a:	e7d4      	b.n	8006346 <arm_max_f32+0x82>

0800639c <arm_cfft_radix8by2_f32>:
 800639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a0:	ed2d 8b08 	vpush	{d8-d11}
 80063a4:	4607      	mov	r7, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	f8b7 c000 	ldrh.w	ip, [r7]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80063b2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80063b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80063ba:	f000 80b0 	beq.w	800651e <arm_cfft_radix8by2_f32+0x182>
 80063be:	008c      	lsls	r4, r1, #2
 80063c0:	3410      	adds	r4, #16
 80063c2:	f100 0310 	add.w	r3, r0, #16
 80063c6:	1906      	adds	r6, r0, r4
 80063c8:	3210      	adds	r2, #16
 80063ca:	4444      	add	r4, r8
 80063cc:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80063d0:	f108 0510 	add.w	r5, r8, #16
 80063d4:	ed15 2a04 	vldr	s4, [r5, #-16]
 80063d8:	ed55 2a03 	vldr	s5, [r5, #-12]
 80063dc:	ed54 4a04 	vldr	s9, [r4, #-16]
 80063e0:	ed14 4a03 	vldr	s8, [r4, #-12]
 80063e4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80063e8:	ed54 5a01 	vldr	s11, [r4, #-4]
 80063ec:	ed53 3a04 	vldr	s7, [r3, #-16]
 80063f0:	ed15 0a02 	vldr	s0, [r5, #-8]
 80063f4:	ed55 0a01 	vldr	s1, [r5, #-4]
 80063f8:	ed56 6a04 	vldr	s13, [r6, #-16]
 80063fc:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006400:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006404:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006408:	ed53 7a01 	vldr	s15, [r3, #-4]
 800640c:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006410:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006414:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006418:	ee37 ba22 	vadd.f32	s22, s14, s5
 800641c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006420:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006424:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006428:	ee75 aa00 	vadd.f32	s21, s10, s0
 800642c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006430:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006434:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006438:	ed03 ba03 	vstr	s22, [r3, #-12]
 800643c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006440:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006444:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006448:	ed46 9a04 	vstr	s19, [r6, #-16]
 800644c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006450:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006454:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006458:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800645c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006460:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006464:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006468:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800646c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006470:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006474:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006478:	ee64 4a83 	vmul.f32	s9, s9, s6
 800647c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006480:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006484:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006488:	ee24 4a03 	vmul.f32	s8, s8, s6
 800648c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006490:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006494:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006498:	ee32 3a08 	vadd.f32	s6, s4, s16
 800649c:	ed05 7a03 	vstr	s14, [r5, #-12]
 80064a0:	ed05 3a04 	vstr	s6, [r5, #-16]
 80064a4:	ed04 4a04 	vstr	s8, [r4, #-16]
 80064a8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80064ac:	ed12 7a01 	vldr	s14, [r2, #-4]
 80064b0:	ee76 6a41 	vsub.f32	s13, s12, s2
 80064b4:	ee35 5a40 	vsub.f32	s10, s10, s0
 80064b8:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80064bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80064c0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80064c4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80064c8:	ee66 4a87 	vmul.f32	s9, s13, s14
 80064cc:	ee25 4a25 	vmul.f32	s8, s10, s11
 80064d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80064d4:	ee25 5a07 	vmul.f32	s10, s10, s14
 80064d8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80064dc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80064e0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80064e4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80064e8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80064ec:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80064f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80064f4:	3310      	adds	r3, #16
 80064f6:	4563      	cmp	r3, ip
 80064f8:	ed45 5a02 	vstr	s11, [r5, #-8]
 80064fc:	f106 0610 	add.w	r6, r6, #16
 8006500:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006504:	f102 0210 	add.w	r2, r2, #16
 8006508:	ed04 6a02 	vstr	s12, [r4, #-8]
 800650c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006510:	f105 0510 	add.w	r5, r5, #16
 8006514:	f104 0410 	add.w	r4, r4, #16
 8006518:	f47f af5c 	bne.w	80063d4 <arm_cfft_radix8by2_f32+0x38>
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	b28c      	uxth	r4, r1
 8006520:	4621      	mov	r1, r4
 8006522:	2302      	movs	r3, #2
 8006524:	f000 fc1c 	bl	8006d60 <arm_radix8_butterfly_f32>
 8006528:	ecbd 8b08 	vpop	{d8-d11}
 800652c:	4621      	mov	r1, r4
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4640      	mov	r0, r8
 8006532:	2302      	movs	r3, #2
 8006534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	f000 bc12 	b.w	8006d60 <arm_radix8_butterfly_f32>

0800653c <arm_cfft_radix8by4_f32>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	ed2d 8b0a 	vpush	{d8-d12}
 8006544:	b08d      	sub	sp, #52	@ 0x34
 8006546:	460d      	mov	r5, r1
 8006548:	910b      	str	r1, [sp, #44]	@ 0x2c
 800654a:	8801      	ldrh	r1, [r0, #0]
 800654c:	6842      	ldr	r2, [r0, #4]
 800654e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006550:	0849      	lsrs	r1, r1, #1
 8006552:	008b      	lsls	r3, r1, #2
 8006554:	18ee      	adds	r6, r5, r3
 8006556:	18f0      	adds	r0, r6, r3
 8006558:	edd0 5a00 	vldr	s11, [r0]
 800655c:	edd5 7a00 	vldr	s15, [r5]
 8006560:	ed96 7a00 	vldr	s14, [r6]
 8006564:	edd0 3a01 	vldr	s7, [r0, #4]
 8006568:	ed96 4a01 	vldr	s8, [r6, #4]
 800656c:	ed95 5a01 	vldr	s10, [r5, #4]
 8006570:	9008      	str	r0, [sp, #32]
 8006572:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006576:	18c7      	adds	r7, r0, r3
 8006578:	edd7 4a00 	vldr	s9, [r7]
 800657c:	ed97 3a01 	vldr	s6, [r7, #4]
 8006580:	9701      	str	r7, [sp, #4]
 8006582:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006586:	462c      	mov	r4, r5
 8006588:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800658c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006590:	ee16 ca90 	vmov	ip, s13
 8006594:	f844 cb08 	str.w	ip, [r4], #8
 8006598:	ee75 6a23 	vadd.f32	s13, s10, s7
 800659c:	edd6 5a01 	vldr	s11, [r6, #4]
 80065a0:	edd7 2a01 	vldr	s5, [r7, #4]
 80065a4:	9404      	str	r4, [sp, #16]
 80065a6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80065aa:	ee74 3a27 	vadd.f32	s7, s8, s15
 80065ae:	ee36 6a47 	vsub.f32	s12, s12, s14
 80065b2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80065b6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80065ba:	0849      	lsrs	r1, r1, #1
 80065bc:	f102 0e08 	add.w	lr, r2, #8
 80065c0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80065c4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80065c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80065ca:	ee35 4a47 	vsub.f32	s8, s10, s14
 80065ce:	f1a1 0902 	sub.w	r9, r1, #2
 80065d2:	f8cd e00c 	str.w	lr, [sp, #12]
 80065d6:	4631      	mov	r1, r6
 80065d8:	ee13 ea90 	vmov	lr, s7
 80065dc:	ee36 6a64 	vsub.f32	s12, s12, s9
 80065e0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80065e4:	4604      	mov	r4, r0
 80065e6:	edc5 5a01 	vstr	s11, [r5, #4]
 80065ea:	ee37 7a05 	vadd.f32	s14, s14, s10
 80065ee:	f841 eb08 	str.w	lr, [r1], #8
 80065f2:	ee34 5a24 	vadd.f32	s10, s8, s9
 80065f6:	ee16 ea10 	vmov	lr, s12
 80065fa:	ed86 5a01 	vstr	s10, [r6, #4]
 80065fe:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006602:	f844 eb08 	str.w	lr, [r4], #8
 8006606:	ee77 7a83 	vadd.f32	s15, s15, s6
 800660a:	edc0 6a01 	vstr	s13, [r0, #4]
 800660e:	9405      	str	r4, [sp, #20]
 8006610:	4604      	mov	r4, r0
 8006612:	ee17 0a90 	vmov	r0, s15
 8006616:	9106      	str	r1, [sp, #24]
 8006618:	ee37 7a64 	vsub.f32	s14, s14, s9
 800661c:	f102 0110 	add.w	r1, r2, #16
 8006620:	46bc      	mov	ip, r7
 8006622:	9100      	str	r1, [sp, #0]
 8006624:	f847 0b08 	str.w	r0, [r7], #8
 8006628:	f102 0118 	add.w	r1, r2, #24
 800662c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006630:	9102      	str	r1, [sp, #8]
 8006632:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006636:	9007      	str	r0, [sp, #28]
 8006638:	f000 8134 	beq.w	80068a4 <arm_cfft_radix8by4_f32+0x368>
 800663c:	f102 0920 	add.w	r9, r2, #32
 8006640:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8006644:	9a01      	ldr	r2, [sp, #4]
 8006646:	f8dd a000 	ldr.w	sl, [sp]
 800664a:	3b0c      	subs	r3, #12
 800664c:	4683      	mov	fp, r0
 800664e:	4463      	add	r3, ip
 8006650:	f105 0e10 	add.w	lr, r5, #16
 8006654:	f1a4 010c 	sub.w	r1, r4, #12
 8006658:	f104 0510 	add.w	r5, r4, #16
 800665c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006660:	f1a2 040c 	sub.w	r4, r2, #12
 8006664:	f106 0010 	add.w	r0, r6, #16
 8006668:	3210      	adds	r2, #16
 800666a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800666e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006672:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006676:	ed52 1a02 	vldr	s3, [r2, #-8]
 800667a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800667e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006682:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006686:	ed10 8a01 	vldr	s16, [r0, #-4]
 800668a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800668e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006692:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006696:	ee30 0a66 	vsub.f32	s0, s0, s13
 800669a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800669e:	ee75 5a65 	vsub.f32	s11, s10, s11
 80066a2:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80066a6:	ed10 7a01 	vldr	s14, [r0, #-4]
 80066aa:	ed52 6a01 	vldr	s13, [r2, #-4]
 80066ae:	ee36 7a07 	vadd.f32	s14, s12, s14
 80066b2:	ee78 aa25 	vadd.f32	s21, s16, s11
 80066b6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80066ba:	ee70 3a67 	vsub.f32	s7, s0, s15
 80066be:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80066c2:	ed94 7a02 	vldr	s14, [r4, #8]
 80066c6:	ed9c 2a02 	vldr	s4, [ip, #8]
 80066ca:	ed91 ba02 	vldr	s22, [r1, #8]
 80066ce:	edd3 9a02 	vldr	s19, [r3, #8]
 80066d2:	edd4 2a01 	vldr	s5, [r4, #4]
 80066d6:	ed9c 9a01 	vldr	s18, [ip, #4]
 80066da:	ed93 5a01 	vldr	s10, [r3, #4]
 80066de:	edd1 0a01 	vldr	s1, [r1, #4]
 80066e2:	ee72 6a07 	vadd.f32	s13, s4, s14
 80066e6:	ee32 2a47 	vsub.f32	s4, s4, s14
 80066ea:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80066ee:	ee79 4a22 	vadd.f32	s9, s18, s5
 80066f2:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80066f6:	ee79 2a62 	vsub.f32	s5, s18, s5
 80066fa:	ed8c 7a02 	vstr	s14, [ip, #8]
 80066fe:	ed91 7a01 	vldr	s14, [r1, #4]
 8006702:	edd3 8a01 	vldr	s17, [r3, #4]
 8006706:	ee34 7a87 	vadd.f32	s14, s9, s14
 800670a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800670e:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006712:	ee32 9a60 	vsub.f32	s18, s4, s1
 8006716:	ed8c 7a01 	vstr	s14, [ip, #4]
 800671a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800671e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006722:	ee73 8a22 	vadd.f32	s17, s6, s5
 8006726:	ee39 9a05 	vadd.f32	s18, s18, s10
 800672a:	ee7a aac1 	vsub.f32	s21, s21, s2
 800672e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006732:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8006736:	ee69 ba07 	vmul.f32	s23, s18, s14
 800673a:	ee6a aa87 	vmul.f32	s21, s21, s14
 800673e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8006742:	ee63 ca87 	vmul.f32	s25, s7, s14
 8006746:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800674a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800674e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006752:	ee73 3aea 	vsub.f32	s7, s7, s21
 8006756:	ee78 8a89 	vadd.f32	s17, s17, s18
 800675a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800675e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8006762:	ee34 4a67 	vsub.f32	s8, s8, s15
 8006766:	ee76 6acb 	vsub.f32	s13, s13, s22
 800676a:	ee36 6a48 	vsub.f32	s12, s12, s16
 800676e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8006772:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006776:	ed40 3a01 	vstr	s7, [r0, #-4]
 800677a:	edc1 8a01 	vstr	s17, [r1, #4]
 800677e:	ed81 aa02 	vstr	s20, [r1, #8]
 8006782:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006786:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800678a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800678e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006792:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006796:	ee36 6a41 	vsub.f32	s12, s12, s2
 800679a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800679e:	ee66 9a26 	vmul.f32	s19, s12, s13
 80067a2:	ee24 9a23 	vmul.f32	s18, s8, s7
 80067a6:	ee26 6a23 	vmul.f32	s12, s12, s7
 80067aa:	ee24 4a26 	vmul.f32	s8, s8, s13
 80067ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80067b2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80067b6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80067ba:	ee36 6a44 	vsub.f32	s12, s12, s8
 80067be:	ee37 7a64 	vsub.f32	s14, s14, s9
 80067c2:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80067c6:	ee79 3a29 	vadd.f32	s7, s18, s19
 80067ca:	ee75 6a60 	vsub.f32	s13, s10, s1
 80067ce:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80067d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80067d6:	ed45 3a02 	vstr	s7, [r5, #-8]
 80067da:	ed05 6a01 	vstr	s12, [r5, #-4]
 80067de:	ed84 7a01 	vstr	s14, [r4, #4]
 80067e2:	ed84 4a02 	vstr	s8, [r4, #8]
 80067e6:	ee35 6a81 	vadd.f32	s12, s11, s2
 80067ea:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80067ee:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80067f2:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80067f6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80067fa:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80067fe:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006802:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006806:	ee26 5a25 	vmul.f32	s10, s12, s11
 800680a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800680e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006812:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006816:	ee63 6a26 	vmul.f32	s13, s6, s13
 800681a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800681e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006822:	ee75 5a24 	vadd.f32	s11, s10, s9
 8006826:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800682a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800682e:	f1bb 0b01 	subs.w	fp, fp, #1
 8006832:	ed42 5a02 	vstr	s11, [r2, #-8]
 8006836:	ed42 7a01 	vstr	s15, [r2, #-4]
 800683a:	f10e 0e08 	add.w	lr, lr, #8
 800683e:	ed83 3a02 	vstr	s6, [r3, #8]
 8006842:	ed83 7a01 	vstr	s14, [r3, #4]
 8006846:	f1ac 0c08 	sub.w	ip, ip, #8
 800684a:	f10a 0a08 	add.w	sl, sl, #8
 800684e:	f100 0008 	add.w	r0, r0, #8
 8006852:	f1a1 0108 	sub.w	r1, r1, #8
 8006856:	f109 0910 	add.w	r9, r9, #16
 800685a:	f105 0508 	add.w	r5, r5, #8
 800685e:	f1a4 0408 	sub.w	r4, r4, #8
 8006862:	f108 0818 	add.w	r8, r8, #24
 8006866:	f102 0208 	add.w	r2, r2, #8
 800686a:	f1a3 0308 	sub.w	r3, r3, #8
 800686e:	f47f aefc 	bne.w	800666a <arm_cfft_radix8by4_f32+0x12e>
 8006872:	9907      	ldr	r1, [sp, #28]
 8006874:	9800      	ldr	r0, [sp, #0]
 8006876:	00cb      	lsls	r3, r1, #3
 8006878:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800687c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006880:	9100      	str	r1, [sp, #0]
 8006882:	9904      	ldr	r1, [sp, #16]
 8006884:	4419      	add	r1, r3
 8006886:	9104      	str	r1, [sp, #16]
 8006888:	9903      	ldr	r1, [sp, #12]
 800688a:	4419      	add	r1, r3
 800688c:	9103      	str	r1, [sp, #12]
 800688e:	9906      	ldr	r1, [sp, #24]
 8006890:	4419      	add	r1, r3
 8006892:	9106      	str	r1, [sp, #24]
 8006894:	9905      	ldr	r1, [sp, #20]
 8006896:	441f      	add	r7, r3
 8006898:	4419      	add	r1, r3
 800689a:	9b02      	ldr	r3, [sp, #8]
 800689c:	9105      	str	r1, [sp, #20]
 800689e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068a2:	9302      	str	r3, [sp, #8]
 80068a4:	9904      	ldr	r1, [sp, #16]
 80068a6:	9805      	ldr	r0, [sp, #20]
 80068a8:	ed91 4a00 	vldr	s8, [r1]
 80068ac:	edd0 6a00 	vldr	s13, [r0]
 80068b0:	9b06      	ldr	r3, [sp, #24]
 80068b2:	ed97 3a00 	vldr	s6, [r7]
 80068b6:	edd3 7a00 	vldr	s15, [r3]
 80068ba:	edd0 4a01 	vldr	s9, [r0, #4]
 80068be:	edd1 3a01 	vldr	s7, [r1, #4]
 80068c2:	ed97 2a01 	vldr	s4, [r7, #4]
 80068c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80068ca:	9a03      	ldr	r2, [sp, #12]
 80068cc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80068d0:	ee34 6a26 	vadd.f32	s12, s8, s13
 80068d4:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80068d8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80068dc:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80068e0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80068e4:	ee74 6a66 	vsub.f32	s13, s8, s13
 80068e8:	ed81 5a00 	vstr	s10, [r1]
 80068ec:	ed93 5a01 	vldr	s10, [r3, #4]
 80068f0:	edd7 4a01 	vldr	s9, [r7, #4]
 80068f4:	ee35 5a85 	vadd.f32	s10, s11, s10
 80068f8:	ee37 4a26 	vadd.f32	s8, s14, s13
 80068fc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006900:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006904:	ed81 5a01 	vstr	s10, [r1, #4]
 8006908:	edd2 1a00 	vldr	s3, [r2]
 800690c:	edd2 2a01 	vldr	s5, [r2, #4]
 8006910:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006914:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006918:	ee36 6a67 	vsub.f32	s12, s12, s15
 800691c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006920:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006924:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006928:	ee25 5a21 	vmul.f32	s10, s10, s3
 800692c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006930:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006934:	edc3 2a00 	vstr	s5, [r3]
 8006938:	ed83 5a01 	vstr	s10, [r3, #4]
 800693c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006946:	ed93 4a01 	vldr	s8, [r3, #4]
 800694a:	ed93 5a00 	vldr	s10, [r3]
 800694e:	9b02      	ldr	r3, [sp, #8]
 8006950:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006954:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006958:	ee25 5a85 	vmul.f32	s10, s11, s10
 800695c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006960:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006964:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006968:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800696c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006970:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006974:	ed80 6a01 	vstr	s12, [r0, #4]
 8006978:	edc0 5a00 	vstr	s11, [r0]
 800697c:	edd3 5a01 	vldr	s11, [r3, #4]
 8006980:	edd3 6a00 	vldr	s13, [r3]
 8006984:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006988:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800698c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006990:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006994:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006998:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800699c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80069a0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80069a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80069a8:	edc7 7a00 	vstr	s15, [r7]
 80069ac:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80069b0:	4621      	mov	r1, r4
 80069b2:	686a      	ldr	r2, [r5, #4]
 80069b4:	2304      	movs	r3, #4
 80069b6:	f000 f9d3 	bl	8006d60 <arm_radix8_butterfly_f32>
 80069ba:	4630      	mov	r0, r6
 80069bc:	4621      	mov	r1, r4
 80069be:	686a      	ldr	r2, [r5, #4]
 80069c0:	2304      	movs	r3, #4
 80069c2:	f000 f9cd 	bl	8006d60 <arm_radix8_butterfly_f32>
 80069c6:	9808      	ldr	r0, [sp, #32]
 80069c8:	686a      	ldr	r2, [r5, #4]
 80069ca:	4621      	mov	r1, r4
 80069cc:	2304      	movs	r3, #4
 80069ce:	f000 f9c7 	bl	8006d60 <arm_radix8_butterfly_f32>
 80069d2:	686a      	ldr	r2, [r5, #4]
 80069d4:	9801      	ldr	r0, [sp, #4]
 80069d6:	4621      	mov	r1, r4
 80069d8:	2304      	movs	r3, #4
 80069da:	b00d      	add	sp, #52	@ 0x34
 80069dc:	ecbd 8b0a 	vpop	{d8-d12}
 80069e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	f000 b9bc 	b.w	8006d60 <arm_radix8_butterfly_f32>

080069e8 <arm_cfft_f32>:
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	2a01      	cmp	r2, #1
 80069ee:	4606      	mov	r6, r0
 80069f0:	4617      	mov	r7, r2
 80069f2:	460c      	mov	r4, r1
 80069f4:	4698      	mov	r8, r3
 80069f6:	8805      	ldrh	r5, [r0, #0]
 80069f8:	d056      	beq.n	8006aa8 <arm_cfft_f32+0xc0>
 80069fa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80069fe:	d063      	beq.n	8006ac8 <arm_cfft_f32+0xe0>
 8006a00:	d916      	bls.n	8006a30 <arm_cfft_f32+0x48>
 8006a02:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006a06:	d01a      	beq.n	8006a3e <arm_cfft_f32+0x56>
 8006a08:	d947      	bls.n	8006a9a <arm_cfft_f32+0xb2>
 8006a0a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006a0e:	d05b      	beq.n	8006ac8 <arm_cfft_f32+0xe0>
 8006a10:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006a14:	d105      	bne.n	8006a22 <arm_cfft_f32+0x3a>
 8006a16:	2301      	movs	r3, #1
 8006a18:	6872      	ldr	r2, [r6, #4]
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 f99f 	bl	8006d60 <arm_radix8_butterfly_f32>
 8006a22:	f1b8 0f00 	cmp.w	r8, #0
 8006a26:	d111      	bne.n	8006a4c <arm_cfft_f32+0x64>
 8006a28:	2f01      	cmp	r7, #1
 8006a2a:	d016      	beq.n	8006a5a <arm_cfft_f32+0x72>
 8006a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a30:	2d20      	cmp	r5, #32
 8006a32:	d049      	beq.n	8006ac8 <arm_cfft_f32+0xe0>
 8006a34:	d935      	bls.n	8006aa2 <arm_cfft_f32+0xba>
 8006a36:	2d40      	cmp	r5, #64	@ 0x40
 8006a38:	d0ed      	beq.n	8006a16 <arm_cfft_f32+0x2e>
 8006a3a:	2d80      	cmp	r5, #128	@ 0x80
 8006a3c:	d1f1      	bne.n	8006a22 <arm_cfft_f32+0x3a>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7ff fcab 	bl	800639c <arm_cfft_radix8by2_f32>
 8006a46:	f1b8 0f00 	cmp.w	r8, #0
 8006a4a:	d0ed      	beq.n	8006a28 <arm_cfft_f32+0x40>
 8006a4c:	68b2      	ldr	r2, [r6, #8]
 8006a4e:	89b1      	ldrh	r1, [r6, #12]
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f841 	bl	8006ad8 <arm_bitreversal_32>
 8006a56:	2f01      	cmp	r7, #1
 8006a58:	d1e8      	bne.n	8006a2c <arm_cfft_f32+0x44>
 8006a5a:	ee07 5a90 	vmov	s15, r5
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	d0de      	beq.n	8006a2c <arm_cfft_f32+0x44>
 8006a6e:	f104 0108 	add.w	r1, r4, #8
 8006a72:	2300      	movs	r3, #0
 8006a74:	3301      	adds	r3, #1
 8006a76:	429d      	cmp	r5, r3
 8006a78:	f101 0108 	add.w	r1, r1, #8
 8006a7c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006a80:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006a84:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006a88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006a8c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006a90:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006a94:	d1ee      	bne.n	8006a74 <arm_cfft_f32+0x8c>
 8006a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a9a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006a9e:	d0ba      	beq.n	8006a16 <arm_cfft_f32+0x2e>
 8006aa0:	e7bf      	b.n	8006a22 <arm_cfft_f32+0x3a>
 8006aa2:	2d10      	cmp	r5, #16
 8006aa4:	d0cb      	beq.n	8006a3e <arm_cfft_f32+0x56>
 8006aa6:	e7bc      	b.n	8006a22 <arm_cfft_f32+0x3a>
 8006aa8:	b19d      	cbz	r5, 8006ad2 <arm_cfft_f32+0xea>
 8006aaa:	f101 030c 	add.w	r3, r1, #12
 8006aae:	2200      	movs	r2, #0
 8006ab0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006ab4:	3201      	adds	r2, #1
 8006ab6:	eef1 7a67 	vneg.f32	s15, s15
 8006aba:	4295      	cmp	r5, r2
 8006abc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006ac0:	f103 0308 	add.w	r3, r3, #8
 8006ac4:	d1f4      	bne.n	8006ab0 <arm_cfft_f32+0xc8>
 8006ac6:	e798      	b.n	80069fa <arm_cfft_f32+0x12>
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff fd36 	bl	800653c <arm_cfft_radix8by4_f32>
 8006ad0:	e7a7      	b.n	8006a22 <arm_cfft_f32+0x3a>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0aa      	beq.n	8006a2c <arm_cfft_f32+0x44>
 8006ad6:	e7b9      	b.n	8006a4c <arm_cfft_f32+0x64>

08006ad8 <arm_bitreversal_32>:
 8006ad8:	b1e9      	cbz	r1, 8006b16 <arm_bitreversal_32+0x3e>
 8006ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006adc:	2500      	movs	r5, #0
 8006ade:	f102 0e02 	add.w	lr, r2, #2
 8006ae2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006ae6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006aea:	08a4      	lsrs	r4, r4, #2
 8006aec:	089b      	lsrs	r3, r3, #2
 8006aee:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006af2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006af6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006afa:	00a6      	lsls	r6, r4, #2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006b02:	3304      	adds	r3, #4
 8006b04:	1d34      	adds	r4, r6, #4
 8006b06:	3502      	adds	r5, #2
 8006b08:	58c6      	ldr	r6, [r0, r3]
 8006b0a:	5907      	ldr	r7, [r0, r4]
 8006b0c:	50c7      	str	r7, [r0, r3]
 8006b0e:	428d      	cmp	r5, r1
 8006b10:	5106      	str	r6, [r0, r4]
 8006b12:	d3e6      	bcc.n	8006ae2 <arm_bitreversal_32+0xa>
 8006b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b16:	4770      	bx	lr

08006b18 <arm_cmplx_mag_f32>:
 8006b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	ed2d 8b02 	vpush	{d8}
 8006b20:	0897      	lsrs	r7, r2, #2
 8006b22:	b084      	sub	sp, #16
 8006b24:	d077      	beq.n	8006c16 <arm_cmplx_mag_f32+0xfe>
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	f100 0420 	add.w	r4, r0, #32
 8006b2e:	f101 0510 	add.w	r5, r1, #16
 8006b32:	463e      	mov	r6, r7
 8006b34:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8006b38:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8006b3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	f2c0 80c5 	blt.w	8006cde <arm_cmplx_mag_f32+0x1c6>
 8006b54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006b60:	f100 80cb 	bmi.w	8006cfa <arm_cmplx_mag_f32+0x1e2>
 8006b64:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006b68:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8006b6c:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006b70:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006b74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b84:	f2c0 80a8 	blt.w	8006cd8 <arm_cmplx_mag_f32+0x1c0>
 8006b88:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b90:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006b94:	f100 80a8 	bmi.w	8006ce8 <arm_cmplx_mag_f32+0x1d0>
 8006b98:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006b9c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006ba0:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006ba4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006ba8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006bac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	f2c0 808b 	blt.w	8006cd2 <arm_cmplx_mag_f32+0x1ba>
 8006bbc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006bc8:	f100 80a9 	bmi.w	8006d1e <arm_cmplx_mag_f32+0x206>
 8006bcc:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006bd0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006bd4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006bd8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006bdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006be0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006be4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bec:	db6e      	blt.n	8006ccc <arm_cmplx_mag_f32+0x1b4>
 8006bee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006bfa:	f100 8087 	bmi.w	8006d0c <arm_cmplx_mag_f32+0x1f4>
 8006bfe:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006c02:	3e01      	subs	r6, #1
 8006c04:	f104 0420 	add.w	r4, r4, #32
 8006c08:	f105 0510 	add.w	r5, r5, #16
 8006c0c:	d192      	bne.n	8006b34 <arm_cmplx_mag_f32+0x1c>
 8006c0e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006c12:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006c16:	f012 0203 	ands.w	r2, r2, #3
 8006c1a:	d052      	beq.n	8006cc2 <arm_cmplx_mag_f32+0x1aa>
 8006c1c:	ed90 0a00 	vldr	s0, [r0]
 8006c20:	edd0 7a01 	vldr	s15, [r0, #4]
 8006c24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006c32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3a:	bfb8      	it	lt
 8006c3c:	600b      	strlt	r3, [r1, #0]
 8006c3e:	db08      	blt.n	8006c52 <arm_cmplx_mag_f32+0x13a>
 8006c40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c48:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006c4c:	d479      	bmi.n	8006d42 <arm_cmplx_mag_f32+0x22a>
 8006c4e:	ed81 8a00 	vstr	s16, [r1]
 8006c52:	3a01      	subs	r2, #1
 8006c54:	d035      	beq.n	8006cc2 <arm_cmplx_mag_f32+0x1aa>
 8006c56:	ed90 0a02 	vldr	s0, [r0, #8]
 8006c5a:	edd0 7a03 	vldr	s15, [r0, #12]
 8006c5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c66:	2300      	movs	r3, #0
 8006c68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006c6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c74:	bfb8      	it	lt
 8006c76:	604b      	strlt	r3, [r1, #4]
 8006c78:	db08      	blt.n	8006c8c <arm_cmplx_mag_f32+0x174>
 8006c7a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c82:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006c86:	d453      	bmi.n	8006d30 <arm_cmplx_mag_f32+0x218>
 8006c88:	ed81 8a01 	vstr	s16, [r1, #4]
 8006c8c:	2a01      	cmp	r2, #1
 8006c8e:	d018      	beq.n	8006cc2 <arm_cmplx_mag_f32+0x1aa>
 8006c90:	ed90 0a04 	vldr	s0, [r0, #16]
 8006c94:	edd0 7a05 	vldr	s15, [r0, #20]
 8006c98:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ca6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cae:	db19      	blt.n	8006ce4 <arm_cmplx_mag_f32+0x1cc>
 8006cb0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006cbc:	d44a      	bmi.n	8006d54 <arm_cmplx_mag_f32+0x23c>
 8006cbe:	ed81 8a02 	vstr	s16, [r1, #8]
 8006cc2:	b004      	add	sp, #16
 8006cc4:	ecbd 8b02 	vpop	{d8}
 8006cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ccc:	f845 8c04 	str.w	r8, [r5, #-4]
 8006cd0:	e797      	b.n	8006c02 <arm_cmplx_mag_f32+0xea>
 8006cd2:	f845 8c08 	str.w	r8, [r5, #-8]
 8006cd6:	e77b      	b.n	8006bd0 <arm_cmplx_mag_f32+0xb8>
 8006cd8:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006cdc:	e75e      	b.n	8006b9c <arm_cmplx_mag_f32+0x84>
 8006cde:	f845 8c10 	str.w	r8, [r5, #-16]
 8006ce2:	e741      	b.n	8006b68 <arm_cmplx_mag_f32+0x50>
 8006ce4:	608b      	str	r3, [r1, #8]
 8006ce6:	e7ec      	b.n	8006cc2 <arm_cmplx_mag_f32+0x1aa>
 8006ce8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006cec:	9001      	str	r0, [sp, #4]
 8006cee:	f002 ff89 	bl	8009c04 <sqrtf>
 8006cf2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006cf6:	9801      	ldr	r0, [sp, #4]
 8006cf8:	e74e      	b.n	8006b98 <arm_cmplx_mag_f32+0x80>
 8006cfa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006cfe:	9001      	str	r0, [sp, #4]
 8006d00:	f002 ff80 	bl	8009c04 <sqrtf>
 8006d04:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	e72b      	b.n	8006b64 <arm_cmplx_mag_f32+0x4c>
 8006d0c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006d10:	9001      	str	r0, [sp, #4]
 8006d12:	f002 ff77 	bl	8009c04 <sqrtf>
 8006d16:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006d1a:	9801      	ldr	r0, [sp, #4]
 8006d1c:	e76f      	b.n	8006bfe <arm_cmplx_mag_f32+0xe6>
 8006d1e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	f002 ff6e 	bl	8009c04 <sqrtf>
 8006d28:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006d2c:	9801      	ldr	r0, [sp, #4]
 8006d2e:	e74d      	b.n	8006bcc <arm_cmplx_mag_f32+0xb4>
 8006d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	f002 ff65 	bl	8009c04 <sqrtf>
 8006d3a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006d3e:	9903      	ldr	r1, [sp, #12]
 8006d40:	e7a2      	b.n	8006c88 <arm_cmplx_mag_f32+0x170>
 8006d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	f002 ff5c 	bl	8009c04 <sqrtf>
 8006d4c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006d50:	9903      	ldr	r1, [sp, #12]
 8006d52:	e77c      	b.n	8006c4e <arm_cmplx_mag_f32+0x136>
 8006d54:	9101      	str	r1, [sp, #4]
 8006d56:	f002 ff55 	bl	8009c04 <sqrtf>
 8006d5a:	9901      	ldr	r1, [sp, #4]
 8006d5c:	e7af      	b.n	8006cbe <arm_cmplx_mag_f32+0x1a6>
 8006d5e:	bf00      	nop

08006d60 <arm_radix8_butterfly_f32>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	ed2d 8b10 	vpush	{d8-d15}
 8006d68:	b095      	sub	sp, #84	@ 0x54
 8006d6a:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006d6e:	4603      	mov	r3, r0
 8006d70:	3304      	adds	r3, #4
 8006d72:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8007058 <arm_radix8_butterfly_f32+0x2f8>
 8006d76:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d78:	468b      	mov	fp, r1
 8006d7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006d82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d84:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006d86:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006d8a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006d8e:	eb03 0508 	add.w	r5, r3, r8
 8006d92:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006d96:	eb05 040e 	add.w	r4, r5, lr
 8006d9a:	0137      	lsls	r7, r6, #4
 8006d9c:	eba6 030a 	sub.w	r3, r6, sl
 8006da0:	eb04 000e 	add.w	r0, r4, lr
 8006da4:	44b2      	add	sl, r6
 8006da6:	1d3a      	adds	r2, r7, #4
 8006da8:	9702      	str	r7, [sp, #8]
 8006daa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006dae:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006db2:	ebae 0c06 	sub.w	ip, lr, r6
 8006db6:	9703      	str	r7, [sp, #12]
 8006db8:	eb03 0708 	add.w	r7, r3, r8
 8006dbc:	9701      	str	r7, [sp, #4]
 8006dbe:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006dc2:	9706      	str	r7, [sp, #24]
 8006dc4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006dc6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006dca:	f10e 0104 	add.w	r1, lr, #4
 8006dce:	4439      	add	r1, r7
 8006dd0:	443a      	add	r2, r7
 8006dd2:	0137      	lsls	r7, r6, #4
 8006dd4:	00f6      	lsls	r6, r6, #3
 8006dd6:	9704      	str	r7, [sp, #16]
 8006dd8:	9605      	str	r6, [sp, #20]
 8006dda:	9f01      	ldr	r7, [sp, #4]
 8006ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006dde:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006de2:	f04f 0c00 	mov.w	ip, #0
 8006de6:	edd4 6a00 	vldr	s13, [r4]
 8006dea:	edd7 1a00 	vldr	s3, [r7]
 8006dee:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006df2:	edd5 5a00 	vldr	s11, [r5]
 8006df6:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006dfa:	ed90 6a00 	vldr	s12, [r0]
 8006dfe:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006e02:	ed93 3a00 	vldr	s6, [r3]
 8006e06:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006e0a:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006e0e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006e12:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006e16:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006e1a:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006e1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e22:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006e26:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006e2a:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006e2e:	ed85 4a00 	vstr	s8, [r5]
 8006e32:	edd1 6a00 	vldr	s13, [r1]
 8006e36:	ed94 9a01 	vldr	s18, [r4, #4]
 8006e3a:	edd3 2a01 	vldr	s5, [r3, #4]
 8006e3e:	edd7 8a01 	vldr	s17, [r7, #4]
 8006e42:	edd6 0a00 	vldr	s1, [r6]
 8006e46:	edd5 3a01 	vldr	s7, [r5, #4]
 8006e4a:	ed90 8a01 	vldr	s16, [r0, #4]
 8006e4e:	ed92 7a00 	vldr	s14, [r2]
 8006e52:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006e56:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006e5a:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006e5e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006e62:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006e66:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006e6a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006e6e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006e72:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006e76:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006e7a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006e7e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006e82:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006e86:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006e8a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006e8e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006e92:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006e96:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006e9a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006e9e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006ea2:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006ea6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006eaa:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006eae:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006eb2:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006eb6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006eba:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006ebe:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006ec2:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006ec6:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006eca:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006ece:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006ed2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006ed6:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006eda:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006ede:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006ee2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006ee6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006eea:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006eee:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006ef2:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006ef6:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006efa:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006efe:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006f02:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006f06:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006f0a:	44dc      	add	ip, fp
 8006f0c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006f10:	45e1      	cmp	r9, ip
 8006f12:	ed86 8a00 	vstr	s16, [r6]
 8006f16:	ed85 2a01 	vstr	s4, [r5, #4]
 8006f1a:	4456      	add	r6, sl
 8006f1c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006f20:	4455      	add	r5, sl
 8006f22:	edc0 6a00 	vstr	s13, [r0]
 8006f26:	ed82 1a00 	vstr	s2, [r2]
 8006f2a:	ed80 5a01 	vstr	s10, [r0, #4]
 8006f2e:	4452      	add	r2, sl
 8006f30:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006f34:	4450      	add	r0, sl
 8006f36:	edc7 2a00 	vstr	s5, [r7]
 8006f3a:	edc4 4a00 	vstr	s9, [r4]
 8006f3e:	ed83 7a00 	vstr	s14, [r3]
 8006f42:	edc1 5a00 	vstr	s11, [r1]
 8006f46:	edc7 3a01 	vstr	s7, [r7, #4]
 8006f4a:	4451      	add	r1, sl
 8006f4c:	ed84 6a01 	vstr	s12, [r4, #4]
 8006f50:	4457      	add	r7, sl
 8006f52:	edc3 7a01 	vstr	s15, [r3, #4]
 8006f56:	4454      	add	r4, sl
 8006f58:	4453      	add	r3, sl
 8006f5a:	f63f af44 	bhi.w	8006de6 <arm_radix8_butterfly_f32+0x86>
 8006f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f60:	2b07      	cmp	r3, #7
 8006f62:	f240 81b7 	bls.w	80072d4 <arm_radix8_butterfly_f32+0x574>
 8006f66:	9b06      	ldr	r3, [sp, #24]
 8006f68:	9903      	ldr	r1, [sp, #12]
 8006f6a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f6c:	9e05      	ldr	r6, [sp, #20]
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	f103 0c08 	add.w	ip, r3, #8
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	3108      	adds	r1, #8
 8006f78:	f108 0808 	add.w	r8, r8, #8
 8006f7c:	1841      	adds	r1, r0, r1
 8006f7e:	3608      	adds	r6, #8
 8006f80:	330c      	adds	r3, #12
 8006f82:	4604      	mov	r4, r0
 8006f84:	4444      	add	r4, r8
 8006f86:	18c3      	adds	r3, r0, r3
 8006f88:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f8a:	1981      	adds	r1, r0, r6
 8006f8c:	f10e 0e08 	add.w	lr, lr, #8
 8006f90:	3208      	adds	r2, #8
 8006f92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f94:	9107      	str	r1, [sp, #28]
 8006f96:	4604      	mov	r4, r0
 8006f98:	4601      	mov	r1, r0
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	f100 030c 	add.w	r3, r0, #12
 8006fa0:	4474      	add	r4, lr
 8006fa2:	f04f 0801 	mov.w	r8, #1
 8006fa6:	1882      	adds	r2, r0, r2
 8006fa8:	4461      	add	r1, ip
 8006faa:	9305      	str	r3, [sp, #20]
 8006fac:	464b      	mov	r3, r9
 8006fae:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fb0:	46c1      	mov	r9, r8
 8006fb2:	9208      	str	r2, [sp, #32]
 8006fb4:	46d8      	mov	r8, fp
 8006fb6:	9106      	str	r1, [sp, #24]
 8006fb8:	f04f 0e00 	mov.w	lr, #0
 8006fbc:	469b      	mov	fp, r3
 8006fbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fc2:	449e      	add	lr, r3
 8006fc4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006fc8:	441a      	add	r2, r3
 8006fca:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fcc:	441a      	add	r2, r3
 8006fce:	18d4      	adds	r4, r2, r3
 8006fd0:	18e5      	adds	r5, r4, r3
 8006fd2:	18ee      	adds	r6, r5, r3
 8006fd4:	18f7      	adds	r7, r6, r3
 8006fd6:	eb07 0c03 	add.w	ip, r7, r3
 8006fda:	920d      	str	r2, [sp, #52]	@ 0x34
 8006fdc:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006fe0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006fe4:	910c      	str	r1, [sp, #48]	@ 0x30
 8006fe6:	4419      	add	r1, r3
 8006fe8:	9103      	str	r1, [sp, #12]
 8006fea:	4419      	add	r1, r3
 8006fec:	18ca      	adds	r2, r1, r3
 8006fee:	9202      	str	r2, [sp, #8]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	18d0      	adds	r0, r2, r3
 8006ff4:	ed92 ea01 	vldr	s28, [r2, #4]
 8006ff8:	9a02      	ldr	r2, [sp, #8]
 8006ffa:	edd4 7a00 	vldr	s15, [r4]
 8006ffe:	edd2 da01 	vldr	s27, [r2, #4]
 8007002:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007004:	ed91 da01 	vldr	s26, [r1, #4]
 8007008:	ed92 ca01 	vldr	s24, [r2, #4]
 800700c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800700e:	9903      	ldr	r1, [sp, #12]
 8007010:	edcd 7a03 	vstr	s15, [sp, #12]
 8007014:	edd2 7a00 	vldr	s15, [r2]
 8007018:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800701a:	edcd 7a02 	vstr	s15, [sp, #8]
 800701e:	edd2 7a00 	vldr	s15, [r2]
 8007022:	edd0 ea01 	vldr	s29, [r0, #4]
 8007026:	edd1 ca01 	vldr	s25, [r1, #4]
 800702a:	eddc ba00 	vldr	s23, [ip]
 800702e:	edd7 aa00 	vldr	s21, [r7]
 8007032:	ed96 aa00 	vldr	s20, [r6]
 8007036:	edd5 9a00 	vldr	s19, [r5]
 800703a:	edcd 7a01 	vstr	s15, [sp, #4]
 800703e:	4403      	add	r3, r0
 8007040:	ed93 fa01 	vldr	s30, [r3, #4]
 8007044:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007048:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800704c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8007054:	46cc      	mov	ip, r9
 8007056:	e001      	b.n	800705c <arm_radix8_butterfly_f32+0x2fc>
 8007058:	3f3504f3 	.word	0x3f3504f3
 800705c:	ed91 6a00 	vldr	s12, [r1]
 8007060:	ed93 5a00 	vldr	s10, [r3]
 8007064:	edd0 fa00 	vldr	s31, [r0]
 8007068:	edd4 7a00 	vldr	s15, [r4]
 800706c:	ed95 7a00 	vldr	s14, [r5]
 8007070:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007074:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007078:	ed92 2a00 	vldr	s4, [r2]
 800707c:	ed96 0a00 	vldr	s0, [r6]
 8007080:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007084:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007088:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800708c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007090:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007094:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007098:	ee32 2a46 	vsub.f32	s4, s4, s12
 800709c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80070a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070a4:	ed06 6a01 	vstr	s12, [r6, #-4]
 80070a8:	edd4 8a01 	vldr	s17, [r4, #4]
 80070ac:	ed92 9a01 	vldr	s18, [r2, #4]
 80070b0:	edd7 0a00 	vldr	s1, [r7]
 80070b4:	edd1 2a01 	vldr	s5, [r1, #4]
 80070b8:	ed95 7a01 	vldr	s14, [r5, #4]
 80070bc:	ed93 6a01 	vldr	s12, [r3, #4]
 80070c0:	edd0 5a01 	vldr	s11, [r0, #4]
 80070c4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80070c8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80070cc:	ee39 5a62 	vsub.f32	s10, s18, s5
 80070d0:	ee78 fac7 	vsub.f32	s31, s17, s14
 80070d4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80070d8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80070dc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80070e0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80070e4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80070e8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80070ec:	ee30 2a06 	vadd.f32	s4, s0, s12
 80070f0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80070f4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80070f8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80070fc:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007100:	ee72 fa87 	vadd.f32	s31, s5, s14
 8007104:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007108:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800710c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007110:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007114:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007118:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800711c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007120:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8007124:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007128:	ee30 6a46 	vsub.f32	s12, s0, s12
 800712c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8007130:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007134:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007138:	ee36 6a68 	vsub.f32	s12, s12, s17
 800713c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007140:	ee73 8a09 	vadd.f32	s17, s6, s18
 8007144:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007148:	ee33 9a49 	vsub.f32	s18, s6, s18
 800714c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007150:	ee35 3a85 	vadd.f32	s6, s11, s10
 8007154:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007158:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800715c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007160:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007164:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007168:	ee35 8a03 	vadd.f32	s16, s10, s6
 800716c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007170:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007174:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007178:	ed9d 2a01 	vldr	s4, [sp, #4]
 800717c:	eddd 1a02 	vldr	s3, [sp, #8]
 8007180:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007184:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007188:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800718c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007190:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007194:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007198:	ee76 5a49 	vsub.f32	s11, s12, s18
 800719c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80071a0:	ee39 6a06 	vadd.f32	s12, s18, s12
 80071a4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80071a8:	ee21 4a84 	vmul.f32	s8, s3, s8
 80071ac:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80071b0:	ee22 7a07 	vmul.f32	s14, s4, s14
 80071b4:	ee22 2a08 	vmul.f32	s4, s4, s16
 80071b8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80071bc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80071c0:	ee31 1a09 	vadd.f32	s2, s2, s18
 80071c4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80071c8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80071cc:	ee74 0a60 	vsub.f32	s1, s8, s1
 80071d0:	ee37 7a48 	vsub.f32	s14, s14, s16
 80071d4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80071d8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80071dc:	ee72 1a21 	vadd.f32	s3, s4, s3
 80071e0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80071e4:	ee38 2a89 	vadd.f32	s4, s17, s18
 80071e8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80071ec:	ee38 8a04 	vadd.f32	s16, s16, s8
 80071f0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80071f4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80071f8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80071fc:	eddd 5a03 	vldr	s11, [sp, #12]
 8007200:	edc6 fa00 	vstr	s31, [r6]
 8007204:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007208:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800720c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007210:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8007214:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8007218:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800721c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007220:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007224:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007228:	ee74 4a89 	vadd.f32	s9, s9, s18
 800722c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007230:	ee78 8a85 	vadd.f32	s17, s17, s10
 8007234:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007238:	44c4      	add	ip, r8
 800723a:	45e3      	cmp	fp, ip
 800723c:	edc3 3a00 	vstr	s7, [r3]
 8007240:	edc3 6a01 	vstr	s13, [r3, #4]
 8007244:	4456      	add	r6, sl
 8007246:	ed07 1a01 	vstr	s2, [r7, #-4]
 800724a:	edc7 0a00 	vstr	s1, [r7]
 800724e:	4453      	add	r3, sl
 8007250:	ed80 2a00 	vstr	s4, [r0]
 8007254:	edc0 2a01 	vstr	s5, [r0, #4]
 8007258:	4457      	add	r7, sl
 800725a:	edc2 1a00 	vstr	s3, [r2]
 800725e:	ed82 7a01 	vstr	s14, [r2, #4]
 8007262:	4450      	add	r0, sl
 8007264:	ed85 8a00 	vstr	s16, [r5]
 8007268:	ed85 0a01 	vstr	s0, [r5, #4]
 800726c:	4452      	add	r2, sl
 800726e:	edc1 4a00 	vstr	s9, [r1]
 8007272:	4455      	add	r5, sl
 8007274:	ed81 3a01 	vstr	s6, [r1, #4]
 8007278:	edc4 8a00 	vstr	s17, [r4]
 800727c:	ed84 6a01 	vstr	s12, [r4, #4]
 8007280:	4451      	add	r1, sl
 8007282:	4454      	add	r4, sl
 8007284:	f63f aeea 	bhi.w	800705c <arm_radix8_butterfly_f32+0x2fc>
 8007288:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800728a:	3308      	adds	r3, #8
 800728c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800728e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007290:	3308      	adds	r3, #8
 8007292:	930a      	str	r3, [sp, #40]	@ 0x28
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	3308      	adds	r3, #8
 8007298:	9309      	str	r3, [sp, #36]	@ 0x24
 800729a:	9b08      	ldr	r3, [sp, #32]
 800729c:	3308      	adds	r3, #8
 800729e:	9308      	str	r3, [sp, #32]
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	3308      	adds	r3, #8
 80072a4:	9307      	str	r3, [sp, #28]
 80072a6:	9b06      	ldr	r3, [sp, #24]
 80072a8:	3308      	adds	r3, #8
 80072aa:	9306      	str	r3, [sp, #24]
 80072ac:	9b05      	ldr	r3, [sp, #20]
 80072ae:	3308      	adds	r3, #8
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	3308      	adds	r3, #8
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ba:	f109 0901 	add.w	r9, r9, #1
 80072be:	454b      	cmp	r3, r9
 80072c0:	f47f ae7d 	bne.w	8006fbe <arm_radix8_butterfly_f32+0x25e>
 80072c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	46d9      	mov	r9, fp
 80072cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80072ce:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80072d2:	e554      	b.n	8006d7e <arm_radix8_butterfly_f32+0x1e>
 80072d4:	b015      	add	sp, #84	@ 0x54
 80072d6:	ecbd 8b10 	vpop	{d8-d15}
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	bf00      	nop

080072e0 <__cvt>:
 80072e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	ec57 6b10 	vmov	r6, r7, d0
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	460c      	mov	r4, r1
 80072ec:	4619      	mov	r1, r3
 80072ee:	463b      	mov	r3, r7
 80072f0:	bfbb      	ittet	lt
 80072f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072f6:	461f      	movlt	r7, r3
 80072f8:	2300      	movge	r3, #0
 80072fa:	232d      	movlt	r3, #45	@ 0x2d
 80072fc:	700b      	strb	r3, [r1, #0]
 80072fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007300:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007304:	4691      	mov	r9, r2
 8007306:	f023 0820 	bic.w	r8, r3, #32
 800730a:	bfbc      	itt	lt
 800730c:	4632      	movlt	r2, r6
 800730e:	4616      	movlt	r6, r2
 8007310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007314:	d005      	beq.n	8007322 <__cvt+0x42>
 8007316:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800731a:	d100      	bne.n	800731e <__cvt+0x3e>
 800731c:	3401      	adds	r4, #1
 800731e:	2102      	movs	r1, #2
 8007320:	e000      	b.n	8007324 <__cvt+0x44>
 8007322:	2103      	movs	r1, #3
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	ab02      	add	r3, sp, #8
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	ec47 6b10 	vmov	d0, r6, r7
 8007330:	4653      	mov	r3, sl
 8007332:	4622      	mov	r2, r4
 8007334:	f000 fe4c 	bl	8007fd0 <_dtoa_r>
 8007338:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800733c:	4605      	mov	r5, r0
 800733e:	d119      	bne.n	8007374 <__cvt+0x94>
 8007340:	f019 0f01 	tst.w	r9, #1
 8007344:	d00e      	beq.n	8007364 <__cvt+0x84>
 8007346:	eb00 0904 	add.w	r9, r0, r4
 800734a:	2200      	movs	r2, #0
 800734c:	2300      	movs	r3, #0
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f9 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007356:	b108      	cbz	r0, 800735c <__cvt+0x7c>
 8007358:	f8cd 900c 	str.w	r9, [sp, #12]
 800735c:	2230      	movs	r2, #48	@ 0x30
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	454b      	cmp	r3, r9
 8007362:	d31e      	bcc.n	80073a2 <__cvt+0xc2>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007368:	1b5b      	subs	r3, r3, r5
 800736a:	4628      	mov	r0, r5
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	b004      	add	sp, #16
 8007370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007378:	eb00 0904 	add.w	r9, r0, r4
 800737c:	d1e5      	bne.n	800734a <__cvt+0x6a>
 800737e:	7803      	ldrb	r3, [r0, #0]
 8007380:	2b30      	cmp	r3, #48	@ 0x30
 8007382:	d10a      	bne.n	800739a <__cvt+0xba>
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f9 fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007390:	b918      	cbnz	r0, 800739a <__cvt+0xba>
 8007392:	f1c4 0401 	rsb	r4, r4, #1
 8007396:	f8ca 4000 	str.w	r4, [sl]
 800739a:	f8da 3000 	ldr.w	r3, [sl]
 800739e:	4499      	add	r9, r3
 80073a0:	e7d3      	b.n	800734a <__cvt+0x6a>
 80073a2:	1c59      	adds	r1, r3, #1
 80073a4:	9103      	str	r1, [sp, #12]
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e7d9      	b.n	800735e <__cvt+0x7e>

080073aa <__exponent>:
 80073aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ac:	2900      	cmp	r1, #0
 80073ae:	bfba      	itte	lt
 80073b0:	4249      	neglt	r1, r1
 80073b2:	232d      	movlt	r3, #45	@ 0x2d
 80073b4:	232b      	movge	r3, #43	@ 0x2b
 80073b6:	2909      	cmp	r1, #9
 80073b8:	7002      	strb	r2, [r0, #0]
 80073ba:	7043      	strb	r3, [r0, #1]
 80073bc:	dd29      	ble.n	8007412 <__exponent+0x68>
 80073be:	f10d 0307 	add.w	r3, sp, #7
 80073c2:	461d      	mov	r5, r3
 80073c4:	270a      	movs	r7, #10
 80073c6:	461a      	mov	r2, r3
 80073c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80073cc:	fb07 1416 	mls	r4, r7, r6, r1
 80073d0:	3430      	adds	r4, #48	@ 0x30
 80073d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073d6:	460c      	mov	r4, r1
 80073d8:	2c63      	cmp	r4, #99	@ 0x63
 80073da:	f103 33ff 	add.w	r3, r3, #4294967295
 80073de:	4631      	mov	r1, r6
 80073e0:	dcf1      	bgt.n	80073c6 <__exponent+0x1c>
 80073e2:	3130      	adds	r1, #48	@ 0x30
 80073e4:	1e94      	subs	r4, r2, #2
 80073e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073ea:	1c41      	adds	r1, r0, #1
 80073ec:	4623      	mov	r3, r4
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	d30a      	bcc.n	8007408 <__exponent+0x5e>
 80073f2:	f10d 0309 	add.w	r3, sp, #9
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	42ac      	cmp	r4, r5
 80073fa:	bf88      	it	hi
 80073fc:	2300      	movhi	r3, #0
 80073fe:	3302      	adds	r3, #2
 8007400:	4403      	add	r3, r0
 8007402:	1a18      	subs	r0, r3, r0
 8007404:	b003      	add	sp, #12
 8007406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007408:	f813 6b01 	ldrb.w	r6, [r3], #1
 800740c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007410:	e7ed      	b.n	80073ee <__exponent+0x44>
 8007412:	2330      	movs	r3, #48	@ 0x30
 8007414:	3130      	adds	r1, #48	@ 0x30
 8007416:	7083      	strb	r3, [r0, #2]
 8007418:	70c1      	strb	r1, [r0, #3]
 800741a:	1d03      	adds	r3, r0, #4
 800741c:	e7f1      	b.n	8007402 <__exponent+0x58>
	...

08007420 <_printf_float>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	b08d      	sub	sp, #52	@ 0x34
 8007426:	460c      	mov	r4, r1
 8007428:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800742c:	4616      	mov	r6, r2
 800742e:	461f      	mov	r7, r3
 8007430:	4605      	mov	r5, r0
 8007432:	f000 fccd 	bl	8007dd0 <_localeconv_r>
 8007436:	6803      	ldr	r3, [r0, #0]
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	4618      	mov	r0, r3
 800743c:	f7f8 ff20 	bl	8000280 <strlen>
 8007440:	2300      	movs	r3, #0
 8007442:	930a      	str	r3, [sp, #40]	@ 0x28
 8007444:	f8d8 3000 	ldr.w	r3, [r8]
 8007448:	9005      	str	r0, [sp, #20]
 800744a:	3307      	adds	r3, #7
 800744c:	f023 0307 	bic.w	r3, r3, #7
 8007450:	f103 0208 	add.w	r2, r3, #8
 8007454:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007458:	f8d4 b000 	ldr.w	fp, [r4]
 800745c:	f8c8 2000 	str.w	r2, [r8]
 8007460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007464:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	f8cd 8018 	str.w	r8, [sp, #24]
 800746e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007476:	4b9c      	ldr	r3, [pc, #624]	@ (80076e8 <_printf_float+0x2c8>)
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	f7f9 fb5e 	bl	8000b3c <__aeabi_dcmpun>
 8007480:	bb70      	cbnz	r0, 80074e0 <_printf_float+0xc0>
 8007482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007486:	4b98      	ldr	r3, [pc, #608]	@ (80076e8 <_printf_float+0x2c8>)
 8007488:	f04f 32ff 	mov.w	r2, #4294967295
 800748c:	f7f9 fb38 	bl	8000b00 <__aeabi_dcmple>
 8007490:	bb30      	cbnz	r0, 80074e0 <_printf_float+0xc0>
 8007492:	2200      	movs	r2, #0
 8007494:	2300      	movs	r3, #0
 8007496:	4640      	mov	r0, r8
 8007498:	4649      	mov	r1, r9
 800749a:	f7f9 fb27 	bl	8000aec <__aeabi_dcmplt>
 800749e:	b110      	cbz	r0, 80074a6 <_printf_float+0x86>
 80074a0:	232d      	movs	r3, #45	@ 0x2d
 80074a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a6:	4a91      	ldr	r2, [pc, #580]	@ (80076ec <_printf_float+0x2cc>)
 80074a8:	4b91      	ldr	r3, [pc, #580]	@ (80076f0 <_printf_float+0x2d0>)
 80074aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074ae:	bf94      	ite	ls
 80074b0:	4690      	movls	r8, r2
 80074b2:	4698      	movhi	r8, r3
 80074b4:	2303      	movs	r3, #3
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	f02b 0304 	bic.w	r3, fp, #4
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	9700      	str	r7, [sp, #0]
 80074c4:	4633      	mov	r3, r6
 80074c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f9d2 	bl	8007874 <_printf_common>
 80074d0:	3001      	adds	r0, #1
 80074d2:	f040 808d 	bne.w	80075f0 <_printf_float+0x1d0>
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	b00d      	add	sp, #52	@ 0x34
 80074dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e0:	4642      	mov	r2, r8
 80074e2:	464b      	mov	r3, r9
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f9 fb28 	bl	8000b3c <__aeabi_dcmpun>
 80074ec:	b140      	cbz	r0, 8007500 <_printf_float+0xe0>
 80074ee:	464b      	mov	r3, r9
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bfbc      	itt	lt
 80074f4:	232d      	movlt	r3, #45	@ 0x2d
 80074f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074fa:	4a7e      	ldr	r2, [pc, #504]	@ (80076f4 <_printf_float+0x2d4>)
 80074fc:	4b7e      	ldr	r3, [pc, #504]	@ (80076f8 <_printf_float+0x2d8>)
 80074fe:	e7d4      	b.n	80074aa <_printf_float+0x8a>
 8007500:	6863      	ldr	r3, [r4, #4]
 8007502:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007506:	9206      	str	r2, [sp, #24]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	d13b      	bne.n	8007584 <_printf_float+0x164>
 800750c:	2306      	movs	r3, #6
 800750e:	6063      	str	r3, [r4, #4]
 8007510:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007514:	2300      	movs	r3, #0
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	9303      	str	r3, [sp, #12]
 800751a:	ab0a      	add	r3, sp, #40	@ 0x28
 800751c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007520:	ab09      	add	r3, sp, #36	@ 0x24
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	6861      	ldr	r1, [r4, #4]
 8007526:	ec49 8b10 	vmov	d0, r8, r9
 800752a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800752e:	4628      	mov	r0, r5
 8007530:	f7ff fed6 	bl	80072e0 <__cvt>
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007538:	2b47      	cmp	r3, #71	@ 0x47
 800753a:	4680      	mov	r8, r0
 800753c:	d129      	bne.n	8007592 <_printf_float+0x172>
 800753e:	1cc8      	adds	r0, r1, #3
 8007540:	db02      	blt.n	8007548 <_printf_float+0x128>
 8007542:	6863      	ldr	r3, [r4, #4]
 8007544:	4299      	cmp	r1, r3
 8007546:	dd41      	ble.n	80075cc <_printf_float+0x1ac>
 8007548:	f1aa 0a02 	sub.w	sl, sl, #2
 800754c:	fa5f fa8a 	uxtb.w	sl, sl
 8007550:	3901      	subs	r1, #1
 8007552:	4652      	mov	r2, sl
 8007554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007558:	9109      	str	r1, [sp, #36]	@ 0x24
 800755a:	f7ff ff26 	bl	80073aa <__exponent>
 800755e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007560:	1813      	adds	r3, r2, r0
 8007562:	2a01      	cmp	r2, #1
 8007564:	4681      	mov	r9, r0
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	dc02      	bgt.n	8007570 <_printf_float+0x150>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d2      	lsls	r2, r2, #31
 800756e:	d501      	bpl.n	8007574 <_printf_float+0x154>
 8007570:	3301      	adds	r3, #1
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0a2      	beq.n	80074c2 <_printf_float+0xa2>
 800757c:	232d      	movs	r3, #45	@ 0x2d
 800757e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007582:	e79e      	b.n	80074c2 <_printf_float+0xa2>
 8007584:	9a06      	ldr	r2, [sp, #24]
 8007586:	2a47      	cmp	r2, #71	@ 0x47
 8007588:	d1c2      	bne.n	8007510 <_printf_float+0xf0>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1c0      	bne.n	8007510 <_printf_float+0xf0>
 800758e:	2301      	movs	r3, #1
 8007590:	e7bd      	b.n	800750e <_printf_float+0xee>
 8007592:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007596:	d9db      	bls.n	8007550 <_printf_float+0x130>
 8007598:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800759c:	d118      	bne.n	80075d0 <_printf_float+0x1b0>
 800759e:	2900      	cmp	r1, #0
 80075a0:	6863      	ldr	r3, [r4, #4]
 80075a2:	dd0b      	ble.n	80075bc <_printf_float+0x19c>
 80075a4:	6121      	str	r1, [r4, #16]
 80075a6:	b913      	cbnz	r3, 80075ae <_printf_float+0x18e>
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	07d0      	lsls	r0, r2, #31
 80075ac:	d502      	bpl.n	80075b4 <_printf_float+0x194>
 80075ae:	3301      	adds	r3, #1
 80075b0:	440b      	add	r3, r1
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075b6:	f04f 0900 	mov.w	r9, #0
 80075ba:	e7db      	b.n	8007574 <_printf_float+0x154>
 80075bc:	b913      	cbnz	r3, 80075c4 <_printf_float+0x1a4>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	07d2      	lsls	r2, r2, #31
 80075c2:	d501      	bpl.n	80075c8 <_printf_float+0x1a8>
 80075c4:	3302      	adds	r3, #2
 80075c6:	e7f4      	b.n	80075b2 <_printf_float+0x192>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e7f2      	b.n	80075b2 <_printf_float+0x192>
 80075cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d2:	4299      	cmp	r1, r3
 80075d4:	db05      	blt.n	80075e2 <_printf_float+0x1c2>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	6121      	str	r1, [r4, #16]
 80075da:	07d8      	lsls	r0, r3, #31
 80075dc:	d5ea      	bpl.n	80075b4 <_printf_float+0x194>
 80075de:	1c4b      	adds	r3, r1, #1
 80075e0:	e7e7      	b.n	80075b2 <_printf_float+0x192>
 80075e2:	2900      	cmp	r1, #0
 80075e4:	bfd4      	ite	le
 80075e6:	f1c1 0202 	rsble	r2, r1, #2
 80075ea:	2201      	movgt	r2, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	e7e0      	b.n	80075b2 <_printf_float+0x192>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	055a      	lsls	r2, r3, #21
 80075f4:	d407      	bmi.n	8007606 <_printf_float+0x1e6>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	4642      	mov	r2, r8
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	d12b      	bne.n	800765c <_printf_float+0x23c>
 8007604:	e767      	b.n	80074d6 <_printf_float+0xb6>
 8007606:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800760a:	f240 80dd 	bls.w	80077c8 <_printf_float+0x3a8>
 800760e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	f7f9 fa5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800761a:	2800      	cmp	r0, #0
 800761c:	d033      	beq.n	8007686 <_printf_float+0x266>
 800761e:	4a37      	ldr	r2, [pc, #220]	@ (80076fc <_printf_float+0x2dc>)
 8007620:	2301      	movs	r3, #1
 8007622:	4631      	mov	r1, r6
 8007624:	4628      	mov	r0, r5
 8007626:	47b8      	blx	r7
 8007628:	3001      	adds	r0, #1
 800762a:	f43f af54 	beq.w	80074d6 <_printf_float+0xb6>
 800762e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007632:	4543      	cmp	r3, r8
 8007634:	db02      	blt.n	800763c <_printf_float+0x21c>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	07d8      	lsls	r0, r3, #31
 800763a:	d50f      	bpl.n	800765c <_printf_float+0x23c>
 800763c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f af45 	beq.w	80074d6 <_printf_float+0xb6>
 800764c:	f04f 0900 	mov.w	r9, #0
 8007650:	f108 38ff 	add.w	r8, r8, #4294967295
 8007654:	f104 0a1a 	add.w	sl, r4, #26
 8007658:	45c8      	cmp	r8, r9
 800765a:	dc09      	bgt.n	8007670 <_printf_float+0x250>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	079b      	lsls	r3, r3, #30
 8007660:	f100 8103 	bmi.w	800786a <_printf_float+0x44a>
 8007664:	68e0      	ldr	r0, [r4, #12]
 8007666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007668:	4298      	cmp	r0, r3
 800766a:	bfb8      	it	lt
 800766c:	4618      	movlt	r0, r3
 800766e:	e734      	b.n	80074da <_printf_float+0xba>
 8007670:	2301      	movs	r3, #1
 8007672:	4652      	mov	r2, sl
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af2b 	beq.w	80074d6 <_printf_float+0xb6>
 8007680:	f109 0901 	add.w	r9, r9, #1
 8007684:	e7e8      	b.n	8007658 <_printf_float+0x238>
 8007686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	dc39      	bgt.n	8007700 <_printf_float+0x2e0>
 800768c:	4a1b      	ldr	r2, [pc, #108]	@ (80076fc <_printf_float+0x2dc>)
 800768e:	2301      	movs	r3, #1
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	f43f af1d 	beq.w	80074d6 <_printf_float+0xb6>
 800769c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076a0:	ea59 0303 	orrs.w	r3, r9, r3
 80076a4:	d102      	bne.n	80076ac <_printf_float+0x28c>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	07d9      	lsls	r1, r3, #31
 80076aa:	d5d7      	bpl.n	800765c <_printf_float+0x23c>
 80076ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f af0d 	beq.w	80074d6 <_printf_float+0xb6>
 80076bc:	f04f 0a00 	mov.w	sl, #0
 80076c0:	f104 0b1a 	add.w	fp, r4, #26
 80076c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c6:	425b      	negs	r3, r3
 80076c8:	4553      	cmp	r3, sl
 80076ca:	dc01      	bgt.n	80076d0 <_printf_float+0x2b0>
 80076cc:	464b      	mov	r3, r9
 80076ce:	e793      	b.n	80075f8 <_printf_float+0x1d8>
 80076d0:	2301      	movs	r3, #1
 80076d2:	465a      	mov	r2, fp
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f aefb 	beq.w	80074d6 <_printf_float+0xb6>
 80076e0:	f10a 0a01 	add.w	sl, sl, #1
 80076e4:	e7ee      	b.n	80076c4 <_printf_float+0x2a4>
 80076e6:	bf00      	nop
 80076e8:	7fefffff 	.word	0x7fefffff
 80076ec:	0800cae0 	.word	0x0800cae0
 80076f0:	0800cae4 	.word	0x0800cae4
 80076f4:	0800cae8 	.word	0x0800cae8
 80076f8:	0800caec 	.word	0x0800caec
 80076fc:	0800caf0 	.word	0x0800caf0
 8007700:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007702:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007706:	4553      	cmp	r3, sl
 8007708:	bfa8      	it	ge
 800770a:	4653      	movge	r3, sl
 800770c:	2b00      	cmp	r3, #0
 800770e:	4699      	mov	r9, r3
 8007710:	dc36      	bgt.n	8007780 <_printf_float+0x360>
 8007712:	f04f 0b00 	mov.w	fp, #0
 8007716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800771a:	f104 021a 	add.w	r2, r4, #26
 800771e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007720:	9306      	str	r3, [sp, #24]
 8007722:	eba3 0309 	sub.w	r3, r3, r9
 8007726:	455b      	cmp	r3, fp
 8007728:	dc31      	bgt.n	800778e <_printf_float+0x36e>
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	459a      	cmp	sl, r3
 800772e:	dc3a      	bgt.n	80077a6 <_printf_float+0x386>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	07da      	lsls	r2, r3, #31
 8007734:	d437      	bmi.n	80077a6 <_printf_float+0x386>
 8007736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007738:	ebaa 0903 	sub.w	r9, sl, r3
 800773c:	9b06      	ldr	r3, [sp, #24]
 800773e:	ebaa 0303 	sub.w	r3, sl, r3
 8007742:	4599      	cmp	r9, r3
 8007744:	bfa8      	it	ge
 8007746:	4699      	movge	r9, r3
 8007748:	f1b9 0f00 	cmp.w	r9, #0
 800774c:	dc33      	bgt.n	80077b6 <_printf_float+0x396>
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007756:	f104 0b1a 	add.w	fp, r4, #26
 800775a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775c:	ebaa 0303 	sub.w	r3, sl, r3
 8007760:	eba3 0309 	sub.w	r3, r3, r9
 8007764:	4543      	cmp	r3, r8
 8007766:	f77f af79 	ble.w	800765c <_printf_float+0x23c>
 800776a:	2301      	movs	r3, #1
 800776c:	465a      	mov	r2, fp
 800776e:	4631      	mov	r1, r6
 8007770:	4628      	mov	r0, r5
 8007772:	47b8      	blx	r7
 8007774:	3001      	adds	r0, #1
 8007776:	f43f aeae 	beq.w	80074d6 <_printf_float+0xb6>
 800777a:	f108 0801 	add.w	r8, r8, #1
 800777e:	e7ec      	b.n	800775a <_printf_float+0x33a>
 8007780:	4642      	mov	r2, r8
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	d1c2      	bne.n	8007712 <_printf_float+0x2f2>
 800778c:	e6a3      	b.n	80074d6 <_printf_float+0xb6>
 800778e:	2301      	movs	r3, #1
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	9206      	str	r2, [sp, #24]
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	f43f ae9c 	beq.w	80074d6 <_printf_float+0xb6>
 800779e:	9a06      	ldr	r2, [sp, #24]
 80077a0:	f10b 0b01 	add.w	fp, fp, #1
 80077a4:	e7bb      	b.n	800771e <_printf_float+0x2fe>
 80077a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1c0      	bne.n	8007736 <_printf_float+0x316>
 80077b4:	e68f      	b.n	80074d6 <_printf_float+0xb6>
 80077b6:	9a06      	ldr	r2, [sp, #24]
 80077b8:	464b      	mov	r3, r9
 80077ba:	4442      	add	r2, r8
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	d1c3      	bne.n	800774e <_printf_float+0x32e>
 80077c6:	e686      	b.n	80074d6 <_printf_float+0xb6>
 80077c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077cc:	f1ba 0f01 	cmp.w	sl, #1
 80077d0:	dc01      	bgt.n	80077d6 <_printf_float+0x3b6>
 80077d2:	07db      	lsls	r3, r3, #31
 80077d4:	d536      	bpl.n	8007844 <_printf_float+0x424>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4642      	mov	r2, r8
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f ae78 	beq.w	80074d6 <_printf_float+0xb6>
 80077e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae70 	beq.w	80074d6 <_printf_float+0xb6>
 80077f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077fa:	2200      	movs	r2, #0
 80077fc:	2300      	movs	r3, #0
 80077fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007802:	f7f9 f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8007806:	b9c0      	cbnz	r0, 800783a <_printf_float+0x41a>
 8007808:	4653      	mov	r3, sl
 800780a:	f108 0201 	add.w	r2, r8, #1
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	d10c      	bne.n	8007832 <_printf_float+0x412>
 8007818:	e65d      	b.n	80074d6 <_printf_float+0xb6>
 800781a:	2301      	movs	r3, #1
 800781c:	465a      	mov	r2, fp
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f ae56 	beq.w	80074d6 <_printf_float+0xb6>
 800782a:	f108 0801 	add.w	r8, r8, #1
 800782e:	45d0      	cmp	r8, sl
 8007830:	dbf3      	blt.n	800781a <_printf_float+0x3fa>
 8007832:	464b      	mov	r3, r9
 8007834:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007838:	e6df      	b.n	80075fa <_printf_float+0x1da>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	f104 0b1a 	add.w	fp, r4, #26
 8007842:	e7f4      	b.n	800782e <_printf_float+0x40e>
 8007844:	2301      	movs	r3, #1
 8007846:	4642      	mov	r2, r8
 8007848:	e7e1      	b.n	800780e <_printf_float+0x3ee>
 800784a:	2301      	movs	r3, #1
 800784c:	464a      	mov	r2, r9
 800784e:	4631      	mov	r1, r6
 8007850:	4628      	mov	r0, r5
 8007852:	47b8      	blx	r7
 8007854:	3001      	adds	r0, #1
 8007856:	f43f ae3e 	beq.w	80074d6 <_printf_float+0xb6>
 800785a:	f108 0801 	add.w	r8, r8, #1
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007862:	1a5b      	subs	r3, r3, r1
 8007864:	4543      	cmp	r3, r8
 8007866:	dcf0      	bgt.n	800784a <_printf_float+0x42a>
 8007868:	e6fc      	b.n	8007664 <_printf_float+0x244>
 800786a:	f04f 0800 	mov.w	r8, #0
 800786e:	f104 0919 	add.w	r9, r4, #25
 8007872:	e7f4      	b.n	800785e <_printf_float+0x43e>

08007874 <_printf_common>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	4616      	mov	r6, r2
 800787a:	4698      	mov	r8, r3
 800787c:	688a      	ldr	r2, [r1, #8]
 800787e:	690b      	ldr	r3, [r1, #16]
 8007880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007884:	4293      	cmp	r3, r2
 8007886:	bfb8      	it	lt
 8007888:	4613      	movlt	r3, r2
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007890:	4607      	mov	r7, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b10a      	cbz	r2, 800789a <_printf_common+0x26>
 8007896:	3301      	adds	r3, #1
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	0699      	lsls	r1, r3, #26
 800789e:	bf42      	ittt	mi
 80078a0:	6833      	ldrmi	r3, [r6, #0]
 80078a2:	3302      	addmi	r3, #2
 80078a4:	6033      	strmi	r3, [r6, #0]
 80078a6:	6825      	ldr	r5, [r4, #0]
 80078a8:	f015 0506 	ands.w	r5, r5, #6
 80078ac:	d106      	bne.n	80078bc <_printf_common+0x48>
 80078ae:	f104 0a19 	add.w	sl, r4, #25
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	6832      	ldr	r2, [r6, #0]
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	dc26      	bgt.n	800790a <_printf_common+0x96>
 80078bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078c0:	6822      	ldr	r2, [r4, #0]
 80078c2:	3b00      	subs	r3, #0
 80078c4:	bf18      	it	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	0692      	lsls	r2, r2, #26
 80078ca:	d42b      	bmi.n	8007924 <_printf_common+0xb0>
 80078cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078d0:	4641      	mov	r1, r8
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c8      	blx	r9
 80078d6:	3001      	adds	r0, #1
 80078d8:	d01e      	beq.n	8007918 <_printf_common+0xa4>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	f003 0306 	and.w	r3, r3, #6
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	bf02      	ittt	eq
 80078e6:	68e5      	ldreq	r5, [r4, #12]
 80078e8:	6833      	ldreq	r3, [r6, #0]
 80078ea:	1aed      	subeq	r5, r5, r3
 80078ec:	68a3      	ldr	r3, [r4, #8]
 80078ee:	bf0c      	ite	eq
 80078f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f4:	2500      	movne	r5, #0
 80078f6:	4293      	cmp	r3, r2
 80078f8:	bfc4      	itt	gt
 80078fa:	1a9b      	subgt	r3, r3, r2
 80078fc:	18ed      	addgt	r5, r5, r3
 80078fe:	2600      	movs	r6, #0
 8007900:	341a      	adds	r4, #26
 8007902:	42b5      	cmp	r5, r6
 8007904:	d11a      	bne.n	800793c <_printf_common+0xc8>
 8007906:	2000      	movs	r0, #0
 8007908:	e008      	b.n	800791c <_printf_common+0xa8>
 800790a:	2301      	movs	r3, #1
 800790c:	4652      	mov	r2, sl
 800790e:	4641      	mov	r1, r8
 8007910:	4638      	mov	r0, r7
 8007912:	47c8      	blx	r9
 8007914:	3001      	adds	r0, #1
 8007916:	d103      	bne.n	8007920 <_printf_common+0xac>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	3501      	adds	r5, #1
 8007922:	e7c6      	b.n	80078b2 <_printf_common+0x3e>
 8007924:	18e1      	adds	r1, r4, r3
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	2030      	movs	r0, #48	@ 0x30
 800792a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800792e:	4422      	add	r2, r4
 8007930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007938:	3302      	adds	r3, #2
 800793a:	e7c7      	b.n	80078cc <_printf_common+0x58>
 800793c:	2301      	movs	r3, #1
 800793e:	4622      	mov	r2, r4
 8007940:	4641      	mov	r1, r8
 8007942:	4638      	mov	r0, r7
 8007944:	47c8      	blx	r9
 8007946:	3001      	adds	r0, #1
 8007948:	d0e6      	beq.n	8007918 <_printf_common+0xa4>
 800794a:	3601      	adds	r6, #1
 800794c:	e7d9      	b.n	8007902 <_printf_common+0x8e>
	...

08007950 <_printf_i>:
 8007950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	7e0f      	ldrb	r7, [r1, #24]
 8007956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007958:	2f78      	cmp	r7, #120	@ 0x78
 800795a:	4691      	mov	r9, r2
 800795c:	4680      	mov	r8, r0
 800795e:	460c      	mov	r4, r1
 8007960:	469a      	mov	sl, r3
 8007962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007966:	d807      	bhi.n	8007978 <_printf_i+0x28>
 8007968:	2f62      	cmp	r7, #98	@ 0x62
 800796a:	d80a      	bhi.n	8007982 <_printf_i+0x32>
 800796c:	2f00      	cmp	r7, #0
 800796e:	f000 80d2 	beq.w	8007b16 <_printf_i+0x1c6>
 8007972:	2f58      	cmp	r7, #88	@ 0x58
 8007974:	f000 80b9 	beq.w	8007aea <_printf_i+0x19a>
 8007978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800797c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007980:	e03a      	b.n	80079f8 <_printf_i+0xa8>
 8007982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007986:	2b15      	cmp	r3, #21
 8007988:	d8f6      	bhi.n	8007978 <_printf_i+0x28>
 800798a:	a101      	add	r1, pc, #4	@ (adr r1, 8007990 <_printf_i+0x40>)
 800798c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007990:	080079e9 	.word	0x080079e9
 8007994:	080079fd 	.word	0x080079fd
 8007998:	08007979 	.word	0x08007979
 800799c:	08007979 	.word	0x08007979
 80079a0:	08007979 	.word	0x08007979
 80079a4:	08007979 	.word	0x08007979
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007979 	.word	0x08007979
 80079b0:	08007979 	.word	0x08007979
 80079b4:	08007979 	.word	0x08007979
 80079b8:	08007979 	.word	0x08007979
 80079bc:	08007afd 	.word	0x08007afd
 80079c0:	08007a27 	.word	0x08007a27
 80079c4:	08007ab7 	.word	0x08007ab7
 80079c8:	08007979 	.word	0x08007979
 80079cc:	08007979 	.word	0x08007979
 80079d0:	08007b1f 	.word	0x08007b1f
 80079d4:	08007979 	.word	0x08007979
 80079d8:	08007a27 	.word	0x08007a27
 80079dc:	08007979 	.word	0x08007979
 80079e0:	08007979 	.word	0x08007979
 80079e4:	08007abf 	.word	0x08007abf
 80079e8:	6833      	ldr	r3, [r6, #0]
 80079ea:	1d1a      	adds	r2, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6032      	str	r2, [r6, #0]
 80079f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079f8:	2301      	movs	r3, #1
 80079fa:	e09d      	b.n	8007b38 <_printf_i+0x1e8>
 80079fc:	6833      	ldr	r3, [r6, #0]
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	1d19      	adds	r1, r3, #4
 8007a02:	6031      	str	r1, [r6, #0]
 8007a04:	0606      	lsls	r6, r0, #24
 8007a06:	d501      	bpl.n	8007a0c <_printf_i+0xbc>
 8007a08:	681d      	ldr	r5, [r3, #0]
 8007a0a:	e003      	b.n	8007a14 <_printf_i+0xc4>
 8007a0c:	0645      	lsls	r5, r0, #25
 8007a0e:	d5fb      	bpl.n	8007a08 <_printf_i+0xb8>
 8007a10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	da03      	bge.n	8007a20 <_printf_i+0xd0>
 8007a18:	232d      	movs	r3, #45	@ 0x2d
 8007a1a:	426d      	negs	r5, r5
 8007a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a20:	4859      	ldr	r0, [pc, #356]	@ (8007b88 <_printf_i+0x238>)
 8007a22:	230a      	movs	r3, #10
 8007a24:	e011      	b.n	8007a4a <_printf_i+0xfa>
 8007a26:	6821      	ldr	r1, [r4, #0]
 8007a28:	6833      	ldr	r3, [r6, #0]
 8007a2a:	0608      	lsls	r0, r1, #24
 8007a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a30:	d402      	bmi.n	8007a38 <_printf_i+0xe8>
 8007a32:	0649      	lsls	r1, r1, #25
 8007a34:	bf48      	it	mi
 8007a36:	b2ad      	uxthmi	r5, r5
 8007a38:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a3a:	4853      	ldr	r0, [pc, #332]	@ (8007b88 <_printf_i+0x238>)
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	bf14      	ite	ne
 8007a40:	230a      	movne	r3, #10
 8007a42:	2308      	moveq	r3, #8
 8007a44:	2100      	movs	r1, #0
 8007a46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a4a:	6866      	ldr	r6, [r4, #4]
 8007a4c:	60a6      	str	r6, [r4, #8]
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	bfa2      	ittt	ge
 8007a52:	6821      	ldrge	r1, [r4, #0]
 8007a54:	f021 0104 	bicge.w	r1, r1, #4
 8007a58:	6021      	strge	r1, [r4, #0]
 8007a5a:	b90d      	cbnz	r5, 8007a60 <_printf_i+0x110>
 8007a5c:	2e00      	cmp	r6, #0
 8007a5e:	d04b      	beq.n	8007af8 <_printf_i+0x1a8>
 8007a60:	4616      	mov	r6, r2
 8007a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a66:	fb03 5711 	mls	r7, r3, r1, r5
 8007a6a:	5dc7      	ldrb	r7, [r0, r7]
 8007a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a70:	462f      	mov	r7, r5
 8007a72:	42bb      	cmp	r3, r7
 8007a74:	460d      	mov	r5, r1
 8007a76:	d9f4      	bls.n	8007a62 <_printf_i+0x112>
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d10b      	bne.n	8007a94 <_printf_i+0x144>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07df      	lsls	r7, r3, #31
 8007a80:	d508      	bpl.n	8007a94 <_printf_i+0x144>
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	4299      	cmp	r1, r3
 8007a88:	bfde      	ittt	le
 8007a8a:	2330      	movle	r3, #48	@ 0x30
 8007a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a94:	1b92      	subs	r2, r2, r6
 8007a96:	6122      	str	r2, [r4, #16]
 8007a98:	f8cd a000 	str.w	sl, [sp]
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	aa03      	add	r2, sp, #12
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	f7ff fee6 	bl	8007874 <_printf_common>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d14a      	bne.n	8007b42 <_printf_i+0x1f2>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b004      	add	sp, #16
 8007ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	f043 0320 	orr.w	r3, r3, #32
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	4833      	ldr	r0, [pc, #204]	@ (8007b8c <_printf_i+0x23c>)
 8007ac0:	2778      	movs	r7, #120	@ 0x78
 8007ac2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	6831      	ldr	r1, [r6, #0]
 8007aca:	061f      	lsls	r7, r3, #24
 8007acc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ad0:	d402      	bmi.n	8007ad8 <_printf_i+0x188>
 8007ad2:	065f      	lsls	r7, r3, #25
 8007ad4:	bf48      	it	mi
 8007ad6:	b2ad      	uxthmi	r5, r5
 8007ad8:	6031      	str	r1, [r6, #0]
 8007ada:	07d9      	lsls	r1, r3, #31
 8007adc:	bf44      	itt	mi
 8007ade:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae2:	6023      	strmi	r3, [r4, #0]
 8007ae4:	b11d      	cbz	r5, 8007aee <_printf_i+0x19e>
 8007ae6:	2310      	movs	r3, #16
 8007ae8:	e7ac      	b.n	8007a44 <_printf_i+0xf4>
 8007aea:	4827      	ldr	r0, [pc, #156]	@ (8007b88 <_printf_i+0x238>)
 8007aec:	e7e9      	b.n	8007ac2 <_printf_i+0x172>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	f023 0320 	bic.w	r3, r3, #32
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	e7f6      	b.n	8007ae6 <_printf_i+0x196>
 8007af8:	4616      	mov	r6, r2
 8007afa:	e7bd      	b.n	8007a78 <_printf_i+0x128>
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	6825      	ldr	r5, [r4, #0]
 8007b00:	6961      	ldr	r1, [r4, #20]
 8007b02:	1d18      	adds	r0, r3, #4
 8007b04:	6030      	str	r0, [r6, #0]
 8007b06:	062e      	lsls	r6, r5, #24
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	d501      	bpl.n	8007b10 <_printf_i+0x1c0>
 8007b0c:	6019      	str	r1, [r3, #0]
 8007b0e:	e002      	b.n	8007b16 <_printf_i+0x1c6>
 8007b10:	0668      	lsls	r0, r5, #25
 8007b12:	d5fb      	bpl.n	8007b0c <_printf_i+0x1bc>
 8007b14:	8019      	strh	r1, [r3, #0]
 8007b16:	2300      	movs	r3, #0
 8007b18:	6123      	str	r3, [r4, #16]
 8007b1a:	4616      	mov	r6, r2
 8007b1c:	e7bc      	b.n	8007a98 <_printf_i+0x148>
 8007b1e:	6833      	ldr	r3, [r6, #0]
 8007b20:	1d1a      	adds	r2, r3, #4
 8007b22:	6032      	str	r2, [r6, #0]
 8007b24:	681e      	ldr	r6, [r3, #0]
 8007b26:	6862      	ldr	r2, [r4, #4]
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7f8 fb58 	bl	80001e0 <memchr>
 8007b30:	b108      	cbz	r0, 8007b36 <_printf_i+0x1e6>
 8007b32:	1b80      	subs	r0, r0, r6
 8007b34:	6060      	str	r0, [r4, #4]
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b40:	e7aa      	b.n	8007a98 <_printf_i+0x148>
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	4632      	mov	r2, r6
 8007b46:	4649      	mov	r1, r9
 8007b48:	4640      	mov	r0, r8
 8007b4a:	47d0      	blx	sl
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d0ad      	beq.n	8007aac <_printf_i+0x15c>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	079b      	lsls	r3, r3, #30
 8007b54:	d413      	bmi.n	8007b7e <_printf_i+0x22e>
 8007b56:	68e0      	ldr	r0, [r4, #12]
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	4298      	cmp	r0, r3
 8007b5c:	bfb8      	it	lt
 8007b5e:	4618      	movlt	r0, r3
 8007b60:	e7a6      	b.n	8007ab0 <_printf_i+0x160>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4632      	mov	r2, r6
 8007b66:	4649      	mov	r1, r9
 8007b68:	4640      	mov	r0, r8
 8007b6a:	47d0      	blx	sl
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d09d      	beq.n	8007aac <_printf_i+0x15c>
 8007b70:	3501      	adds	r5, #1
 8007b72:	68e3      	ldr	r3, [r4, #12]
 8007b74:	9903      	ldr	r1, [sp, #12]
 8007b76:	1a5b      	subs	r3, r3, r1
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	dcf2      	bgt.n	8007b62 <_printf_i+0x212>
 8007b7c:	e7eb      	b.n	8007b56 <_printf_i+0x206>
 8007b7e:	2500      	movs	r5, #0
 8007b80:	f104 0619 	add.w	r6, r4, #25
 8007b84:	e7f5      	b.n	8007b72 <_printf_i+0x222>
 8007b86:	bf00      	nop
 8007b88:	0800caf2 	.word	0x0800caf2
 8007b8c:	0800cb03 	.word	0x0800cb03

08007b90 <std>:
 8007b90:	2300      	movs	r3, #0
 8007b92:	b510      	push	{r4, lr}
 8007b94:	4604      	mov	r4, r0
 8007b96:	e9c0 3300 	strd	r3, r3, [r0]
 8007b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b9e:	6083      	str	r3, [r0, #8]
 8007ba0:	8181      	strh	r1, [r0, #12]
 8007ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ba4:	81c2      	strh	r2, [r0, #14]
 8007ba6:	6183      	str	r3, [r0, #24]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	2208      	movs	r2, #8
 8007bac:	305c      	adds	r0, #92	@ 0x5c
 8007bae:	f000 f906 	bl	8007dbe <memset>
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <std+0x58>)
 8007bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <std+0x5c>)
 8007bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bba:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf0 <std+0x60>)
 8007bbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <std+0x64>)
 8007bc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf8 <std+0x68>)
 8007bc4:	6224      	str	r4, [r4, #32]
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d006      	beq.n	8007bd8 <std+0x48>
 8007bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bce:	4294      	cmp	r4, r2
 8007bd0:	d002      	beq.n	8007bd8 <std+0x48>
 8007bd2:	33d0      	adds	r3, #208	@ 0xd0
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d105      	bne.n	8007be4 <std+0x54>
 8007bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be0:	f000 b96a 	b.w	8007eb8 <__retarget_lock_init_recursive>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	bf00      	nop
 8007be8:	08007d39 	.word	0x08007d39
 8007bec:	08007d5b 	.word	0x08007d5b
 8007bf0:	08007d93 	.word	0x08007d93
 8007bf4:	08007db7 	.word	0x08007db7
 8007bf8:	200043f4 	.word	0x200043f4

08007bfc <stdio_exit_handler>:
 8007bfc:	4a02      	ldr	r2, [pc, #8]	@ (8007c08 <stdio_exit_handler+0xc>)
 8007bfe:	4903      	ldr	r1, [pc, #12]	@ (8007c0c <stdio_exit_handler+0x10>)
 8007c00:	4803      	ldr	r0, [pc, #12]	@ (8007c10 <stdio_exit_handler+0x14>)
 8007c02:	f000 b869 	b.w	8007cd8 <_fwalk_sglue>
 8007c06:	bf00      	nop
 8007c08:	20002014 	.word	0x20002014
 8007c0c:	080097e9 	.word	0x080097e9
 8007c10:	20002024 	.word	0x20002024

08007c14 <cleanup_stdio>:
 8007c14:	6841      	ldr	r1, [r0, #4]
 8007c16:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <cleanup_stdio+0x34>)
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	d001      	beq.n	8007c24 <cleanup_stdio+0x10>
 8007c20:	f001 fde2 	bl	80097e8 <_fflush_r>
 8007c24:	68a1      	ldr	r1, [r4, #8]
 8007c26:	4b09      	ldr	r3, [pc, #36]	@ (8007c4c <cleanup_stdio+0x38>)
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	d002      	beq.n	8007c32 <cleanup_stdio+0x1e>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f001 fddb 	bl	80097e8 <_fflush_r>
 8007c32:	68e1      	ldr	r1, [r4, #12]
 8007c34:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <cleanup_stdio+0x3c>)
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d004      	beq.n	8007c44 <cleanup_stdio+0x30>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c40:	f001 bdd2 	b.w	80097e8 <_fflush_r>
 8007c44:	bd10      	pop	{r4, pc}
 8007c46:	bf00      	nop
 8007c48:	200043f4 	.word	0x200043f4
 8007c4c:	2000445c 	.word	0x2000445c
 8007c50:	200044c4 	.word	0x200044c4

08007c54 <global_stdio_init.part.0>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4b0b      	ldr	r3, [pc, #44]	@ (8007c84 <global_stdio_init.part.0+0x30>)
 8007c58:	4c0b      	ldr	r4, [pc, #44]	@ (8007c88 <global_stdio_init.part.0+0x34>)
 8007c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007c8c <global_stdio_init.part.0+0x38>)
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	2200      	movs	r2, #0
 8007c62:	2104      	movs	r1, #4
 8007c64:	f7ff ff94 	bl	8007b90 <std>
 8007c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	2109      	movs	r1, #9
 8007c70:	f7ff ff8e 	bl	8007b90 <std>
 8007c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c78:	2202      	movs	r2, #2
 8007c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c7e:	2112      	movs	r1, #18
 8007c80:	f7ff bf86 	b.w	8007b90 <std>
 8007c84:	2000452c 	.word	0x2000452c
 8007c88:	200043f4 	.word	0x200043f4
 8007c8c:	08007bfd 	.word	0x08007bfd

08007c90 <__sfp_lock_acquire>:
 8007c90:	4801      	ldr	r0, [pc, #4]	@ (8007c98 <__sfp_lock_acquire+0x8>)
 8007c92:	f000 b912 	b.w	8007eba <__retarget_lock_acquire_recursive>
 8007c96:	bf00      	nop
 8007c98:	20004535 	.word	0x20004535

08007c9c <__sfp_lock_release>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	@ (8007ca4 <__sfp_lock_release+0x8>)
 8007c9e:	f000 b90d 	b.w	8007ebc <__retarget_lock_release_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	20004535 	.word	0x20004535

08007ca8 <__sinit>:
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	4604      	mov	r4, r0
 8007cac:	f7ff fff0 	bl	8007c90 <__sfp_lock_acquire>
 8007cb0:	6a23      	ldr	r3, [r4, #32]
 8007cb2:	b11b      	cbz	r3, 8007cbc <__sinit+0x14>
 8007cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb8:	f7ff bff0 	b.w	8007c9c <__sfp_lock_release>
 8007cbc:	4b04      	ldr	r3, [pc, #16]	@ (8007cd0 <__sinit+0x28>)
 8007cbe:	6223      	str	r3, [r4, #32]
 8007cc0:	4b04      	ldr	r3, [pc, #16]	@ (8007cd4 <__sinit+0x2c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f5      	bne.n	8007cb4 <__sinit+0xc>
 8007cc8:	f7ff ffc4 	bl	8007c54 <global_stdio_init.part.0>
 8007ccc:	e7f2      	b.n	8007cb4 <__sinit+0xc>
 8007cce:	bf00      	nop
 8007cd0:	08007c15 	.word	0x08007c15
 8007cd4:	2000452c 	.word	0x2000452c

08007cd8 <_fwalk_sglue>:
 8007cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	4607      	mov	r7, r0
 8007cde:	4688      	mov	r8, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cec:	d505      	bpl.n	8007cfa <_fwalk_sglue+0x22>
 8007cee:	6824      	ldr	r4, [r4, #0]
 8007cf0:	2c00      	cmp	r4, #0
 8007cf2:	d1f7      	bne.n	8007ce4 <_fwalk_sglue+0xc>
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cfa:	89ab      	ldrh	r3, [r5, #12]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d907      	bls.n	8007d10 <_fwalk_sglue+0x38>
 8007d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d04:	3301      	adds	r3, #1
 8007d06:	d003      	beq.n	8007d10 <_fwalk_sglue+0x38>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	47c0      	blx	r8
 8007d0e:	4306      	orrs	r6, r0
 8007d10:	3568      	adds	r5, #104	@ 0x68
 8007d12:	e7e9      	b.n	8007ce8 <_fwalk_sglue+0x10>

08007d14 <iprintf>:
 8007d14:	b40f      	push	{r0, r1, r2, r3}
 8007d16:	b507      	push	{r0, r1, r2, lr}
 8007d18:	4906      	ldr	r1, [pc, #24]	@ (8007d34 <iprintf+0x20>)
 8007d1a:	ab04      	add	r3, sp, #16
 8007d1c:	6808      	ldr	r0, [r1, #0]
 8007d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d22:	6881      	ldr	r1, [r0, #8]
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	f001 fbc3 	bl	80094b0 <_vfiprintf_r>
 8007d2a:	b003      	add	sp, #12
 8007d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d30:	b004      	add	sp, #16
 8007d32:	4770      	bx	lr
 8007d34:	20002020 	.word	0x20002020

08007d38 <__sread>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	f000 f86c 	bl	8007e1c <_read_r>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	bfab      	itete	ge
 8007d48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d4c:	181b      	addge	r3, r3, r0
 8007d4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d52:	bfac      	ite	ge
 8007d54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d56:	81a3      	strhlt	r3, [r4, #12]
 8007d58:	bd10      	pop	{r4, pc}

08007d5a <__swrite>:
 8007d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	461f      	mov	r7, r3
 8007d60:	898b      	ldrh	r3, [r1, #12]
 8007d62:	05db      	lsls	r3, r3, #23
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	4616      	mov	r6, r2
 8007d6a:	d505      	bpl.n	8007d78 <__swrite+0x1e>
 8007d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d70:	2302      	movs	r3, #2
 8007d72:	2200      	movs	r2, #0
 8007d74:	f000 f840 	bl	8007df8 <_lseek_r>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	4632      	mov	r2, r6
 8007d86:	463b      	mov	r3, r7
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8e:	f000 b857 	b.w	8007e40 <_write_r>

08007d92 <__sseek>:
 8007d92:	b510      	push	{r4, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9a:	f000 f82d 	bl	8007df8 <_lseek_r>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	bf15      	itete	ne
 8007da4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007da6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007daa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dae:	81a3      	strheq	r3, [r4, #12]
 8007db0:	bf18      	it	ne
 8007db2:	81a3      	strhne	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__sclose>:
 8007db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dba:	f000 b80d 	b.w	8007dd8 <_close_r>

08007dbe <memset>:
 8007dbe:	4402      	add	r2, r0
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d100      	bne.n	8007dc8 <memset+0xa>
 8007dc6:	4770      	bx	lr
 8007dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8007dcc:	e7f9      	b.n	8007dc2 <memset+0x4>
	...

08007dd0 <_localeconv_r>:
 8007dd0:	4800      	ldr	r0, [pc, #0]	@ (8007dd4 <_localeconv_r+0x4>)
 8007dd2:	4770      	bx	lr
 8007dd4:	20002160 	.word	0x20002160

08007dd8 <_close_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d06      	ldr	r5, [pc, #24]	@ (8007df4 <_close_r+0x1c>)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	602b      	str	r3, [r5, #0]
 8007de4:	f7f9 fe70 	bl	8001ac8 <_close>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_close_r+0x1a>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_close_r+0x1a>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20004530 	.word	0x20004530

08007df8 <_lseek_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d07      	ldr	r5, [pc, #28]	@ (8007e18 <_lseek_r+0x20>)
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	4608      	mov	r0, r1
 8007e00:	4611      	mov	r1, r2
 8007e02:	2200      	movs	r2, #0
 8007e04:	602a      	str	r2, [r5, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f7f9 fe85 	bl	8001b16 <_lseek>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_lseek_r+0x1e>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_lseek_r+0x1e>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	20004530 	.word	0x20004530

08007e1c <_read_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d07      	ldr	r5, [pc, #28]	@ (8007e3c <_read_r+0x20>)
 8007e20:	4604      	mov	r4, r0
 8007e22:	4608      	mov	r0, r1
 8007e24:	4611      	mov	r1, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	602a      	str	r2, [r5, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f7f9 fe2f 	bl	8001a8e <_read>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_read_r+0x1e>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_read_r+0x1e>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	20004530 	.word	0x20004530

08007e40 <_write_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	@ (8007e60 <_write_r+0x20>)
 8007e44:	4604      	mov	r4, r0
 8007e46:	4608      	mov	r0, r1
 8007e48:	4611      	mov	r1, r2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	602a      	str	r2, [r5, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f7f9 fb42 	bl	80014d8 <_write>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_write_r+0x1e>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_write_r+0x1e>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20004530 	.word	0x20004530

08007e64 <__errno>:
 8007e64:	4b01      	ldr	r3, [pc, #4]	@ (8007e6c <__errno+0x8>)
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20002020 	.word	0x20002020

08007e70 <__libc_init_array>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	4d0d      	ldr	r5, [pc, #52]	@ (8007ea8 <__libc_init_array+0x38>)
 8007e74:	4c0d      	ldr	r4, [pc, #52]	@ (8007eac <__libc_init_array+0x3c>)
 8007e76:	1b64      	subs	r4, r4, r5
 8007e78:	10a4      	asrs	r4, r4, #2
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	d109      	bne.n	8007e94 <__libc_init_array+0x24>
 8007e80:	4d0b      	ldr	r5, [pc, #44]	@ (8007eb0 <__libc_init_array+0x40>)
 8007e82:	4c0c      	ldr	r4, [pc, #48]	@ (8007eb4 <__libc_init_array+0x44>)
 8007e84:	f001 fee0 	bl	8009c48 <_init>
 8007e88:	1b64      	subs	r4, r4, r5
 8007e8a:	10a4      	asrs	r4, r4, #2
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	42a6      	cmp	r6, r4
 8007e90:	d105      	bne.n	8007e9e <__libc_init_array+0x2e>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e98:	4798      	blx	r3
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7ee      	b.n	8007e7c <__libc_init_array+0xc>
 8007e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea2:	4798      	blx	r3
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7f2      	b.n	8007e8e <__libc_init_array+0x1e>
 8007ea8:	0800ce58 	.word	0x0800ce58
 8007eac:	0800ce58 	.word	0x0800ce58
 8007eb0:	0800ce58 	.word	0x0800ce58
 8007eb4:	0800ce5c 	.word	0x0800ce5c

08007eb8 <__retarget_lock_init_recursive>:
 8007eb8:	4770      	bx	lr

08007eba <__retarget_lock_acquire_recursive>:
 8007eba:	4770      	bx	lr

08007ebc <__retarget_lock_release_recursive>:
 8007ebc:	4770      	bx	lr

08007ebe <quorem>:
 8007ebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec2:	6903      	ldr	r3, [r0, #16]
 8007ec4:	690c      	ldr	r4, [r1, #16]
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	4607      	mov	r7, r0
 8007eca:	db7e      	blt.n	8007fca <quorem+0x10c>
 8007ecc:	3c01      	subs	r4, #1
 8007ece:	f101 0814 	add.w	r8, r1, #20
 8007ed2:	00a3      	lsls	r3, r4, #2
 8007ed4:	f100 0514 	add.w	r5, r0, #20
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	429a      	cmp	r2, r3
 8007eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ef4:	d32e      	bcc.n	8007f54 <quorem+0x96>
 8007ef6:	f04f 0a00 	mov.w	sl, #0
 8007efa:	46c4      	mov	ip, r8
 8007efc:	46ae      	mov	lr, r5
 8007efe:	46d3      	mov	fp, sl
 8007f00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f04:	b298      	uxth	r0, r3
 8007f06:	fb06 a000 	mla	r0, r6, r0, sl
 8007f0a:	0c02      	lsrs	r2, r0, #16
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	fb06 2303 	mla	r3, r6, r3, r2
 8007f12:	f8de 2000 	ldr.w	r2, [lr]
 8007f16:	b280      	uxth	r0, r0
 8007f18:	b292      	uxth	r2, r2
 8007f1a:	1a12      	subs	r2, r2, r0
 8007f1c:	445a      	add	r2, fp
 8007f1e:	f8de 0000 	ldr.w	r0, [lr]
 8007f22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f30:	b292      	uxth	r2, r2
 8007f32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f36:	45e1      	cmp	r9, ip
 8007f38:	f84e 2b04 	str.w	r2, [lr], #4
 8007f3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f40:	d2de      	bcs.n	8007f00 <quorem+0x42>
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	58eb      	ldr	r3, [r5, r3]
 8007f46:	b92b      	cbnz	r3, 8007f54 <quorem+0x96>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	429d      	cmp	r5, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	d32f      	bcc.n	8007fb2 <quorem+0xf4>
 8007f52:	613c      	str	r4, [r7, #16]
 8007f54:	4638      	mov	r0, r7
 8007f56:	f001 f979 	bl	800924c <__mcmp>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	db25      	blt.n	8007faa <quorem+0xec>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	2000      	movs	r0, #0
 8007f62:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f66:	f8d1 c000 	ldr.w	ip, [r1]
 8007f6a:	fa1f fe82 	uxth.w	lr, r2
 8007f6e:	fa1f f38c 	uxth.w	r3, ip
 8007f72:	eba3 030e 	sub.w	r3, r3, lr
 8007f76:	4403      	add	r3, r0
 8007f78:	0c12      	lsrs	r2, r2, #16
 8007f7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f88:	45c1      	cmp	r9, r8
 8007f8a:	f841 3b04 	str.w	r3, [r1], #4
 8007f8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f92:	d2e6      	bcs.n	8007f62 <quorem+0xa4>
 8007f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f9c:	b922      	cbnz	r2, 8007fa8 <quorem+0xea>
 8007f9e:	3b04      	subs	r3, #4
 8007fa0:	429d      	cmp	r5, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	d30b      	bcc.n	8007fbe <quorem+0x100>
 8007fa6:	613c      	str	r4, [r7, #16]
 8007fa8:	3601      	adds	r6, #1
 8007faa:	4630      	mov	r0, r6
 8007fac:	b003      	add	sp, #12
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d1cb      	bne.n	8007f52 <quorem+0x94>
 8007fba:	3c01      	subs	r4, #1
 8007fbc:	e7c6      	b.n	8007f4c <quorem+0x8e>
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d1ef      	bne.n	8007fa6 <quorem+0xe8>
 8007fc6:	3c01      	subs	r4, #1
 8007fc8:	e7ea      	b.n	8007fa0 <quorem+0xe2>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e7ee      	b.n	8007fac <quorem+0xee>
	...

08007fd0 <_dtoa_r>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	69c7      	ldr	r7, [r0, #28]
 8007fd6:	b099      	sub	sp, #100	@ 0x64
 8007fd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fdc:	ec55 4b10 	vmov	r4, r5, d0
 8007fe0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007fe2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fe4:	4683      	mov	fp, r0
 8007fe6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fea:	b97f      	cbnz	r7, 800800c <_dtoa_r+0x3c>
 8007fec:	2010      	movs	r0, #16
 8007fee:	f000 fdfd 	bl	8008bec <malloc>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ff8:	b920      	cbnz	r0, 8008004 <_dtoa_r+0x34>
 8007ffa:	4ba7      	ldr	r3, [pc, #668]	@ (8008298 <_dtoa_r+0x2c8>)
 8007ffc:	21ef      	movs	r1, #239	@ 0xef
 8007ffe:	48a7      	ldr	r0, [pc, #668]	@ (800829c <_dtoa_r+0x2cc>)
 8008000:	f001 fccc 	bl	800999c <__assert_func>
 8008004:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008008:	6007      	str	r7, [r0, #0]
 800800a:	60c7      	str	r7, [r0, #12]
 800800c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	b159      	cbz	r1, 800802c <_dtoa_r+0x5c>
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	604a      	str	r2, [r1, #4]
 8008018:	2301      	movs	r3, #1
 800801a:	4093      	lsls	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
 800801e:	4658      	mov	r0, fp
 8008020:	f000 feda 	bl	8008dd8 <_Bfree>
 8008024:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	1e2b      	subs	r3, r5, #0
 800802e:	bfb9      	ittee	lt
 8008030:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008034:	9303      	strlt	r3, [sp, #12]
 8008036:	2300      	movge	r3, #0
 8008038:	6033      	strge	r3, [r6, #0]
 800803a:	9f03      	ldr	r7, [sp, #12]
 800803c:	4b98      	ldr	r3, [pc, #608]	@ (80082a0 <_dtoa_r+0x2d0>)
 800803e:	bfbc      	itt	lt
 8008040:	2201      	movlt	r2, #1
 8008042:	6032      	strlt	r2, [r6, #0]
 8008044:	43bb      	bics	r3, r7
 8008046:	d112      	bne.n	800806e <_dtoa_r+0x9e>
 8008048:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800804a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008054:	4323      	orrs	r3, r4
 8008056:	f000 854d 	beq.w	8008af4 <_dtoa_r+0xb24>
 800805a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800805c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80082b4 <_dtoa_r+0x2e4>
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 854f 	beq.w	8008b04 <_dtoa_r+0xb34>
 8008066:	f10a 0303 	add.w	r3, sl, #3
 800806a:	f000 bd49 	b.w	8008b00 <_dtoa_r+0xb30>
 800806e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	ec51 0b17 	vmov	r0, r1, d7
 8008078:	2300      	movs	r3, #0
 800807a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800807e:	f7f8 fd2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008082:	4680      	mov	r8, r0
 8008084:	b158      	cbz	r0, 800809e <_dtoa_r+0xce>
 8008086:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008088:	2301      	movs	r3, #1
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800808e:	b113      	cbz	r3, 8008096 <_dtoa_r+0xc6>
 8008090:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008092:	4b84      	ldr	r3, [pc, #528]	@ (80082a4 <_dtoa_r+0x2d4>)
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80082b8 <_dtoa_r+0x2e8>
 800809a:	f000 bd33 	b.w	8008b04 <_dtoa_r+0xb34>
 800809e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080a2:	aa16      	add	r2, sp, #88	@ 0x58
 80080a4:	a917      	add	r1, sp, #92	@ 0x5c
 80080a6:	4658      	mov	r0, fp
 80080a8:	f001 f980 	bl	80093ac <__d2b>
 80080ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80080b0:	4681      	mov	r9, r0
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	d077      	beq.n	80081a6 <_dtoa_r+0x1d6>
 80080b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80080bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80080c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80080cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080d0:	4619      	mov	r1, r3
 80080d2:	2200      	movs	r2, #0
 80080d4:	4b74      	ldr	r3, [pc, #464]	@ (80082a8 <_dtoa_r+0x2d8>)
 80080d6:	f7f8 f8df 	bl	8000298 <__aeabi_dsub>
 80080da:	a369      	add	r3, pc, #420	@ (adr r3, 8008280 <_dtoa_r+0x2b0>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 fa92 	bl	8000608 <__aeabi_dmul>
 80080e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008288 <_dtoa_r+0x2b8>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f8d7 	bl	800029c <__adddf3>
 80080ee:	4604      	mov	r4, r0
 80080f0:	4630      	mov	r0, r6
 80080f2:	460d      	mov	r5, r1
 80080f4:	f7f8 fa1e 	bl	8000534 <__aeabi_i2d>
 80080f8:	a365      	add	r3, pc, #404	@ (adr r3, 8008290 <_dtoa_r+0x2c0>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 fa83 	bl	8000608 <__aeabi_dmul>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 f8c7 	bl	800029c <__adddf3>
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	f7f8 fd29 	bl	8000b68 <__aeabi_d2iz>
 8008116:	2200      	movs	r2, #0
 8008118:	4607      	mov	r7, r0
 800811a:	2300      	movs	r3, #0
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 fce4 	bl	8000aec <__aeabi_dcmplt>
 8008124:	b140      	cbz	r0, 8008138 <_dtoa_r+0x168>
 8008126:	4638      	mov	r0, r7
 8008128:	f7f8 fa04 	bl	8000534 <__aeabi_i2d>
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	f7f8 fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008134:	b900      	cbnz	r0, 8008138 <_dtoa_r+0x168>
 8008136:	3f01      	subs	r7, #1
 8008138:	2f16      	cmp	r7, #22
 800813a:	d851      	bhi.n	80081e0 <_dtoa_r+0x210>
 800813c:	4b5b      	ldr	r3, [pc, #364]	@ (80082ac <_dtoa_r+0x2dc>)
 800813e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814a:	f7f8 fccf 	bl	8000aec <__aeabi_dcmplt>
 800814e:	2800      	cmp	r0, #0
 8008150:	d048      	beq.n	80081e4 <_dtoa_r+0x214>
 8008152:	3f01      	subs	r7, #1
 8008154:	2300      	movs	r3, #0
 8008156:	9312      	str	r3, [sp, #72]	@ 0x48
 8008158:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800815a:	1b9b      	subs	r3, r3, r6
 800815c:	1e5a      	subs	r2, r3, #1
 800815e:	bf44      	itt	mi
 8008160:	f1c3 0801 	rsbmi	r8, r3, #1
 8008164:	2300      	movmi	r3, #0
 8008166:	9208      	str	r2, [sp, #32]
 8008168:	bf54      	ite	pl
 800816a:	f04f 0800 	movpl.w	r8, #0
 800816e:	9308      	strmi	r3, [sp, #32]
 8008170:	2f00      	cmp	r7, #0
 8008172:	db39      	blt.n	80081e8 <_dtoa_r+0x218>
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008178:	443b      	add	r3, r7
 800817a:	9308      	str	r3, [sp, #32]
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008182:	2b09      	cmp	r3, #9
 8008184:	d864      	bhi.n	8008250 <_dtoa_r+0x280>
 8008186:	2b05      	cmp	r3, #5
 8008188:	bfc4      	itt	gt
 800818a:	3b04      	subgt	r3, #4
 800818c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008190:	f1a3 0302 	sub.w	r3, r3, #2
 8008194:	bfcc      	ite	gt
 8008196:	2400      	movgt	r4, #0
 8008198:	2401      	movle	r4, #1
 800819a:	2b03      	cmp	r3, #3
 800819c:	d863      	bhi.n	8008266 <_dtoa_r+0x296>
 800819e:	e8df f003 	tbb	[pc, r3]
 80081a2:	372a      	.short	0x372a
 80081a4:	5535      	.short	0x5535
 80081a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80081aa:	441e      	add	r6, r3
 80081ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	bfc1      	itttt	gt
 80081b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80081b8:	409f      	lslgt	r7, r3
 80081ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80081be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80081c2:	bfd6      	itet	le
 80081c4:	f1c3 0320 	rsble	r3, r3, #32
 80081c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80081cc:	fa04 f003 	lslle.w	r0, r4, r3
 80081d0:	f7f8 f9a0 	bl	8000514 <__aeabi_ui2d>
 80081d4:	2201      	movs	r2, #1
 80081d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081da:	3e01      	subs	r6, #1
 80081dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80081de:	e777      	b.n	80080d0 <_dtoa_r+0x100>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e7b8      	b.n	8008156 <_dtoa_r+0x186>
 80081e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80081e6:	e7b7      	b.n	8008158 <_dtoa_r+0x188>
 80081e8:	427b      	negs	r3, r7
 80081ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ec:	2300      	movs	r3, #0
 80081ee:	eba8 0807 	sub.w	r8, r8, r7
 80081f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081f4:	e7c4      	b.n	8008180 <_dtoa_r+0x1b0>
 80081f6:	2300      	movs	r3, #0
 80081f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dc35      	bgt.n	800826c <_dtoa_r+0x29c>
 8008200:	2301      	movs	r3, #1
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	9307      	str	r3, [sp, #28]
 8008206:	461a      	mov	r2, r3
 8008208:	920e      	str	r2, [sp, #56]	@ 0x38
 800820a:	e00b      	b.n	8008224 <_dtoa_r+0x254>
 800820c:	2301      	movs	r3, #1
 800820e:	e7f3      	b.n	80081f8 <_dtoa_r+0x228>
 8008210:	2300      	movs	r3, #0
 8008212:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	2b01      	cmp	r3, #1
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	bfb8      	it	lt
 8008222:	2301      	movlt	r3, #1
 8008224:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008228:	2100      	movs	r1, #0
 800822a:	2204      	movs	r2, #4
 800822c:	f102 0514 	add.w	r5, r2, #20
 8008230:	429d      	cmp	r5, r3
 8008232:	d91f      	bls.n	8008274 <_dtoa_r+0x2a4>
 8008234:	6041      	str	r1, [r0, #4]
 8008236:	4658      	mov	r0, fp
 8008238:	f000 fd8e 	bl	8008d58 <_Balloc>
 800823c:	4682      	mov	sl, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	d13c      	bne.n	80082bc <_dtoa_r+0x2ec>
 8008242:	4b1b      	ldr	r3, [pc, #108]	@ (80082b0 <_dtoa_r+0x2e0>)
 8008244:	4602      	mov	r2, r0
 8008246:	f240 11af 	movw	r1, #431	@ 0x1af
 800824a:	e6d8      	b.n	8007ffe <_dtoa_r+0x2e>
 800824c:	2301      	movs	r3, #1
 800824e:	e7e0      	b.n	8008212 <_dtoa_r+0x242>
 8008250:	2401      	movs	r4, #1
 8008252:	2300      	movs	r3, #0
 8008254:	9309      	str	r3, [sp, #36]	@ 0x24
 8008256:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008258:	f04f 33ff 	mov.w	r3, #4294967295
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	2200      	movs	r2, #0
 8008262:	2312      	movs	r3, #18
 8008264:	e7d0      	b.n	8008208 <_dtoa_r+0x238>
 8008266:	2301      	movs	r3, #1
 8008268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800826a:	e7f5      	b.n	8008258 <_dtoa_r+0x288>
 800826c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	9307      	str	r3, [sp, #28]
 8008272:	e7d7      	b.n	8008224 <_dtoa_r+0x254>
 8008274:	3101      	adds	r1, #1
 8008276:	0052      	lsls	r2, r2, #1
 8008278:	e7d8      	b.n	800822c <_dtoa_r+0x25c>
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w
 8008280:	636f4361 	.word	0x636f4361
 8008284:	3fd287a7 	.word	0x3fd287a7
 8008288:	8b60c8b3 	.word	0x8b60c8b3
 800828c:	3fc68a28 	.word	0x3fc68a28
 8008290:	509f79fb 	.word	0x509f79fb
 8008294:	3fd34413 	.word	0x3fd34413
 8008298:	0800cb21 	.word	0x0800cb21
 800829c:	0800cb38 	.word	0x0800cb38
 80082a0:	7ff00000 	.word	0x7ff00000
 80082a4:	0800caf1 	.word	0x0800caf1
 80082a8:	3ff80000 	.word	0x3ff80000
 80082ac:	0800cc30 	.word	0x0800cc30
 80082b0:	0800cb90 	.word	0x0800cb90
 80082b4:	0800cb1d 	.word	0x0800cb1d
 80082b8:	0800caf0 	.word	0x0800caf0
 80082bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082c0:	6018      	str	r0, [r3, #0]
 80082c2:	9b07      	ldr	r3, [sp, #28]
 80082c4:	2b0e      	cmp	r3, #14
 80082c6:	f200 80a4 	bhi.w	8008412 <_dtoa_r+0x442>
 80082ca:	2c00      	cmp	r4, #0
 80082cc:	f000 80a1 	beq.w	8008412 <_dtoa_r+0x442>
 80082d0:	2f00      	cmp	r7, #0
 80082d2:	dd33      	ble.n	800833c <_dtoa_r+0x36c>
 80082d4:	4bad      	ldr	r3, [pc, #692]	@ (800858c <_dtoa_r+0x5bc>)
 80082d6:	f007 020f 	and.w	r2, r7, #15
 80082da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082de:	ed93 7b00 	vldr	d7, [r3]
 80082e2:	05f8      	lsls	r0, r7, #23
 80082e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80082e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082ec:	d516      	bpl.n	800831c <_dtoa_r+0x34c>
 80082ee:	4ba8      	ldr	r3, [pc, #672]	@ (8008590 <_dtoa_r+0x5c0>)
 80082f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082f8:	f7f8 fab0 	bl	800085c <__aeabi_ddiv>
 80082fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008300:	f004 040f 	and.w	r4, r4, #15
 8008304:	2603      	movs	r6, #3
 8008306:	4da2      	ldr	r5, [pc, #648]	@ (8008590 <_dtoa_r+0x5c0>)
 8008308:	b954      	cbnz	r4, 8008320 <_dtoa_r+0x350>
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008312:	f7f8 faa3 	bl	800085c <__aeabi_ddiv>
 8008316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800831a:	e028      	b.n	800836e <_dtoa_r+0x39e>
 800831c:	2602      	movs	r6, #2
 800831e:	e7f2      	b.n	8008306 <_dtoa_r+0x336>
 8008320:	07e1      	lsls	r1, r4, #31
 8008322:	d508      	bpl.n	8008336 <_dtoa_r+0x366>
 8008324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008334:	3601      	adds	r6, #1
 8008336:	1064      	asrs	r4, r4, #1
 8008338:	3508      	adds	r5, #8
 800833a:	e7e5      	b.n	8008308 <_dtoa_r+0x338>
 800833c:	f000 80d2 	beq.w	80084e4 <_dtoa_r+0x514>
 8008340:	427c      	negs	r4, r7
 8008342:	4b92      	ldr	r3, [pc, #584]	@ (800858c <_dtoa_r+0x5bc>)
 8008344:	4d92      	ldr	r5, [pc, #584]	@ (8008590 <_dtoa_r+0x5c0>)
 8008346:	f004 020f 	and.w	r2, r4, #15
 800834a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008356:	f7f8 f957 	bl	8000608 <__aeabi_dmul>
 800835a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800835e:	1124      	asrs	r4, r4, #4
 8008360:	2300      	movs	r3, #0
 8008362:	2602      	movs	r6, #2
 8008364:	2c00      	cmp	r4, #0
 8008366:	f040 80b2 	bne.w	80084ce <_dtoa_r+0x4fe>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1d3      	bne.n	8008316 <_dtoa_r+0x346>
 800836e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008370:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80b7 	beq.w	80084e8 <_dtoa_r+0x518>
 800837a:	4b86      	ldr	r3, [pc, #536]	@ (8008594 <_dtoa_r+0x5c4>)
 800837c:	2200      	movs	r2, #0
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 fbb3 	bl	8000aec <__aeabi_dcmplt>
 8008386:	2800      	cmp	r0, #0
 8008388:	f000 80ae 	beq.w	80084e8 <_dtoa_r+0x518>
 800838c:	9b07      	ldr	r3, [sp, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 80aa 	beq.w	80084e8 <_dtoa_r+0x518>
 8008394:	9b00      	ldr	r3, [sp, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd37      	ble.n	800840a <_dtoa_r+0x43a>
 800839a:	1e7b      	subs	r3, r7, #1
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	4620      	mov	r0, r4
 80083a0:	4b7d      	ldr	r3, [pc, #500]	@ (8008598 <_dtoa_r+0x5c8>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f8 f92f 	bl	8000608 <__aeabi_dmul>
 80083aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ae:	9c00      	ldr	r4, [sp, #0]
 80083b0:	3601      	adds	r6, #1
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7f8 f8be 	bl	8000534 <__aeabi_i2d>
 80083b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083bc:	f7f8 f924 	bl	8000608 <__aeabi_dmul>
 80083c0:	4b76      	ldr	r3, [pc, #472]	@ (800859c <_dtoa_r+0x5cc>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	f7f7 ff6a 	bl	800029c <__adddf3>
 80083c8:	4605      	mov	r5, r0
 80083ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	f040 808d 	bne.w	80084ee <_dtoa_r+0x51e>
 80083d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d8:	4b71      	ldr	r3, [pc, #452]	@ (80085a0 <_dtoa_r+0x5d0>)
 80083da:	2200      	movs	r2, #0
 80083dc:	f7f7 ff5c 	bl	8000298 <__aeabi_dsub>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083e8:	462a      	mov	r2, r5
 80083ea:	4633      	mov	r3, r6
 80083ec:	f7f8 fb9c 	bl	8000b28 <__aeabi_dcmpgt>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f040 828b 	bne.w	800890c <_dtoa_r+0x93c>
 80083f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083fa:	462a      	mov	r2, r5
 80083fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008400:	f7f8 fb74 	bl	8000aec <__aeabi_dcmplt>
 8008404:	2800      	cmp	r0, #0
 8008406:	f040 8128 	bne.w	800865a <_dtoa_r+0x68a>
 800840a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800840e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008412:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008414:	2b00      	cmp	r3, #0
 8008416:	f2c0 815a 	blt.w	80086ce <_dtoa_r+0x6fe>
 800841a:	2f0e      	cmp	r7, #14
 800841c:	f300 8157 	bgt.w	80086ce <_dtoa_r+0x6fe>
 8008420:	4b5a      	ldr	r3, [pc, #360]	@ (800858c <_dtoa_r+0x5bc>)
 8008422:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008426:	ed93 7b00 	vldr	d7, [r3]
 800842a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	ed8d 7b00 	vstr	d7, [sp]
 8008432:	da03      	bge.n	800843c <_dtoa_r+0x46c>
 8008434:	9b07      	ldr	r3, [sp, #28]
 8008436:	2b00      	cmp	r3, #0
 8008438:	f340 8101 	ble.w	800863e <_dtoa_r+0x66e>
 800843c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008440:	4656      	mov	r6, sl
 8008442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f8 fa07 	bl	800085c <__aeabi_ddiv>
 800844e:	f7f8 fb8b 	bl	8000b68 <__aeabi_d2iz>
 8008452:	4680      	mov	r8, r0
 8008454:	f7f8 f86e 	bl	8000534 <__aeabi_i2d>
 8008458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800846c:	f7f7 ff14 	bl	8000298 <__aeabi_dsub>
 8008470:	f806 4b01 	strb.w	r4, [r6], #1
 8008474:	9d07      	ldr	r5, [sp, #28]
 8008476:	eba6 040a 	sub.w	r4, r6, sl
 800847a:	42a5      	cmp	r5, r4
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	f040 8117 	bne.w	80086b2 <_dtoa_r+0x6e2>
 8008484:	f7f7 ff0a 	bl	800029c <__adddf3>
 8008488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800848c:	4604      	mov	r4, r0
 800848e:	460d      	mov	r5, r1
 8008490:	f7f8 fb4a 	bl	8000b28 <__aeabi_dcmpgt>
 8008494:	2800      	cmp	r0, #0
 8008496:	f040 80f9 	bne.w	800868c <_dtoa_r+0x6bc>
 800849a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 80084a6:	b118      	cbz	r0, 80084b0 <_dtoa_r+0x4e0>
 80084a8:	f018 0f01 	tst.w	r8, #1
 80084ac:	f040 80ee 	bne.w	800868c <_dtoa_r+0x6bc>
 80084b0:	4649      	mov	r1, r9
 80084b2:	4658      	mov	r0, fp
 80084b4:	f000 fc90 	bl	8008dd8 <_Bfree>
 80084b8:	2300      	movs	r3, #0
 80084ba:	7033      	strb	r3, [r6, #0]
 80084bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084be:	3701      	adds	r7, #1
 80084c0:	601f      	str	r7, [r3, #0]
 80084c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 831d 	beq.w	8008b04 <_dtoa_r+0xb34>
 80084ca:	601e      	str	r6, [r3, #0]
 80084cc:	e31a      	b.n	8008b04 <_dtoa_r+0xb34>
 80084ce:	07e2      	lsls	r2, r4, #31
 80084d0:	d505      	bpl.n	80084de <_dtoa_r+0x50e>
 80084d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084d6:	f7f8 f897 	bl	8000608 <__aeabi_dmul>
 80084da:	3601      	adds	r6, #1
 80084dc:	2301      	movs	r3, #1
 80084de:	1064      	asrs	r4, r4, #1
 80084e0:	3508      	adds	r5, #8
 80084e2:	e73f      	b.n	8008364 <_dtoa_r+0x394>
 80084e4:	2602      	movs	r6, #2
 80084e6:	e742      	b.n	800836e <_dtoa_r+0x39e>
 80084e8:	9c07      	ldr	r4, [sp, #28]
 80084ea:	9704      	str	r7, [sp, #16]
 80084ec:	e761      	b.n	80083b2 <_dtoa_r+0x3e2>
 80084ee:	4b27      	ldr	r3, [pc, #156]	@ (800858c <_dtoa_r+0x5bc>)
 80084f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084fa:	4454      	add	r4, sl
 80084fc:	2900      	cmp	r1, #0
 80084fe:	d053      	beq.n	80085a8 <_dtoa_r+0x5d8>
 8008500:	4928      	ldr	r1, [pc, #160]	@ (80085a4 <_dtoa_r+0x5d4>)
 8008502:	2000      	movs	r0, #0
 8008504:	f7f8 f9aa 	bl	800085c <__aeabi_ddiv>
 8008508:	4633      	mov	r3, r6
 800850a:	462a      	mov	r2, r5
 800850c:	f7f7 fec4 	bl	8000298 <__aeabi_dsub>
 8008510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008514:	4656      	mov	r6, sl
 8008516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800851a:	f7f8 fb25 	bl	8000b68 <__aeabi_d2iz>
 800851e:	4605      	mov	r5, r0
 8008520:	f7f8 f808 	bl	8000534 <__aeabi_i2d>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852c:	f7f7 feb4 	bl	8000298 <__aeabi_dsub>
 8008530:	3530      	adds	r5, #48	@ 0x30
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800853a:	f806 5b01 	strb.w	r5, [r6], #1
 800853e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008542:	f7f8 fad3 	bl	8000aec <__aeabi_dcmplt>
 8008546:	2800      	cmp	r0, #0
 8008548:	d171      	bne.n	800862e <_dtoa_r+0x65e>
 800854a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800854e:	4911      	ldr	r1, [pc, #68]	@ (8008594 <_dtoa_r+0x5c4>)
 8008550:	2000      	movs	r0, #0
 8008552:	f7f7 fea1 	bl	8000298 <__aeabi_dsub>
 8008556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800855a:	f7f8 fac7 	bl	8000aec <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8095 	bne.w	800868e <_dtoa_r+0x6be>
 8008564:	42a6      	cmp	r6, r4
 8008566:	f43f af50 	beq.w	800840a <_dtoa_r+0x43a>
 800856a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800856e:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <_dtoa_r+0x5c8>)
 8008570:	2200      	movs	r2, #0
 8008572:	f7f8 f849 	bl	8000608 <__aeabi_dmul>
 8008576:	4b08      	ldr	r3, [pc, #32]	@ (8008598 <_dtoa_r+0x5c8>)
 8008578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800857c:	2200      	movs	r2, #0
 800857e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008582:	f7f8 f841 	bl	8000608 <__aeabi_dmul>
 8008586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858a:	e7c4      	b.n	8008516 <_dtoa_r+0x546>
 800858c:	0800cc30 	.word	0x0800cc30
 8008590:	0800cc08 	.word	0x0800cc08
 8008594:	3ff00000 	.word	0x3ff00000
 8008598:	40240000 	.word	0x40240000
 800859c:	401c0000 	.word	0x401c0000
 80085a0:	40140000 	.word	0x40140000
 80085a4:	3fe00000 	.word	0x3fe00000
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7f8 f82c 	bl	8000608 <__aeabi_dmul>
 80085b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80085b6:	4656      	mov	r6, sl
 80085b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085bc:	f7f8 fad4 	bl	8000b68 <__aeabi_d2iz>
 80085c0:	4605      	mov	r5, r0
 80085c2:	f7f7 ffb7 	bl	8000534 <__aeabi_i2d>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ce:	f7f7 fe63 	bl	8000298 <__aeabi_dsub>
 80085d2:	3530      	adds	r5, #48	@ 0x30
 80085d4:	f806 5b01 	strb.w	r5, [r6], #1
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	42a6      	cmp	r6, r4
 80085de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	d124      	bne.n	8008632 <_dtoa_r+0x662>
 80085e8:	4bac      	ldr	r3, [pc, #688]	@ (800889c <_dtoa_r+0x8cc>)
 80085ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085ee:	f7f7 fe55 	bl	800029c <__adddf3>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fa:	f7f8 fa95 	bl	8000b28 <__aeabi_dcmpgt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d145      	bne.n	800868e <_dtoa_r+0x6be>
 8008602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008606:	49a5      	ldr	r1, [pc, #660]	@ (800889c <_dtoa_r+0x8cc>)
 8008608:	2000      	movs	r0, #0
 800860a:	f7f7 fe45 	bl	8000298 <__aeabi_dsub>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008616:	f7f8 fa69 	bl	8000aec <__aeabi_dcmplt>
 800861a:	2800      	cmp	r0, #0
 800861c:	f43f aef5 	beq.w	800840a <_dtoa_r+0x43a>
 8008620:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008622:	1e73      	subs	r3, r6, #1
 8008624:	9315      	str	r3, [sp, #84]	@ 0x54
 8008626:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800862a:	2b30      	cmp	r3, #48	@ 0x30
 800862c:	d0f8      	beq.n	8008620 <_dtoa_r+0x650>
 800862e:	9f04      	ldr	r7, [sp, #16]
 8008630:	e73e      	b.n	80084b0 <_dtoa_r+0x4e0>
 8008632:	4b9b      	ldr	r3, [pc, #620]	@ (80088a0 <_dtoa_r+0x8d0>)
 8008634:	f7f7 ffe8 	bl	8000608 <__aeabi_dmul>
 8008638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800863c:	e7bc      	b.n	80085b8 <_dtoa_r+0x5e8>
 800863e:	d10c      	bne.n	800865a <_dtoa_r+0x68a>
 8008640:	4b98      	ldr	r3, [pc, #608]	@ (80088a4 <_dtoa_r+0x8d4>)
 8008642:	2200      	movs	r2, #0
 8008644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008648:	f7f7 ffde 	bl	8000608 <__aeabi_dmul>
 800864c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008650:	f7f8 fa60 	bl	8000b14 <__aeabi_dcmpge>
 8008654:	2800      	cmp	r0, #0
 8008656:	f000 8157 	beq.w	8008908 <_dtoa_r+0x938>
 800865a:	2400      	movs	r4, #0
 800865c:	4625      	mov	r5, r4
 800865e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008660:	43db      	mvns	r3, r3
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	4656      	mov	r6, sl
 8008666:	2700      	movs	r7, #0
 8008668:	4621      	mov	r1, r4
 800866a:	4658      	mov	r0, fp
 800866c:	f000 fbb4 	bl	8008dd8 <_Bfree>
 8008670:	2d00      	cmp	r5, #0
 8008672:	d0dc      	beq.n	800862e <_dtoa_r+0x65e>
 8008674:	b12f      	cbz	r7, 8008682 <_dtoa_r+0x6b2>
 8008676:	42af      	cmp	r7, r5
 8008678:	d003      	beq.n	8008682 <_dtoa_r+0x6b2>
 800867a:	4639      	mov	r1, r7
 800867c:	4658      	mov	r0, fp
 800867e:	f000 fbab 	bl	8008dd8 <_Bfree>
 8008682:	4629      	mov	r1, r5
 8008684:	4658      	mov	r0, fp
 8008686:	f000 fba7 	bl	8008dd8 <_Bfree>
 800868a:	e7d0      	b.n	800862e <_dtoa_r+0x65e>
 800868c:	9704      	str	r7, [sp, #16]
 800868e:	4633      	mov	r3, r6
 8008690:	461e      	mov	r6, r3
 8008692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008696:	2a39      	cmp	r2, #57	@ 0x39
 8008698:	d107      	bne.n	80086aa <_dtoa_r+0x6da>
 800869a:	459a      	cmp	sl, r3
 800869c:	d1f8      	bne.n	8008690 <_dtoa_r+0x6c0>
 800869e:	9a04      	ldr	r2, [sp, #16]
 80086a0:	3201      	adds	r2, #1
 80086a2:	9204      	str	r2, [sp, #16]
 80086a4:	2230      	movs	r2, #48	@ 0x30
 80086a6:	f88a 2000 	strb.w	r2, [sl]
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	3201      	adds	r2, #1
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e7bd      	b.n	800862e <_dtoa_r+0x65e>
 80086b2:	4b7b      	ldr	r3, [pc, #492]	@ (80088a0 <_dtoa_r+0x8d0>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	f7f7 ffa7 	bl	8000608 <__aeabi_dmul>
 80086ba:	2200      	movs	r2, #0
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	460d      	mov	r5, r1
 80086c2:	f7f8 fa09 	bl	8000ad8 <__aeabi_dcmpeq>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f aebb 	beq.w	8008442 <_dtoa_r+0x472>
 80086cc:	e6f0      	b.n	80084b0 <_dtoa_r+0x4e0>
 80086ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	f000 80db 	beq.w	800888c <_dtoa_r+0x8bc>
 80086d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d8:	2a01      	cmp	r2, #1
 80086da:	f300 80bf 	bgt.w	800885c <_dtoa_r+0x88c>
 80086de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	f000 80b7 	beq.w	8008854 <_dtoa_r+0x884>
 80086e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086ec:	4646      	mov	r6, r8
 80086ee:	9a08      	ldr	r2, [sp, #32]
 80086f0:	2101      	movs	r1, #1
 80086f2:	441a      	add	r2, r3
 80086f4:	4658      	mov	r0, fp
 80086f6:	4498      	add	r8, r3
 80086f8:	9208      	str	r2, [sp, #32]
 80086fa:	f000 fc21 	bl	8008f40 <__i2b>
 80086fe:	4605      	mov	r5, r0
 8008700:	b15e      	cbz	r6, 800871a <_dtoa_r+0x74a>
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd08      	ble.n	800871a <_dtoa_r+0x74a>
 8008708:	42b3      	cmp	r3, r6
 800870a:	9a08      	ldr	r2, [sp, #32]
 800870c:	bfa8      	it	ge
 800870e:	4633      	movge	r3, r6
 8008710:	eba8 0803 	sub.w	r8, r8, r3
 8008714:	1af6      	subs	r6, r6, r3
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871c:	b1f3      	cbz	r3, 800875c <_dtoa_r+0x78c>
 800871e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80b7 	beq.w	8008894 <_dtoa_r+0x8c4>
 8008726:	b18c      	cbz	r4, 800874c <_dtoa_r+0x77c>
 8008728:	4629      	mov	r1, r5
 800872a:	4622      	mov	r2, r4
 800872c:	4658      	mov	r0, fp
 800872e:	f000 fcc7 	bl	80090c0 <__pow5mult>
 8008732:	464a      	mov	r2, r9
 8008734:	4601      	mov	r1, r0
 8008736:	4605      	mov	r5, r0
 8008738:	4658      	mov	r0, fp
 800873a:	f000 fc17 	bl	8008f6c <__multiply>
 800873e:	4649      	mov	r1, r9
 8008740:	9004      	str	r0, [sp, #16]
 8008742:	4658      	mov	r0, fp
 8008744:	f000 fb48 	bl	8008dd8 <_Bfree>
 8008748:	9b04      	ldr	r3, [sp, #16]
 800874a:	4699      	mov	r9, r3
 800874c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800874e:	1b1a      	subs	r2, r3, r4
 8008750:	d004      	beq.n	800875c <_dtoa_r+0x78c>
 8008752:	4649      	mov	r1, r9
 8008754:	4658      	mov	r0, fp
 8008756:	f000 fcb3 	bl	80090c0 <__pow5mult>
 800875a:	4681      	mov	r9, r0
 800875c:	2101      	movs	r1, #1
 800875e:	4658      	mov	r0, fp
 8008760:	f000 fbee 	bl	8008f40 <__i2b>
 8008764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008766:	4604      	mov	r4, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 81cf 	beq.w	8008b0c <_dtoa_r+0xb3c>
 800876e:	461a      	mov	r2, r3
 8008770:	4601      	mov	r1, r0
 8008772:	4658      	mov	r0, fp
 8008774:	f000 fca4 	bl	80090c0 <__pow5mult>
 8008778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877a:	2b01      	cmp	r3, #1
 800877c:	4604      	mov	r4, r0
 800877e:	f300 8095 	bgt.w	80088ac <_dtoa_r+0x8dc>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 8087 	bne.w	8008898 <_dtoa_r+0x8c8>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008790:	2b00      	cmp	r3, #0
 8008792:	f040 8089 	bne.w	80088a8 <_dtoa_r+0x8d8>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800879c:	0d1b      	lsrs	r3, r3, #20
 800879e:	051b      	lsls	r3, r3, #20
 80087a0:	b12b      	cbz	r3, 80087ae <_dtoa_r+0x7de>
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	3301      	adds	r3, #1
 80087a6:	9308      	str	r3, [sp, #32]
 80087a8:	f108 0801 	add.w	r8, r8, #1
 80087ac:	2301      	movs	r3, #1
 80087ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80087b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 81b0 	beq.w	8008b18 <_dtoa_r+0xb48>
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087be:	6918      	ldr	r0, [r3, #16]
 80087c0:	f000 fb72 	bl	8008ea8 <__hi0bits>
 80087c4:	f1c0 0020 	rsb	r0, r0, #32
 80087c8:	9b08      	ldr	r3, [sp, #32]
 80087ca:	4418      	add	r0, r3
 80087cc:	f010 001f 	ands.w	r0, r0, #31
 80087d0:	d077      	beq.n	80088c2 <_dtoa_r+0x8f2>
 80087d2:	f1c0 0320 	rsb	r3, r0, #32
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	dd6b      	ble.n	80088b2 <_dtoa_r+0x8e2>
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	f1c0 001c 	rsb	r0, r0, #28
 80087e0:	4403      	add	r3, r0
 80087e2:	4480      	add	r8, r0
 80087e4:	4406      	add	r6, r0
 80087e6:	9308      	str	r3, [sp, #32]
 80087e8:	f1b8 0f00 	cmp.w	r8, #0
 80087ec:	dd05      	ble.n	80087fa <_dtoa_r+0x82a>
 80087ee:	4649      	mov	r1, r9
 80087f0:	4642      	mov	r2, r8
 80087f2:	4658      	mov	r0, fp
 80087f4:	f000 fcbe 	bl	8009174 <__lshift>
 80087f8:	4681      	mov	r9, r0
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dd05      	ble.n	800880c <_dtoa_r+0x83c>
 8008800:	4621      	mov	r1, r4
 8008802:	461a      	mov	r2, r3
 8008804:	4658      	mov	r0, fp
 8008806:	f000 fcb5 	bl	8009174 <__lshift>
 800880a:	4604      	mov	r4, r0
 800880c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800880e:	2b00      	cmp	r3, #0
 8008810:	d059      	beq.n	80088c6 <_dtoa_r+0x8f6>
 8008812:	4621      	mov	r1, r4
 8008814:	4648      	mov	r0, r9
 8008816:	f000 fd19 	bl	800924c <__mcmp>
 800881a:	2800      	cmp	r0, #0
 800881c:	da53      	bge.n	80088c6 <_dtoa_r+0x8f6>
 800881e:	1e7b      	subs	r3, r7, #1
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	4649      	mov	r1, r9
 8008824:	2300      	movs	r3, #0
 8008826:	220a      	movs	r2, #10
 8008828:	4658      	mov	r0, fp
 800882a:	f000 faf7 	bl	8008e1c <__multadd>
 800882e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008830:	4681      	mov	r9, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8172 	beq.w	8008b1c <_dtoa_r+0xb4c>
 8008838:	2300      	movs	r3, #0
 800883a:	4629      	mov	r1, r5
 800883c:	220a      	movs	r2, #10
 800883e:	4658      	mov	r0, fp
 8008840:	f000 faec 	bl	8008e1c <__multadd>
 8008844:	9b00      	ldr	r3, [sp, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	4605      	mov	r5, r0
 800884a:	dc67      	bgt.n	800891c <_dtoa_r+0x94c>
 800884c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884e:	2b02      	cmp	r3, #2
 8008850:	dc41      	bgt.n	80088d6 <_dtoa_r+0x906>
 8008852:	e063      	b.n	800891c <_dtoa_r+0x94c>
 8008854:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008856:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800885a:	e746      	b.n	80086ea <_dtoa_r+0x71a>
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	1e5c      	subs	r4, r3, #1
 8008860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008862:	42a3      	cmp	r3, r4
 8008864:	bfbf      	itttt	lt
 8008866:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008868:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800886a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800886c:	1ae3      	sublt	r3, r4, r3
 800886e:	bfb4      	ite	lt
 8008870:	18d2      	addlt	r2, r2, r3
 8008872:	1b1c      	subge	r4, r3, r4
 8008874:	9b07      	ldr	r3, [sp, #28]
 8008876:	bfbc      	itt	lt
 8008878:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800887a:	2400      	movlt	r4, #0
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfb5      	itete	lt
 8008880:	eba8 0603 	sublt.w	r6, r8, r3
 8008884:	9b07      	ldrge	r3, [sp, #28]
 8008886:	2300      	movlt	r3, #0
 8008888:	4646      	movge	r6, r8
 800888a:	e730      	b.n	80086ee <_dtoa_r+0x71e>
 800888c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800888e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008890:	4646      	mov	r6, r8
 8008892:	e735      	b.n	8008700 <_dtoa_r+0x730>
 8008894:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008896:	e75c      	b.n	8008752 <_dtoa_r+0x782>
 8008898:	2300      	movs	r3, #0
 800889a:	e788      	b.n	80087ae <_dtoa_r+0x7de>
 800889c:	3fe00000 	.word	0x3fe00000
 80088a0:	40240000 	.word	0x40240000
 80088a4:	40140000 	.word	0x40140000
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	e780      	b.n	80087ae <_dtoa_r+0x7de>
 80088ac:	2300      	movs	r3, #0
 80088ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80088b0:	e782      	b.n	80087b8 <_dtoa_r+0x7e8>
 80088b2:	d099      	beq.n	80087e8 <_dtoa_r+0x818>
 80088b4:	9a08      	ldr	r2, [sp, #32]
 80088b6:	331c      	adds	r3, #28
 80088b8:	441a      	add	r2, r3
 80088ba:	4498      	add	r8, r3
 80088bc:	441e      	add	r6, r3
 80088be:	9208      	str	r2, [sp, #32]
 80088c0:	e792      	b.n	80087e8 <_dtoa_r+0x818>
 80088c2:	4603      	mov	r3, r0
 80088c4:	e7f6      	b.n	80088b4 <_dtoa_r+0x8e4>
 80088c6:	9b07      	ldr	r3, [sp, #28]
 80088c8:	9704      	str	r7, [sp, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dc20      	bgt.n	8008910 <_dtoa_r+0x940>
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	dd1e      	ble.n	8008914 <_dtoa_r+0x944>
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f47f aec0 	bne.w	800865e <_dtoa_r+0x68e>
 80088de:	4621      	mov	r1, r4
 80088e0:	2205      	movs	r2, #5
 80088e2:	4658      	mov	r0, fp
 80088e4:	f000 fa9a 	bl	8008e1c <__multadd>
 80088e8:	4601      	mov	r1, r0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4648      	mov	r0, r9
 80088ee:	f000 fcad 	bl	800924c <__mcmp>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f77f aeb3 	ble.w	800865e <_dtoa_r+0x68e>
 80088f8:	4656      	mov	r6, sl
 80088fa:	2331      	movs	r3, #49	@ 0x31
 80088fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008900:	9b04      	ldr	r3, [sp, #16]
 8008902:	3301      	adds	r3, #1
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	e6ae      	b.n	8008666 <_dtoa_r+0x696>
 8008908:	9c07      	ldr	r4, [sp, #28]
 800890a:	9704      	str	r7, [sp, #16]
 800890c:	4625      	mov	r5, r4
 800890e:	e7f3      	b.n	80088f8 <_dtoa_r+0x928>
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 8104 	beq.w	8008b24 <_dtoa_r+0xb54>
 800891c:	2e00      	cmp	r6, #0
 800891e:	dd05      	ble.n	800892c <_dtoa_r+0x95c>
 8008920:	4629      	mov	r1, r5
 8008922:	4632      	mov	r2, r6
 8008924:	4658      	mov	r0, fp
 8008926:	f000 fc25 	bl	8009174 <__lshift>
 800892a:	4605      	mov	r5, r0
 800892c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d05a      	beq.n	80089e8 <_dtoa_r+0xa18>
 8008932:	6869      	ldr	r1, [r5, #4]
 8008934:	4658      	mov	r0, fp
 8008936:	f000 fa0f 	bl	8008d58 <_Balloc>
 800893a:	4606      	mov	r6, r0
 800893c:	b928      	cbnz	r0, 800894a <_dtoa_r+0x97a>
 800893e:	4b84      	ldr	r3, [pc, #528]	@ (8008b50 <_dtoa_r+0xb80>)
 8008940:	4602      	mov	r2, r0
 8008942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008946:	f7ff bb5a 	b.w	8007ffe <_dtoa_r+0x2e>
 800894a:	692a      	ldr	r2, [r5, #16]
 800894c:	3202      	adds	r2, #2
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	f105 010c 	add.w	r1, r5, #12
 8008954:	300c      	adds	r0, #12
 8008956:	f001 f813 	bl	8009980 <memcpy>
 800895a:	2201      	movs	r2, #1
 800895c:	4631      	mov	r1, r6
 800895e:	4658      	mov	r0, fp
 8008960:	f000 fc08 	bl	8009174 <__lshift>
 8008964:	f10a 0301 	add.w	r3, sl, #1
 8008968:	9307      	str	r3, [sp, #28]
 800896a:	9b00      	ldr	r3, [sp, #0]
 800896c:	4453      	add	r3, sl
 800896e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008970:	9b02      	ldr	r3, [sp, #8]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	462f      	mov	r7, r5
 8008978:	930a      	str	r3, [sp, #40]	@ 0x28
 800897a:	4605      	mov	r5, r0
 800897c:	9b07      	ldr	r3, [sp, #28]
 800897e:	4621      	mov	r1, r4
 8008980:	3b01      	subs	r3, #1
 8008982:	4648      	mov	r0, r9
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	f7ff fa9a 	bl	8007ebe <quorem>
 800898a:	4639      	mov	r1, r7
 800898c:	9002      	str	r0, [sp, #8]
 800898e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008992:	4648      	mov	r0, r9
 8008994:	f000 fc5a 	bl	800924c <__mcmp>
 8008998:	462a      	mov	r2, r5
 800899a:	9008      	str	r0, [sp, #32]
 800899c:	4621      	mov	r1, r4
 800899e:	4658      	mov	r0, fp
 80089a0:	f000 fc70 	bl	8009284 <__mdiff>
 80089a4:	68c2      	ldr	r2, [r0, #12]
 80089a6:	4606      	mov	r6, r0
 80089a8:	bb02      	cbnz	r2, 80089ec <_dtoa_r+0xa1c>
 80089aa:	4601      	mov	r1, r0
 80089ac:	4648      	mov	r0, r9
 80089ae:	f000 fc4d 	bl	800924c <__mcmp>
 80089b2:	4602      	mov	r2, r0
 80089b4:	4631      	mov	r1, r6
 80089b6:	4658      	mov	r0, fp
 80089b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089ba:	f000 fa0d 	bl	8008dd8 <_Bfree>
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089c2:	9e07      	ldr	r6, [sp, #28]
 80089c4:	ea43 0102 	orr.w	r1, r3, r2
 80089c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ca:	4319      	orrs	r1, r3
 80089cc:	d110      	bne.n	80089f0 <_dtoa_r+0xa20>
 80089ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089d2:	d029      	beq.n	8008a28 <_dtoa_r+0xa58>
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dd02      	ble.n	80089e0 <_dtoa_r+0xa10>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	f883 8000 	strb.w	r8, [r3]
 80089e6:	e63f      	b.n	8008668 <_dtoa_r+0x698>
 80089e8:	4628      	mov	r0, r5
 80089ea:	e7bb      	b.n	8008964 <_dtoa_r+0x994>
 80089ec:	2201      	movs	r2, #1
 80089ee:	e7e1      	b.n	80089b4 <_dtoa_r+0x9e4>
 80089f0:	9b08      	ldr	r3, [sp, #32]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	db04      	blt.n	8008a00 <_dtoa_r+0xa30>
 80089f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089f8:	430b      	orrs	r3, r1
 80089fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089fc:	430b      	orrs	r3, r1
 80089fe:	d120      	bne.n	8008a42 <_dtoa_r+0xa72>
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	dded      	ble.n	80089e0 <_dtoa_r+0xa10>
 8008a04:	4649      	mov	r1, r9
 8008a06:	2201      	movs	r2, #1
 8008a08:	4658      	mov	r0, fp
 8008a0a:	f000 fbb3 	bl	8009174 <__lshift>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4681      	mov	r9, r0
 8008a12:	f000 fc1b 	bl	800924c <__mcmp>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	dc03      	bgt.n	8008a22 <_dtoa_r+0xa52>
 8008a1a:	d1e1      	bne.n	80089e0 <_dtoa_r+0xa10>
 8008a1c:	f018 0f01 	tst.w	r8, #1
 8008a20:	d0de      	beq.n	80089e0 <_dtoa_r+0xa10>
 8008a22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a26:	d1d8      	bne.n	80089da <_dtoa_r+0xa0a>
 8008a28:	9a00      	ldr	r2, [sp, #0]
 8008a2a:	2339      	movs	r3, #57	@ 0x39
 8008a2c:	7013      	strb	r3, [r2, #0]
 8008a2e:	4633      	mov	r3, r6
 8008a30:	461e      	mov	r6, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a38:	2a39      	cmp	r2, #57	@ 0x39
 8008a3a:	d052      	beq.n	8008ae2 <_dtoa_r+0xb12>
 8008a3c:	3201      	adds	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	e612      	b.n	8008668 <_dtoa_r+0x698>
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	dd07      	ble.n	8008a56 <_dtoa_r+0xa86>
 8008a46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a4a:	d0ed      	beq.n	8008a28 <_dtoa_r+0xa58>
 8008a4c:	9a00      	ldr	r2, [sp, #0]
 8008a4e:	f108 0301 	add.w	r3, r8, #1
 8008a52:	7013      	strb	r3, [r2, #0]
 8008a54:	e608      	b.n	8008668 <_dtoa_r+0x698>
 8008a56:	9b07      	ldr	r3, [sp, #28]
 8008a58:	9a07      	ldr	r2, [sp, #28]
 8008a5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d028      	beq.n	8008ab6 <_dtoa_r+0xae6>
 8008a64:	4649      	mov	r1, r9
 8008a66:	2300      	movs	r3, #0
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f000 f9d6 	bl	8008e1c <__multadd>
 8008a70:	42af      	cmp	r7, r5
 8008a72:	4681      	mov	r9, r0
 8008a74:	f04f 0300 	mov.w	r3, #0
 8008a78:	f04f 020a 	mov.w	r2, #10
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	4658      	mov	r0, fp
 8008a80:	d107      	bne.n	8008a92 <_dtoa_r+0xac2>
 8008a82:	f000 f9cb 	bl	8008e1c <__multadd>
 8008a86:	4607      	mov	r7, r0
 8008a88:	4605      	mov	r5, r0
 8008a8a:	9b07      	ldr	r3, [sp, #28]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	e774      	b.n	800897c <_dtoa_r+0x9ac>
 8008a92:	f000 f9c3 	bl	8008e1c <__multadd>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4607      	mov	r7, r0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	f000 f9bc 	bl	8008e1c <__multadd>
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	e7f0      	b.n	8008a8a <_dtoa_r+0xaba>
 8008aa8:	9b00      	ldr	r3, [sp, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfcc      	ite	gt
 8008aae:	461e      	movgt	r6, r3
 8008ab0:	2601      	movle	r6, #1
 8008ab2:	4456      	add	r6, sl
 8008ab4:	2700      	movs	r7, #0
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	2201      	movs	r2, #1
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 fb5a 	bl	8009174 <__lshift>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4681      	mov	r9, r0
 8008ac4:	f000 fbc2 	bl	800924c <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	dcb0      	bgt.n	8008a2e <_dtoa_r+0xa5e>
 8008acc:	d102      	bne.n	8008ad4 <_dtoa_r+0xb04>
 8008ace:	f018 0f01 	tst.w	r8, #1
 8008ad2:	d1ac      	bne.n	8008a2e <_dtoa_r+0xa5e>
 8008ad4:	4633      	mov	r3, r6
 8008ad6:	461e      	mov	r6, r3
 8008ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008adc:	2a30      	cmp	r2, #48	@ 0x30
 8008ade:	d0fa      	beq.n	8008ad6 <_dtoa_r+0xb06>
 8008ae0:	e5c2      	b.n	8008668 <_dtoa_r+0x698>
 8008ae2:	459a      	cmp	sl, r3
 8008ae4:	d1a4      	bne.n	8008a30 <_dtoa_r+0xa60>
 8008ae6:	9b04      	ldr	r3, [sp, #16]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	2331      	movs	r3, #49	@ 0x31
 8008aee:	f88a 3000 	strb.w	r3, [sl]
 8008af2:	e5b9      	b.n	8008668 <_dtoa_r+0x698>
 8008af4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008af6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b54 <_dtoa_r+0xb84>
 8008afa:	b11b      	cbz	r3, 8008b04 <_dtoa_r+0xb34>
 8008afc:	f10a 0308 	add.w	r3, sl, #8
 8008b00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	4650      	mov	r0, sl
 8008b06:	b019      	add	sp, #100	@ 0x64
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	f77f ae37 	ble.w	8008782 <_dtoa_r+0x7b2>
 8008b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b18:	2001      	movs	r0, #1
 8008b1a:	e655      	b.n	80087c8 <_dtoa_r+0x7f8>
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f77f aed6 	ble.w	80088d0 <_dtoa_r+0x900>
 8008b24:	4656      	mov	r6, sl
 8008b26:	4621      	mov	r1, r4
 8008b28:	4648      	mov	r0, r9
 8008b2a:	f7ff f9c8 	bl	8007ebe <quorem>
 8008b2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b32:	f806 8b01 	strb.w	r8, [r6], #1
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	eba6 020a 	sub.w	r2, r6, sl
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	ddb3      	ble.n	8008aa8 <_dtoa_r+0xad8>
 8008b40:	4649      	mov	r1, r9
 8008b42:	2300      	movs	r3, #0
 8008b44:	220a      	movs	r2, #10
 8008b46:	4658      	mov	r0, fp
 8008b48:	f000 f968 	bl	8008e1c <__multadd>
 8008b4c:	4681      	mov	r9, r0
 8008b4e:	e7ea      	b.n	8008b26 <_dtoa_r+0xb56>
 8008b50:	0800cb90 	.word	0x0800cb90
 8008b54:	0800cb14 	.word	0x0800cb14

08008b58 <_free_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	d041      	beq.n	8008be4 <_free_r+0x8c>
 8008b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b64:	1f0c      	subs	r4, r1, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfb8      	it	lt
 8008b6a:	18e4      	addlt	r4, r4, r3
 8008b6c:	f000 f8e8 	bl	8008d40 <__malloc_lock>
 8008b70:	4a1d      	ldr	r2, [pc, #116]	@ (8008be8 <_free_r+0x90>)
 8008b72:	6813      	ldr	r3, [r2, #0]
 8008b74:	b933      	cbnz	r3, 8008b84 <_free_r+0x2c>
 8008b76:	6063      	str	r3, [r4, #4]
 8008b78:	6014      	str	r4, [r2, #0]
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b80:	f000 b8e4 	b.w	8008d4c <__malloc_unlock>
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	d908      	bls.n	8008b9a <_free_r+0x42>
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	1821      	adds	r1, r4, r0
 8008b8c:	428b      	cmp	r3, r1
 8008b8e:	bf01      	itttt	eq
 8008b90:	6819      	ldreq	r1, [r3, #0]
 8008b92:	685b      	ldreq	r3, [r3, #4]
 8008b94:	1809      	addeq	r1, r1, r0
 8008b96:	6021      	streq	r1, [r4, #0]
 8008b98:	e7ed      	b.n	8008b76 <_free_r+0x1e>
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	b10b      	cbz	r3, 8008ba4 <_free_r+0x4c>
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d9fa      	bls.n	8008b9a <_free_r+0x42>
 8008ba4:	6811      	ldr	r1, [r2, #0]
 8008ba6:	1850      	adds	r0, r2, r1
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d10b      	bne.n	8008bc4 <_free_r+0x6c>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	4401      	add	r1, r0
 8008bb0:	1850      	adds	r0, r2, r1
 8008bb2:	4283      	cmp	r3, r0
 8008bb4:	6011      	str	r1, [r2, #0]
 8008bb6:	d1e0      	bne.n	8008b7a <_free_r+0x22>
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	6053      	str	r3, [r2, #4]
 8008bbe:	4408      	add	r0, r1
 8008bc0:	6010      	str	r0, [r2, #0]
 8008bc2:	e7da      	b.n	8008b7a <_free_r+0x22>
 8008bc4:	d902      	bls.n	8008bcc <_free_r+0x74>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	e7d6      	b.n	8008b7a <_free_r+0x22>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	1821      	adds	r1, r4, r0
 8008bd0:	428b      	cmp	r3, r1
 8008bd2:	bf04      	itt	eq
 8008bd4:	6819      	ldreq	r1, [r3, #0]
 8008bd6:	685b      	ldreq	r3, [r3, #4]
 8008bd8:	6063      	str	r3, [r4, #4]
 8008bda:	bf04      	itt	eq
 8008bdc:	1809      	addeq	r1, r1, r0
 8008bde:	6021      	streq	r1, [r4, #0]
 8008be0:	6054      	str	r4, [r2, #4]
 8008be2:	e7ca      	b.n	8008b7a <_free_r+0x22>
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	bf00      	nop
 8008be8:	2000453c 	.word	0x2000453c

08008bec <malloc>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	@ (8008bf8 <malloc+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f000 b825 	b.w	8008c40 <_malloc_r>
 8008bf6:	bf00      	nop
 8008bf8:	20002020 	.word	0x20002020

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8008c3c <sbrk_aligned+0x40>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 feaa 	bl	8009960 <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 fea5 	bl	8009960 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d103      	bne.n	8008c22 <sbrk_aligned+0x26>
 8008c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c1e:	4620      	mov	r0, r4
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	1cc4      	adds	r4, r0, #3
 8008c24:	f024 0403 	bic.w	r4, r4, #3
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	d0f8      	beq.n	8008c1e <sbrk_aligned+0x22>
 8008c2c:	1a21      	subs	r1, r4, r0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 fe96 	bl	8009960 <_sbrk_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d1f2      	bne.n	8008c1e <sbrk_aligned+0x22>
 8008c38:	e7ef      	b.n	8008c1a <sbrk_aligned+0x1e>
 8008c3a:	bf00      	nop
 8008c3c:	20004538 	.word	0x20004538

08008c40 <_malloc_r>:
 8008c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c44:	1ccd      	adds	r5, r1, #3
 8008c46:	f025 0503 	bic.w	r5, r5, #3
 8008c4a:	3508      	adds	r5, #8
 8008c4c:	2d0c      	cmp	r5, #12
 8008c4e:	bf38      	it	cc
 8008c50:	250c      	movcc	r5, #12
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	4606      	mov	r6, r0
 8008c56:	db01      	blt.n	8008c5c <_malloc_r+0x1c>
 8008c58:	42a9      	cmp	r1, r5
 8008c5a:	d904      	bls.n	8008c66 <_malloc_r+0x26>
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	2000      	movs	r0, #0
 8008c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d3c <_malloc_r+0xfc>
 8008c6a:	f000 f869 	bl	8008d40 <__malloc_lock>
 8008c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c72:	461c      	mov	r4, r3
 8008c74:	bb44      	cbnz	r4, 8008cc8 <_malloc_r+0x88>
 8008c76:	4629      	mov	r1, r5
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff ffbf 	bl	8008bfc <sbrk_aligned>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	4604      	mov	r4, r0
 8008c82:	d158      	bne.n	8008d36 <_malloc_r+0xf6>
 8008c84:	f8d8 4000 	ldr.w	r4, [r8]
 8008c88:	4627      	mov	r7, r4
 8008c8a:	2f00      	cmp	r7, #0
 8008c8c:	d143      	bne.n	8008d16 <_malloc_r+0xd6>
 8008c8e:	2c00      	cmp	r4, #0
 8008c90:	d04b      	beq.n	8008d2a <_malloc_r+0xea>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	4639      	mov	r1, r7
 8008c96:	4630      	mov	r0, r6
 8008c98:	eb04 0903 	add.w	r9, r4, r3
 8008c9c:	f000 fe60 	bl	8009960 <_sbrk_r>
 8008ca0:	4581      	cmp	r9, r0
 8008ca2:	d142      	bne.n	8008d2a <_malloc_r+0xea>
 8008ca4:	6821      	ldr	r1, [r4, #0]
 8008ca6:	1a6d      	subs	r5, r5, r1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ffa6 	bl	8008bfc <sbrk_aligned>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d03a      	beq.n	8008d2a <_malloc_r+0xea>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	442b      	add	r3, r5
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	f8d8 3000 	ldr.w	r3, [r8]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	bb62      	cbnz	r2, 8008d1c <_malloc_r+0xdc>
 8008cc2:	f8c8 7000 	str.w	r7, [r8]
 8008cc6:	e00f      	b.n	8008ce8 <_malloc_r+0xa8>
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	1b52      	subs	r2, r2, r5
 8008ccc:	d420      	bmi.n	8008d10 <_malloc_r+0xd0>
 8008cce:	2a0b      	cmp	r2, #11
 8008cd0:	d917      	bls.n	8008d02 <_malloc_r+0xc2>
 8008cd2:	1961      	adds	r1, r4, r5
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	6025      	str	r5, [r4, #0]
 8008cd8:	bf18      	it	ne
 8008cda:	6059      	strne	r1, [r3, #4]
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	bf08      	it	eq
 8008ce0:	f8c8 1000 	streq.w	r1, [r8]
 8008ce4:	5162      	str	r2, [r4, r5]
 8008ce6:	604b      	str	r3, [r1, #4]
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f000 f82f 	bl	8008d4c <__malloc_unlock>
 8008cee:	f104 000b 	add.w	r0, r4, #11
 8008cf2:	1d23      	adds	r3, r4, #4
 8008cf4:	f020 0007 	bic.w	r0, r0, #7
 8008cf8:	1ac2      	subs	r2, r0, r3
 8008cfa:	bf1c      	itt	ne
 8008cfc:	1a1b      	subne	r3, r3, r0
 8008cfe:	50a3      	strne	r3, [r4, r2]
 8008d00:	e7af      	b.n	8008c62 <_malloc_r+0x22>
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	bf0c      	ite	eq
 8008d08:	f8c8 2000 	streq.w	r2, [r8]
 8008d0c:	605a      	strne	r2, [r3, #4]
 8008d0e:	e7eb      	b.n	8008ce8 <_malloc_r+0xa8>
 8008d10:	4623      	mov	r3, r4
 8008d12:	6864      	ldr	r4, [r4, #4]
 8008d14:	e7ae      	b.n	8008c74 <_malloc_r+0x34>
 8008d16:	463c      	mov	r4, r7
 8008d18:	687f      	ldr	r7, [r7, #4]
 8008d1a:	e7b6      	b.n	8008c8a <_malloc_r+0x4a>
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	d1fb      	bne.n	8008d1c <_malloc_r+0xdc>
 8008d24:	2300      	movs	r3, #0
 8008d26:	6053      	str	r3, [r2, #4]
 8008d28:	e7de      	b.n	8008ce8 <_malloc_r+0xa8>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f000 f80c 	bl	8008d4c <__malloc_unlock>
 8008d34:	e794      	b.n	8008c60 <_malloc_r+0x20>
 8008d36:	6005      	str	r5, [r0, #0]
 8008d38:	e7d6      	b.n	8008ce8 <_malloc_r+0xa8>
 8008d3a:	bf00      	nop
 8008d3c:	2000453c 	.word	0x2000453c

08008d40 <__malloc_lock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	@ (8008d48 <__malloc_lock+0x8>)
 8008d42:	f7ff b8ba 	b.w	8007eba <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20004534 	.word	0x20004534

08008d4c <__malloc_unlock>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	@ (8008d54 <__malloc_unlock+0x8>)
 8008d4e:	f7ff b8b5 	b.w	8007ebc <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20004534 	.word	0x20004534

08008d58 <_Balloc>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	69c6      	ldr	r6, [r0, #28]
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	460d      	mov	r5, r1
 8008d60:	b976      	cbnz	r6, 8008d80 <_Balloc+0x28>
 8008d62:	2010      	movs	r0, #16
 8008d64:	f7ff ff42 	bl	8008bec <malloc>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	61e0      	str	r0, [r4, #28]
 8008d6c:	b920      	cbnz	r0, 8008d78 <_Balloc+0x20>
 8008d6e:	4b18      	ldr	r3, [pc, #96]	@ (8008dd0 <_Balloc+0x78>)
 8008d70:	4818      	ldr	r0, [pc, #96]	@ (8008dd4 <_Balloc+0x7c>)
 8008d72:	216b      	movs	r1, #107	@ 0x6b
 8008d74:	f000 fe12 	bl	800999c <__assert_func>
 8008d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d7c:	6006      	str	r6, [r0, #0]
 8008d7e:	60c6      	str	r6, [r0, #12]
 8008d80:	69e6      	ldr	r6, [r4, #28]
 8008d82:	68f3      	ldr	r3, [r6, #12]
 8008d84:	b183      	cbz	r3, 8008da8 <_Balloc+0x50>
 8008d86:	69e3      	ldr	r3, [r4, #28]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d8e:	b9b8      	cbnz	r0, 8008dc0 <_Balloc+0x68>
 8008d90:	2101      	movs	r1, #1
 8008d92:	fa01 f605 	lsl.w	r6, r1, r5
 8008d96:	1d72      	adds	r2, r6, #5
 8008d98:	0092      	lsls	r2, r2, #2
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fe1c 	bl	80099d8 <_calloc_r>
 8008da0:	b160      	cbz	r0, 8008dbc <_Balloc+0x64>
 8008da2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008da6:	e00e      	b.n	8008dc6 <_Balloc+0x6e>
 8008da8:	2221      	movs	r2, #33	@ 0x21
 8008daa:	2104      	movs	r1, #4
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fe13 	bl	80099d8 <_calloc_r>
 8008db2:	69e3      	ldr	r3, [r4, #28]
 8008db4:	60f0      	str	r0, [r6, #12]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e4      	bne.n	8008d86 <_Balloc+0x2e>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	6802      	ldr	r2, [r0, #0]
 8008dc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dcc:	e7f7      	b.n	8008dbe <_Balloc+0x66>
 8008dce:	bf00      	nop
 8008dd0:	0800cb21 	.word	0x0800cb21
 8008dd4:	0800cba1 	.word	0x0800cba1

08008dd8 <_Bfree>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	69c6      	ldr	r6, [r0, #28]
 8008ddc:	4605      	mov	r5, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	b976      	cbnz	r6, 8008e00 <_Bfree+0x28>
 8008de2:	2010      	movs	r0, #16
 8008de4:	f7ff ff02 	bl	8008bec <malloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	61e8      	str	r0, [r5, #28]
 8008dec:	b920      	cbnz	r0, 8008df8 <_Bfree+0x20>
 8008dee:	4b09      	ldr	r3, [pc, #36]	@ (8008e14 <_Bfree+0x3c>)
 8008df0:	4809      	ldr	r0, [pc, #36]	@ (8008e18 <_Bfree+0x40>)
 8008df2:	218f      	movs	r1, #143	@ 0x8f
 8008df4:	f000 fdd2 	bl	800999c <__assert_func>
 8008df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dfc:	6006      	str	r6, [r0, #0]
 8008dfe:	60c6      	str	r6, [r0, #12]
 8008e00:	b13c      	cbz	r4, 8008e12 <_Bfree+0x3a>
 8008e02:	69eb      	ldr	r3, [r5, #28]
 8008e04:	6862      	ldr	r2, [r4, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e0c:	6021      	str	r1, [r4, #0]
 8008e0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	0800cb21 	.word	0x0800cb21
 8008e18:	0800cba1 	.word	0x0800cba1

08008e1c <__multadd>:
 8008e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e20:	690d      	ldr	r5, [r1, #16]
 8008e22:	4607      	mov	r7, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	461e      	mov	r6, r3
 8008e28:	f101 0c14 	add.w	ip, r1, #20
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8008e32:	b299      	uxth	r1, r3
 8008e34:	fb02 6101 	mla	r1, r2, r1, r6
 8008e38:	0c1e      	lsrs	r6, r3, #16
 8008e3a:	0c0b      	lsrs	r3, r1, #16
 8008e3c:	fb02 3306 	mla	r3, r2, r6, r3
 8008e40:	b289      	uxth	r1, r1
 8008e42:	3001      	adds	r0, #1
 8008e44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e48:	4285      	cmp	r5, r0
 8008e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8008e4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e52:	dcec      	bgt.n	8008e2e <__multadd+0x12>
 8008e54:	b30e      	cbz	r6, 8008e9a <__multadd+0x7e>
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	42ab      	cmp	r3, r5
 8008e5a:	dc19      	bgt.n	8008e90 <__multadd+0x74>
 8008e5c:	6861      	ldr	r1, [r4, #4]
 8008e5e:	4638      	mov	r0, r7
 8008e60:	3101      	adds	r1, #1
 8008e62:	f7ff ff79 	bl	8008d58 <_Balloc>
 8008e66:	4680      	mov	r8, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <__multadd+0x5a>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea0 <__multadd+0x84>)
 8008e6e:	480d      	ldr	r0, [pc, #52]	@ (8008ea4 <__multadd+0x88>)
 8008e70:	21ba      	movs	r1, #186	@ 0xba
 8008e72:	f000 fd93 	bl	800999c <__assert_func>
 8008e76:	6922      	ldr	r2, [r4, #16]
 8008e78:	3202      	adds	r2, #2
 8008e7a:	f104 010c 	add.w	r1, r4, #12
 8008e7e:	0092      	lsls	r2, r2, #2
 8008e80:	300c      	adds	r0, #12
 8008e82:	f000 fd7d 	bl	8009980 <memcpy>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff ffa5 	bl	8008dd8 <_Bfree>
 8008e8e:	4644      	mov	r4, r8
 8008e90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e94:	3501      	adds	r5, #1
 8008e96:	615e      	str	r6, [r3, #20]
 8008e98:	6125      	str	r5, [r4, #16]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea0:	0800cb90 	.word	0x0800cb90
 8008ea4:	0800cba1 	.word	0x0800cba1

08008ea8 <__hi0bits>:
 8008ea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008eac:	4603      	mov	r3, r0
 8008eae:	bf36      	itet	cc
 8008eb0:	0403      	lslcc	r3, r0, #16
 8008eb2:	2000      	movcs	r0, #0
 8008eb4:	2010      	movcc	r0, #16
 8008eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eba:	bf3c      	itt	cc
 8008ebc:	021b      	lslcc	r3, r3, #8
 8008ebe:	3008      	addcc	r0, #8
 8008ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ec4:	bf3c      	itt	cc
 8008ec6:	011b      	lslcc	r3, r3, #4
 8008ec8:	3004      	addcc	r0, #4
 8008eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ece:	bf3c      	itt	cc
 8008ed0:	009b      	lslcc	r3, r3, #2
 8008ed2:	3002      	addcc	r0, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	db05      	blt.n	8008ee4 <__hi0bits+0x3c>
 8008ed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008edc:	f100 0001 	add.w	r0, r0, #1
 8008ee0:	bf08      	it	eq
 8008ee2:	2020      	moveq	r0, #32
 8008ee4:	4770      	bx	lr

08008ee6 <__lo0bits>:
 8008ee6:	6803      	ldr	r3, [r0, #0]
 8008ee8:	4602      	mov	r2, r0
 8008eea:	f013 0007 	ands.w	r0, r3, #7
 8008eee:	d00b      	beq.n	8008f08 <__lo0bits+0x22>
 8008ef0:	07d9      	lsls	r1, r3, #31
 8008ef2:	d421      	bmi.n	8008f38 <__lo0bits+0x52>
 8008ef4:	0798      	lsls	r0, r3, #30
 8008ef6:	bf49      	itett	mi
 8008ef8:	085b      	lsrmi	r3, r3, #1
 8008efa:	089b      	lsrpl	r3, r3, #2
 8008efc:	2001      	movmi	r0, #1
 8008efe:	6013      	strmi	r3, [r2, #0]
 8008f00:	bf5c      	itt	pl
 8008f02:	6013      	strpl	r3, [r2, #0]
 8008f04:	2002      	movpl	r0, #2
 8008f06:	4770      	bx	lr
 8008f08:	b299      	uxth	r1, r3
 8008f0a:	b909      	cbnz	r1, 8008f10 <__lo0bits+0x2a>
 8008f0c:	0c1b      	lsrs	r3, r3, #16
 8008f0e:	2010      	movs	r0, #16
 8008f10:	b2d9      	uxtb	r1, r3
 8008f12:	b909      	cbnz	r1, 8008f18 <__lo0bits+0x32>
 8008f14:	3008      	adds	r0, #8
 8008f16:	0a1b      	lsrs	r3, r3, #8
 8008f18:	0719      	lsls	r1, r3, #28
 8008f1a:	bf04      	itt	eq
 8008f1c:	091b      	lsreq	r3, r3, #4
 8008f1e:	3004      	addeq	r0, #4
 8008f20:	0799      	lsls	r1, r3, #30
 8008f22:	bf04      	itt	eq
 8008f24:	089b      	lsreq	r3, r3, #2
 8008f26:	3002      	addeq	r0, #2
 8008f28:	07d9      	lsls	r1, r3, #31
 8008f2a:	d403      	bmi.n	8008f34 <__lo0bits+0x4e>
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	f100 0001 	add.w	r0, r0, #1
 8008f32:	d003      	beq.n	8008f3c <__lo0bits+0x56>
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	4770      	bx	lr
 8008f38:	2000      	movs	r0, #0
 8008f3a:	4770      	bx	lr
 8008f3c:	2020      	movs	r0, #32
 8008f3e:	4770      	bx	lr

08008f40 <__i2b>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	460c      	mov	r4, r1
 8008f44:	2101      	movs	r1, #1
 8008f46:	f7ff ff07 	bl	8008d58 <_Balloc>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	b928      	cbnz	r0, 8008f5a <__i2b+0x1a>
 8008f4e:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <__i2b+0x24>)
 8008f50:	4805      	ldr	r0, [pc, #20]	@ (8008f68 <__i2b+0x28>)
 8008f52:	f240 1145 	movw	r1, #325	@ 0x145
 8008f56:	f000 fd21 	bl	800999c <__assert_func>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	6144      	str	r4, [r0, #20]
 8008f5e:	6103      	str	r3, [r0, #16]
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	bf00      	nop
 8008f64:	0800cb90 	.word	0x0800cb90
 8008f68:	0800cba1 	.word	0x0800cba1

08008f6c <__multiply>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	4614      	mov	r4, r2
 8008f72:	690a      	ldr	r2, [r1, #16]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	bfa8      	it	ge
 8008f7a:	4623      	movge	r3, r4
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	bfa4      	itt	ge
 8008f80:	460c      	movge	r4, r1
 8008f82:	461f      	movge	r7, r3
 8008f84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	6861      	ldr	r1, [r4, #4]
 8008f90:	eb0a 0609 	add.w	r6, sl, r9
 8008f94:	42b3      	cmp	r3, r6
 8008f96:	b085      	sub	sp, #20
 8008f98:	bfb8      	it	lt
 8008f9a:	3101      	addlt	r1, #1
 8008f9c:	f7ff fedc 	bl	8008d58 <_Balloc>
 8008fa0:	b930      	cbnz	r0, 8008fb0 <__multiply+0x44>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	4b44      	ldr	r3, [pc, #272]	@ (80090b8 <__multiply+0x14c>)
 8008fa6:	4845      	ldr	r0, [pc, #276]	@ (80090bc <__multiply+0x150>)
 8008fa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008fac:	f000 fcf6 	bl	800999c <__assert_func>
 8008fb0:	f100 0514 	add.w	r5, r0, #20
 8008fb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fb8:	462b      	mov	r3, r5
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4543      	cmp	r3, r8
 8008fbe:	d321      	bcc.n	8009004 <__multiply+0x98>
 8008fc0:	f107 0114 	add.w	r1, r7, #20
 8008fc4:	f104 0214 	add.w	r2, r4, #20
 8008fc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008fcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008fd0:	9302      	str	r3, [sp, #8]
 8008fd2:	1b13      	subs	r3, r2, r4
 8008fd4:	3b15      	subs	r3, #21
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	3304      	adds	r3, #4
 8008fdc:	f104 0715 	add.w	r7, r4, #21
 8008fe0:	42ba      	cmp	r2, r7
 8008fe2:	bf38      	it	cc
 8008fe4:	2304      	movcc	r3, #4
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	9103      	str	r1, [sp, #12]
 8008fec:	428b      	cmp	r3, r1
 8008fee:	d80c      	bhi.n	800900a <__multiply+0x9e>
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	dd03      	ble.n	8008ffc <__multiply+0x90>
 8008ff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d05b      	beq.n	80090b4 <__multiply+0x148>
 8008ffc:	6106      	str	r6, [r0, #16]
 8008ffe:	b005      	add	sp, #20
 8009000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009004:	f843 2b04 	str.w	r2, [r3], #4
 8009008:	e7d8      	b.n	8008fbc <__multiply+0x50>
 800900a:	f8b1 a000 	ldrh.w	sl, [r1]
 800900e:	f1ba 0f00 	cmp.w	sl, #0
 8009012:	d024      	beq.n	800905e <__multiply+0xf2>
 8009014:	f104 0e14 	add.w	lr, r4, #20
 8009018:	46a9      	mov	r9, r5
 800901a:	f04f 0c00 	mov.w	ip, #0
 800901e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009022:	f8d9 3000 	ldr.w	r3, [r9]
 8009026:	fa1f fb87 	uxth.w	fp, r7
 800902a:	b29b      	uxth	r3, r3
 800902c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009030:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009034:	f8d9 7000 	ldr.w	r7, [r9]
 8009038:	4463      	add	r3, ip
 800903a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800903e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009046:	b29b      	uxth	r3, r3
 8009048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800904c:	4572      	cmp	r2, lr
 800904e:	f849 3b04 	str.w	r3, [r9], #4
 8009052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009056:	d8e2      	bhi.n	800901e <__multiply+0xb2>
 8009058:	9b01      	ldr	r3, [sp, #4]
 800905a:	f845 c003 	str.w	ip, [r5, r3]
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009064:	3104      	adds	r1, #4
 8009066:	f1b9 0f00 	cmp.w	r9, #0
 800906a:	d021      	beq.n	80090b0 <__multiply+0x144>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	f104 0c14 	add.w	ip, r4, #20
 8009072:	46ae      	mov	lr, r5
 8009074:	f04f 0a00 	mov.w	sl, #0
 8009078:	f8bc b000 	ldrh.w	fp, [ip]
 800907c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009080:	fb09 770b 	mla	r7, r9, fp, r7
 8009084:	4457      	add	r7, sl
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800908c:	f84e 3b04 	str.w	r3, [lr], #4
 8009090:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009098:	f8be 3000 	ldrh.w	r3, [lr]
 800909c:	fb09 330a 	mla	r3, r9, sl, r3
 80090a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80090a4:	4562      	cmp	r2, ip
 80090a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090aa:	d8e5      	bhi.n	8009078 <__multiply+0x10c>
 80090ac:	9f01      	ldr	r7, [sp, #4]
 80090ae:	51eb      	str	r3, [r5, r7]
 80090b0:	3504      	adds	r5, #4
 80090b2:	e799      	b.n	8008fe8 <__multiply+0x7c>
 80090b4:	3e01      	subs	r6, #1
 80090b6:	e79b      	b.n	8008ff0 <__multiply+0x84>
 80090b8:	0800cb90 	.word	0x0800cb90
 80090bc:	0800cba1 	.word	0x0800cba1

080090c0 <__pow5mult>:
 80090c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	4615      	mov	r5, r2
 80090c6:	f012 0203 	ands.w	r2, r2, #3
 80090ca:	4607      	mov	r7, r0
 80090cc:	460e      	mov	r6, r1
 80090ce:	d007      	beq.n	80090e0 <__pow5mult+0x20>
 80090d0:	4c25      	ldr	r4, [pc, #148]	@ (8009168 <__pow5mult+0xa8>)
 80090d2:	3a01      	subs	r2, #1
 80090d4:	2300      	movs	r3, #0
 80090d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090da:	f7ff fe9f 	bl	8008e1c <__multadd>
 80090de:	4606      	mov	r6, r0
 80090e0:	10ad      	asrs	r5, r5, #2
 80090e2:	d03d      	beq.n	8009160 <__pow5mult+0xa0>
 80090e4:	69fc      	ldr	r4, [r7, #28]
 80090e6:	b97c      	cbnz	r4, 8009108 <__pow5mult+0x48>
 80090e8:	2010      	movs	r0, #16
 80090ea:	f7ff fd7f 	bl	8008bec <malloc>
 80090ee:	4602      	mov	r2, r0
 80090f0:	61f8      	str	r0, [r7, #28]
 80090f2:	b928      	cbnz	r0, 8009100 <__pow5mult+0x40>
 80090f4:	4b1d      	ldr	r3, [pc, #116]	@ (800916c <__pow5mult+0xac>)
 80090f6:	481e      	ldr	r0, [pc, #120]	@ (8009170 <__pow5mult+0xb0>)
 80090f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090fc:	f000 fc4e 	bl	800999c <__assert_func>
 8009100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009104:	6004      	str	r4, [r0, #0]
 8009106:	60c4      	str	r4, [r0, #12]
 8009108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800910c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009110:	b94c      	cbnz	r4, 8009126 <__pow5mult+0x66>
 8009112:	f240 2171 	movw	r1, #625	@ 0x271
 8009116:	4638      	mov	r0, r7
 8009118:	f7ff ff12 	bl	8008f40 <__i2b>
 800911c:	2300      	movs	r3, #0
 800911e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009122:	4604      	mov	r4, r0
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	f04f 0900 	mov.w	r9, #0
 800912a:	07eb      	lsls	r3, r5, #31
 800912c:	d50a      	bpl.n	8009144 <__pow5mult+0x84>
 800912e:	4631      	mov	r1, r6
 8009130:	4622      	mov	r2, r4
 8009132:	4638      	mov	r0, r7
 8009134:	f7ff ff1a 	bl	8008f6c <__multiply>
 8009138:	4631      	mov	r1, r6
 800913a:	4680      	mov	r8, r0
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fe4b 	bl	8008dd8 <_Bfree>
 8009142:	4646      	mov	r6, r8
 8009144:	106d      	asrs	r5, r5, #1
 8009146:	d00b      	beq.n	8009160 <__pow5mult+0xa0>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	b938      	cbnz	r0, 800915c <__pow5mult+0x9c>
 800914c:	4622      	mov	r2, r4
 800914e:	4621      	mov	r1, r4
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff ff0b 	bl	8008f6c <__multiply>
 8009156:	6020      	str	r0, [r4, #0]
 8009158:	f8c0 9000 	str.w	r9, [r0]
 800915c:	4604      	mov	r4, r0
 800915e:	e7e4      	b.n	800912a <__pow5mult+0x6a>
 8009160:	4630      	mov	r0, r6
 8009162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009166:	bf00      	nop
 8009168:	0800cbfc 	.word	0x0800cbfc
 800916c:	0800cb21 	.word	0x0800cb21
 8009170:	0800cba1 	.word	0x0800cba1

08009174 <__lshift>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	460c      	mov	r4, r1
 800917a:	6849      	ldr	r1, [r1, #4]
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009182:	68a3      	ldr	r3, [r4, #8]
 8009184:	4607      	mov	r7, r0
 8009186:	4691      	mov	r9, r2
 8009188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800918c:	f108 0601 	add.w	r6, r8, #1
 8009190:	42b3      	cmp	r3, r6
 8009192:	db0b      	blt.n	80091ac <__lshift+0x38>
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff fddf 	bl	8008d58 <_Balloc>
 800919a:	4605      	mov	r5, r0
 800919c:	b948      	cbnz	r0, 80091b2 <__lshift+0x3e>
 800919e:	4602      	mov	r2, r0
 80091a0:	4b28      	ldr	r3, [pc, #160]	@ (8009244 <__lshift+0xd0>)
 80091a2:	4829      	ldr	r0, [pc, #164]	@ (8009248 <__lshift+0xd4>)
 80091a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091a8:	f000 fbf8 	bl	800999c <__assert_func>
 80091ac:	3101      	adds	r1, #1
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	e7ee      	b.n	8009190 <__lshift+0x1c>
 80091b2:	2300      	movs	r3, #0
 80091b4:	f100 0114 	add.w	r1, r0, #20
 80091b8:	f100 0210 	add.w	r2, r0, #16
 80091bc:	4618      	mov	r0, r3
 80091be:	4553      	cmp	r3, sl
 80091c0:	db33      	blt.n	800922a <__lshift+0xb6>
 80091c2:	6920      	ldr	r0, [r4, #16]
 80091c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091c8:	f104 0314 	add.w	r3, r4, #20
 80091cc:	f019 091f 	ands.w	r9, r9, #31
 80091d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091d8:	d02b      	beq.n	8009232 <__lshift+0xbe>
 80091da:	f1c9 0e20 	rsb	lr, r9, #32
 80091de:	468a      	mov	sl, r1
 80091e0:	2200      	movs	r2, #0
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	fa00 f009 	lsl.w	r0, r0, r9
 80091e8:	4310      	orrs	r0, r2
 80091ea:	f84a 0b04 	str.w	r0, [sl], #4
 80091ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f2:	459c      	cmp	ip, r3
 80091f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091f8:	d8f3      	bhi.n	80091e2 <__lshift+0x6e>
 80091fa:	ebac 0304 	sub.w	r3, ip, r4
 80091fe:	3b15      	subs	r3, #21
 8009200:	f023 0303 	bic.w	r3, r3, #3
 8009204:	3304      	adds	r3, #4
 8009206:	f104 0015 	add.w	r0, r4, #21
 800920a:	4584      	cmp	ip, r0
 800920c:	bf38      	it	cc
 800920e:	2304      	movcc	r3, #4
 8009210:	50ca      	str	r2, [r1, r3]
 8009212:	b10a      	cbz	r2, 8009218 <__lshift+0xa4>
 8009214:	f108 0602 	add.w	r6, r8, #2
 8009218:	3e01      	subs	r6, #1
 800921a:	4638      	mov	r0, r7
 800921c:	612e      	str	r6, [r5, #16]
 800921e:	4621      	mov	r1, r4
 8009220:	f7ff fdda 	bl	8008dd8 <_Bfree>
 8009224:	4628      	mov	r0, r5
 8009226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922a:	f842 0f04 	str.w	r0, [r2, #4]!
 800922e:	3301      	adds	r3, #1
 8009230:	e7c5      	b.n	80091be <__lshift+0x4a>
 8009232:	3904      	subs	r1, #4
 8009234:	f853 2b04 	ldr.w	r2, [r3], #4
 8009238:	f841 2f04 	str.w	r2, [r1, #4]!
 800923c:	459c      	cmp	ip, r3
 800923e:	d8f9      	bhi.n	8009234 <__lshift+0xc0>
 8009240:	e7ea      	b.n	8009218 <__lshift+0xa4>
 8009242:	bf00      	nop
 8009244:	0800cb90 	.word	0x0800cb90
 8009248:	0800cba1 	.word	0x0800cba1

0800924c <__mcmp>:
 800924c:	690a      	ldr	r2, [r1, #16]
 800924e:	4603      	mov	r3, r0
 8009250:	6900      	ldr	r0, [r0, #16]
 8009252:	1a80      	subs	r0, r0, r2
 8009254:	b530      	push	{r4, r5, lr}
 8009256:	d10e      	bne.n	8009276 <__mcmp+0x2a>
 8009258:	3314      	adds	r3, #20
 800925a:	3114      	adds	r1, #20
 800925c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800926c:	4295      	cmp	r5, r2
 800926e:	d003      	beq.n	8009278 <__mcmp+0x2c>
 8009270:	d205      	bcs.n	800927e <__mcmp+0x32>
 8009272:	f04f 30ff 	mov.w	r0, #4294967295
 8009276:	bd30      	pop	{r4, r5, pc}
 8009278:	42a3      	cmp	r3, r4
 800927a:	d3f3      	bcc.n	8009264 <__mcmp+0x18>
 800927c:	e7fb      	b.n	8009276 <__mcmp+0x2a>
 800927e:	2001      	movs	r0, #1
 8009280:	e7f9      	b.n	8009276 <__mcmp+0x2a>
	...

08009284 <__mdiff>:
 8009284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	4689      	mov	r9, r1
 800928a:	4606      	mov	r6, r0
 800928c:	4611      	mov	r1, r2
 800928e:	4648      	mov	r0, r9
 8009290:	4614      	mov	r4, r2
 8009292:	f7ff ffdb 	bl	800924c <__mcmp>
 8009296:	1e05      	subs	r5, r0, #0
 8009298:	d112      	bne.n	80092c0 <__mdiff+0x3c>
 800929a:	4629      	mov	r1, r5
 800929c:	4630      	mov	r0, r6
 800929e:	f7ff fd5b 	bl	8008d58 <_Balloc>
 80092a2:	4602      	mov	r2, r0
 80092a4:	b928      	cbnz	r0, 80092b2 <__mdiff+0x2e>
 80092a6:	4b3f      	ldr	r3, [pc, #252]	@ (80093a4 <__mdiff+0x120>)
 80092a8:	f240 2137 	movw	r1, #567	@ 0x237
 80092ac:	483e      	ldr	r0, [pc, #248]	@ (80093a8 <__mdiff+0x124>)
 80092ae:	f000 fb75 	bl	800999c <__assert_func>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092b8:	4610      	mov	r0, r2
 80092ba:	b003      	add	sp, #12
 80092bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	bfbc      	itt	lt
 80092c2:	464b      	movlt	r3, r9
 80092c4:	46a1      	movlt	r9, r4
 80092c6:	4630      	mov	r0, r6
 80092c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092cc:	bfba      	itte	lt
 80092ce:	461c      	movlt	r4, r3
 80092d0:	2501      	movlt	r5, #1
 80092d2:	2500      	movge	r5, #0
 80092d4:	f7ff fd40 	bl	8008d58 <_Balloc>
 80092d8:	4602      	mov	r2, r0
 80092da:	b918      	cbnz	r0, 80092e4 <__mdiff+0x60>
 80092dc:	4b31      	ldr	r3, [pc, #196]	@ (80093a4 <__mdiff+0x120>)
 80092de:	f240 2145 	movw	r1, #581	@ 0x245
 80092e2:	e7e3      	b.n	80092ac <__mdiff+0x28>
 80092e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092e8:	6926      	ldr	r6, [r4, #16]
 80092ea:	60c5      	str	r5, [r0, #12]
 80092ec:	f109 0310 	add.w	r3, r9, #16
 80092f0:	f109 0514 	add.w	r5, r9, #20
 80092f4:	f104 0e14 	add.w	lr, r4, #20
 80092f8:	f100 0b14 	add.w	fp, r0, #20
 80092fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009300:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	46d9      	mov	r9, fp
 8009308:	f04f 0c00 	mov.w	ip, #0
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009312:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	fa1f f38a 	uxth.w	r3, sl
 800931c:	4619      	mov	r1, r3
 800931e:	b283      	uxth	r3, r0
 8009320:	1acb      	subs	r3, r1, r3
 8009322:	0c00      	lsrs	r0, r0, #16
 8009324:	4463      	add	r3, ip
 8009326:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800932a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800932e:	b29b      	uxth	r3, r3
 8009330:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009334:	4576      	cmp	r6, lr
 8009336:	f849 3b04 	str.w	r3, [r9], #4
 800933a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800933e:	d8e5      	bhi.n	800930c <__mdiff+0x88>
 8009340:	1b33      	subs	r3, r6, r4
 8009342:	3b15      	subs	r3, #21
 8009344:	f023 0303 	bic.w	r3, r3, #3
 8009348:	3415      	adds	r4, #21
 800934a:	3304      	adds	r3, #4
 800934c:	42a6      	cmp	r6, r4
 800934e:	bf38      	it	cc
 8009350:	2304      	movcc	r3, #4
 8009352:	441d      	add	r5, r3
 8009354:	445b      	add	r3, fp
 8009356:	461e      	mov	r6, r3
 8009358:	462c      	mov	r4, r5
 800935a:	4544      	cmp	r4, r8
 800935c:	d30e      	bcc.n	800937c <__mdiff+0xf8>
 800935e:	f108 0103 	add.w	r1, r8, #3
 8009362:	1b49      	subs	r1, r1, r5
 8009364:	f021 0103 	bic.w	r1, r1, #3
 8009368:	3d03      	subs	r5, #3
 800936a:	45a8      	cmp	r8, r5
 800936c:	bf38      	it	cc
 800936e:	2100      	movcc	r1, #0
 8009370:	440b      	add	r3, r1
 8009372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009376:	b191      	cbz	r1, 800939e <__mdiff+0x11a>
 8009378:	6117      	str	r7, [r2, #16]
 800937a:	e79d      	b.n	80092b8 <__mdiff+0x34>
 800937c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009380:	46e6      	mov	lr, ip
 8009382:	0c08      	lsrs	r0, r1, #16
 8009384:	fa1c fc81 	uxtah	ip, ip, r1
 8009388:	4471      	add	r1, lr
 800938a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800938e:	b289      	uxth	r1, r1
 8009390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009394:	f846 1b04 	str.w	r1, [r6], #4
 8009398:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800939c:	e7dd      	b.n	800935a <__mdiff+0xd6>
 800939e:	3f01      	subs	r7, #1
 80093a0:	e7e7      	b.n	8009372 <__mdiff+0xee>
 80093a2:	bf00      	nop
 80093a4:	0800cb90 	.word	0x0800cb90
 80093a8:	0800cba1 	.word	0x0800cba1

080093ac <__d2b>:
 80093ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	460f      	mov	r7, r1
 80093b2:	2101      	movs	r1, #1
 80093b4:	ec59 8b10 	vmov	r8, r9, d0
 80093b8:	4616      	mov	r6, r2
 80093ba:	f7ff fccd 	bl	8008d58 <_Balloc>
 80093be:	4604      	mov	r4, r0
 80093c0:	b930      	cbnz	r0, 80093d0 <__d2b+0x24>
 80093c2:	4602      	mov	r2, r0
 80093c4:	4b23      	ldr	r3, [pc, #140]	@ (8009454 <__d2b+0xa8>)
 80093c6:	4824      	ldr	r0, [pc, #144]	@ (8009458 <__d2b+0xac>)
 80093c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80093cc:	f000 fae6 	bl	800999c <__assert_func>
 80093d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093d8:	b10d      	cbz	r5, 80093de <__d2b+0x32>
 80093da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	f1b8 0300 	subs.w	r3, r8, #0
 80093e4:	d023      	beq.n	800942e <__d2b+0x82>
 80093e6:	4668      	mov	r0, sp
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	f7ff fd7c 	bl	8008ee6 <__lo0bits>
 80093ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093f2:	b1d0      	cbz	r0, 800942a <__d2b+0x7e>
 80093f4:	f1c0 0320 	rsb	r3, r0, #32
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	430b      	orrs	r3, r1
 80093fe:	40c2      	lsrs	r2, r0
 8009400:	6163      	str	r3, [r4, #20]
 8009402:	9201      	str	r2, [sp, #4]
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	61a3      	str	r3, [r4, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bf0c      	ite	eq
 800940c:	2201      	moveq	r2, #1
 800940e:	2202      	movne	r2, #2
 8009410:	6122      	str	r2, [r4, #16]
 8009412:	b1a5      	cbz	r5, 800943e <__d2b+0x92>
 8009414:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009418:	4405      	add	r5, r0
 800941a:	603d      	str	r5, [r7, #0]
 800941c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009420:	6030      	str	r0, [r6, #0]
 8009422:	4620      	mov	r0, r4
 8009424:	b003      	add	sp, #12
 8009426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800942a:	6161      	str	r1, [r4, #20]
 800942c:	e7ea      	b.n	8009404 <__d2b+0x58>
 800942e:	a801      	add	r0, sp, #4
 8009430:	f7ff fd59 	bl	8008ee6 <__lo0bits>
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	6163      	str	r3, [r4, #20]
 8009438:	3020      	adds	r0, #32
 800943a:	2201      	movs	r2, #1
 800943c:	e7e8      	b.n	8009410 <__d2b+0x64>
 800943e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009442:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009446:	6038      	str	r0, [r7, #0]
 8009448:	6918      	ldr	r0, [r3, #16]
 800944a:	f7ff fd2d 	bl	8008ea8 <__hi0bits>
 800944e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009452:	e7e5      	b.n	8009420 <__d2b+0x74>
 8009454:	0800cb90 	.word	0x0800cb90
 8009458:	0800cba1 	.word	0x0800cba1

0800945c <__sfputc_r>:
 800945c:	6893      	ldr	r3, [r2, #8]
 800945e:	3b01      	subs	r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	b410      	push	{r4}
 8009464:	6093      	str	r3, [r2, #8]
 8009466:	da08      	bge.n	800947a <__sfputc_r+0x1e>
 8009468:	6994      	ldr	r4, [r2, #24]
 800946a:	42a3      	cmp	r3, r4
 800946c:	db01      	blt.n	8009472 <__sfputc_r+0x16>
 800946e:	290a      	cmp	r1, #10
 8009470:	d103      	bne.n	800947a <__sfputc_r+0x1e>
 8009472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009476:	f000 b9df 	b.w	8009838 <__swbuf_r>
 800947a:	6813      	ldr	r3, [r2, #0]
 800947c:	1c58      	adds	r0, r3, #1
 800947e:	6010      	str	r0, [r2, #0]
 8009480:	7019      	strb	r1, [r3, #0]
 8009482:	4608      	mov	r0, r1
 8009484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009488:	4770      	bx	lr

0800948a <__sfputs_r>:
 800948a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948c:	4606      	mov	r6, r0
 800948e:	460f      	mov	r7, r1
 8009490:	4614      	mov	r4, r2
 8009492:	18d5      	adds	r5, r2, r3
 8009494:	42ac      	cmp	r4, r5
 8009496:	d101      	bne.n	800949c <__sfputs_r+0x12>
 8009498:	2000      	movs	r0, #0
 800949a:	e007      	b.n	80094ac <__sfputs_r+0x22>
 800949c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a0:	463a      	mov	r2, r7
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ffda 	bl	800945c <__sfputc_r>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d1f3      	bne.n	8009494 <__sfputs_r+0xa>
 80094ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094b0 <_vfiprintf_r>:
 80094b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	460d      	mov	r5, r1
 80094b6:	b09d      	sub	sp, #116	@ 0x74
 80094b8:	4614      	mov	r4, r2
 80094ba:	4698      	mov	r8, r3
 80094bc:	4606      	mov	r6, r0
 80094be:	b118      	cbz	r0, 80094c8 <_vfiprintf_r+0x18>
 80094c0:	6a03      	ldr	r3, [r0, #32]
 80094c2:	b90b      	cbnz	r3, 80094c8 <_vfiprintf_r+0x18>
 80094c4:	f7fe fbf0 	bl	8007ca8 <__sinit>
 80094c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094ca:	07d9      	lsls	r1, r3, #31
 80094cc:	d405      	bmi.n	80094da <_vfiprintf_r+0x2a>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	059a      	lsls	r2, r3, #22
 80094d2:	d402      	bmi.n	80094da <_vfiprintf_r+0x2a>
 80094d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094d6:	f7fe fcf0 	bl	8007eba <__retarget_lock_acquire_recursive>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	071b      	lsls	r3, r3, #28
 80094de:	d501      	bpl.n	80094e4 <_vfiprintf_r+0x34>
 80094e0:	692b      	ldr	r3, [r5, #16]
 80094e2:	b99b      	cbnz	r3, 800950c <_vfiprintf_r+0x5c>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 f9e4 	bl	80098b4 <__swsetup_r>
 80094ec:	b170      	cbz	r0, 800950c <_vfiprintf_r+0x5c>
 80094ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094f0:	07dc      	lsls	r4, r3, #31
 80094f2:	d504      	bpl.n	80094fe <_vfiprintf_r+0x4e>
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	b01d      	add	sp, #116	@ 0x74
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	89ab      	ldrh	r3, [r5, #12]
 8009500:	0598      	lsls	r0, r3, #22
 8009502:	d4f7      	bmi.n	80094f4 <_vfiprintf_r+0x44>
 8009504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009506:	f7fe fcd9 	bl	8007ebc <__retarget_lock_release_recursive>
 800950a:	e7f3      	b.n	80094f4 <_vfiprintf_r+0x44>
 800950c:	2300      	movs	r3, #0
 800950e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009510:	2320      	movs	r3, #32
 8009512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009516:	f8cd 800c 	str.w	r8, [sp, #12]
 800951a:	2330      	movs	r3, #48	@ 0x30
 800951c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096cc <_vfiprintf_r+0x21c>
 8009520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009524:	f04f 0901 	mov.w	r9, #1
 8009528:	4623      	mov	r3, r4
 800952a:	469a      	mov	sl, r3
 800952c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009530:	b10a      	cbz	r2, 8009536 <_vfiprintf_r+0x86>
 8009532:	2a25      	cmp	r2, #37	@ 0x25
 8009534:	d1f9      	bne.n	800952a <_vfiprintf_r+0x7a>
 8009536:	ebba 0b04 	subs.w	fp, sl, r4
 800953a:	d00b      	beq.n	8009554 <_vfiprintf_r+0xa4>
 800953c:	465b      	mov	r3, fp
 800953e:	4622      	mov	r2, r4
 8009540:	4629      	mov	r1, r5
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ffa1 	bl	800948a <__sfputs_r>
 8009548:	3001      	adds	r0, #1
 800954a:	f000 80a7 	beq.w	800969c <_vfiprintf_r+0x1ec>
 800954e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009550:	445a      	add	r2, fp
 8009552:	9209      	str	r2, [sp, #36]	@ 0x24
 8009554:	f89a 3000 	ldrb.w	r3, [sl]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 809f 	beq.w	800969c <_vfiprintf_r+0x1ec>
 800955e:	2300      	movs	r3, #0
 8009560:	f04f 32ff 	mov.w	r2, #4294967295
 8009564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009568:	f10a 0a01 	add.w	sl, sl, #1
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	9307      	str	r3, [sp, #28]
 8009570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009574:	931a      	str	r3, [sp, #104]	@ 0x68
 8009576:	4654      	mov	r4, sl
 8009578:	2205      	movs	r2, #5
 800957a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957e:	4853      	ldr	r0, [pc, #332]	@ (80096cc <_vfiprintf_r+0x21c>)
 8009580:	f7f6 fe2e 	bl	80001e0 <memchr>
 8009584:	9a04      	ldr	r2, [sp, #16]
 8009586:	b9d8      	cbnz	r0, 80095c0 <_vfiprintf_r+0x110>
 8009588:	06d1      	lsls	r1, r2, #27
 800958a:	bf44      	itt	mi
 800958c:	2320      	movmi	r3, #32
 800958e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009592:	0713      	lsls	r3, r2, #28
 8009594:	bf44      	itt	mi
 8009596:	232b      	movmi	r3, #43	@ 0x2b
 8009598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800959c:	f89a 3000 	ldrb.w	r3, [sl]
 80095a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80095a2:	d015      	beq.n	80095d0 <_vfiprintf_r+0x120>
 80095a4:	9a07      	ldr	r2, [sp, #28]
 80095a6:	4654      	mov	r4, sl
 80095a8:	2000      	movs	r0, #0
 80095aa:	f04f 0c0a 	mov.w	ip, #10
 80095ae:	4621      	mov	r1, r4
 80095b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b4:	3b30      	subs	r3, #48	@ 0x30
 80095b6:	2b09      	cmp	r3, #9
 80095b8:	d94b      	bls.n	8009652 <_vfiprintf_r+0x1a2>
 80095ba:	b1b0      	cbz	r0, 80095ea <_vfiprintf_r+0x13a>
 80095bc:	9207      	str	r2, [sp, #28]
 80095be:	e014      	b.n	80095ea <_vfiprintf_r+0x13a>
 80095c0:	eba0 0308 	sub.w	r3, r0, r8
 80095c4:	fa09 f303 	lsl.w	r3, r9, r3
 80095c8:	4313      	orrs	r3, r2
 80095ca:	9304      	str	r3, [sp, #16]
 80095cc:	46a2      	mov	sl, r4
 80095ce:	e7d2      	b.n	8009576 <_vfiprintf_r+0xc6>
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	1d19      	adds	r1, r3, #4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	9103      	str	r1, [sp, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bfbb      	ittet	lt
 80095dc:	425b      	neglt	r3, r3
 80095de:	f042 0202 	orrlt.w	r2, r2, #2
 80095e2:	9307      	strge	r3, [sp, #28]
 80095e4:	9307      	strlt	r3, [sp, #28]
 80095e6:	bfb8      	it	lt
 80095e8:	9204      	strlt	r2, [sp, #16]
 80095ea:	7823      	ldrb	r3, [r4, #0]
 80095ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80095ee:	d10a      	bne.n	8009606 <_vfiprintf_r+0x156>
 80095f0:	7863      	ldrb	r3, [r4, #1]
 80095f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80095f4:	d132      	bne.n	800965c <_vfiprintf_r+0x1ac>
 80095f6:	9b03      	ldr	r3, [sp, #12]
 80095f8:	1d1a      	adds	r2, r3, #4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	9203      	str	r2, [sp, #12]
 80095fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009602:	3402      	adds	r4, #2
 8009604:	9305      	str	r3, [sp, #20]
 8009606:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096dc <_vfiprintf_r+0x22c>
 800960a:	7821      	ldrb	r1, [r4, #0]
 800960c:	2203      	movs	r2, #3
 800960e:	4650      	mov	r0, sl
 8009610:	f7f6 fde6 	bl	80001e0 <memchr>
 8009614:	b138      	cbz	r0, 8009626 <_vfiprintf_r+0x176>
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	eba0 000a 	sub.w	r0, r0, sl
 800961c:	2240      	movs	r2, #64	@ 0x40
 800961e:	4082      	lsls	r2, r0
 8009620:	4313      	orrs	r3, r2
 8009622:	3401      	adds	r4, #1
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962a:	4829      	ldr	r0, [pc, #164]	@ (80096d0 <_vfiprintf_r+0x220>)
 800962c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009630:	2206      	movs	r2, #6
 8009632:	f7f6 fdd5 	bl	80001e0 <memchr>
 8009636:	2800      	cmp	r0, #0
 8009638:	d03f      	beq.n	80096ba <_vfiprintf_r+0x20a>
 800963a:	4b26      	ldr	r3, [pc, #152]	@ (80096d4 <_vfiprintf_r+0x224>)
 800963c:	bb1b      	cbnz	r3, 8009686 <_vfiprintf_r+0x1d6>
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	3307      	adds	r3, #7
 8009642:	f023 0307 	bic.w	r3, r3, #7
 8009646:	3308      	adds	r3, #8
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964c:	443b      	add	r3, r7
 800964e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009650:	e76a      	b.n	8009528 <_vfiprintf_r+0x78>
 8009652:	fb0c 3202 	mla	r2, ip, r2, r3
 8009656:	460c      	mov	r4, r1
 8009658:	2001      	movs	r0, #1
 800965a:	e7a8      	b.n	80095ae <_vfiprintf_r+0xfe>
 800965c:	2300      	movs	r3, #0
 800965e:	3401      	adds	r4, #1
 8009660:	9305      	str	r3, [sp, #20]
 8009662:	4619      	mov	r1, r3
 8009664:	f04f 0c0a 	mov.w	ip, #10
 8009668:	4620      	mov	r0, r4
 800966a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800966e:	3a30      	subs	r2, #48	@ 0x30
 8009670:	2a09      	cmp	r2, #9
 8009672:	d903      	bls.n	800967c <_vfiprintf_r+0x1cc>
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0c6      	beq.n	8009606 <_vfiprintf_r+0x156>
 8009678:	9105      	str	r1, [sp, #20]
 800967a:	e7c4      	b.n	8009606 <_vfiprintf_r+0x156>
 800967c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009680:	4604      	mov	r4, r0
 8009682:	2301      	movs	r3, #1
 8009684:	e7f0      	b.n	8009668 <_vfiprintf_r+0x1b8>
 8009686:	ab03      	add	r3, sp, #12
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	462a      	mov	r2, r5
 800968c:	4b12      	ldr	r3, [pc, #72]	@ (80096d8 <_vfiprintf_r+0x228>)
 800968e:	a904      	add	r1, sp, #16
 8009690:	4630      	mov	r0, r6
 8009692:	f7fd fec5 	bl	8007420 <_printf_float>
 8009696:	4607      	mov	r7, r0
 8009698:	1c78      	adds	r0, r7, #1
 800969a:	d1d6      	bne.n	800964a <_vfiprintf_r+0x19a>
 800969c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800969e:	07d9      	lsls	r1, r3, #31
 80096a0:	d405      	bmi.n	80096ae <_vfiprintf_r+0x1fe>
 80096a2:	89ab      	ldrh	r3, [r5, #12]
 80096a4:	059a      	lsls	r2, r3, #22
 80096a6:	d402      	bmi.n	80096ae <_vfiprintf_r+0x1fe>
 80096a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096aa:	f7fe fc07 	bl	8007ebc <__retarget_lock_release_recursive>
 80096ae:	89ab      	ldrh	r3, [r5, #12]
 80096b0:	065b      	lsls	r3, r3, #25
 80096b2:	f53f af1f 	bmi.w	80094f4 <_vfiprintf_r+0x44>
 80096b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096b8:	e71e      	b.n	80094f8 <_vfiprintf_r+0x48>
 80096ba:	ab03      	add	r3, sp, #12
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	462a      	mov	r2, r5
 80096c0:	4b05      	ldr	r3, [pc, #20]	@ (80096d8 <_vfiprintf_r+0x228>)
 80096c2:	a904      	add	r1, sp, #16
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7fe f943 	bl	8007950 <_printf_i>
 80096ca:	e7e4      	b.n	8009696 <_vfiprintf_r+0x1e6>
 80096cc:	0800ccf8 	.word	0x0800ccf8
 80096d0:	0800cd02 	.word	0x0800cd02
 80096d4:	08007421 	.word	0x08007421
 80096d8:	0800948b 	.word	0x0800948b
 80096dc:	0800ccfe 	.word	0x0800ccfe

080096e0 <__sflush_r>:
 80096e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	0716      	lsls	r6, r2, #28
 80096ea:	4605      	mov	r5, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	d454      	bmi.n	800979a <__sflush_r+0xba>
 80096f0:	684b      	ldr	r3, [r1, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc02      	bgt.n	80096fc <__sflush_r+0x1c>
 80096f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dd48      	ble.n	800978e <__sflush_r+0xae>
 80096fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d045      	beq.n	800978e <__sflush_r+0xae>
 8009702:	2300      	movs	r3, #0
 8009704:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009708:	682f      	ldr	r7, [r5, #0]
 800970a:	6a21      	ldr	r1, [r4, #32]
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	d030      	beq.n	8009772 <__sflush_r+0x92>
 8009710:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	0759      	lsls	r1, r3, #29
 8009716:	d505      	bpl.n	8009724 <__sflush_r+0x44>
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800971e:	b10b      	cbz	r3, 8009724 <__sflush_r+0x44>
 8009720:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009722:	1ad2      	subs	r2, r2, r3
 8009724:	2300      	movs	r3, #0
 8009726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	4628      	mov	r0, r5
 800972c:	47b0      	blx	r6
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	d106      	bne.n	8009742 <__sflush_r+0x62>
 8009734:	6829      	ldr	r1, [r5, #0]
 8009736:	291d      	cmp	r1, #29
 8009738:	d82b      	bhi.n	8009792 <__sflush_r+0xb2>
 800973a:	4a2a      	ldr	r2, [pc, #168]	@ (80097e4 <__sflush_r+0x104>)
 800973c:	410a      	asrs	r2, r1
 800973e:	07d6      	lsls	r6, r2, #31
 8009740:	d427      	bmi.n	8009792 <__sflush_r+0xb2>
 8009742:	2200      	movs	r2, #0
 8009744:	6062      	str	r2, [r4, #4]
 8009746:	04d9      	lsls	r1, r3, #19
 8009748:	6922      	ldr	r2, [r4, #16]
 800974a:	6022      	str	r2, [r4, #0]
 800974c:	d504      	bpl.n	8009758 <__sflush_r+0x78>
 800974e:	1c42      	adds	r2, r0, #1
 8009750:	d101      	bne.n	8009756 <__sflush_r+0x76>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b903      	cbnz	r3, 8009758 <__sflush_r+0x78>
 8009756:	6560      	str	r0, [r4, #84]	@ 0x54
 8009758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800975a:	602f      	str	r7, [r5, #0]
 800975c:	b1b9      	cbz	r1, 800978e <__sflush_r+0xae>
 800975e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009762:	4299      	cmp	r1, r3
 8009764:	d002      	beq.n	800976c <__sflush_r+0x8c>
 8009766:	4628      	mov	r0, r5
 8009768:	f7ff f9f6 	bl	8008b58 <_free_r>
 800976c:	2300      	movs	r3, #0
 800976e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009770:	e00d      	b.n	800978e <__sflush_r+0xae>
 8009772:	2301      	movs	r3, #1
 8009774:	4628      	mov	r0, r5
 8009776:	47b0      	blx	r6
 8009778:	4602      	mov	r2, r0
 800977a:	1c50      	adds	r0, r2, #1
 800977c:	d1c9      	bne.n	8009712 <__sflush_r+0x32>
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0c6      	beq.n	8009712 <__sflush_r+0x32>
 8009784:	2b1d      	cmp	r3, #29
 8009786:	d001      	beq.n	800978c <__sflush_r+0xac>
 8009788:	2b16      	cmp	r3, #22
 800978a:	d11e      	bne.n	80097ca <__sflush_r+0xea>
 800978c:	602f      	str	r7, [r5, #0]
 800978e:	2000      	movs	r0, #0
 8009790:	e022      	b.n	80097d8 <__sflush_r+0xf8>
 8009792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009796:	b21b      	sxth	r3, r3
 8009798:	e01b      	b.n	80097d2 <__sflush_r+0xf2>
 800979a:	690f      	ldr	r7, [r1, #16]
 800979c:	2f00      	cmp	r7, #0
 800979e:	d0f6      	beq.n	800978e <__sflush_r+0xae>
 80097a0:	0793      	lsls	r3, r2, #30
 80097a2:	680e      	ldr	r6, [r1, #0]
 80097a4:	bf08      	it	eq
 80097a6:	694b      	ldreq	r3, [r1, #20]
 80097a8:	600f      	str	r7, [r1, #0]
 80097aa:	bf18      	it	ne
 80097ac:	2300      	movne	r3, #0
 80097ae:	eba6 0807 	sub.w	r8, r6, r7
 80097b2:	608b      	str	r3, [r1, #8]
 80097b4:	f1b8 0f00 	cmp.w	r8, #0
 80097b8:	dde9      	ble.n	800978e <__sflush_r+0xae>
 80097ba:	6a21      	ldr	r1, [r4, #32]
 80097bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097be:	4643      	mov	r3, r8
 80097c0:	463a      	mov	r2, r7
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b0      	blx	r6
 80097c6:	2800      	cmp	r0, #0
 80097c8:	dc08      	bgt.n	80097dc <__sflush_r+0xfc>
 80097ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097dc:	4407      	add	r7, r0
 80097de:	eba8 0800 	sub.w	r8, r8, r0
 80097e2:	e7e7      	b.n	80097b4 <__sflush_r+0xd4>
 80097e4:	dfbffffe 	.word	0xdfbffffe

080097e8 <_fflush_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b913      	cbnz	r3, 80097f8 <_fflush_r+0x10>
 80097f2:	2500      	movs	r5, #0
 80097f4:	4628      	mov	r0, r5
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	b118      	cbz	r0, 8009802 <_fflush_r+0x1a>
 80097fa:	6a03      	ldr	r3, [r0, #32]
 80097fc:	b90b      	cbnz	r3, 8009802 <_fflush_r+0x1a>
 80097fe:	f7fe fa53 	bl	8007ca8 <__sinit>
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0f3      	beq.n	80097f2 <_fflush_r+0xa>
 800980a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800980c:	07d0      	lsls	r0, r2, #31
 800980e:	d404      	bmi.n	800981a <_fflush_r+0x32>
 8009810:	0599      	lsls	r1, r3, #22
 8009812:	d402      	bmi.n	800981a <_fflush_r+0x32>
 8009814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009816:	f7fe fb50 	bl	8007eba <__retarget_lock_acquire_recursive>
 800981a:	4628      	mov	r0, r5
 800981c:	4621      	mov	r1, r4
 800981e:	f7ff ff5f 	bl	80096e0 <__sflush_r>
 8009822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009824:	07da      	lsls	r2, r3, #31
 8009826:	4605      	mov	r5, r0
 8009828:	d4e4      	bmi.n	80097f4 <_fflush_r+0xc>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	059b      	lsls	r3, r3, #22
 800982e:	d4e1      	bmi.n	80097f4 <_fflush_r+0xc>
 8009830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009832:	f7fe fb43 	bl	8007ebc <__retarget_lock_release_recursive>
 8009836:	e7dd      	b.n	80097f4 <_fflush_r+0xc>

08009838 <__swbuf_r>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	460e      	mov	r6, r1
 800983c:	4614      	mov	r4, r2
 800983e:	4605      	mov	r5, r0
 8009840:	b118      	cbz	r0, 800984a <__swbuf_r+0x12>
 8009842:	6a03      	ldr	r3, [r0, #32]
 8009844:	b90b      	cbnz	r3, 800984a <__swbuf_r+0x12>
 8009846:	f7fe fa2f 	bl	8007ca8 <__sinit>
 800984a:	69a3      	ldr	r3, [r4, #24]
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	071a      	lsls	r2, r3, #28
 8009852:	d501      	bpl.n	8009858 <__swbuf_r+0x20>
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	b943      	cbnz	r3, 800986a <__swbuf_r+0x32>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f82a 	bl	80098b4 <__swsetup_r>
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x32>
 8009862:	f04f 37ff 	mov.w	r7, #4294967295
 8009866:	4638      	mov	r0, r7
 8009868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	6922      	ldr	r2, [r4, #16]
 800986e:	1a98      	subs	r0, r3, r2
 8009870:	6963      	ldr	r3, [r4, #20]
 8009872:	b2f6      	uxtb	r6, r6
 8009874:	4283      	cmp	r3, r0
 8009876:	4637      	mov	r7, r6
 8009878:	dc05      	bgt.n	8009886 <__swbuf_r+0x4e>
 800987a:	4621      	mov	r1, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f7ff ffb3 	bl	80097e8 <_fflush_r>
 8009882:	2800      	cmp	r0, #0
 8009884:	d1ed      	bne.n	8009862 <__swbuf_r+0x2a>
 8009886:	68a3      	ldr	r3, [r4, #8]
 8009888:	3b01      	subs	r3, #1
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	6022      	str	r2, [r4, #0]
 8009892:	701e      	strb	r6, [r3, #0]
 8009894:	6962      	ldr	r2, [r4, #20]
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	429a      	cmp	r2, r3
 800989a:	d004      	beq.n	80098a6 <__swbuf_r+0x6e>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	07db      	lsls	r3, r3, #31
 80098a0:	d5e1      	bpl.n	8009866 <__swbuf_r+0x2e>
 80098a2:	2e0a      	cmp	r6, #10
 80098a4:	d1df      	bne.n	8009866 <__swbuf_r+0x2e>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f7ff ff9d 	bl	80097e8 <_fflush_r>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0d9      	beq.n	8009866 <__swbuf_r+0x2e>
 80098b2:	e7d6      	b.n	8009862 <__swbuf_r+0x2a>

080098b4 <__swsetup_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4b29      	ldr	r3, [pc, #164]	@ (800995c <__swsetup_r+0xa8>)
 80098b8:	4605      	mov	r5, r0
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	460c      	mov	r4, r1
 80098be:	b118      	cbz	r0, 80098c8 <__swsetup_r+0x14>
 80098c0:	6a03      	ldr	r3, [r0, #32]
 80098c2:	b90b      	cbnz	r3, 80098c8 <__swsetup_r+0x14>
 80098c4:	f7fe f9f0 	bl	8007ca8 <__sinit>
 80098c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098cc:	0719      	lsls	r1, r3, #28
 80098ce:	d422      	bmi.n	8009916 <__swsetup_r+0x62>
 80098d0:	06da      	lsls	r2, r3, #27
 80098d2:	d407      	bmi.n	80098e4 <__swsetup_r+0x30>
 80098d4:	2209      	movs	r2, #9
 80098d6:	602a      	str	r2, [r5, #0]
 80098d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	e033      	b.n	800994c <__swsetup_r+0x98>
 80098e4:	0758      	lsls	r0, r3, #29
 80098e6:	d512      	bpl.n	800990e <__swsetup_r+0x5a>
 80098e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ea:	b141      	cbz	r1, 80098fe <__swsetup_r+0x4a>
 80098ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d002      	beq.n	80098fa <__swsetup_r+0x46>
 80098f4:	4628      	mov	r0, r5
 80098f6:	f7ff f92f 	bl	8008b58 <_free_r>
 80098fa:	2300      	movs	r3, #0
 80098fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009904:	81a3      	strh	r3, [r4, #12]
 8009906:	2300      	movs	r3, #0
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f043 0308 	orr.w	r3, r3, #8
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	b94b      	cbnz	r3, 800992e <__swsetup_r+0x7a>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009924:	d003      	beq.n	800992e <__swsetup_r+0x7a>
 8009926:	4621      	mov	r1, r4
 8009928:	4628      	mov	r0, r5
 800992a:	f000 f8c1 	bl	8009ab0 <__smakebuf_r>
 800992e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009932:	f013 0201 	ands.w	r2, r3, #1
 8009936:	d00a      	beq.n	800994e <__swsetup_r+0x9a>
 8009938:	2200      	movs	r2, #0
 800993a:	60a2      	str	r2, [r4, #8]
 800993c:	6962      	ldr	r2, [r4, #20]
 800993e:	4252      	negs	r2, r2
 8009940:	61a2      	str	r2, [r4, #24]
 8009942:	6922      	ldr	r2, [r4, #16]
 8009944:	b942      	cbnz	r2, 8009958 <__swsetup_r+0xa4>
 8009946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800994a:	d1c5      	bne.n	80098d8 <__swsetup_r+0x24>
 800994c:	bd38      	pop	{r3, r4, r5, pc}
 800994e:	0799      	lsls	r1, r3, #30
 8009950:	bf58      	it	pl
 8009952:	6962      	ldrpl	r2, [r4, #20]
 8009954:	60a2      	str	r2, [r4, #8]
 8009956:	e7f4      	b.n	8009942 <__swsetup_r+0x8e>
 8009958:	2000      	movs	r0, #0
 800995a:	e7f7      	b.n	800994c <__swsetup_r+0x98>
 800995c:	20002020 	.word	0x20002020

08009960 <_sbrk_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	@ (800997c <_sbrk_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 f8e0 	bl	8001b30 <_sbrk>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_sbrk_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_sbrk_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20004530 	.word	0x20004530

08009980 <memcpy>:
 8009980:	440a      	add	r2, r1
 8009982:	4291      	cmp	r1, r2
 8009984:	f100 33ff 	add.w	r3, r0, #4294967295
 8009988:	d100      	bne.n	800998c <memcpy+0xc>
 800998a:	4770      	bx	lr
 800998c:	b510      	push	{r4, lr}
 800998e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009996:	4291      	cmp	r1, r2
 8009998:	d1f9      	bne.n	800998e <memcpy+0xe>
 800999a:	bd10      	pop	{r4, pc}

0800999c <__assert_func>:
 800999c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800999e:	4614      	mov	r4, r2
 80099a0:	461a      	mov	r2, r3
 80099a2:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <__assert_func+0x2c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4605      	mov	r5, r0
 80099a8:	68d8      	ldr	r0, [r3, #12]
 80099aa:	b954      	cbnz	r4, 80099c2 <__assert_func+0x26>
 80099ac:	4b07      	ldr	r3, [pc, #28]	@ (80099cc <__assert_func+0x30>)
 80099ae:	461c      	mov	r4, r3
 80099b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099b4:	9100      	str	r1, [sp, #0]
 80099b6:	462b      	mov	r3, r5
 80099b8:	4905      	ldr	r1, [pc, #20]	@ (80099d0 <__assert_func+0x34>)
 80099ba:	f000 f841 	bl	8009a40 <fiprintf>
 80099be:	f000 f8d5 	bl	8009b6c <abort>
 80099c2:	4b04      	ldr	r3, [pc, #16]	@ (80099d4 <__assert_func+0x38>)
 80099c4:	e7f4      	b.n	80099b0 <__assert_func+0x14>
 80099c6:	bf00      	nop
 80099c8:	20002020 	.word	0x20002020
 80099cc:	0800cd4e 	.word	0x0800cd4e
 80099d0:	0800cd20 	.word	0x0800cd20
 80099d4:	0800cd13 	.word	0x0800cd13

080099d8 <_calloc_r>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	fba1 5402 	umull	r5, r4, r1, r2
 80099de:	b93c      	cbnz	r4, 80099f0 <_calloc_r+0x18>
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7ff f92d 	bl	8008c40 <_malloc_r>
 80099e6:	4606      	mov	r6, r0
 80099e8:	b928      	cbnz	r0, 80099f6 <_calloc_r+0x1e>
 80099ea:	2600      	movs	r6, #0
 80099ec:	4630      	mov	r0, r6
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	220c      	movs	r2, #12
 80099f2:	6002      	str	r2, [r0, #0]
 80099f4:	e7f9      	b.n	80099ea <_calloc_r+0x12>
 80099f6:	462a      	mov	r2, r5
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7fe f9e0 	bl	8007dbe <memset>
 80099fe:	e7f5      	b.n	80099ec <_calloc_r+0x14>

08009a00 <__ascii_mbtowc>:
 8009a00:	b082      	sub	sp, #8
 8009a02:	b901      	cbnz	r1, 8009a06 <__ascii_mbtowc+0x6>
 8009a04:	a901      	add	r1, sp, #4
 8009a06:	b142      	cbz	r2, 8009a1a <__ascii_mbtowc+0x1a>
 8009a08:	b14b      	cbz	r3, 8009a1e <__ascii_mbtowc+0x1e>
 8009a0a:	7813      	ldrb	r3, [r2, #0]
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	7812      	ldrb	r2, [r2, #0]
 8009a10:	1e10      	subs	r0, r2, #0
 8009a12:	bf18      	it	ne
 8009a14:	2001      	movne	r0, #1
 8009a16:	b002      	add	sp, #8
 8009a18:	4770      	bx	lr
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	e7fb      	b.n	8009a16 <__ascii_mbtowc+0x16>
 8009a1e:	f06f 0001 	mvn.w	r0, #1
 8009a22:	e7f8      	b.n	8009a16 <__ascii_mbtowc+0x16>

08009a24 <__ascii_wctomb>:
 8009a24:	4603      	mov	r3, r0
 8009a26:	4608      	mov	r0, r1
 8009a28:	b141      	cbz	r1, 8009a3c <__ascii_wctomb+0x18>
 8009a2a:	2aff      	cmp	r2, #255	@ 0xff
 8009a2c:	d904      	bls.n	8009a38 <__ascii_wctomb+0x14>
 8009a2e:	228a      	movs	r2, #138	@ 0x8a
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	f04f 30ff 	mov.w	r0, #4294967295
 8009a36:	4770      	bx	lr
 8009a38:	700a      	strb	r2, [r1, #0]
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	4770      	bx	lr
	...

08009a40 <fiprintf>:
 8009a40:	b40e      	push	{r1, r2, r3}
 8009a42:	b503      	push	{r0, r1, lr}
 8009a44:	4601      	mov	r1, r0
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	4805      	ldr	r0, [pc, #20]	@ (8009a60 <fiprintf+0x20>)
 8009a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	f7ff fd2d 	bl	80094b0 <_vfiprintf_r>
 8009a56:	b002      	add	sp, #8
 8009a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a5c:	b003      	add	sp, #12
 8009a5e:	4770      	bx	lr
 8009a60:	20002020 	.word	0x20002020

08009a64 <__swhatbuf_r>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	460c      	mov	r4, r1
 8009a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	b096      	sub	sp, #88	@ 0x58
 8009a70:	4615      	mov	r5, r2
 8009a72:	461e      	mov	r6, r3
 8009a74:	da0d      	bge.n	8009a92 <__swhatbuf_r+0x2e>
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a7c:	f04f 0100 	mov.w	r1, #0
 8009a80:	bf14      	ite	ne
 8009a82:	2340      	movne	r3, #64	@ 0x40
 8009a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a88:	2000      	movs	r0, #0
 8009a8a:	6031      	str	r1, [r6, #0]
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	b016      	add	sp, #88	@ 0x58
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	466a      	mov	r2, sp
 8009a94:	f000 f848 	bl	8009b28 <_fstat_r>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	dbec      	blt.n	8009a76 <__swhatbuf_r+0x12>
 8009a9c:	9901      	ldr	r1, [sp, #4]
 8009a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009aa6:	4259      	negs	r1, r3
 8009aa8:	4159      	adcs	r1, r3
 8009aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aae:	e7eb      	b.n	8009a88 <__swhatbuf_r+0x24>

08009ab0 <__smakebuf_r>:
 8009ab0:	898b      	ldrh	r3, [r1, #12]
 8009ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ab4:	079d      	lsls	r5, r3, #30
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	d507      	bpl.n	8009acc <__smakebuf_r+0x1c>
 8009abc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	6163      	str	r3, [r4, #20]
 8009ac8:	b003      	add	sp, #12
 8009aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009acc:	ab01      	add	r3, sp, #4
 8009ace:	466a      	mov	r2, sp
 8009ad0:	f7ff ffc8 	bl	8009a64 <__swhatbuf_r>
 8009ad4:	9f00      	ldr	r7, [sp, #0]
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	4639      	mov	r1, r7
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7ff f8b0 	bl	8008c40 <_malloc_r>
 8009ae0:	b948      	cbnz	r0, 8009af6 <__smakebuf_r+0x46>
 8009ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae6:	059a      	lsls	r2, r3, #22
 8009ae8:	d4ee      	bmi.n	8009ac8 <__smakebuf_r+0x18>
 8009aea:	f023 0303 	bic.w	r3, r3, #3
 8009aee:	f043 0302 	orr.w	r3, r3, #2
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	e7e2      	b.n	8009abc <__smakebuf_r+0xc>
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	6020      	str	r0, [r4, #0]
 8009afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009afe:	81a3      	strh	r3, [r4, #12]
 8009b00:	9b01      	ldr	r3, [sp, #4]
 8009b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b06:	b15b      	cbz	r3, 8009b20 <__smakebuf_r+0x70>
 8009b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f000 f81d 	bl	8009b4c <_isatty_r>
 8009b12:	b128      	cbz	r0, 8009b20 <__smakebuf_r+0x70>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	f023 0303 	bic.w	r3, r3, #3
 8009b1a:	f043 0301 	orr.w	r3, r3, #1
 8009b1e:	81a3      	strh	r3, [r4, #12]
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	431d      	orrs	r5, r3
 8009b24:	81a5      	strh	r5, [r4, #12]
 8009b26:	e7cf      	b.n	8009ac8 <__smakebuf_r+0x18>

08009b28 <_fstat_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d07      	ldr	r5, [pc, #28]	@ (8009b48 <_fstat_r+0x20>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	f7f7 ffd3 	bl	8001ae0 <_fstat>
 8009b3a:	1c43      	adds	r3, r0, #1
 8009b3c:	d102      	bne.n	8009b44 <_fstat_r+0x1c>
 8009b3e:	682b      	ldr	r3, [r5, #0]
 8009b40:	b103      	cbz	r3, 8009b44 <_fstat_r+0x1c>
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	bd38      	pop	{r3, r4, r5, pc}
 8009b46:	bf00      	nop
 8009b48:	20004530 	.word	0x20004530

08009b4c <_isatty_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d06      	ldr	r5, [pc, #24]	@ (8009b68 <_isatty_r+0x1c>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	f7f7 ffd2 	bl	8001b00 <_isatty>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_isatty_r+0x1a>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_isatty_r+0x1a>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20004530 	.word	0x20004530

08009b6c <abort>:
 8009b6c:	b508      	push	{r3, lr}
 8009b6e:	2006      	movs	r0, #6
 8009b70:	f000 f82c 	bl	8009bcc <raise>
 8009b74:	2001      	movs	r0, #1
 8009b76:	f7f7 ff7f 	bl	8001a78 <_exit>

08009b7a <_raise_r>:
 8009b7a:	291f      	cmp	r1, #31
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4605      	mov	r5, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	d904      	bls.n	8009b8e <_raise_r+0x14>
 8009b84:	2316      	movs	r3, #22
 8009b86:	6003      	str	r3, [r0, #0]
 8009b88:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8c:	bd38      	pop	{r3, r4, r5, pc}
 8009b8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b90:	b112      	cbz	r2, 8009b98 <_raise_r+0x1e>
 8009b92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b96:	b94b      	cbnz	r3, 8009bac <_raise_r+0x32>
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 f831 	bl	8009c00 <_getpid_r>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba8:	f000 b818 	b.w	8009bdc <_kill_r>
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d00a      	beq.n	8009bc6 <_raise_r+0x4c>
 8009bb0:	1c59      	adds	r1, r3, #1
 8009bb2:	d103      	bne.n	8009bbc <_raise_r+0x42>
 8009bb4:	2316      	movs	r3, #22
 8009bb6:	6003      	str	r3, [r0, #0]
 8009bb8:	2001      	movs	r0, #1
 8009bba:	e7e7      	b.n	8009b8c <_raise_r+0x12>
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4798      	blx	r3
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e7e0      	b.n	8009b8c <_raise_r+0x12>
	...

08009bcc <raise>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	@ (8009bd8 <raise+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f7ff bfd2 	b.w	8009b7a <_raise_r>
 8009bd6:	bf00      	nop
 8009bd8:	20002020 	.word	0x20002020

08009bdc <_kill_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	@ (8009bfc <_kill_r+0x20>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f7 ff35 	bl	8001a58 <_kill>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d102      	bne.n	8009bf8 <_kill_r+0x1c>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b103      	cbz	r3, 8009bf8 <_kill_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20004530 	.word	0x20004530

08009c00 <_getpid_r>:
 8009c00:	f7f7 bf22 	b.w	8001a48 <_getpid>

08009c04 <sqrtf>:
 8009c04:	b508      	push	{r3, lr}
 8009c06:	ed2d 8b02 	vpush	{d8}
 8009c0a:	eeb0 8a40 	vmov.f32	s16, s0
 8009c0e:	f000 f817 	bl	8009c40 <__ieee754_sqrtf>
 8009c12:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1a:	d60c      	bvs.n	8009c36 <sqrtf+0x32>
 8009c1c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009c3c <sqrtf+0x38>
 8009c20:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	d505      	bpl.n	8009c36 <sqrtf+0x32>
 8009c2a:	f7fe f91b 	bl	8007e64 <__errno>
 8009c2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009c32:	2321      	movs	r3, #33	@ 0x21
 8009c34:	6003      	str	r3, [r0, #0]
 8009c36:	ecbd 8b02 	vpop	{d8}
 8009c3a:	bd08      	pop	{r3, pc}
 8009c3c:	00000000 	.word	0x00000000

08009c40 <__ieee754_sqrtf>:
 8009c40:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009c44:	4770      	bx	lr
	...

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
