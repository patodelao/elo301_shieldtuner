
ELO301 FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007190  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003208  08007330  08007330  00008330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a538  0800a538  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a538  0800a538  0000b538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a540  0800a540  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a540  0800a540  0000b540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a544  0800a544  0000b544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000021e0  20000000  0800a548  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  200021e0  0800c728  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033e0  0800c728  0000e3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d2b  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ca  00000000  00000000  00021f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00024908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072f  00000000  00000000  00025360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c0d  00000000  00000000  00025a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e24e  00000000  00000000  0004869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1dc3  00000000  00000000  000568ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001286ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  00128768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002baf  00000000  00000000  0012c072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  0012ec21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021e0 	.word	0x200021e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007318 	.word	0x08007318

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021e4 	.word	0x200021e4
 80001dc:	08007318 	.word	0x08007318

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fb07 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f86d 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f8ed 	bl	8001094 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 f8bb 	bl	8001034 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  arm_status status;
  float32_t maxValue;

  status = ARM_MATH_SUCCESS;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	737b      	strb	r3, [r7, #13]

  /* Process the data through the CFFT/CIFFT module */
  arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8000ec2:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <main+0xbc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <main+0xc0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4927      	ldr	r1, [pc, #156]	@ (8000f6c <main+0xc4>)
 8000ed0:	4827      	ldr	r0, [pc, #156]	@ (8000f70 <main+0xc8>)
 8000ed2:	f003 f8ef 	bl	80040b4 <arm_cfft_f32>

  /* Process the data through the Complex Magnitude Module for
  calculating the magnitude at each bin */
  arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <main+0xcc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4926      	ldr	r1, [pc, #152]	@ (8000f78 <main+0xd0>)
 8000ede:	4823      	ldr	r0, [pc, #140]	@ (8000f6c <main+0xc4>)
 8000ee0:	f003 f980 	bl	80041e4 <arm_cmplx_mag_f32>

  /* Calculates maxValue and returns corresponding BIN value */
  arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8000ee4:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <main+0xcc>)
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	1d3a      	adds	r2, r7, #4
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <main+0xd4>)
 8000eec:	4822      	ldr	r0, [pc, #136]	@ (8000f78 <main+0xd0>)
 8000eee:	f002 fd4f 	bl	8003990 <arm_max_f32>


  // Calcular la frecuencia fundamental
  float32_t fundamental_freq = (SAMPLE_RATE / FFT_SIZE) * testIndex;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <main+0xd4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	edc7 7a02 	vstr	s15, [r7, #8]
  // Imprimir la frecuencia fundamental
   printf("Frecuencia fundamental: %.2f Hz\n", fundamental_freq);
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f7ff fb27 	bl	8000558 <__aeabi_f2d>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	481c      	ldr	r0, [pc, #112]	@ (8000f80 <main+0xd8>)
 8000f10:	f004 fa66 	bl	80053e0 <iprintf>

  if (testIndex !=  refIndex)
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <main+0xd4>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <main+0xdc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d001      	beq.n	8000f24 <main+0x7c>
  {
    status = ARM_MATH_TEST_FAILURE;
 8000f20:	23fa      	movs	r3, #250	@ 0xfa
 8000f22:	737b      	strb	r3, [r7, #13]
    for(uint16_t i=0; i<1024; i++)
    {
      printf("%u,%0.1f\r\n", i, testOutput[i]);
    }
#else
    for(uint16_t i=0; i<1024; i+=2)
 8000f24:	2300      	movs	r3, #0
 8000f26:	81fb      	strh	r3, [r7, #14]
 8000f28:	e015      	b.n	8000f56 <main+0xae>
    {
      printf("%0.1f\r\n", 100*testInput_f32_10khz[i]);
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <main+0xc4>)
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000f88 <main+0xe0>
 8000f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3e:	ee17 0a90 	vmov	r0, s15
 8000f42:	f7ff fb09 	bl	8000558 <__aeabi_f2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4810      	ldr	r0, [pc, #64]	@ (8000f8c <main+0xe4>)
 8000f4c:	f004 fa48 	bl	80053e0 <iprintf>
    for(uint16_t i=0; i<1024; i+=2)
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	3302      	adds	r3, #2
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f5c:	d3e5      	bcc.n	8000f2a <main+0x82>
    }
#endif
    for(;;);
 8000f5e:	bf00      	nop
 8000f60:	e7fd      	b.n	8000f5e <main+0xb6>
 8000f62:	bf00      	nop
 8000f64:	20003284 	.word	0x20003284
 8000f68:	20002004 	.word	0x20002004
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	080073a4 	.word	0x080073a4
 8000f74:	20002000 	.word	0x20002000
 8000f78:	20002284 	.word	0x20002284
 8000f7c:	20003288 	.word	0x20003288
 8000f80:	08007330 	.word	0x08007330
 8000f84:	20002008 	.word	0x20002008
 8000f88:	42c80000 	.word	0x42c80000
 8000f8c:	08007354 	.word	0x08007354

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b096      	sub	sp, #88	@ 0x58
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2244      	movs	r2, #68	@ 0x44
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fa73 	bl	800548a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fb6:	f000 fd85 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fc0:	f000 f8e2 	bl	8001188 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000fce:	2340      	movs	r3, #64	@ 0x40
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fde:	230a      	movs	r3, #10
 8000fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fdbc 	bl	8001b70 <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ffe:	f000 f8c3 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2303      	movs	r3, #3
 8001008:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	2104      	movs	r1, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f001 f9bc 	bl	8002398 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001026:	f000 f8af 	bl	8001188 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3758      	adds	r7, #88	@ 0x58
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <MX_USART2_UART_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART2_UART_Init+0x58>)
 8001078:	f001 ff10 	bl	8002e9c <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 f881 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200021fc 	.word	0x200021fc
 8001090:	40004400 	.word	0x40004400

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a24      	ldr	r2, [pc, #144]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <MX_GPIO_Init+0xc4>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001112:	f000 fcb1 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	@ (800115c <MX_GPIO_Init+0xc8>)
 800112e:	f000 fb29 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001132:	2320      	movs	r3, #32
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f000 fb1a 	bl	8001784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	@ 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	48000800 	.word	0x48000800

08001160 <_write>:

/* USER CODE BEGIN 4 */
/* Add _write function to print over the uart */
int _write( int file, char *ptr, int len )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( &huart2, (uint8_t*) ptr, len, 50 );
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b29a      	uxth	r2, r3
 8001170:	2332      	movs	r3, #50	@ 0x32
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <_write+0x24>)
 8001176:	f001 fedf 	bl	8002f38 <HAL_UART_Transmit>
  return len;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200021fc 	.word	0x200021fc

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0a4      	sub	sp, #144	@ 0x90
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2268      	movs	r2, #104	@ 0x68
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 f944 	bl	800548a <memset>
  if(huart->Instance==USART2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a21      	ldr	r2, [pc, #132]	@ (800128c <HAL_UART_MspInit+0xb0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13a      	bne.n	8001282 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800120c:	2302      	movs	r3, #2
 800120e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fae1 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001224:	f7ff ffb0 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_UART_MspInit+0xb4>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122c:	4a18      	ldr	r2, [pc, #96]	@ (8001290 <HAL_UART_MspInit+0xb4>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001232:	6593      	str	r3, [r2, #88]	@ 0x58
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_UART_MspInit+0xb4>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_UART_MspInit+0xb4>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <HAL_UART_MspInit+0xb4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_UART_MspInit+0xb4>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001258:	230c      	movs	r3, #12
 800125a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126e:	2307      	movs	r3, #7
 8001270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127e:	f000 fa81 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3790      	adds	r7, #144	@ 0x90
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40004400 	.word	0x40004400
 8001290:	40021000 	.word	0x40021000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f945 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_kill>:

int _kill(int pid, int sig)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800130c:	f004 f910 	bl	8005530 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	2216      	movs	r2, #22
 8001314:	601a      	str	r2, [r3, #0]
  return -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_exit>:

void _exit (int status)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800132a:	f04f 31ff 	mov.w	r1, #4294967295
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffe7 	bl	8001302 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <_exit+0x12>

08001338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
  }

  return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800139a:	605a      	str	r2, [r3, #4]
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f004 f890 	bl	8005530 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20028000 	.word	0x20028000
 800143c:	00000400 	.word	0x00000400
 8001440:	2000328c 	.word	0x2000328c
 8001444:	200033e0 	.word	0x200033e0

08001448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001470:	f7ff ffea 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	@ (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	@ (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f004 f84f 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149e:	f7ff fd03 	bl	8000ea8 <main>

080014a2 <LoopForever>:

LoopForever:
    b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	200021e0 	.word	0x200021e0
  ldr r2, =_sidata
 80014b0:	0800a548 	.word	0x0800a548
  ldr r2, =_sbss
 80014b4:	200021e0 	.word	0x200021e0
  ldr r4, =_ebss
 80014b8:	200033e0 	.word	0x200033e0

080014bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_Init+0x3c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_Init+0x3c>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d6:	2003      	movs	r0, #3
 80014d8:	f000 f920 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f80f 	bl	8001500 <HAL_InitTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	e001      	b.n	80014f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ee:	f7ff fe51 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <HAL_InitTick+0x6c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d023      	beq.n	800155c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_InitTick+0x70>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f91d 	bl	800176a <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d809      	bhi.n	8001550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f8f5 	bl	8001732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_InitTick+0x74>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e007      	b.n	8001560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e004      	b.n	8001560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e001      	b.n	8001560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20002014 	.word	0x20002014
 8001570:	2000200c 	.word	0x2000200c
 8001574:	20002010 	.word	0x20002010

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20002014 	.word	0x20002014
 800159c:	20003290 	.word	0x20003290

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20003290 	.word	0x20003290

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	@ (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	@ (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	@ 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff47 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff5c 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffb0 	bl	80016d8 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e154      	b.n	8001a3e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8146 	beq.w	8001a38 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d005      	beq.n	80017c4 <HAL_GPIO_Init+0x40>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d130      	bne.n	8001826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fa:	2201      	movs	r2, #1
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 0201 	and.w	r2, r3, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b03      	cmp	r3, #3
 8001830:	d017      	beq.n	8001862 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d123      	bne.n	80018b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80a0 	beq.w	8001a38 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f8:	4b58      	ldr	r3, [pc, #352]	@ (8001a5c <HAL_GPIO_Init+0x2d8>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fc:	4a57      	ldr	r2, [pc, #348]	@ (8001a5c <HAL_GPIO_Init+0x2d8>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6613      	str	r3, [r2, #96]	@ 0x60
 8001904:	4b55      	ldr	r3, [pc, #340]	@ (8001a5c <HAL_GPIO_Init+0x2d8>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001910:	4a53      	ldr	r2, [pc, #332]	@ (8001a60 <HAL_GPIO_Init+0x2dc>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800193a:	d019      	beq.n	8001970 <HAL_GPIO_Init+0x1ec>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a49      	ldr	r2, [pc, #292]	@ (8001a64 <HAL_GPIO_Init+0x2e0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_GPIO_Init+0x1e8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_GPIO_Init+0x2e4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00d      	beq.n	8001968 <HAL_GPIO_Init+0x1e4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a47      	ldr	r2, [pc, #284]	@ (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x1e0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <HAL_GPIO_Init+0x2ec>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_GPIO_Init+0x1dc>
 800195c:	2304      	movs	r3, #4
 800195e:	e008      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001960:	2307      	movs	r3, #7
 8001962:	e006      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001964:	2303      	movs	r3, #3
 8001966:	e004      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001968:	2302      	movs	r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001970:	2300      	movs	r3, #0
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4093      	lsls	r3, r2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001982:	4937      	ldr	r1, [pc, #220]	@ (8001a60 <HAL_GPIO_Init+0x2dc>)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001990:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019de:	4a25      	ldr	r2, [pc, #148]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a08:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f aea3 	bne.w	8001794 <HAL_GPIO_Init+0x10>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	48001000 	.word	0x48001000
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ad2:	d130      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae0:	d038      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aea:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2232      	movs	r2, #50	@ 0x32
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	e002      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1c:	d102      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f2      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b30:	d110      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e00f      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b42:	d007      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b4c:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40007000 	.word	0x40007000
 8001b68:	2000200c 	.word	0x2000200c
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f000 bc02 	b.w	8002388 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b84:	4b96      	ldr	r3, [pc, #600]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8e:	4b94      	ldr	r3, [pc, #592]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80e4 	beq.w	8001d6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4c>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	f040 808b 	bne.w	8001cca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f040 8087 	bne.w	8001cca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbc:	4b88      	ldr	r3, [pc, #544]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x64>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e3d9      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1a      	ldr	r2, [r3, #32]
 8001bd8:	4b81      	ldr	r3, [pc, #516]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <HAL_RCC_OscConfig+0x7e>
 8001be4:	4b7e      	ldr	r3, [pc, #504]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bec:	e005      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
 8001bee:	4b7c      	ldr	r3, [pc, #496]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d223      	bcs.n	8001c46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd8c 	bl	8002720 <RCC_SetFlashLatencyFromMSIRange>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e3ba      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c12:	4b73      	ldr	r3, [pc, #460]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a72      	ldr	r2, [pc, #456]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b70      	ldr	r3, [pc, #448]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	496d      	ldr	r1, [pc, #436]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c30:	4b6b      	ldr	r3, [pc, #428]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	4968      	ldr	r1, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	e025      	b.n	8001c92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a65      	ldr	r2, [pc, #404]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4960      	ldr	r1, [pc, #384]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c64:	4b5e      	ldr	r3, [pc, #376]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	495b      	ldr	r1, [pc, #364]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fd4c 	bl	8002720 <RCC_SetFlashLatencyFromMSIRange>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e37a      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c92:	f000 fc81 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4950      	ldr	r1, [pc, #320]	@ (8001de4 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	5ccb      	ldrb	r3, [r1, r3]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	4a4e      	ldr	r2, [pc, #312]	@ (8001de8 <HAL_RCC_OscConfig+0x278>)
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fc22 	bl	8001500 <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d052      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	e35e      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d032      	beq.n	8001d38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a42      	ldr	r2, [pc, #264]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fc5f 	bl	80015a0 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fc5b 	bl	80015a0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e347      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d04:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a35      	ldr	r2, [pc, #212]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4930      	ldr	r1, [pc, #192]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d22:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	492b      	ldr	r1, [pc, #172]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
 8001d36:	e01a      	b.n	8001d6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc2c 	bl	80015a0 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc28 	bl	80015a0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e314      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5e:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1dc>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d073      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x21c>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d10e      	bne.n	8001da4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d10b      	bne.n	8001da4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d063      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d15f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e2f1      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x24c>
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e025      	b.n	8001e08 <HAL_RCC_OscConfig+0x298>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc4:	d114      	bne.n	8001df0 <HAL_RCC_OscConfig+0x280>
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a02      	ldr	r2, [pc, #8]	@ (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e013      	b.n	8001e08 <HAL_RCC_OscConfig+0x298>
 8001de0:	40021000 	.word	0x40021000
 8001de4:	0800735c 	.word	0x0800735c
 8001de8:	2000200c 	.word	0x2000200c
 8001dec:	20002010 	.word	0x20002010
 8001df0:	4ba0      	ldr	r3, [pc, #640]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a9f      	ldr	r2, [pc, #636]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b9d      	ldr	r3, [pc, #628]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a9c      	ldr	r2, [pc, #624]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fbc6 	bl	80015a0 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fbc2 	bl	80015a0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2ae      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	4b92      	ldr	r3, [pc, #584]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2a8>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fbb2 	bl	80015a0 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fbae 	bl	80015a0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e29a      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2d0>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d060      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x310>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d119      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d116      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	4b7c      	ldr	r3, [pc, #496]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x328>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e277      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	4973      	ldr	r1, [pc, #460]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eac:	e040      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d023      	beq.n	8001efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb6d 	bl	80015a0 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fb69 	bl	80015a0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e255      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b62      	ldr	r3, [pc, #392]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	495f      	ldr	r1, [pc, #380]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e018      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fb49 	bl	80015a0 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff fb45 	bl	80015a0 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e231      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d03c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	4b4b      	ldr	r3, [pc, #300]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff fb24 	bl	80015a0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fb20 	bl	80015a0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e20c      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCC_OscConfig+0x3ec>
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f84:	4a3b      	ldr	r2, [pc, #236]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb07 	bl	80015a0 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fb03 	bl	80015a0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1ef      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ef      	bne.n	8001f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	4a26      	ldr	r2, [pc, #152]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d118      	bne.n	800202e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002008:	f7ff faca 	bl	80015a0 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002010:	f7ff fac6 	bl	80015a0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1b2      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_RCC_OscConfig+0x508>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x4d8>
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002046:	e029      	b.n	800209c <HAL_RCC_OscConfig+0x52c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d115      	bne.n	800207c <HAL_RCC_OscConfig+0x50c>
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a07      	ldr	r2, [pc, #28]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a03      	ldr	r2, [pc, #12]	@ (8002074 <HAL_RCC_OscConfig+0x504>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x52c>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	4b9a      	ldr	r3, [pc, #616]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a99      	ldr	r2, [pc, #612]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800208c:	4b96      	ldr	r3, [pc, #600]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	4a95      	ldr	r2, [pc, #596]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff fa7c 	bl	80015a0 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7ff fa78 	bl	80015a0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e162      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b89      	ldr	r3, [pc, #548]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ed      	beq.n	80020ac <HAL_RCC_OscConfig+0x53c>
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff fa65 	bl	80015a0 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fa61 	bl	80015a0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e14b      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	4b7d      	ldr	r3, [pc, #500]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ed      	bne.n	80020da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b78      	ldr	r3, [pc, #480]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a77      	ldr	r2, [pc, #476]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03c      	beq.n	8002196 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01c      	beq.n	800215e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002124:	4b70      	ldr	r3, [pc, #448]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002126:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800212a:	4a6f      	ldr	r2, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff fa34 	bl	80015a0 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213c:	f7ff fa30 	bl	80015a0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e11c      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214e:	4b66      	ldr	r3, [pc, #408]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002150:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCC_OscConfig+0x5cc>
 800215c:	e01b      	b.n	8002196 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215e:	4b62      	ldr	r3, [pc, #392]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002164:	4a60      	ldr	r2, [pc, #384]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7ff fa17 	bl	80015a0 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002176:	f7ff fa13 	bl	80015a0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0ff      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002188:	4b57      	ldr	r3, [pc, #348]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 800218a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80f3 	beq.w	8002386 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	f040 80c9 	bne.w	800233c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021aa:	4b4f      	ldr	r3, [pc, #316]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0203 	and.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d12c      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	3b01      	subs	r3, #1
 80021ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d123      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d11b      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d113      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	3b01      	subs	r3, #1
 80021fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d109      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d06b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d062      	beq.n	80022e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800221e:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0ac      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800222e:	4b2e      	ldr	r3, [pc, #184]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2d      	ldr	r2, [pc, #180]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002234:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002238:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800223a:	f7ff f9b1 	bl	80015a0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff f9ad 	bl	80015a0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e099      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <HAL_RCC_OscConfig+0x77c>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002270:	3a01      	subs	r2, #1
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800227a:	0212      	lsls	r2, r2, #8
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002282:	0852      	lsrs	r2, r2, #1
 8002284:	3a01      	subs	r2, #1
 8002286:	0552      	lsls	r2, r2, #21
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800228e:	0852      	lsrs	r2, r2, #1
 8002290:	3a01      	subs	r2, #1
 8002292:	0652      	lsls	r2, r2, #25
 8002294:	4311      	orrs	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800229a:	06d2      	lsls	r2, r2, #27
 800229c:	430a      	orrs	r2, r1
 800229e:	4912      	ldr	r1, [pc, #72]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a4:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b0:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022bc:	f7ff f970 	bl	80015a0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff f96c 	bl	80015a0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e058      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <HAL_RCC_OscConfig+0x778>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e2:	e050      	b.n	8002386 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e04f      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
 80022e8:	40021000 	.word	0x40021000
 80022ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d144      	bne.n	8002386 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a23      	ldr	r2, [pc, #140]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a20      	ldr	r2, [pc, #128]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002314:	f7ff f944 	bl	80015a0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f940 	bl	80015a0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e02c      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x7ac>
 800233a:	e024      	b.n	8002386 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d01f      	beq.n	8002382 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 8002348:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7ff f927 	bl	80015a0 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002356:	f7ff f923 	bl	80015a0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e00f      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4905      	ldr	r1, [pc, #20]	@ (8002390 <HAL_RCC_OscConfig+0x820>)
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_RCC_OscConfig+0x824>)
 800237c:	4013      	ands	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
 8002380:	e001      	b.n	8002386 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	feeefffc 	.word	0xfeeefffc

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0e7      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b75      	ldr	r3, [pc, #468]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b72      	ldr	r3, [pc, #456]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4970      	ldr	r1, [pc, #448]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cf      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4b66      	ldr	r3, [pc, #408]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d908      	bls.n	800240a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b63      	ldr	r3, [pc, #396]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4960      	ldr	r1, [pc, #384]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d04c      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d121      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0a6      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002436:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e09a      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244e:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e08e      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245e:	4b4a      	ldr	r3, [pc, #296]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e086      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b46      	ldr	r3, [pc, #280]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4943      	ldr	r1, [pc, #268]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7ff f88e 	bl	80015a0 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff f88a 	bl	80015a0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e06e      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d208      	bcs.n	80024de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	492b      	ldr	r1, [pc, #172]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024de:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d210      	bcs.n	800250e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	4923      	ldr	r1, [pc, #140]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e036      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4918      	ldr	r1, [pc, #96]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002538:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4910      	ldr	r1, [pc, #64]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800254c:	f000 f824 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	490b      	ldr	r1, [pc, #44]	@ (800258c <HAL_RCC_ClockConfig+0x1f4>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1f8>)
 800256a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1fc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe ffc5 	bl	8001500 <HAL_InitTick>
 8002576:	4603      	mov	r3, r0
 8002578:	72fb      	strb	r3, [r7, #11]

  return status;
 800257a:	7afb      	ldrb	r3, [r7, #11]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
 800258c:	0800735c 	.word	0x0800735c
 8002590:	2000200c 	.word	0x2000200c
 8002594:	20002010 	.word	0x20002010

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	@ 0x24
 800259c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4b3e      	ldr	r3, [pc, #248]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x34>
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d121      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d11e      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d8:	4b31      	ldr	r3, [pc, #196]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e005      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10d      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d102      	bne.n	8002616 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002610:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e004      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d101      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800261c:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x114>)
 800261e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d134      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0xa6>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d003      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xac>
 800263c:	e005      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800263e:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	e005      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002646:	617b      	str	r3, [r7, #20]
      break;
 8002648:	e002      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	617b      	str	r3, [r7, #20]
      break;
 800264e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002650:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	3301      	adds	r3, #1
 800265c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	fb03 f202 	mul.w	r2, r3, r2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	0e5b      	lsrs	r3, r3, #25
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	3301      	adds	r3, #1
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002690:	69bb      	ldr	r3, [r7, #24]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08007374 	.word	0x08007374
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000200c 	.word	0x2000200c

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4904      	ldr	r1, [pc, #16]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	0800736c 	.word	0x0800736c

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f8:	f7ff ffda 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4904      	ldr	r1, [pc, #16]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x28>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	0800736c 	.word	0x0800736c

08002720 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800272c:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002738:	f7ff f9b6 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 800273c:	6178      	str	r0, [r7, #20]
 800273e:	e014      	b.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a24      	ldr	r2, [pc, #144]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002758:	f7ff f9a6 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 800275c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002762:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002770:	d10b      	bne.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b80      	cmp	r3, #128	@ 0x80
 8002776:	d919      	bls.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2ba0      	cmp	r3, #160	@ 0xa0
 800277c:	d902      	bls.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800277e:	2302      	movs	r3, #2
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e013      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e010      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b80      	cmp	r3, #128	@ 0x80
 800278e:	d902      	bls.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002790:	2303      	movs	r3, #3
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e00a      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b80      	cmp	r3, #128	@ 0x80
 800279a:	d102      	bne.n	80027a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800279c:	2302      	movs	r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e004      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b70      	cmp	r3, #112	@ 0x70
 80027a6:	d101      	bne.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a8:	2301      	movs	r3, #1
 80027aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 0207 	bic.w	r2, r3, #7
 80027b4:	4909      	ldr	r1, [pc, #36]	@ (80027dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40022000 	.word	0x40022000

080027e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ec:	2300      	movs	r3, #0
 80027ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d031      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002804:	d01a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002806:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800280a:	d814      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002814:	d10f      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002816:	4b5d      	ldr	r3, [pc, #372]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a5c      	ldr	r2, [pc, #368]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002822:	e00c      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fa44 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002834:	e003      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	74fb      	strb	r3, [r7, #19]
      break;
 800283a:	e000      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800283c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002844:	4b51      	ldr	r3, [pc, #324]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	494e      	ldr	r1, [pc, #312]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800285a:	e001      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 809e 	beq.w	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002872:	4b46      	ldr	r3, [pc, #280]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b40      	ldr	r3, [pc, #256]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	4a3f      	ldr	r2, [pc, #252]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6593      	str	r3, [r2, #88]	@ 0x58
 8002894:	4b3d      	ldr	r3, [pc, #244]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a39      	ldr	r2, [pc, #228]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b0:	f7fe fe76 	bl	80015a0 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028b6:	e009      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fe72 	bl	80015a0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d902      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	74fb      	strb	r3, [r7, #19]
        break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028cc:	4b30      	ldr	r3, [pc, #192]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d15a      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028de:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01e      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d019      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028fa:	4b24      	ldr	r3, [pc, #144]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002904:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002906:	4b21      	ldr	r3, [pc, #132]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290c:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002916:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291c:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002926:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d016      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fe32 	bl	80015a0 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293e:	e00b      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe fe2e 	bl	80015a0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d902      	bls.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	74fb      	strb	r3, [r7, #19]
            break;
 8002956:	e006      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ec      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800296c:	4b07      	ldr	r3, [pc, #28]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800297a:	4904      	ldr	r1, [pc, #16]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002982:	e009      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
 8002988:	e006      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002998:	7c7b      	ldrb	r3, [r7, #17]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299e:	4b9e      	ldr	r3, [pc, #632]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	4a9d      	ldr	r2, [pc, #628]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029b6:	4b98      	ldr	r3, [pc, #608]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f023 0203 	bic.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4994      	ldr	r1, [pc, #592]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f023 020c 	bic.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	498c      	ldr	r1, [pc, #560]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fa:	4b87      	ldr	r3, [pc, #540]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	4983      	ldr	r1, [pc, #524]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	497b      	ldr	r1, [pc, #492]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a3e:	4b76      	ldr	r3, [pc, #472]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	4972      	ldr	r1, [pc, #456]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a60:	4b6d      	ldr	r3, [pc, #436]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a66:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	496a      	ldr	r1, [pc, #424]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a82:	4b65      	ldr	r3, [pc, #404]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a90:	4961      	ldr	r1, [pc, #388]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab2:	4959      	ldr	r1, [pc, #356]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac6:	4b54      	ldr	r3, [pc, #336]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002acc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	4950      	ldr	r1, [pc, #320]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	4948      	ldr	r1, [pc, #288]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b10:	f023 0203 	bic.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	493f      	ldr	r1, [pc, #252]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d028      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3a:	4937      	ldr	r1, [pc, #220]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4c:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
 8002b58:	e011      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f8a4 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002b7a:	7cfb      	ldrb	r3, [r7, #19]
 8002b7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d028      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b8a:	4b23      	ldr	r3, [pc, #140]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	491f      	ldr	r1, [pc, #124]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002baa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bb4:	60d3      	str	r3, [r2, #12]
 8002bb6:	e011      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f875 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02b      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf6:	4908      	ldr	r1, [pc, #32]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c06:	d109      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a02      	ldr	r2, [pc, #8]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c12:	60d3      	str	r3, [r2, #12]
 8002c14:	e014      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f843 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01c      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	4916      	ldr	r1, [pc, #88]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f820 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca0:	4904      	ldr	r1, [pc, #16]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ca8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cc6:	4b74      	ldr	r3, [pc, #464]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d018      	beq.n	8002d04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cd2:	4b71      	ldr	r3, [pc, #452]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0203 	and.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d10d      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cea:	4b6b      	ldr	r3, [pc, #428]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d047      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e044      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d018      	beq.n	8002d3e <RCCEx_PLLSAI1_Config+0x86>
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d825      	bhi.n	8002d5c <RCCEx_PLLSAI1_Config+0xa4>
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d002      	beq.n	8002d1a <RCCEx_PLLSAI1_Config+0x62>
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d009      	beq.n	8002d2c <RCCEx_PLLSAI1_Config+0x74>
 8002d18:	e020      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2a:	e01a      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3c:	e013      	b.n	8002d66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d3e:	4b56      	ldr	r3, [pc, #344]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d4a:	4b53      	ldr	r3, [pc, #332]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d5a:	e006      	b.n	8002d6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d60:	e004      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d72:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	430b      	orrs	r3, r1
 8002d88:	4943      	ldr	r1, [pc, #268]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d17c      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d94:	4b40      	ldr	r3, [pc, #256]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3f      	ldr	r2, [pc, #252]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe fbfe 	bl	80015a0 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da6:	e009      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da8:	f7fe fbfa 	bl	80015a0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dba:	e005      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ef      	bne.n	8002da8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d15f      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d110      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd4:	4b30      	ldr	r3, [pc, #192]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ddc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6892      	ldr	r2, [r2, #8]
 8002de4:	0211      	lsls	r1, r2, #8
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	06d2      	lsls	r2, r2, #27
 8002dec:	430a      	orrs	r2, r1
 8002dee:	492a      	ldr	r1, [pc, #168]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	610b      	str	r3, [r1, #16]
 8002df4:	e027      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d112      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dfc:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6892      	ldr	r2, [r2, #8]
 8002e0c:	0211      	lsls	r1, r2, #8
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6912      	ldr	r2, [r2, #16]
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0552      	lsls	r2, r2, #21
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	491f      	ldr	r1, [pc, #124]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	610b      	str	r3, [r1, #16]
 8002e20:	e011      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e22:	4b1d      	ldr	r3, [pc, #116]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	0211      	lsls	r1, r2, #8
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6952      	ldr	r2, [r2, #20]
 8002e38:	0852      	lsrs	r2, r2, #1
 8002e3a:	3a01      	subs	r2, #1
 8002e3c:	0652      	lsls	r2, r2, #25
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	4915      	ldr	r1, [pc, #84]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e46:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a13      	ldr	r2, [pc, #76]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe fba5 	bl	80015a0 <HAL_GetTick>
 8002e56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e58:	e009      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e5a:	f7fe fba1 	bl	80015a0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d902      	bls.n	8002e6e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e6c:	e005      	b.n	8002e7a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ef      	beq.n	8002e5a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4903      	ldr	r1, [pc, #12]	@ (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e040      	b.n	8002f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f98c 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb38 	bl	8003558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8af 	bl	800304c <UART_SetConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01b      	b.n	8002f30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fbb7 	bl	800369c <UART_CheckIdleState>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d177      	bne.n	8003040 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Transmit+0x24>
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e070      	b.n	8003042 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2221      	movs	r2, #33	@ 0x21
 8002f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe fb17 	bl	80015a0 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_UART_Transmit+0x68>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e003      	b.n	8002fa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa8:	e02f      	b.n	800300a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2180      	movs	r1, #128	@ 0x80
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fc19 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e03b      	b.n	8003042 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e007      	b.n	8002ff8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1c9      	bne.n	8002faa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2140      	movs	r1, #64	@ 0x40
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fbe3 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e005      	b.n	8003042 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b08a      	sub	sp, #40	@ 0x28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4313      	orrs	r3, r2
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4ba5      	ldr	r3, [pc, #660]	@ (8003310 <UART_SetConfig+0x2c4>)
 800307c:	4013      	ands	r3, r2
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003084:	430b      	orrs	r3, r1
 8003086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a9a      	ldr	r2, [pc, #616]	@ (8003314 <UART_SetConfig+0x2c8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a91      	ldr	r2, [pc, #580]	@ (8003318 <UART_SetConfig+0x2cc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d126      	bne.n	8003124 <UART_SetConfig+0xd8>
 80030d6:	4b91      	ldr	r3, [pc, #580]	@ (800331c <UART_SetConfig+0x2d0>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d81b      	bhi.n	800311c <UART_SetConfig+0xd0>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <UART_SetConfig+0xa0>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	08003105 	.word	0x08003105
 80030f8:	08003115 	.word	0x08003115
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e0d6      	b.n	80032b2 <UART_SetConfig+0x266>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e0d2      	b.n	80032b2 <UART_SetConfig+0x266>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e0ce      	b.n	80032b2 <UART_SetConfig+0x266>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311a:	e0ca      	b.n	80032b2 <UART_SetConfig+0x266>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003122:	e0c6      	b.n	80032b2 <UART_SetConfig+0x266>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7d      	ldr	r2, [pc, #500]	@ (8003320 <UART_SetConfig+0x2d4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d138      	bne.n	80031a0 <UART_SetConfig+0x154>
 800312e:	4b7b      	ldr	r3, [pc, #492]	@ (800331c <UART_SetConfig+0x2d0>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d82d      	bhi.n	8003198 <UART_SetConfig+0x14c>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <UART_SetConfig+0xf8>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003179 	.word	0x08003179
 8003148:	08003199 	.word	0x08003199
 800314c:	08003199 	.word	0x08003199
 8003150:	08003199 	.word	0x08003199
 8003154:	08003189 	.word	0x08003189
 8003158:	08003199 	.word	0x08003199
 800315c:	08003199 	.word	0x08003199
 8003160:	08003199 	.word	0x08003199
 8003164:	08003181 	.word	0x08003181
 8003168:	08003199 	.word	0x08003199
 800316c:	08003199 	.word	0x08003199
 8003170:	08003199 	.word	0x08003199
 8003174:	08003191 	.word	0x08003191
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e098      	b.n	80032b2 <UART_SetConfig+0x266>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e094      	b.n	80032b2 <UART_SetConfig+0x266>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e090      	b.n	80032b2 <UART_SetConfig+0x266>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003196:	e08c      	b.n	80032b2 <UART_SetConfig+0x266>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319e:	e088      	b.n	80032b2 <UART_SetConfig+0x266>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003324 <UART_SetConfig+0x2d8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d125      	bne.n	80031f6 <UART_SetConfig+0x1aa>
 80031aa:	4b5c      	ldr	r3, [pc, #368]	@ (800331c <UART_SetConfig+0x2d0>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031b4:	2b30      	cmp	r3, #48	@ 0x30
 80031b6:	d016      	beq.n	80031e6 <UART_SetConfig+0x19a>
 80031b8:	2b30      	cmp	r3, #48	@ 0x30
 80031ba:	d818      	bhi.n	80031ee <UART_SetConfig+0x1a2>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d00a      	beq.n	80031d6 <UART_SetConfig+0x18a>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d814      	bhi.n	80031ee <UART_SetConfig+0x1a2>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <UART_SetConfig+0x182>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d008      	beq.n	80031de <UART_SetConfig+0x192>
 80031cc:	e00f      	b.n	80031ee <UART_SetConfig+0x1a2>
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d4:	e06d      	b.n	80032b2 <UART_SetConfig+0x266>
 80031d6:	2302      	movs	r3, #2
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031dc:	e069      	b.n	80032b2 <UART_SetConfig+0x266>
 80031de:	2304      	movs	r3, #4
 80031e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e4:	e065      	b.n	80032b2 <UART_SetConfig+0x266>
 80031e6:	2308      	movs	r3, #8
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ec:	e061      	b.n	80032b2 <UART_SetConfig+0x266>
 80031ee:	2310      	movs	r3, #16
 80031f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f4:	e05d      	b.n	80032b2 <UART_SetConfig+0x266>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003328 <UART_SetConfig+0x2dc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d125      	bne.n	800324c <UART_SetConfig+0x200>
 8003200:	4b46      	ldr	r3, [pc, #280]	@ (800331c <UART_SetConfig+0x2d0>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003206:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800320a:	2bc0      	cmp	r3, #192	@ 0xc0
 800320c:	d016      	beq.n	800323c <UART_SetConfig+0x1f0>
 800320e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003210:	d818      	bhi.n	8003244 <UART_SetConfig+0x1f8>
 8003212:	2b80      	cmp	r3, #128	@ 0x80
 8003214:	d00a      	beq.n	800322c <UART_SetConfig+0x1e0>
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d814      	bhi.n	8003244 <UART_SetConfig+0x1f8>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <UART_SetConfig+0x1d8>
 800321e:	2b40      	cmp	r3, #64	@ 0x40
 8003220:	d008      	beq.n	8003234 <UART_SetConfig+0x1e8>
 8003222:	e00f      	b.n	8003244 <UART_SetConfig+0x1f8>
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322a:	e042      	b.n	80032b2 <UART_SetConfig+0x266>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003232:	e03e      	b.n	80032b2 <UART_SetConfig+0x266>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323a:	e03a      	b.n	80032b2 <UART_SetConfig+0x266>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003242:	e036      	b.n	80032b2 <UART_SetConfig+0x266>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324a:	e032      	b.n	80032b2 <UART_SetConfig+0x266>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a30      	ldr	r2, [pc, #192]	@ (8003314 <UART_SetConfig+0x2c8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12a      	bne.n	80032ac <UART_SetConfig+0x260>
 8003256:	4b31      	ldr	r3, [pc, #196]	@ (800331c <UART_SetConfig+0x2d0>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003264:	d01a      	beq.n	800329c <UART_SetConfig+0x250>
 8003266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326a:	d81b      	bhi.n	80032a4 <UART_SetConfig+0x258>
 800326c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003270:	d00c      	beq.n	800328c <UART_SetConfig+0x240>
 8003272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003276:	d815      	bhi.n	80032a4 <UART_SetConfig+0x258>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <UART_SetConfig+0x238>
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003280:	d008      	beq.n	8003294 <UART_SetConfig+0x248>
 8003282:	e00f      	b.n	80032a4 <UART_SetConfig+0x258>
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328a:	e012      	b.n	80032b2 <UART_SetConfig+0x266>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003292:	e00e      	b.n	80032b2 <UART_SetConfig+0x266>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329a:	e00a      	b.n	80032b2 <UART_SetConfig+0x266>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a2:	e006      	b.n	80032b2 <UART_SetConfig+0x266>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e002      	b.n	80032b2 <UART_SetConfig+0x266>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <UART_SetConfig+0x2c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	f040 808b 	bne.w	80033d4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d834      	bhi.n	8003330 <UART_SetConfig+0x2e4>
 80032c6:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <UART_SetConfig+0x280>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	08003331 	.word	0x08003331
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003331 	.word	0x08003331
 80032dc:	080032ff 	.word	0x080032ff
 80032e0:	08003331 	.word	0x08003331
 80032e4:	08003331 	.word	0x08003331
 80032e8:	08003331 	.word	0x08003331
 80032ec:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7ff f9ea 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80032f4:	61f8      	str	r0, [r7, #28]
        break;
 80032f6:	e021      	b.n	800333c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <UART_SetConfig+0x2e0>)
 80032fa:	61fb      	str	r3, [r7, #28]
        break;
 80032fc:	e01e      	b.n	800333c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7ff f94b 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8003302:	61f8      	str	r0, [r7, #28]
        break;
 8003304:	e01a      	b.n	800333c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330a:	61fb      	str	r3, [r7, #28]
        break;
 800330c:	e016      	b.n	800333c <UART_SetConfig+0x2f0>
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40008000 	.word	0x40008000
 8003318:	40013800 	.word	0x40013800
 800331c:	40021000 	.word	0x40021000
 8003320:	40004400 	.word	0x40004400
 8003324:	40004800 	.word	0x40004800
 8003328:	40004c00 	.word	0x40004c00
 800332c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800333a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80fa 	beq.w	8003538 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	429a      	cmp	r2, r3
 8003352:	d305      	bcc.n	8003360 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	d903      	bls.n	8003368 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003366:	e0e7      	b.n	8003538 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2200      	movs	r2, #0
 800336c:	461c      	mov	r4, r3
 800336e:	4615      	mov	r5, r2
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	022b      	lsls	r3, r5, #8
 800337a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800337e:	0222      	lsls	r2, r4, #8
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	6849      	ldr	r1, [r1, #4]
 8003384:	0849      	lsrs	r1, r1, #1
 8003386:	2000      	movs	r0, #0
 8003388:	4688      	mov	r8, r1
 800338a:	4681      	mov	r9, r0
 800338c:	eb12 0a08 	adds.w	sl, r2, r8
 8003390:	eb43 0b09 	adc.w	fp, r3, r9
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a2:	4650      	mov	r0, sl
 80033a4:	4659      	mov	r1, fp
 80033a6:	f7fd fc07 	bl	8000bb8 <__aeabi_uldivmod>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4613      	mov	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033b8:	d308      	bcc.n	80033cc <UART_SetConfig+0x380>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c0:	d204      	bcs.n	80033cc <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	e0b5      	b.n	8003538 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033d2:	e0b1      	b.n	8003538 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033dc:	d15d      	bne.n	800349a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80033de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d827      	bhi.n	8003436 <UART_SetConfig+0x3ea>
 80033e6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <UART_SetConfig+0x3a0>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003411 	.word	0x08003411
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003421 	.word	0x08003421
 80033f8:	08003437 	.word	0x08003437
 80033fc:	08003427 	.word	0x08003427
 8003400:	08003437 	.word	0x08003437
 8003404:	08003437 	.word	0x08003437
 8003408:	08003437 	.word	0x08003437
 800340c:	0800342f 	.word	0x0800342f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003410:	f7ff f95a 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003414:	61f8      	str	r0, [r7, #28]
        break;
 8003416:	e014      	b.n	8003442 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7ff f96c 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 800341c:	61f8      	str	r0, [r7, #28]
        break;
 800341e:	e010      	b.n	8003442 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003420:	4b4c      	ldr	r3, [pc, #304]	@ (8003554 <UART_SetConfig+0x508>)
 8003422:	61fb      	str	r3, [r7, #28]
        break;
 8003424:	e00d      	b.n	8003442 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003426:	f7ff f8b7 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 800342a:	61f8      	str	r0, [r7, #28]
        break;
 800342c:	e009      	b.n	8003442 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800342e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003432:	61fb      	str	r3, [r7, #28]
        break;
 8003434:	e005      	b.n	8003442 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d077      	beq.n	8003538 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005a      	lsls	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b0f      	cmp	r3, #15
 8003462:	d916      	bls.n	8003492 <UART_SetConfig+0x446>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346a:	d212      	bcs.n	8003492 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f023 030f 	bic.w	r3, r3, #15
 8003474:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	b29a      	uxth	r2, r3
 8003482:	8afb      	ldrh	r3, [r7, #22]
 8003484:	4313      	orrs	r3, r2
 8003486:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	8afa      	ldrh	r2, [r7, #22]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	e052      	b.n	8003538 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003498:	e04e      	b.n	8003538 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800349a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d827      	bhi.n	80034f2 <UART_SetConfig+0x4a6>
 80034a2:	a201      	add	r2, pc, #4	@ (adr r2, 80034a8 <UART_SetConfig+0x45c>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034f3 	.word	0x080034f3
 80034b8:	080034e3 	.word	0x080034e3
 80034bc:	080034f3 	.word	0x080034f3
 80034c0:	080034f3 	.word	0x080034f3
 80034c4:	080034f3 	.word	0x080034f3
 80034c8:	080034eb 	.word	0x080034eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7ff f8fc 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80034d0:	61f8      	str	r0, [r7, #28]
        break;
 80034d2:	e014      	b.n	80034fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff f90e 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 80034d8:	61f8      	str	r0, [r7, #28]
        break;
 80034da:	e010      	b.n	80034fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <UART_SetConfig+0x508>)
 80034de:	61fb      	str	r3, [r7, #28]
        break;
 80034e0:	e00d      	b.n	80034fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e2:	f7ff f859 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 80034e6:	61f8      	str	r0, [r7, #28]
        break;
 80034e8:	e009      	b.n	80034fe <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ee:	61fb      	str	r3, [r7, #28]
        break;
 80034f0:	e005      	b.n	80034fe <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034fc:	bf00      	nop
    }

    if (pclk != 0U)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d019      	beq.n	8003538 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	085a      	lsrs	r2, r3, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	441a      	add	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	d909      	bls.n	8003532 <UART_SetConfig+0x4e6>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003524:	d205      	bcs.n	8003532 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	e002      	b.n	8003538 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003544:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003548:	4618      	mov	r0, r3
 800354a:	3728      	adds	r7, #40	@ 0x28
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003552:	bf00      	nop
 8003554:	00f42400 	.word	0x00f42400

08003558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01a      	beq.n	800366e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003656:	d10a      	bne.n	800366e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  }
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b098      	sub	sp, #96	@ 0x60
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ac:	f7fd ff78 	bl	80015a0 <HAL_GetTick>
 80036b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d12e      	bne.n	800371e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f88c 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d021      	beq.n	800371e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e6      	bne.n	80036da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e062      	b.n	80037e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d149      	bne.n	80037c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f856 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d03c      	beq.n	80037c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	623b      	str	r3, [r7, #32]
   return(result);
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003764:	633b      	str	r3, [r7, #48]	@ 0x30
 8003766:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800376a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e6      	bne.n	8003746 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	60fb      	str	r3, [r7, #12]
   return(result);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003798:	61fa      	str	r2, [r7, #28]
 800379a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	69b9      	ldr	r1, [r7, #24]
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	617b      	str	r3, [r7, #20]
   return(result);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e011      	b.n	80037e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3758      	adds	r7, #88	@ 0x58
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fc:	e04f      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d04b      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fd fecb 	bl	80015a0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <UART_WaitOnFlagUntilTimeout+0x30>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e04e      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d037      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b80      	cmp	r3, #128	@ 0x80
 8003832:	d034      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d031      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d110      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2208      	movs	r2, #8
 800384e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f838 	bl	80038c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2208      	movs	r2, #8
 800385a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e029      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003878:	d111      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f81e 	bl	80038c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d0a0      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b095      	sub	sp, #84	@ 0x54
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e6      	bne.n	80038ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3308      	adds	r3, #8
 8003906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e5      	bne.n	8003900 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003938:	2b01      	cmp	r3, #1
 800393a:	d118      	bne.n	800396e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	60bb      	str	r3, [r7, #8]
   return(result);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 0310 	bic.w	r3, r3, #16
 8003950:	647b      	str	r3, [r7, #68]	@ 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	613b      	str	r3, [r7, #16]
   return(result);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e6      	bne.n	800393c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003982:	bf00      	nop
 8003984:	3754      	adds	r7, #84	@ 0x54
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <arm_max_f32>:
 8003990:	f101 3cff 	add.w	ip, r1, #4294967295
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	4607      	mov	r7, r0
 8003998:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800399c:	ecf7 7a01 	vldmia	r7!, {s15}
 80039a0:	d060      	beq.n	8003a64 <arm_max_f32+0xd4>
 80039a2:	2400      	movs	r4, #0
 80039a4:	3014      	adds	r0, #20
 80039a6:	4625      	mov	r5, r4
 80039a8:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80039ac:	ed10 7a04 	vldr	s14, [r0, #-16]
 80039b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b8:	bf48      	it	mi
 80039ba:	eef0 7a47 	vmovmi.f32	s15, s14
 80039be:	ed10 7a03 	vldr	s14, [r0, #-12]
 80039c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c6:	bf48      	it	mi
 80039c8:	1c65      	addmi	r5, r4, #1
 80039ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ce:	bf48      	it	mi
 80039d0:	eef0 7a47 	vmovmi.f32	s15, s14
 80039d4:	ed10 7a02 	vldr	s14, [r0, #-8]
 80039d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039dc:	bf48      	it	mi
 80039de:	1ca5      	addmi	r5, r4, #2
 80039e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e4:	bf48      	it	mi
 80039e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80039ea:	ed10 7a01 	vldr	s14, [r0, #-4]
 80039ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f2:	bf48      	it	mi
 80039f4:	1ce5      	addmi	r5, r4, #3
 80039f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fa:	f104 0404 	add.w	r4, r4, #4
 80039fe:	bf44      	itt	mi
 8003a00:	eef0 7a47 	vmovmi.f32	s15, s14
 8003a04:	4625      	movmi	r5, r4
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	f100 0010 	add.w	r0, r0, #16
 8003a0c:	d1ce      	bne.n	80039ac <arm_max_f32+0x1c>
 8003a0e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8003a12:	f01c 0003 	ands.w	r0, ip, #3
 8003a16:	d021      	beq.n	8003a5c <arm_max_f32+0xcc>
 8003a18:	ed97 7a00 	vldr	s14, [r7]
 8003a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	bfc4      	itt	gt
 8003a26:	eef0 7a47 	vmovgt.f32	s15, s14
 8003a2a:	1a0d      	subgt	r5, r1, r0
 8003a2c:	3801      	subs	r0, #1
 8003a2e:	d015      	beq.n	8003a5c <arm_max_f32+0xcc>
 8003a30:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	bf44      	itt	mi
 8003a3e:	eef0 7a47 	vmovmi.f32	s15, s14
 8003a42:	1a0d      	submi	r5, r1, r0
 8003a44:	2801      	cmp	r0, #1
 8003a46:	d009      	beq.n	8003a5c <arm_max_f32+0xcc>
 8003a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	bfc4      	itt	gt
 8003a56:	eef0 7a47 	vmovgt.f32	s15, s14
 8003a5a:	4665      	movgt	r5, ip
 8003a5c:	edc2 7a00 	vstr	s15, [r2]
 8003a60:	601d      	str	r5, [r3, #0]
 8003a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a64:	4675      	mov	r5, lr
 8003a66:	e7d4      	b.n	8003a12 <arm_max_f32+0x82>

08003a68 <arm_cfft_radix8by2_f32>:
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	ed2d 8b08 	vpush	{d8-d11}
 8003a70:	4607      	mov	r7, r0
 8003a72:	4608      	mov	r0, r1
 8003a74:	f8b7 c000 	ldrh.w	ip, [r7]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8003a7e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003a86:	f000 80b0 	beq.w	8003bea <arm_cfft_radix8by2_f32+0x182>
 8003a8a:	008c      	lsls	r4, r1, #2
 8003a8c:	3410      	adds	r4, #16
 8003a8e:	f100 0310 	add.w	r3, r0, #16
 8003a92:	1906      	adds	r6, r0, r4
 8003a94:	3210      	adds	r2, #16
 8003a96:	4444      	add	r4, r8
 8003a98:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003a9c:	f108 0510 	add.w	r5, r8, #16
 8003aa0:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003aa4:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003aa8:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003aac:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003ab0:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003ab4:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003ab8:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003abc:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003ac0:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003ac4:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003ac8:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003acc:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003ad0:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003ad4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003ad8:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003adc:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003ae0:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003ae4:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003ae8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003aec:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003af0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003af4:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003af8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003afc:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003b00:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003b04:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003b08:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003b0c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003b10:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003b14:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003b18:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003b1c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003b20:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003b24:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003b28:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003b2c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003b30:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003b34:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003b38:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003b3c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003b40:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003b44:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003b48:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003b4c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003b50:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003b54:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003b58:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003b5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003b60:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003b64:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003b68:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003b6c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003b70:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003b74:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003b78:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003b7c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003b80:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003b84:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003b88:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003b8c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003b90:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003b94:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003b98:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003b9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003ba0:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003ba4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003ba8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003bac:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003bb0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003bb4:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003bb8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003bbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	4563      	cmp	r3, ip
 8003bc4:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003bc8:	f106 0610 	add.w	r6, r6, #16
 8003bcc:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003bd0:	f102 0210 	add.w	r2, r2, #16
 8003bd4:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003bd8:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003bdc:	f105 0510 	add.w	r5, r5, #16
 8003be0:	f104 0410 	add.w	r4, r4, #16
 8003be4:	f47f af5c 	bne.w	8003aa0 <arm_cfft_radix8by2_f32+0x38>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	b28c      	uxth	r4, r1
 8003bec:	4621      	mov	r1, r4
 8003bee:	2302      	movs	r3, #2
 8003bf0:	f000 fc1c 	bl	800442c <arm_radix8_butterfly_f32>
 8003bf4:	ecbd 8b08 	vpop	{d8-d11}
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	f000 bc12 	b.w	800442c <arm_radix8_butterfly_f32>

08003c08 <arm_cfft_radix8by4_f32>:
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	ed2d 8b0a 	vpush	{d8-d12}
 8003c10:	b08d      	sub	sp, #52	@ 0x34
 8003c12:	460d      	mov	r5, r1
 8003c14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003c16:	8801      	ldrh	r1, [r0, #0]
 8003c18:	6842      	ldr	r2, [r0, #4]
 8003c1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8003c1c:	0849      	lsrs	r1, r1, #1
 8003c1e:	008b      	lsls	r3, r1, #2
 8003c20:	18ee      	adds	r6, r5, r3
 8003c22:	18f0      	adds	r0, r6, r3
 8003c24:	edd0 5a00 	vldr	s11, [r0]
 8003c28:	edd5 7a00 	vldr	s15, [r5]
 8003c2c:	ed96 7a00 	vldr	s14, [r6]
 8003c30:	edd0 3a01 	vldr	s7, [r0, #4]
 8003c34:	ed96 4a01 	vldr	s8, [r6, #4]
 8003c38:	ed95 5a01 	vldr	s10, [r5, #4]
 8003c3c:	9008      	str	r0, [sp, #32]
 8003c3e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003c42:	18c7      	adds	r7, r0, r3
 8003c44:	edd7 4a00 	vldr	s9, [r7]
 8003c48:	ed97 3a01 	vldr	s6, [r7, #4]
 8003c4c:	9701      	str	r7, [sp, #4]
 8003c4e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003c52:	462c      	mov	r4, r5
 8003c54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003c58:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003c5c:	ee16 ca90 	vmov	ip, s13
 8003c60:	f844 cb08 	str.w	ip, [r4], #8
 8003c64:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003c68:	edd6 5a01 	vldr	s11, [r6, #4]
 8003c6c:	edd7 2a01 	vldr	s5, [r7, #4]
 8003c70:	9404      	str	r4, [sp, #16]
 8003c72:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003c76:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003c7a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003c7e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003c82:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003c86:	0849      	lsrs	r1, r1, #1
 8003c88:	f102 0e08 	add.w	lr, r2, #8
 8003c8c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003c90:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003c94:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c96:	ee35 4a47 	vsub.f32	s8, s10, s14
 8003c9a:	f1a1 0902 	sub.w	r9, r1, #2
 8003c9e:	f8cd e00c 	str.w	lr, [sp, #12]
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	ee13 ea90 	vmov	lr, s7
 8003ca8:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003cac:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	edc5 5a01 	vstr	s11, [r5, #4]
 8003cb6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003cba:	f841 eb08 	str.w	lr, [r1], #8
 8003cbe:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003cc2:	ee16 ea10 	vmov	lr, s12
 8003cc6:	ed86 5a01 	vstr	s10, [r6, #4]
 8003cca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003cce:	f844 eb08 	str.w	lr, [r4], #8
 8003cd2:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003cd6:	edc0 6a01 	vstr	s13, [r0, #4]
 8003cda:	9405      	str	r4, [sp, #20]
 8003cdc:	4604      	mov	r4, r0
 8003cde:	ee17 0a90 	vmov	r0, s15
 8003ce2:	9106      	str	r1, [sp, #24]
 8003ce4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003ce8:	f102 0110 	add.w	r1, r2, #16
 8003cec:	46bc      	mov	ip, r7
 8003cee:	9100      	str	r1, [sp, #0]
 8003cf0:	f847 0b08 	str.w	r0, [r7], #8
 8003cf4:	f102 0118 	add.w	r1, r2, #24
 8003cf8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8003cfc:	9102      	str	r1, [sp, #8]
 8003cfe:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003d02:	9007      	str	r0, [sp, #28]
 8003d04:	f000 8134 	beq.w	8003f70 <arm_cfft_radix8by4_f32+0x368>
 8003d08:	f102 0920 	add.w	r9, r2, #32
 8003d0c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8003d10:	9a01      	ldr	r2, [sp, #4]
 8003d12:	f8dd a000 	ldr.w	sl, [sp]
 8003d16:	3b0c      	subs	r3, #12
 8003d18:	4683      	mov	fp, r0
 8003d1a:	4463      	add	r3, ip
 8003d1c:	f105 0e10 	add.w	lr, r5, #16
 8003d20:	f1a4 010c 	sub.w	r1, r4, #12
 8003d24:	f104 0510 	add.w	r5, r4, #16
 8003d28:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003d2c:	f1a2 040c 	sub.w	r4, r2, #12
 8003d30:	f106 0010 	add.w	r0, r6, #16
 8003d34:	3210      	adds	r2, #16
 8003d36:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003d3a:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003d3e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003d42:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003d46:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003d4a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003d4e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003d52:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003d56:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003d5a:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003d5e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003d62:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003d66:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003d6a:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003d6e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003d72:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003d76:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003d7a:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003d7e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003d82:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003d86:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003d8a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003d8e:	ed94 7a02 	vldr	s14, [r4, #8]
 8003d92:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003d96:	ed91 ba02 	vldr	s22, [r1, #8]
 8003d9a:	edd3 9a02 	vldr	s19, [r3, #8]
 8003d9e:	edd4 2a01 	vldr	s5, [r4, #4]
 8003da2:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003da6:	ed93 5a01 	vldr	s10, [r3, #4]
 8003daa:	edd1 0a01 	vldr	s1, [r1, #4]
 8003dae:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003db2:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003db6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003dba:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003dbe:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003dc2:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003dc6:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003dca:	ed91 7a01 	vldr	s14, [r1, #4]
 8003dce:	edd3 8a01 	vldr	s17, [r3, #4]
 8003dd2:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003dd6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003dda:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003dde:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003de2:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003de6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8003dea:	ed1a aa02 	vldr	s20, [sl, #-8]
 8003dee:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003df2:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003df6:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003dfa:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003dfe:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003e02:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003e06:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003e0a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003e0e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003e12:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003e16:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003e1a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003e1e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003e22:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003e26:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003e2a:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003e2e:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003e32:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003e36:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003e3a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003e3e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8003e42:	ed40 3a01 	vstr	s7, [r0, #-4]
 8003e46:	edc1 8a01 	vstr	s17, [r1, #4]
 8003e4a:	ed81 aa02 	vstr	s20, [r1, #8]
 8003e4e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8003e52:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003e56:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003e5a:	ed59 6a03 	vldr	s13, [r9, #-12]
 8003e5e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003e62:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003e66:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003e6a:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003e6e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003e72:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003e76:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003e7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e7e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003e82:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003e86:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003e8a:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003e8e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003e92:	ee79 3a29 	vadd.f32	s7, s18, s19
 8003e96:	ee75 6a60 	vsub.f32	s13, s10, s1
 8003e9a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8003e9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003ea2:	ed45 3a02 	vstr	s7, [r5, #-8]
 8003ea6:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003eaa:	ed84 7a01 	vstr	s14, [r4, #4]
 8003eae:	ed84 4a02 	vstr	s8, [r4, #8]
 8003eb2:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003eb6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003eba:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8003ebe:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8003ec2:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003ec6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003eca:	ee67 2a26 	vmul.f32	s5, s14, s13
 8003ece:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003ed2:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003ed6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003eda:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003ede:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003ee2:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003ee6:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003eea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003eee:	ee75 5a24 	vadd.f32	s11, s10, s9
 8003ef2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003ef6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003efa:	f1bb 0b01 	subs.w	fp, fp, #1
 8003efe:	ed42 5a02 	vstr	s11, [r2, #-8]
 8003f02:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003f06:	f10e 0e08 	add.w	lr, lr, #8
 8003f0a:	ed83 3a02 	vstr	s6, [r3, #8]
 8003f0e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f12:	f1ac 0c08 	sub.w	ip, ip, #8
 8003f16:	f10a 0a08 	add.w	sl, sl, #8
 8003f1a:	f100 0008 	add.w	r0, r0, #8
 8003f1e:	f1a1 0108 	sub.w	r1, r1, #8
 8003f22:	f109 0910 	add.w	r9, r9, #16
 8003f26:	f105 0508 	add.w	r5, r5, #8
 8003f2a:	f1a4 0408 	sub.w	r4, r4, #8
 8003f2e:	f108 0818 	add.w	r8, r8, #24
 8003f32:	f102 0208 	add.w	r2, r2, #8
 8003f36:	f1a3 0308 	sub.w	r3, r3, #8
 8003f3a:	f47f aefc 	bne.w	8003d36 <arm_cfft_radix8by4_f32+0x12e>
 8003f3e:	9907      	ldr	r1, [sp, #28]
 8003f40:	9800      	ldr	r0, [sp, #0]
 8003f42:	00cb      	lsls	r3, r1, #3
 8003f44:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003f48:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003f4c:	9100      	str	r1, [sp, #0]
 8003f4e:	9904      	ldr	r1, [sp, #16]
 8003f50:	4419      	add	r1, r3
 8003f52:	9104      	str	r1, [sp, #16]
 8003f54:	9903      	ldr	r1, [sp, #12]
 8003f56:	4419      	add	r1, r3
 8003f58:	9103      	str	r1, [sp, #12]
 8003f5a:	9906      	ldr	r1, [sp, #24]
 8003f5c:	4419      	add	r1, r3
 8003f5e:	9106      	str	r1, [sp, #24]
 8003f60:	9905      	ldr	r1, [sp, #20]
 8003f62:	441f      	add	r7, r3
 8003f64:	4419      	add	r1, r3
 8003f66:	9b02      	ldr	r3, [sp, #8]
 8003f68:	9105      	str	r1, [sp, #20]
 8003f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	9904      	ldr	r1, [sp, #16]
 8003f72:	9805      	ldr	r0, [sp, #20]
 8003f74:	ed91 4a00 	vldr	s8, [r1]
 8003f78:	edd0 6a00 	vldr	s13, [r0]
 8003f7c:	9b06      	ldr	r3, [sp, #24]
 8003f7e:	ed97 3a00 	vldr	s6, [r7]
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	edd0 4a01 	vldr	s9, [r0, #4]
 8003f8a:	edd1 3a01 	vldr	s7, [r1, #4]
 8003f8e:	ed97 2a01 	vldr	s4, [r7, #4]
 8003f92:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f96:	9a03      	ldr	r2, [sp, #12]
 8003f98:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8003f9c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8003fa0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8003fa4:	ee37 5a86 	vadd.f32	s10, s15, s12
 8003fa8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003fac:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003fb0:	ee74 6a66 	vsub.f32	s13, s8, s13
 8003fb4:	ed81 5a00 	vstr	s10, [r1]
 8003fb8:	ed93 5a01 	vldr	s10, [r3, #4]
 8003fbc:	edd7 4a01 	vldr	s9, [r7, #4]
 8003fc0:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003fc4:	ee37 4a26 	vadd.f32	s8, s14, s13
 8003fc8:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003fcc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8003fd0:	ed81 5a01 	vstr	s10, [r1, #4]
 8003fd4:	edd2 1a00 	vldr	s3, [r2]
 8003fd8:	edd2 2a01 	vldr	s5, [r2, #4]
 8003fdc:	ee34 5a83 	vadd.f32	s10, s9, s6
 8003fe0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003fe4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003fe8:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003fec:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003ff0:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003ff4:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003ff8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003ffc:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004000:	edc3 2a00 	vstr	s5, [r3]
 8004004:	ed83 5a01 	vstr	s10, [r3, #4]
 8004008:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800400c:	9b00      	ldr	r3, [sp, #0]
 800400e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004012:	ed93 4a01 	vldr	s8, [r3, #4]
 8004016:	ed93 5a00 	vldr	s10, [r3]
 800401a:	9b02      	ldr	r3, [sp, #8]
 800401c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004020:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004024:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004028:	ee26 6a04 	vmul.f32	s12, s12, s8
 800402c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004030:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004034:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004038:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800403c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004040:	ed80 6a01 	vstr	s12, [r0, #4]
 8004044:	edc0 5a00 	vstr	s11, [r0]
 8004048:	edd3 5a01 	vldr	s11, [r3, #4]
 800404c:	edd3 6a00 	vldr	s13, [r3]
 8004050:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004054:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8004058:	ee27 6a26 	vmul.f32	s12, s14, s13
 800405c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004060:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004064:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004068:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800406c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004070:	ed87 7a01 	vstr	s14, [r7, #4]
 8004074:	edc7 7a00 	vstr	s15, [r7]
 8004078:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800407c:	4621      	mov	r1, r4
 800407e:	686a      	ldr	r2, [r5, #4]
 8004080:	2304      	movs	r3, #4
 8004082:	f000 f9d3 	bl	800442c <arm_radix8_butterfly_f32>
 8004086:	4630      	mov	r0, r6
 8004088:	4621      	mov	r1, r4
 800408a:	686a      	ldr	r2, [r5, #4]
 800408c:	2304      	movs	r3, #4
 800408e:	f000 f9cd 	bl	800442c <arm_radix8_butterfly_f32>
 8004092:	9808      	ldr	r0, [sp, #32]
 8004094:	686a      	ldr	r2, [r5, #4]
 8004096:	4621      	mov	r1, r4
 8004098:	2304      	movs	r3, #4
 800409a:	f000 f9c7 	bl	800442c <arm_radix8_butterfly_f32>
 800409e:	686a      	ldr	r2, [r5, #4]
 80040a0:	9801      	ldr	r0, [sp, #4]
 80040a2:	4621      	mov	r1, r4
 80040a4:	2304      	movs	r3, #4
 80040a6:	b00d      	add	sp, #52	@ 0x34
 80040a8:	ecbd 8b0a 	vpop	{d8-d12}
 80040ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	f000 b9bc 	b.w	800442c <arm_radix8_butterfly_f32>

080040b4 <arm_cfft_f32>:
 80040b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b8:	2a01      	cmp	r2, #1
 80040ba:	4606      	mov	r6, r0
 80040bc:	4617      	mov	r7, r2
 80040be:	460c      	mov	r4, r1
 80040c0:	4698      	mov	r8, r3
 80040c2:	8805      	ldrh	r5, [r0, #0]
 80040c4:	d056      	beq.n	8004174 <arm_cfft_f32+0xc0>
 80040c6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80040ca:	d063      	beq.n	8004194 <arm_cfft_f32+0xe0>
 80040cc:	d916      	bls.n	80040fc <arm_cfft_f32+0x48>
 80040ce:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80040d2:	d01a      	beq.n	800410a <arm_cfft_f32+0x56>
 80040d4:	d947      	bls.n	8004166 <arm_cfft_f32+0xb2>
 80040d6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80040da:	d05b      	beq.n	8004194 <arm_cfft_f32+0xe0>
 80040dc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80040e0:	d105      	bne.n	80040ee <arm_cfft_f32+0x3a>
 80040e2:	2301      	movs	r3, #1
 80040e4:	6872      	ldr	r2, [r6, #4]
 80040e6:	4629      	mov	r1, r5
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 f99f 	bl	800442c <arm_radix8_butterfly_f32>
 80040ee:	f1b8 0f00 	cmp.w	r8, #0
 80040f2:	d111      	bne.n	8004118 <arm_cfft_f32+0x64>
 80040f4:	2f01      	cmp	r7, #1
 80040f6:	d016      	beq.n	8004126 <arm_cfft_f32+0x72>
 80040f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fc:	2d20      	cmp	r5, #32
 80040fe:	d049      	beq.n	8004194 <arm_cfft_f32+0xe0>
 8004100:	d935      	bls.n	800416e <arm_cfft_f32+0xba>
 8004102:	2d40      	cmp	r5, #64	@ 0x40
 8004104:	d0ed      	beq.n	80040e2 <arm_cfft_f32+0x2e>
 8004106:	2d80      	cmp	r5, #128	@ 0x80
 8004108:	d1f1      	bne.n	80040ee <arm_cfft_f32+0x3a>
 800410a:	4621      	mov	r1, r4
 800410c:	4630      	mov	r0, r6
 800410e:	f7ff fcab 	bl	8003a68 <arm_cfft_radix8by2_f32>
 8004112:	f1b8 0f00 	cmp.w	r8, #0
 8004116:	d0ed      	beq.n	80040f4 <arm_cfft_f32+0x40>
 8004118:	68b2      	ldr	r2, [r6, #8]
 800411a:	89b1      	ldrh	r1, [r6, #12]
 800411c:	4620      	mov	r0, r4
 800411e:	f000 f841 	bl	80041a4 <arm_bitreversal_32>
 8004122:	2f01      	cmp	r7, #1
 8004124:	d1e8      	bne.n	80040f8 <arm_cfft_f32+0x44>
 8004126:	ee07 5a90 	vmov	s15, r5
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004132:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004136:	2d00      	cmp	r5, #0
 8004138:	d0de      	beq.n	80040f8 <arm_cfft_f32+0x44>
 800413a:	f104 0108 	add.w	r1, r4, #8
 800413e:	2300      	movs	r3, #0
 8004140:	3301      	adds	r3, #1
 8004142:	429d      	cmp	r5, r3
 8004144:	f101 0108 	add.w	r1, r1, #8
 8004148:	ed11 7a04 	vldr	s14, [r1, #-16]
 800414c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004150:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004154:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004158:	ed01 7a04 	vstr	s14, [r1, #-16]
 800415c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004160:	d1ee      	bne.n	8004140 <arm_cfft_f32+0x8c>
 8004162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004166:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800416a:	d0ba      	beq.n	80040e2 <arm_cfft_f32+0x2e>
 800416c:	e7bf      	b.n	80040ee <arm_cfft_f32+0x3a>
 800416e:	2d10      	cmp	r5, #16
 8004170:	d0cb      	beq.n	800410a <arm_cfft_f32+0x56>
 8004172:	e7bc      	b.n	80040ee <arm_cfft_f32+0x3a>
 8004174:	b19d      	cbz	r5, 800419e <arm_cfft_f32+0xea>
 8004176:	f101 030c 	add.w	r3, r1, #12
 800417a:	2200      	movs	r2, #0
 800417c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004180:	3201      	adds	r2, #1
 8004182:	eef1 7a67 	vneg.f32	s15, s15
 8004186:	4295      	cmp	r5, r2
 8004188:	ed43 7a02 	vstr	s15, [r3, #-8]
 800418c:	f103 0308 	add.w	r3, r3, #8
 8004190:	d1f4      	bne.n	800417c <arm_cfft_f32+0xc8>
 8004192:	e798      	b.n	80040c6 <arm_cfft_f32+0x12>
 8004194:	4621      	mov	r1, r4
 8004196:	4630      	mov	r0, r6
 8004198:	f7ff fd36 	bl	8003c08 <arm_cfft_radix8by4_f32>
 800419c:	e7a7      	b.n	80040ee <arm_cfft_f32+0x3a>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0aa      	beq.n	80040f8 <arm_cfft_f32+0x44>
 80041a2:	e7b9      	b.n	8004118 <arm_cfft_f32+0x64>

080041a4 <arm_bitreversal_32>:
 80041a4:	b1e9      	cbz	r1, 80041e2 <arm_bitreversal_32+0x3e>
 80041a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a8:	2500      	movs	r5, #0
 80041aa:	f102 0e02 	add.w	lr, r2, #2
 80041ae:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80041b2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80041b6:	08a4      	lsrs	r4, r4, #2
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80041be:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80041c2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80041c6:	00a6      	lsls	r6, r4, #2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80041ce:	3304      	adds	r3, #4
 80041d0:	1d34      	adds	r4, r6, #4
 80041d2:	3502      	adds	r5, #2
 80041d4:	58c6      	ldr	r6, [r0, r3]
 80041d6:	5907      	ldr	r7, [r0, r4]
 80041d8:	50c7      	str	r7, [r0, r3]
 80041da:	428d      	cmp	r5, r1
 80041dc:	5106      	str	r6, [r0, r4]
 80041de:	d3e6      	bcc.n	80041ae <arm_bitreversal_32+0xa>
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e2:	4770      	bx	lr

080041e4 <arm_cmplx_mag_f32>:
 80041e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e8:	ed2d 8b02 	vpush	{d8}
 80041ec:	0897      	lsrs	r7, r2, #2
 80041ee:	b084      	sub	sp, #16
 80041f0:	d077      	beq.n	80042e2 <arm_cmplx_mag_f32+0xfe>
 80041f2:	f04f 0800 	mov.w	r8, #0
 80041f6:	f100 0420 	add.w	r4, r0, #32
 80041fa:	f101 0510 	add.w	r5, r1, #16
 80041fe:	463e      	mov	r6, r7
 8004200:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8004204:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8004208:	ee20 0a00 	vmul.f32	s0, s0, s0
 800420c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004210:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004214:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	f2c0 80c5 	blt.w	80043aa <arm_cmplx_mag_f32+0x1c6>
 8004220:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800422c:	f100 80cb 	bmi.w	80043c6 <arm_cmplx_mag_f32+0x1e2>
 8004230:	ed05 8a04 	vstr	s16, [r5, #-16]
 8004234:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8004238:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800423c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004240:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004244:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004248:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	f2c0 80a8 	blt.w	80043a4 <arm_cmplx_mag_f32+0x1c0>
 8004254:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004260:	f100 80a8 	bmi.w	80043b4 <arm_cmplx_mag_f32+0x1d0>
 8004264:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004268:	ed14 0a04 	vldr	s0, [r4, #-16]
 800426c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004270:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004274:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004278:	ee30 0a27 	vadd.f32	s0, s0, s15
 800427c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004284:	f2c0 808b 	blt.w	800439e <arm_cmplx_mag_f32+0x1ba>
 8004288:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004294:	f100 80a9 	bmi.w	80043ea <arm_cmplx_mag_f32+0x206>
 8004298:	ed05 8a02 	vstr	s16, [r5, #-8]
 800429c:	ed14 0a02 	vldr	s0, [r4, #-8]
 80042a0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80042a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80042a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80042b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	db6e      	blt.n	8004398 <arm_cmplx_mag_f32+0x1b4>
 80042ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80042be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80042c6:	f100 8087 	bmi.w	80043d8 <arm_cmplx_mag_f32+0x1f4>
 80042ca:	ed05 8a01 	vstr	s16, [r5, #-4]
 80042ce:	3e01      	subs	r6, #1
 80042d0:	f104 0420 	add.w	r4, r4, #32
 80042d4:	f105 0510 	add.w	r5, r5, #16
 80042d8:	d192      	bne.n	8004200 <arm_cmplx_mag_f32+0x1c>
 80042da:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80042de:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80042e2:	f012 0203 	ands.w	r2, r2, #3
 80042e6:	d052      	beq.n	800438e <arm_cmplx_mag_f32+0x1aa>
 80042e8:	ed90 0a00 	vldr	s0, [r0]
 80042ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80042f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80042f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042f8:	2300      	movs	r3, #0
 80042fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 80042fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004306:	bfb8      	it	lt
 8004308:	600b      	strlt	r3, [r1, #0]
 800430a:	db08      	blt.n	800431e <arm_cmplx_mag_f32+0x13a>
 800430c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004318:	d479      	bmi.n	800440e <arm_cmplx_mag_f32+0x22a>
 800431a:	ed81 8a00 	vstr	s16, [r1]
 800431e:	3a01      	subs	r2, #1
 8004320:	d035      	beq.n	800438e <arm_cmplx_mag_f32+0x1aa>
 8004322:	ed90 0a02 	vldr	s0, [r0, #8]
 8004326:	edd0 7a03 	vldr	s15, [r0, #12]
 800432a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800432e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004332:	2300      	movs	r3, #0
 8004334:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004338:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	bfb8      	it	lt
 8004342:	604b      	strlt	r3, [r1, #4]
 8004344:	db08      	blt.n	8004358 <arm_cmplx_mag_f32+0x174>
 8004346:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004352:	d453      	bmi.n	80043fc <arm_cmplx_mag_f32+0x218>
 8004354:	ed81 8a01 	vstr	s16, [r1, #4]
 8004358:	2a01      	cmp	r2, #1
 800435a:	d018      	beq.n	800438e <arm_cmplx_mag_f32+0x1aa>
 800435c:	ed90 0a04 	vldr	s0, [r0, #16]
 8004360:	edd0 7a05 	vldr	s15, [r0, #20]
 8004364:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004368:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800436c:	2300      	movs	r3, #0
 800436e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004372:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	db19      	blt.n	80043b0 <arm_cmplx_mag_f32+0x1cc>
 800437c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004384:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004388:	d44a      	bmi.n	8004420 <arm_cmplx_mag_f32+0x23c>
 800438a:	ed81 8a02 	vstr	s16, [r1, #8]
 800438e:	b004      	add	sp, #16
 8004390:	ecbd 8b02 	vpop	{d8}
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	f845 8c04 	str.w	r8, [r5, #-4]
 800439c:	e797      	b.n	80042ce <arm_cmplx_mag_f32+0xea>
 800439e:	f845 8c08 	str.w	r8, [r5, #-8]
 80043a2:	e77b      	b.n	800429c <arm_cmplx_mag_f32+0xb8>
 80043a4:	f845 8c0c 	str.w	r8, [r5, #-12]
 80043a8:	e75e      	b.n	8004268 <arm_cmplx_mag_f32+0x84>
 80043aa:	f845 8c10 	str.w	r8, [r5, #-16]
 80043ae:	e741      	b.n	8004234 <arm_cmplx_mag_f32+0x50>
 80043b0:	608b      	str	r3, [r1, #8]
 80043b2:	e7ec      	b.n	800438e <arm_cmplx_mag_f32+0x1aa>
 80043b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043b8:	9001      	str	r0, [sp, #4]
 80043ba:	f002 ff8b 	bl	80072d4 <sqrtf>
 80043be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043c2:	9801      	ldr	r0, [sp, #4]
 80043c4:	e74e      	b.n	8004264 <arm_cmplx_mag_f32+0x80>
 80043c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043ca:	9001      	str	r0, [sp, #4]
 80043cc:	f002 ff82 	bl	80072d4 <sqrtf>
 80043d0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043d4:	9801      	ldr	r0, [sp, #4]
 80043d6:	e72b      	b.n	8004230 <arm_cmplx_mag_f32+0x4c>
 80043d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043dc:	9001      	str	r0, [sp, #4]
 80043de:	f002 ff79 	bl	80072d4 <sqrtf>
 80043e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043e6:	9801      	ldr	r0, [sp, #4]
 80043e8:	e76f      	b.n	80042ca <arm_cmplx_mag_f32+0xe6>
 80043ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80043ee:	9001      	str	r0, [sp, #4]
 80043f0:	f002 ff70 	bl	80072d4 <sqrtf>
 80043f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80043f8:	9801      	ldr	r0, [sp, #4]
 80043fa:	e74d      	b.n	8004298 <arm_cmplx_mag_f32+0xb4>
 80043fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004400:	9201      	str	r2, [sp, #4]
 8004402:	f002 ff67 	bl	80072d4 <sqrtf>
 8004406:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800440a:	9903      	ldr	r1, [sp, #12]
 800440c:	e7a2      	b.n	8004354 <arm_cmplx_mag_f32+0x170>
 800440e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004412:	9201      	str	r2, [sp, #4]
 8004414:	f002 ff5e 	bl	80072d4 <sqrtf>
 8004418:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800441c:	9903      	ldr	r1, [sp, #12]
 800441e:	e77c      	b.n	800431a <arm_cmplx_mag_f32+0x136>
 8004420:	9101      	str	r1, [sp, #4]
 8004422:	f002 ff57 	bl	80072d4 <sqrtf>
 8004426:	9901      	ldr	r1, [sp, #4]
 8004428:	e7af      	b.n	800438a <arm_cmplx_mag_f32+0x1a6>
 800442a:	bf00      	nop

0800442c <arm_radix8_butterfly_f32>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	ed2d 8b10 	vpush	{d8-d15}
 8004434:	b095      	sub	sp, #84	@ 0x54
 8004436:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800443a:	4603      	mov	r3, r0
 800443c:	3304      	adds	r3, #4
 800443e:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8004724 <arm_radix8_butterfly_f32+0x2f8>
 8004442:	9012      	str	r0, [sp, #72]	@ 0x48
 8004444:	468b      	mov	fp, r1
 8004446:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004448:	4689      	mov	r9, r1
 800444a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800444e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004450:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004452:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8004456:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800445a:	eb03 0508 	add.w	r5, r3, r8
 800445e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8004462:	eb05 040e 	add.w	r4, r5, lr
 8004466:	0137      	lsls	r7, r6, #4
 8004468:	eba6 030a 	sub.w	r3, r6, sl
 800446c:	eb04 000e 	add.w	r0, r4, lr
 8004470:	44b2      	add	sl, r6
 8004472:	1d3a      	adds	r2, r7, #4
 8004474:	9702      	str	r7, [sp, #8]
 8004476:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800447a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800447e:	ebae 0c06 	sub.w	ip, lr, r6
 8004482:	9703      	str	r7, [sp, #12]
 8004484:	eb03 0708 	add.w	r7, r3, r8
 8004488:	9701      	str	r7, [sp, #4]
 800448a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800448e:	9706      	str	r7, [sp, #24]
 8004490:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8004492:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004496:	f10e 0104 	add.w	r1, lr, #4
 800449a:	4439      	add	r1, r7
 800449c:	443a      	add	r2, r7
 800449e:	0137      	lsls	r7, r6, #4
 80044a0:	00f6      	lsls	r6, r6, #3
 80044a2:	9704      	str	r7, [sp, #16]
 80044a4:	9605      	str	r6, [sp, #20]
 80044a6:	9f01      	ldr	r7, [sp, #4]
 80044a8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80044aa:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80044ae:	f04f 0c00 	mov.w	ip, #0
 80044b2:	edd4 6a00 	vldr	s13, [r4]
 80044b6:	edd7 1a00 	vldr	s3, [r7]
 80044ba:	ed16 aa01 	vldr	s20, [r6, #-4]
 80044be:	edd5 5a00 	vldr	s11, [r5]
 80044c2:	ed52 9a01 	vldr	s19, [r2, #-4]
 80044c6:	ed90 6a00 	vldr	s12, [r0]
 80044ca:	ed51 7a01 	vldr	s15, [r1, #-4]
 80044ce:	ed93 3a00 	vldr	s6, [r3]
 80044d2:	ee39 0a86 	vadd.f32	s0, s19, s12
 80044d6:	ee33 2a21 	vadd.f32	s4, s6, s3
 80044da:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80044de:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80044e2:	ee35 7a02 	vadd.f32	s14, s10, s4
 80044e6:	ee34 4a80 	vadd.f32	s8, s9, s0
 80044ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80044ee:	ee74 6a07 	vadd.f32	s13, s8, s14
 80044f2:	ee34 4a47 	vsub.f32	s8, s8, s14
 80044f6:	ed46 6a01 	vstr	s13, [r6, #-4]
 80044fa:	ed85 4a00 	vstr	s8, [r5]
 80044fe:	edd1 6a00 	vldr	s13, [r1]
 8004502:	ed94 9a01 	vldr	s18, [r4, #4]
 8004506:	edd3 2a01 	vldr	s5, [r3, #4]
 800450a:	edd7 8a01 	vldr	s17, [r7, #4]
 800450e:	edd6 0a00 	vldr	s1, [r6]
 8004512:	edd5 3a01 	vldr	s7, [r5, #4]
 8004516:	ed90 8a01 	vldr	s16, [r0, #4]
 800451a:	ed92 7a00 	vldr	s14, [r2]
 800451e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004522:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004526:	ee72 aae8 	vsub.f32	s21, s5, s17
 800452a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800452e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004532:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004536:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800453a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800453e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004542:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004546:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800454a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800454e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004552:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004556:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800455a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800455e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8004562:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004566:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800456a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800456e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004572:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004576:	ee33 2a20 	vadd.f32	s4, s6, s1
 800457a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800457e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8004582:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004586:	ee77 0a01 	vadd.f32	s1, s14, s2
 800458a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800458e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8004592:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004596:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800459a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800459e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80045a2:	ee32 8a00 	vadd.f32	s16, s4, s0
 80045a6:	ee33 1a45 	vsub.f32	s2, s6, s10
 80045aa:	ee32 2a40 	vsub.f32	s4, s4, s0
 80045ae:	ee35 5a03 	vadd.f32	s10, s10, s6
 80045b2:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80045b6:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80045ba:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80045be:	ee34 6a67 	vsub.f32	s12, s8, s15
 80045c2:	ee75 4a87 	vadd.f32	s9, s11, s14
 80045c6:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80045ca:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80045ce:	ee77 7a84 	vadd.f32	s15, s15, s8
 80045d2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80045d6:	44dc      	add	ip, fp
 80045d8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80045dc:	45e1      	cmp	r9, ip
 80045de:	ed86 8a00 	vstr	s16, [r6]
 80045e2:	ed85 2a01 	vstr	s4, [r5, #4]
 80045e6:	4456      	add	r6, sl
 80045e8:	ed02 0a01 	vstr	s0, [r2, #-4]
 80045ec:	4455      	add	r5, sl
 80045ee:	edc0 6a00 	vstr	s13, [r0]
 80045f2:	ed82 1a00 	vstr	s2, [r2]
 80045f6:	ed80 5a01 	vstr	s10, [r0, #4]
 80045fa:	4452      	add	r2, sl
 80045fc:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004600:	4450      	add	r0, sl
 8004602:	edc7 2a00 	vstr	s5, [r7]
 8004606:	edc4 4a00 	vstr	s9, [r4]
 800460a:	ed83 7a00 	vstr	s14, [r3]
 800460e:	edc1 5a00 	vstr	s11, [r1]
 8004612:	edc7 3a01 	vstr	s7, [r7, #4]
 8004616:	4451      	add	r1, sl
 8004618:	ed84 6a01 	vstr	s12, [r4, #4]
 800461c:	4457      	add	r7, sl
 800461e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004622:	4454      	add	r4, sl
 8004624:	4453      	add	r3, sl
 8004626:	f63f af44 	bhi.w	80044b2 <arm_radix8_butterfly_f32+0x86>
 800462a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800462c:	2b07      	cmp	r3, #7
 800462e:	f240 81b7 	bls.w	80049a0 <arm_radix8_butterfly_f32+0x574>
 8004632:	9b06      	ldr	r3, [sp, #24]
 8004634:	9903      	ldr	r1, [sp, #12]
 8004636:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004638:	9e05      	ldr	r6, [sp, #20]
 800463a:	9a04      	ldr	r2, [sp, #16]
 800463c:	f103 0c08 	add.w	ip, r3, #8
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	3108      	adds	r1, #8
 8004644:	f108 0808 	add.w	r8, r8, #8
 8004648:	1841      	adds	r1, r0, r1
 800464a:	3608      	adds	r6, #8
 800464c:	330c      	adds	r3, #12
 800464e:	4604      	mov	r4, r0
 8004650:	4444      	add	r4, r8
 8004652:	18c3      	adds	r3, r0, r3
 8004654:	9109      	str	r1, [sp, #36]	@ 0x24
 8004656:	1981      	adds	r1, r0, r6
 8004658:	f10e 0e08 	add.w	lr, lr, #8
 800465c:	3208      	adds	r2, #8
 800465e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004660:	9107      	str	r1, [sp, #28]
 8004662:	4604      	mov	r4, r0
 8004664:	4601      	mov	r1, r0
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	f100 030c 	add.w	r3, r0, #12
 800466c:	4474      	add	r4, lr
 800466e:	f04f 0801 	mov.w	r8, #1
 8004672:	1882      	adds	r2, r0, r2
 8004674:	4461      	add	r1, ip
 8004676:	9305      	str	r3, [sp, #20]
 8004678:	464b      	mov	r3, r9
 800467a:	940a      	str	r4, [sp, #40]	@ 0x28
 800467c:	46c1      	mov	r9, r8
 800467e:	9208      	str	r2, [sp, #32]
 8004680:	46d8      	mov	r8, fp
 8004682:	9106      	str	r1, [sp, #24]
 8004684:	f04f 0e00 	mov.w	lr, #0
 8004688:	469b      	mov	fp, r3
 800468a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800468c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800468e:	449e      	add	lr, r3
 8004690:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004694:	441a      	add	r2, r3
 8004696:	920e      	str	r2, [sp, #56]	@ 0x38
 8004698:	441a      	add	r2, r3
 800469a:	18d4      	adds	r4, r2, r3
 800469c:	18e5      	adds	r5, r4, r3
 800469e:	18ee      	adds	r6, r5, r3
 80046a0:	18f7      	adds	r7, r6, r3
 80046a2:	eb07 0c03 	add.w	ip, r7, r3
 80046a6:	920d      	str	r2, [sp, #52]	@ 0x34
 80046a8:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80046ac:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80046b0:	910c      	str	r1, [sp, #48]	@ 0x30
 80046b2:	4419      	add	r1, r3
 80046b4:	9103      	str	r1, [sp, #12]
 80046b6:	4419      	add	r1, r3
 80046b8:	18ca      	adds	r2, r1, r3
 80046ba:	9202      	str	r2, [sp, #8]
 80046bc:	441a      	add	r2, r3
 80046be:	18d0      	adds	r0, r2, r3
 80046c0:	ed92 ea01 	vldr	s28, [r2, #4]
 80046c4:	9a02      	ldr	r2, [sp, #8]
 80046c6:	edd4 7a00 	vldr	s15, [r4]
 80046ca:	edd2 da01 	vldr	s27, [r2, #4]
 80046ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80046d0:	ed91 da01 	vldr	s26, [r1, #4]
 80046d4:	ed92 ca01 	vldr	s24, [r2, #4]
 80046d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80046da:	9903      	ldr	r1, [sp, #12]
 80046dc:	edcd 7a03 	vstr	s15, [sp, #12]
 80046e0:	edd2 7a00 	vldr	s15, [r2]
 80046e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046e6:	edcd 7a02 	vstr	s15, [sp, #8]
 80046ea:	edd2 7a00 	vldr	s15, [r2]
 80046ee:	edd0 ea01 	vldr	s29, [r0, #4]
 80046f2:	edd1 ca01 	vldr	s25, [r1, #4]
 80046f6:	eddc ba00 	vldr	s23, [ip]
 80046fa:	edd7 aa00 	vldr	s21, [r7]
 80046fe:	ed96 aa00 	vldr	s20, [r6]
 8004702:	edd5 9a00 	vldr	s19, [r5]
 8004706:	edcd 7a01 	vstr	s15, [sp, #4]
 800470a:	4403      	add	r3, r0
 800470c:	ed93 fa01 	vldr	s30, [r3, #4]
 8004710:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8004714:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8004718:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800471c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8004720:	46cc      	mov	ip, r9
 8004722:	e001      	b.n	8004728 <arm_radix8_butterfly_f32+0x2fc>
 8004724:	3f3504f3 	.word	0x3f3504f3
 8004728:	ed91 6a00 	vldr	s12, [r1]
 800472c:	ed93 5a00 	vldr	s10, [r3]
 8004730:	edd0 fa00 	vldr	s31, [r0]
 8004734:	edd4 7a00 	vldr	s15, [r4]
 8004738:	ed95 7a00 	vldr	s14, [r5]
 800473c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004740:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004744:	ed92 2a00 	vldr	s4, [r2]
 8004748:	ed96 0a00 	vldr	s0, [r6]
 800474c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004750:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004754:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004758:	ee77 4a87 	vadd.f32	s9, s15, s14
 800475c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004760:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004764:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004768:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800476c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004770:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004774:	edd4 8a01 	vldr	s17, [r4, #4]
 8004778:	ed92 9a01 	vldr	s18, [r2, #4]
 800477c:	edd7 0a00 	vldr	s1, [r7]
 8004780:	edd1 2a01 	vldr	s5, [r1, #4]
 8004784:	ed95 7a01 	vldr	s14, [r5, #4]
 8004788:	ed93 6a01 	vldr	s12, [r3, #4]
 800478c:	edd0 5a01 	vldr	s11, [r0, #4]
 8004790:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004794:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004798:	ee39 5a62 	vsub.f32	s10, s18, s5
 800479c:	ee78 fac7 	vsub.f32	s31, s17, s14
 80047a0:	ee38 4a44 	vsub.f32	s8, s16, s8
 80047a4:	ee38 7a87 	vadd.f32	s14, s17, s14
 80047a8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80047ac:	ee79 2a22 	vadd.f32	s5, s18, s5
 80047b0:	ee32 9a27 	vadd.f32	s18, s4, s15
 80047b4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80047b8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80047bc:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80047c0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80047c4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80047c8:	ee32 1a08 	vadd.f32	s2, s4, s16
 80047cc:	ee72 fa87 	vadd.f32	s31, s5, s14
 80047d0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80047d4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80047d8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80047dc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80047e0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80047e4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80047e8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80047ec:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80047f0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80047f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80047f8:	ee74 0a22 	vadd.f32	s1, s8, s5
 80047fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004800:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004804:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004808:	ee32 4a64 	vsub.f32	s8, s4, s9
 800480c:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004810:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004814:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004818:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800481c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004820:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004824:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004828:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800482c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004830:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004834:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004838:	ee38 0a80 	vadd.f32	s0, s17, s0
 800483c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004840:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004844:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004848:	eddd 1a02 	vldr	s3, [sp, #8]
 800484c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004850:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004854:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004858:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800485c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004860:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004864:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004868:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800486c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004870:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8004874:	ee21 4a84 	vmul.f32	s8, s3, s8
 8004878:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800487c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8004880:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004884:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004888:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800488c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8004890:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004894:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8004898:	ee74 0a60 	vsub.f32	s1, s8, s1
 800489c:	ee37 7a48 	vsub.f32	s14, s14, s16
 80048a0:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80048a4:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80048a8:	ee72 1a21 	vadd.f32	s3, s4, s3
 80048ac:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80048b0:	ee38 2a89 	vadd.f32	s4, s17, s18
 80048b4:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80048b8:	ee38 8a04 	vadd.f32	s16, s16, s8
 80048bc:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80048c0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80048c4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80048c8:	eddd 5a03 	vldr	s11, [sp, #12]
 80048cc:	edc6 fa00 	vstr	s31, [r6]
 80048d0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80048d4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80048d8:	ee30 0a45 	vsub.f32	s0, s0, s10
 80048dc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80048e0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80048e4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80048e8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80048ec:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80048f0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80048f4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80048f8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80048fc:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004900:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004904:	44c4      	add	ip, r8
 8004906:	45e3      	cmp	fp, ip
 8004908:	edc3 3a00 	vstr	s7, [r3]
 800490c:	edc3 6a01 	vstr	s13, [r3, #4]
 8004910:	4456      	add	r6, sl
 8004912:	ed07 1a01 	vstr	s2, [r7, #-4]
 8004916:	edc7 0a00 	vstr	s1, [r7]
 800491a:	4453      	add	r3, sl
 800491c:	ed80 2a00 	vstr	s4, [r0]
 8004920:	edc0 2a01 	vstr	s5, [r0, #4]
 8004924:	4457      	add	r7, sl
 8004926:	edc2 1a00 	vstr	s3, [r2]
 800492a:	ed82 7a01 	vstr	s14, [r2, #4]
 800492e:	4450      	add	r0, sl
 8004930:	ed85 8a00 	vstr	s16, [r5]
 8004934:	ed85 0a01 	vstr	s0, [r5, #4]
 8004938:	4452      	add	r2, sl
 800493a:	edc1 4a00 	vstr	s9, [r1]
 800493e:	4455      	add	r5, sl
 8004940:	ed81 3a01 	vstr	s6, [r1, #4]
 8004944:	edc4 8a00 	vstr	s17, [r4]
 8004948:	ed84 6a01 	vstr	s12, [r4, #4]
 800494c:	4451      	add	r1, sl
 800494e:	4454      	add	r4, sl
 8004950:	f63f aeea 	bhi.w	8004728 <arm_radix8_butterfly_f32+0x2fc>
 8004954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004956:	3308      	adds	r3, #8
 8004958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800495a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800495c:	3308      	adds	r3, #8
 800495e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004962:	3308      	adds	r3, #8
 8004964:	9309      	str	r3, [sp, #36]	@ 0x24
 8004966:	9b08      	ldr	r3, [sp, #32]
 8004968:	3308      	adds	r3, #8
 800496a:	9308      	str	r3, [sp, #32]
 800496c:	9b07      	ldr	r3, [sp, #28]
 800496e:	3308      	adds	r3, #8
 8004970:	9307      	str	r3, [sp, #28]
 8004972:	9b06      	ldr	r3, [sp, #24]
 8004974:	3308      	adds	r3, #8
 8004976:	9306      	str	r3, [sp, #24]
 8004978:	9b05      	ldr	r3, [sp, #20]
 800497a:	3308      	adds	r3, #8
 800497c:	9305      	str	r3, [sp, #20]
 800497e:	9b04      	ldr	r3, [sp, #16]
 8004980:	3308      	adds	r3, #8
 8004982:	9304      	str	r3, [sp, #16]
 8004984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	454b      	cmp	r3, r9
 800498c:	f47f ae7d 	bne.w	800468a <arm_radix8_butterfly_f32+0x25e>
 8004990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	b29b      	uxth	r3, r3
 8004996:	46d9      	mov	r9, fp
 8004998:	9310      	str	r3, [sp, #64]	@ 0x40
 800499a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800499e:	e554      	b.n	800444a <arm_radix8_butterfly_f32+0x1e>
 80049a0:	b015      	add	sp, #84	@ 0x54
 80049a2:	ecbd 8b10 	vpop	{d8-d15}
 80049a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049aa:	bf00      	nop

080049ac <__cvt>:
 80049ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	ec57 6b10 	vmov	r6, r7, d0
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	460c      	mov	r4, r1
 80049b8:	4619      	mov	r1, r3
 80049ba:	463b      	mov	r3, r7
 80049bc:	bfbb      	ittet	lt
 80049be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80049c2:	461f      	movlt	r7, r3
 80049c4:	2300      	movge	r3, #0
 80049c6:	232d      	movlt	r3, #45	@ 0x2d
 80049c8:	700b      	strb	r3, [r1, #0]
 80049ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049d0:	4691      	mov	r9, r2
 80049d2:	f023 0820 	bic.w	r8, r3, #32
 80049d6:	bfbc      	itt	lt
 80049d8:	4632      	movlt	r2, r6
 80049da:	4616      	movlt	r6, r2
 80049dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049e0:	d005      	beq.n	80049ee <__cvt+0x42>
 80049e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049e6:	d100      	bne.n	80049ea <__cvt+0x3e>
 80049e8:	3401      	adds	r4, #1
 80049ea:	2102      	movs	r1, #2
 80049ec:	e000      	b.n	80049f0 <__cvt+0x44>
 80049ee:	2103      	movs	r1, #3
 80049f0:	ab03      	add	r3, sp, #12
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	ab02      	add	r3, sp, #8
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	ec47 6b10 	vmov	d0, r6, r7
 80049fc:	4653      	mov	r3, sl
 80049fe:	4622      	mov	r2, r4
 8004a00:	f000 fe4e 	bl	80056a0 <_dtoa_r>
 8004a04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a08:	4605      	mov	r5, r0
 8004a0a:	d119      	bne.n	8004a40 <__cvt+0x94>
 8004a0c:	f019 0f01 	tst.w	r9, #1
 8004a10:	d00e      	beq.n	8004a30 <__cvt+0x84>
 8004a12:	eb00 0904 	add.w	r9, r0, r4
 8004a16:	2200      	movs	r2, #0
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	f7fc f85b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a22:	b108      	cbz	r0, 8004a28 <__cvt+0x7c>
 8004a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a28:	2230      	movs	r2, #48	@ 0x30
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	454b      	cmp	r3, r9
 8004a2e:	d31e      	bcc.n	8004a6e <__cvt+0xc2>
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a34:	1b5b      	subs	r3, r3, r5
 8004a36:	4628      	mov	r0, r5
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	b004      	add	sp, #16
 8004a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a44:	eb00 0904 	add.w	r9, r0, r4
 8004a48:	d1e5      	bne.n	8004a16 <__cvt+0x6a>
 8004a4a:	7803      	ldrb	r3, [r0, #0]
 8004a4c:	2b30      	cmp	r3, #48	@ 0x30
 8004a4e:	d10a      	bne.n	8004a66 <__cvt+0xba>
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	4630      	mov	r0, r6
 8004a56:	4639      	mov	r1, r7
 8004a58:	f7fc f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a5c:	b918      	cbnz	r0, 8004a66 <__cvt+0xba>
 8004a5e:	f1c4 0401 	rsb	r4, r4, #1
 8004a62:	f8ca 4000 	str.w	r4, [sl]
 8004a66:	f8da 3000 	ldr.w	r3, [sl]
 8004a6a:	4499      	add	r9, r3
 8004a6c:	e7d3      	b.n	8004a16 <__cvt+0x6a>
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	9103      	str	r1, [sp, #12]
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e7d9      	b.n	8004a2a <__cvt+0x7e>

08004a76 <__exponent>:
 8004a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	bfba      	itte	lt
 8004a7c:	4249      	neglt	r1, r1
 8004a7e:	232d      	movlt	r3, #45	@ 0x2d
 8004a80:	232b      	movge	r3, #43	@ 0x2b
 8004a82:	2909      	cmp	r1, #9
 8004a84:	7002      	strb	r2, [r0, #0]
 8004a86:	7043      	strb	r3, [r0, #1]
 8004a88:	dd29      	ble.n	8004ade <__exponent+0x68>
 8004a8a:	f10d 0307 	add.w	r3, sp, #7
 8004a8e:	461d      	mov	r5, r3
 8004a90:	270a      	movs	r7, #10
 8004a92:	461a      	mov	r2, r3
 8004a94:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a98:	fb07 1416 	mls	r4, r7, r6, r1
 8004a9c:	3430      	adds	r4, #48	@ 0x30
 8004a9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	2c63      	cmp	r4, #99	@ 0x63
 8004aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aaa:	4631      	mov	r1, r6
 8004aac:	dcf1      	bgt.n	8004a92 <__exponent+0x1c>
 8004aae:	3130      	adds	r1, #48	@ 0x30
 8004ab0:	1e94      	subs	r4, r2, #2
 8004ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ab6:	1c41      	adds	r1, r0, #1
 8004ab8:	4623      	mov	r3, r4
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	d30a      	bcc.n	8004ad4 <__exponent+0x5e>
 8004abe:	f10d 0309 	add.w	r3, sp, #9
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	42ac      	cmp	r4, r5
 8004ac6:	bf88      	it	hi
 8004ac8:	2300      	movhi	r3, #0
 8004aca:	3302      	adds	r3, #2
 8004acc:	4403      	add	r3, r0
 8004ace:	1a18      	subs	r0, r3, r0
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ad8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004adc:	e7ed      	b.n	8004aba <__exponent+0x44>
 8004ade:	2330      	movs	r3, #48	@ 0x30
 8004ae0:	3130      	adds	r1, #48	@ 0x30
 8004ae2:	7083      	strb	r3, [r0, #2]
 8004ae4:	70c1      	strb	r1, [r0, #3]
 8004ae6:	1d03      	adds	r3, r0, #4
 8004ae8:	e7f1      	b.n	8004ace <__exponent+0x58>
	...

08004aec <_printf_float>:
 8004aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	b08d      	sub	sp, #52	@ 0x34
 8004af2:	460c      	mov	r4, r1
 8004af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004af8:	4616      	mov	r6, r2
 8004afa:	461f      	mov	r7, r3
 8004afc:	4605      	mov	r5, r0
 8004afe:	f000 fccd 	bl	800549c <_localeconv_r>
 8004b02:	6803      	ldr	r3, [r0, #0]
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fb fbba 	bl	8000280 <strlen>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b10:	f8d8 3000 	ldr.w	r3, [r8]
 8004b14:	9005      	str	r0, [sp, #20]
 8004b16:	3307      	adds	r3, #7
 8004b18:	f023 0307 	bic.w	r3, r3, #7
 8004b1c:	f103 0208 	add.w	r2, r3, #8
 8004b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b24:	f8d4 b000 	ldr.w	fp, [r4]
 8004b28:	f8c8 2000 	str.w	r2, [r8]
 8004b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b34:	9307      	str	r3, [sp, #28]
 8004b36:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b42:	4b9c      	ldr	r3, [pc, #624]	@ (8004db4 <_printf_float+0x2c8>)
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	f7fb fff8 	bl	8000b3c <__aeabi_dcmpun>
 8004b4c:	bb70      	cbnz	r0, 8004bac <_printf_float+0xc0>
 8004b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b52:	4b98      	ldr	r3, [pc, #608]	@ (8004db4 <_printf_float+0x2c8>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	f7fb ffd2 	bl	8000b00 <__aeabi_dcmple>
 8004b5c:	bb30      	cbnz	r0, 8004bac <_printf_float+0xc0>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2300      	movs	r3, #0
 8004b62:	4640      	mov	r0, r8
 8004b64:	4649      	mov	r1, r9
 8004b66:	f7fb ffc1 	bl	8000aec <__aeabi_dcmplt>
 8004b6a:	b110      	cbz	r0, 8004b72 <_printf_float+0x86>
 8004b6c:	232d      	movs	r3, #45	@ 0x2d
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b72:	4a91      	ldr	r2, [pc, #580]	@ (8004db8 <_printf_float+0x2cc>)
 8004b74:	4b91      	ldr	r3, [pc, #580]	@ (8004dbc <_printf_float+0x2d0>)
 8004b76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b7a:	bf94      	ite	ls
 8004b7c:	4690      	movls	r8, r2
 8004b7e:	4698      	movhi	r8, r3
 8004b80:	2303      	movs	r3, #3
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	f02b 0304 	bic.w	r3, fp, #4
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f04f 0900 	mov.w	r9, #0
 8004b8e:	9700      	str	r7, [sp, #0]
 8004b90:	4633      	mov	r3, r6
 8004b92:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b94:	4621      	mov	r1, r4
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f9d2 	bl	8004f40 <_printf_common>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	f040 808d 	bne.w	8004cbc <_printf_float+0x1d0>
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	b00d      	add	sp, #52	@ 0x34
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	4642      	mov	r2, r8
 8004bae:	464b      	mov	r3, r9
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fb ffc2 	bl	8000b3c <__aeabi_dcmpun>
 8004bb8:	b140      	cbz	r0, 8004bcc <_printf_float+0xe0>
 8004bba:	464b      	mov	r3, r9
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bfbc      	itt	lt
 8004bc0:	232d      	movlt	r3, #45	@ 0x2d
 8004bc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc0 <_printf_float+0x2d4>)
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dc4 <_printf_float+0x2d8>)
 8004bca:	e7d4      	b.n	8004b76 <_printf_float+0x8a>
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004bd2:	9206      	str	r2, [sp, #24]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	d13b      	bne.n	8004c50 <_printf_float+0x164>
 8004bd8:	2306      	movs	r3, #6
 8004bda:	6063      	str	r3, [r4, #4]
 8004bdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004be0:	2300      	movs	r3, #0
 8004be2:	6022      	str	r2, [r4, #0]
 8004be4:	9303      	str	r3, [sp, #12]
 8004be6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004be8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bec:	ab09      	add	r3, sp, #36	@ 0x24
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6861      	ldr	r1, [r4, #4]
 8004bf2:	ec49 8b10 	vmov	d0, r8, r9
 8004bf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f7ff fed6 	bl	80049ac <__cvt>
 8004c00:	9b06      	ldr	r3, [sp, #24]
 8004c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c04:	2b47      	cmp	r3, #71	@ 0x47
 8004c06:	4680      	mov	r8, r0
 8004c08:	d129      	bne.n	8004c5e <_printf_float+0x172>
 8004c0a:	1cc8      	adds	r0, r1, #3
 8004c0c:	db02      	blt.n	8004c14 <_printf_float+0x128>
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	4299      	cmp	r1, r3
 8004c12:	dd41      	ble.n	8004c98 <_printf_float+0x1ac>
 8004c14:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c18:	fa5f fa8a 	uxtb.w	sl, sl
 8004c1c:	3901      	subs	r1, #1
 8004c1e:	4652      	mov	r2, sl
 8004c20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c24:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c26:	f7ff ff26 	bl	8004a76 <__exponent>
 8004c2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c2c:	1813      	adds	r3, r2, r0
 8004c2e:	2a01      	cmp	r2, #1
 8004c30:	4681      	mov	r9, r0
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	dc02      	bgt.n	8004c3c <_printf_float+0x150>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	07d2      	lsls	r2, r2, #31
 8004c3a:	d501      	bpl.n	8004c40 <_printf_float+0x154>
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0a2      	beq.n	8004b8e <_printf_float+0xa2>
 8004c48:	232d      	movs	r3, #45	@ 0x2d
 8004c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c4e:	e79e      	b.n	8004b8e <_printf_float+0xa2>
 8004c50:	9a06      	ldr	r2, [sp, #24]
 8004c52:	2a47      	cmp	r2, #71	@ 0x47
 8004c54:	d1c2      	bne.n	8004bdc <_printf_float+0xf0>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1c0      	bne.n	8004bdc <_printf_float+0xf0>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7bd      	b.n	8004bda <_printf_float+0xee>
 8004c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c62:	d9db      	bls.n	8004c1c <_printf_float+0x130>
 8004c64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c68:	d118      	bne.n	8004c9c <_printf_float+0x1b0>
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	dd0b      	ble.n	8004c88 <_printf_float+0x19c>
 8004c70:	6121      	str	r1, [r4, #16]
 8004c72:	b913      	cbnz	r3, 8004c7a <_printf_float+0x18e>
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	07d0      	lsls	r0, r2, #31
 8004c78:	d502      	bpl.n	8004c80 <_printf_float+0x194>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	440b      	add	r3, r1
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c82:	f04f 0900 	mov.w	r9, #0
 8004c86:	e7db      	b.n	8004c40 <_printf_float+0x154>
 8004c88:	b913      	cbnz	r3, 8004c90 <_printf_float+0x1a4>
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	07d2      	lsls	r2, r2, #31
 8004c8e:	d501      	bpl.n	8004c94 <_printf_float+0x1a8>
 8004c90:	3302      	adds	r3, #2
 8004c92:	e7f4      	b.n	8004c7e <_printf_float+0x192>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e7f2      	b.n	8004c7e <_printf_float+0x192>
 8004c98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	db05      	blt.n	8004cae <_printf_float+0x1c2>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	6121      	str	r1, [r4, #16]
 8004ca6:	07d8      	lsls	r0, r3, #31
 8004ca8:	d5ea      	bpl.n	8004c80 <_printf_float+0x194>
 8004caa:	1c4b      	adds	r3, r1, #1
 8004cac:	e7e7      	b.n	8004c7e <_printf_float+0x192>
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	bfd4      	ite	le
 8004cb2:	f1c1 0202 	rsble	r2, r1, #2
 8004cb6:	2201      	movgt	r2, #1
 8004cb8:	4413      	add	r3, r2
 8004cba:	e7e0      	b.n	8004c7e <_printf_float+0x192>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	055a      	lsls	r2, r3, #21
 8004cc0:	d407      	bmi.n	8004cd2 <_printf_float+0x1e6>
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d12b      	bne.n	8004d28 <_printf_float+0x23c>
 8004cd0:	e767      	b.n	8004ba2 <_printf_float+0xb6>
 8004cd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cd6:	f240 80dd 	bls.w	8004e94 <_printf_float+0x3a8>
 8004cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f7fb fef9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d033      	beq.n	8004d52 <_printf_float+0x266>
 8004cea:	4a37      	ldr	r2, [pc, #220]	@ (8004dc8 <_printf_float+0x2dc>)
 8004cec:	2301      	movs	r3, #1
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	47b8      	blx	r7
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	f43f af54 	beq.w	8004ba2 <_printf_float+0xb6>
 8004cfa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004cfe:	4543      	cmp	r3, r8
 8004d00:	db02      	blt.n	8004d08 <_printf_float+0x21c>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	07d8      	lsls	r0, r3, #31
 8004d06:	d50f      	bpl.n	8004d28 <_printf_float+0x23c>
 8004d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f af45 	beq.w	8004ba2 <_printf_float+0xb6>
 8004d18:	f04f 0900 	mov.w	r9, #0
 8004d1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d20:	f104 0a1a 	add.w	sl, r4, #26
 8004d24:	45c8      	cmp	r8, r9
 8004d26:	dc09      	bgt.n	8004d3c <_printf_float+0x250>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	079b      	lsls	r3, r3, #30
 8004d2c:	f100 8103 	bmi.w	8004f36 <_printf_float+0x44a>
 8004d30:	68e0      	ldr	r0, [r4, #12]
 8004d32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d34:	4298      	cmp	r0, r3
 8004d36:	bfb8      	it	lt
 8004d38:	4618      	movlt	r0, r3
 8004d3a:	e734      	b.n	8004ba6 <_printf_float+0xba>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4652      	mov	r2, sl
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af2b 	beq.w	8004ba2 <_printf_float+0xb6>
 8004d4c:	f109 0901 	add.w	r9, r9, #1
 8004d50:	e7e8      	b.n	8004d24 <_printf_float+0x238>
 8004d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dc39      	bgt.n	8004dcc <_printf_float+0x2e0>
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <_printf_float+0x2dc>)
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f af1d 	beq.w	8004ba2 <_printf_float+0xb6>
 8004d68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d6c:	ea59 0303 	orrs.w	r3, r9, r3
 8004d70:	d102      	bne.n	8004d78 <_printf_float+0x28c>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	07d9      	lsls	r1, r3, #31
 8004d76:	d5d7      	bpl.n	8004d28 <_printf_float+0x23c>
 8004d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f af0d 	beq.w	8004ba2 <_printf_float+0xb6>
 8004d88:	f04f 0a00 	mov.w	sl, #0
 8004d8c:	f104 0b1a 	add.w	fp, r4, #26
 8004d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d92:	425b      	negs	r3, r3
 8004d94:	4553      	cmp	r3, sl
 8004d96:	dc01      	bgt.n	8004d9c <_printf_float+0x2b0>
 8004d98:	464b      	mov	r3, r9
 8004d9a:	e793      	b.n	8004cc4 <_printf_float+0x1d8>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	465a      	mov	r2, fp
 8004da0:	4631      	mov	r1, r6
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f aefb 	beq.w	8004ba2 <_printf_float+0xb6>
 8004dac:	f10a 0a01 	add.w	sl, sl, #1
 8004db0:	e7ee      	b.n	8004d90 <_printf_float+0x2a4>
 8004db2:	bf00      	nop
 8004db4:	7fefffff 	.word	0x7fefffff
 8004db8:	0800a1c4 	.word	0x0800a1c4
 8004dbc:	0800a1c8 	.word	0x0800a1c8
 8004dc0:	0800a1cc 	.word	0x0800a1cc
 8004dc4:	0800a1d0 	.word	0x0800a1d0
 8004dc8:	0800a1d4 	.word	0x0800a1d4
 8004dcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dd2:	4553      	cmp	r3, sl
 8004dd4:	bfa8      	it	ge
 8004dd6:	4653      	movge	r3, sl
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	4699      	mov	r9, r3
 8004ddc:	dc36      	bgt.n	8004e4c <_printf_float+0x360>
 8004dde:	f04f 0b00 	mov.w	fp, #0
 8004de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de6:	f104 021a 	add.w	r2, r4, #26
 8004dea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dec:	9306      	str	r3, [sp, #24]
 8004dee:	eba3 0309 	sub.w	r3, r3, r9
 8004df2:	455b      	cmp	r3, fp
 8004df4:	dc31      	bgt.n	8004e5a <_printf_float+0x36e>
 8004df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df8:	459a      	cmp	sl, r3
 8004dfa:	dc3a      	bgt.n	8004e72 <_printf_float+0x386>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	07da      	lsls	r2, r3, #31
 8004e00:	d437      	bmi.n	8004e72 <_printf_float+0x386>
 8004e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e04:	ebaa 0903 	sub.w	r9, sl, r3
 8004e08:	9b06      	ldr	r3, [sp, #24]
 8004e0a:	ebaa 0303 	sub.w	r3, sl, r3
 8004e0e:	4599      	cmp	r9, r3
 8004e10:	bfa8      	it	ge
 8004e12:	4699      	movge	r9, r3
 8004e14:	f1b9 0f00 	cmp.w	r9, #0
 8004e18:	dc33      	bgt.n	8004e82 <_printf_float+0x396>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e22:	f104 0b1a 	add.w	fp, r4, #26
 8004e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e28:	ebaa 0303 	sub.w	r3, sl, r3
 8004e2c:	eba3 0309 	sub.w	r3, r3, r9
 8004e30:	4543      	cmp	r3, r8
 8004e32:	f77f af79 	ble.w	8004d28 <_printf_float+0x23c>
 8004e36:	2301      	movs	r3, #1
 8004e38:	465a      	mov	r2, fp
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	f43f aeae 	beq.w	8004ba2 <_printf_float+0xb6>
 8004e46:	f108 0801 	add.w	r8, r8, #1
 8004e4a:	e7ec      	b.n	8004e26 <_printf_float+0x33a>
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d1c2      	bne.n	8004dde <_printf_float+0x2f2>
 8004e58:	e6a3      	b.n	8004ba2 <_printf_float+0xb6>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	9206      	str	r2, [sp, #24]
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f ae9c 	beq.w	8004ba2 <_printf_float+0xb6>
 8004e6a:	9a06      	ldr	r2, [sp, #24]
 8004e6c:	f10b 0b01 	add.w	fp, fp, #1
 8004e70:	e7bb      	b.n	8004dea <_printf_float+0x2fe>
 8004e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d1c0      	bne.n	8004e02 <_printf_float+0x316>
 8004e80:	e68f      	b.n	8004ba2 <_printf_float+0xb6>
 8004e82:	9a06      	ldr	r2, [sp, #24]
 8004e84:	464b      	mov	r3, r9
 8004e86:	4442      	add	r2, r8
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d1c3      	bne.n	8004e1a <_printf_float+0x32e>
 8004e92:	e686      	b.n	8004ba2 <_printf_float+0xb6>
 8004e94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e98:	f1ba 0f01 	cmp.w	sl, #1
 8004e9c:	dc01      	bgt.n	8004ea2 <_printf_float+0x3b6>
 8004e9e:	07db      	lsls	r3, r3, #31
 8004ea0:	d536      	bpl.n	8004f10 <_printf_float+0x424>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f ae78 	beq.w	8004ba2 <_printf_float+0xb6>
 8004eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae70 	beq.w	8004ba2 <_printf_float+0xb6>
 8004ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ece:	f7fb fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ed2:	b9c0      	cbnz	r0, 8004f06 <_printf_float+0x41a>
 8004ed4:	4653      	mov	r3, sl
 8004ed6:	f108 0201 	add.w	r2, r8, #1
 8004eda:	4631      	mov	r1, r6
 8004edc:	4628      	mov	r0, r5
 8004ede:	47b8      	blx	r7
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d10c      	bne.n	8004efe <_printf_float+0x412>
 8004ee4:	e65d      	b.n	8004ba2 <_printf_float+0xb6>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	465a      	mov	r2, fp
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f ae56 	beq.w	8004ba2 <_printf_float+0xb6>
 8004ef6:	f108 0801 	add.w	r8, r8, #1
 8004efa:	45d0      	cmp	r8, sl
 8004efc:	dbf3      	blt.n	8004ee6 <_printf_float+0x3fa>
 8004efe:	464b      	mov	r3, r9
 8004f00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f04:	e6df      	b.n	8004cc6 <_printf_float+0x1da>
 8004f06:	f04f 0800 	mov.w	r8, #0
 8004f0a:	f104 0b1a 	add.w	fp, r4, #26
 8004f0e:	e7f4      	b.n	8004efa <_printf_float+0x40e>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4642      	mov	r2, r8
 8004f14:	e7e1      	b.n	8004eda <_printf_float+0x3ee>
 8004f16:	2301      	movs	r3, #1
 8004f18:	464a      	mov	r2, r9
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	47b8      	blx	r7
 8004f20:	3001      	adds	r0, #1
 8004f22:	f43f ae3e 	beq.w	8004ba2 <_printf_float+0xb6>
 8004f26:	f108 0801 	add.w	r8, r8, #1
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	4543      	cmp	r3, r8
 8004f32:	dcf0      	bgt.n	8004f16 <_printf_float+0x42a>
 8004f34:	e6fc      	b.n	8004d30 <_printf_float+0x244>
 8004f36:	f04f 0800 	mov.w	r8, #0
 8004f3a:	f104 0919 	add.w	r9, r4, #25
 8004f3e:	e7f4      	b.n	8004f2a <_printf_float+0x43e>

08004f40 <_printf_common>:
 8004f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	4616      	mov	r6, r2
 8004f46:	4698      	mov	r8, r3
 8004f48:	688a      	ldr	r2, [r1, #8]
 8004f4a:	690b      	ldr	r3, [r1, #16]
 8004f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	bfb8      	it	lt
 8004f54:	4613      	movlt	r3, r2
 8004f56:	6033      	str	r3, [r6, #0]
 8004f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	b10a      	cbz	r2, 8004f66 <_printf_common+0x26>
 8004f62:	3301      	adds	r3, #1
 8004f64:	6033      	str	r3, [r6, #0]
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	0699      	lsls	r1, r3, #26
 8004f6a:	bf42      	ittt	mi
 8004f6c:	6833      	ldrmi	r3, [r6, #0]
 8004f6e:	3302      	addmi	r3, #2
 8004f70:	6033      	strmi	r3, [r6, #0]
 8004f72:	6825      	ldr	r5, [r4, #0]
 8004f74:	f015 0506 	ands.w	r5, r5, #6
 8004f78:	d106      	bne.n	8004f88 <_printf_common+0x48>
 8004f7a:	f104 0a19 	add.w	sl, r4, #25
 8004f7e:	68e3      	ldr	r3, [r4, #12]
 8004f80:	6832      	ldr	r2, [r6, #0]
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	42ab      	cmp	r3, r5
 8004f86:	dc26      	bgt.n	8004fd6 <_printf_common+0x96>
 8004f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	3b00      	subs	r3, #0
 8004f90:	bf18      	it	ne
 8004f92:	2301      	movne	r3, #1
 8004f94:	0692      	lsls	r2, r2, #26
 8004f96:	d42b      	bmi.n	8004ff0 <_printf_common+0xb0>
 8004f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	47c8      	blx	r9
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d01e      	beq.n	8004fe4 <_printf_common+0xa4>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	6922      	ldr	r2, [r4, #16]
 8004faa:	f003 0306 	and.w	r3, r3, #6
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	bf02      	ittt	eq
 8004fb2:	68e5      	ldreq	r5, [r4, #12]
 8004fb4:	6833      	ldreq	r3, [r6, #0]
 8004fb6:	1aed      	subeq	r5, r5, r3
 8004fb8:	68a3      	ldr	r3, [r4, #8]
 8004fba:	bf0c      	ite	eq
 8004fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc0:	2500      	movne	r5, #0
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	bfc4      	itt	gt
 8004fc6:	1a9b      	subgt	r3, r3, r2
 8004fc8:	18ed      	addgt	r5, r5, r3
 8004fca:	2600      	movs	r6, #0
 8004fcc:	341a      	adds	r4, #26
 8004fce:	42b5      	cmp	r5, r6
 8004fd0:	d11a      	bne.n	8005008 <_printf_common+0xc8>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e008      	b.n	8004fe8 <_printf_common+0xa8>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4652      	mov	r2, sl
 8004fda:	4641      	mov	r1, r8
 8004fdc:	4638      	mov	r0, r7
 8004fde:	47c8      	blx	r9
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d103      	bne.n	8004fec <_printf_common+0xac>
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fec:	3501      	adds	r5, #1
 8004fee:	e7c6      	b.n	8004f7e <_printf_common+0x3e>
 8004ff0:	18e1      	adds	r1, r4, r3
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	2030      	movs	r0, #48	@ 0x30
 8004ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ffa:	4422      	add	r2, r4
 8004ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005004:	3302      	adds	r3, #2
 8005006:	e7c7      	b.n	8004f98 <_printf_common+0x58>
 8005008:	2301      	movs	r3, #1
 800500a:	4622      	mov	r2, r4
 800500c:	4641      	mov	r1, r8
 800500e:	4638      	mov	r0, r7
 8005010:	47c8      	blx	r9
 8005012:	3001      	adds	r0, #1
 8005014:	d0e6      	beq.n	8004fe4 <_printf_common+0xa4>
 8005016:	3601      	adds	r6, #1
 8005018:	e7d9      	b.n	8004fce <_printf_common+0x8e>
	...

0800501c <_printf_i>:
 800501c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	7e0f      	ldrb	r7, [r1, #24]
 8005022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005024:	2f78      	cmp	r7, #120	@ 0x78
 8005026:	4691      	mov	r9, r2
 8005028:	4680      	mov	r8, r0
 800502a:	460c      	mov	r4, r1
 800502c:	469a      	mov	sl, r3
 800502e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005032:	d807      	bhi.n	8005044 <_printf_i+0x28>
 8005034:	2f62      	cmp	r7, #98	@ 0x62
 8005036:	d80a      	bhi.n	800504e <_printf_i+0x32>
 8005038:	2f00      	cmp	r7, #0
 800503a:	f000 80d2 	beq.w	80051e2 <_printf_i+0x1c6>
 800503e:	2f58      	cmp	r7, #88	@ 0x58
 8005040:	f000 80b9 	beq.w	80051b6 <_printf_i+0x19a>
 8005044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800504c:	e03a      	b.n	80050c4 <_printf_i+0xa8>
 800504e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005052:	2b15      	cmp	r3, #21
 8005054:	d8f6      	bhi.n	8005044 <_printf_i+0x28>
 8005056:	a101      	add	r1, pc, #4	@ (adr r1, 800505c <_printf_i+0x40>)
 8005058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050c9 	.word	0x080050c9
 8005064:	08005045 	.word	0x08005045
 8005068:	08005045 	.word	0x08005045
 800506c:	08005045 	.word	0x08005045
 8005070:	08005045 	.word	0x08005045
 8005074:	080050c9 	.word	0x080050c9
 8005078:	08005045 	.word	0x08005045
 800507c:	08005045 	.word	0x08005045
 8005080:	08005045 	.word	0x08005045
 8005084:	08005045 	.word	0x08005045
 8005088:	080051c9 	.word	0x080051c9
 800508c:	080050f3 	.word	0x080050f3
 8005090:	08005183 	.word	0x08005183
 8005094:	08005045 	.word	0x08005045
 8005098:	08005045 	.word	0x08005045
 800509c:	080051eb 	.word	0x080051eb
 80050a0:	08005045 	.word	0x08005045
 80050a4:	080050f3 	.word	0x080050f3
 80050a8:	08005045 	.word	0x08005045
 80050ac:	08005045 	.word	0x08005045
 80050b0:	0800518b 	.word	0x0800518b
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6032      	str	r2, [r6, #0]
 80050bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050c4:	2301      	movs	r3, #1
 80050c6:	e09d      	b.n	8005204 <_printf_i+0x1e8>
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	1d19      	adds	r1, r3, #4
 80050ce:	6031      	str	r1, [r6, #0]
 80050d0:	0606      	lsls	r6, r0, #24
 80050d2:	d501      	bpl.n	80050d8 <_printf_i+0xbc>
 80050d4:	681d      	ldr	r5, [r3, #0]
 80050d6:	e003      	b.n	80050e0 <_printf_i+0xc4>
 80050d8:	0645      	lsls	r5, r0, #25
 80050da:	d5fb      	bpl.n	80050d4 <_printf_i+0xb8>
 80050dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	da03      	bge.n	80050ec <_printf_i+0xd0>
 80050e4:	232d      	movs	r3, #45	@ 0x2d
 80050e6:	426d      	negs	r5, r5
 80050e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ec:	4859      	ldr	r0, [pc, #356]	@ (8005254 <_printf_i+0x238>)
 80050ee:	230a      	movs	r3, #10
 80050f0:	e011      	b.n	8005116 <_printf_i+0xfa>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	0608      	lsls	r0, r1, #24
 80050f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80050fc:	d402      	bmi.n	8005104 <_printf_i+0xe8>
 80050fe:	0649      	lsls	r1, r1, #25
 8005100:	bf48      	it	mi
 8005102:	b2ad      	uxthmi	r5, r5
 8005104:	2f6f      	cmp	r7, #111	@ 0x6f
 8005106:	4853      	ldr	r0, [pc, #332]	@ (8005254 <_printf_i+0x238>)
 8005108:	6033      	str	r3, [r6, #0]
 800510a:	bf14      	ite	ne
 800510c:	230a      	movne	r3, #10
 800510e:	2308      	moveq	r3, #8
 8005110:	2100      	movs	r1, #0
 8005112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005116:	6866      	ldr	r6, [r4, #4]
 8005118:	60a6      	str	r6, [r4, #8]
 800511a:	2e00      	cmp	r6, #0
 800511c:	bfa2      	ittt	ge
 800511e:	6821      	ldrge	r1, [r4, #0]
 8005120:	f021 0104 	bicge.w	r1, r1, #4
 8005124:	6021      	strge	r1, [r4, #0]
 8005126:	b90d      	cbnz	r5, 800512c <_printf_i+0x110>
 8005128:	2e00      	cmp	r6, #0
 800512a:	d04b      	beq.n	80051c4 <_printf_i+0x1a8>
 800512c:	4616      	mov	r6, r2
 800512e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005132:	fb03 5711 	mls	r7, r3, r1, r5
 8005136:	5dc7      	ldrb	r7, [r0, r7]
 8005138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800513c:	462f      	mov	r7, r5
 800513e:	42bb      	cmp	r3, r7
 8005140:	460d      	mov	r5, r1
 8005142:	d9f4      	bls.n	800512e <_printf_i+0x112>
 8005144:	2b08      	cmp	r3, #8
 8005146:	d10b      	bne.n	8005160 <_printf_i+0x144>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07df      	lsls	r7, r3, #31
 800514c:	d508      	bpl.n	8005160 <_printf_i+0x144>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	6861      	ldr	r1, [r4, #4]
 8005152:	4299      	cmp	r1, r3
 8005154:	bfde      	ittt	le
 8005156:	2330      	movle	r3, #48	@ 0x30
 8005158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800515c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005160:	1b92      	subs	r2, r2, r6
 8005162:	6122      	str	r2, [r4, #16]
 8005164:	f8cd a000 	str.w	sl, [sp]
 8005168:	464b      	mov	r3, r9
 800516a:	aa03      	add	r2, sp, #12
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f7ff fee6 	bl	8004f40 <_printf_common>
 8005174:	3001      	adds	r0, #1
 8005176:	d14a      	bne.n	800520e <_printf_i+0x1f2>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	b004      	add	sp, #16
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	4833      	ldr	r0, [pc, #204]	@ (8005258 <_printf_i+0x23c>)
 800518c:	2778      	movs	r7, #120	@ 0x78
 800518e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	6831      	ldr	r1, [r6, #0]
 8005196:	061f      	lsls	r7, r3, #24
 8005198:	f851 5b04 	ldr.w	r5, [r1], #4
 800519c:	d402      	bmi.n	80051a4 <_printf_i+0x188>
 800519e:	065f      	lsls	r7, r3, #25
 80051a0:	bf48      	it	mi
 80051a2:	b2ad      	uxthmi	r5, r5
 80051a4:	6031      	str	r1, [r6, #0]
 80051a6:	07d9      	lsls	r1, r3, #31
 80051a8:	bf44      	itt	mi
 80051aa:	f043 0320 	orrmi.w	r3, r3, #32
 80051ae:	6023      	strmi	r3, [r4, #0]
 80051b0:	b11d      	cbz	r5, 80051ba <_printf_i+0x19e>
 80051b2:	2310      	movs	r3, #16
 80051b4:	e7ac      	b.n	8005110 <_printf_i+0xf4>
 80051b6:	4827      	ldr	r0, [pc, #156]	@ (8005254 <_printf_i+0x238>)
 80051b8:	e7e9      	b.n	800518e <_printf_i+0x172>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	f023 0320 	bic.w	r3, r3, #32
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	e7f6      	b.n	80051b2 <_printf_i+0x196>
 80051c4:	4616      	mov	r6, r2
 80051c6:	e7bd      	b.n	8005144 <_printf_i+0x128>
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	6825      	ldr	r5, [r4, #0]
 80051cc:	6961      	ldr	r1, [r4, #20]
 80051ce:	1d18      	adds	r0, r3, #4
 80051d0:	6030      	str	r0, [r6, #0]
 80051d2:	062e      	lsls	r6, r5, #24
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0x1c0>
 80051d8:	6019      	str	r1, [r3, #0]
 80051da:	e002      	b.n	80051e2 <_printf_i+0x1c6>
 80051dc:	0668      	lsls	r0, r5, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0x1bc>
 80051e0:	8019      	strh	r1, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	4616      	mov	r6, r2
 80051e8:	e7bc      	b.n	8005164 <_printf_i+0x148>
 80051ea:	6833      	ldr	r3, [r6, #0]
 80051ec:	1d1a      	adds	r2, r3, #4
 80051ee:	6032      	str	r2, [r6, #0]
 80051f0:	681e      	ldr	r6, [r3, #0]
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	2100      	movs	r1, #0
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7fa fff2 	bl	80001e0 <memchr>
 80051fc:	b108      	cbz	r0, 8005202 <_printf_i+0x1e6>
 80051fe:	1b80      	subs	r0, r0, r6
 8005200:	6060      	str	r0, [r4, #4]
 8005202:	6863      	ldr	r3, [r4, #4]
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	2300      	movs	r3, #0
 8005208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800520c:	e7aa      	b.n	8005164 <_printf_i+0x148>
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	4632      	mov	r2, r6
 8005212:	4649      	mov	r1, r9
 8005214:	4640      	mov	r0, r8
 8005216:	47d0      	blx	sl
 8005218:	3001      	adds	r0, #1
 800521a:	d0ad      	beq.n	8005178 <_printf_i+0x15c>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	079b      	lsls	r3, r3, #30
 8005220:	d413      	bmi.n	800524a <_printf_i+0x22e>
 8005222:	68e0      	ldr	r0, [r4, #12]
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	4298      	cmp	r0, r3
 8005228:	bfb8      	it	lt
 800522a:	4618      	movlt	r0, r3
 800522c:	e7a6      	b.n	800517c <_printf_i+0x160>
 800522e:	2301      	movs	r3, #1
 8005230:	4632      	mov	r2, r6
 8005232:	4649      	mov	r1, r9
 8005234:	4640      	mov	r0, r8
 8005236:	47d0      	blx	sl
 8005238:	3001      	adds	r0, #1
 800523a:	d09d      	beq.n	8005178 <_printf_i+0x15c>
 800523c:	3501      	adds	r5, #1
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	9903      	ldr	r1, [sp, #12]
 8005242:	1a5b      	subs	r3, r3, r1
 8005244:	42ab      	cmp	r3, r5
 8005246:	dcf2      	bgt.n	800522e <_printf_i+0x212>
 8005248:	e7eb      	b.n	8005222 <_printf_i+0x206>
 800524a:	2500      	movs	r5, #0
 800524c:	f104 0619 	add.w	r6, r4, #25
 8005250:	e7f5      	b.n	800523e <_printf_i+0x222>
 8005252:	bf00      	nop
 8005254:	0800a1d6 	.word	0x0800a1d6
 8005258:	0800a1e7 	.word	0x0800a1e7

0800525c <std>:
 800525c:	2300      	movs	r3, #0
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	e9c0 3300 	strd	r3, r3, [r0]
 8005266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800526a:	6083      	str	r3, [r0, #8]
 800526c:	8181      	strh	r1, [r0, #12]
 800526e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005270:	81c2      	strh	r2, [r0, #14]
 8005272:	6183      	str	r3, [r0, #24]
 8005274:	4619      	mov	r1, r3
 8005276:	2208      	movs	r2, #8
 8005278:	305c      	adds	r0, #92	@ 0x5c
 800527a:	f000 f906 	bl	800548a <memset>
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <std+0x58>)
 8005280:	6263      	str	r3, [r4, #36]	@ 0x24
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <std+0x5c>)
 8005284:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005286:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <std+0x60>)
 8005288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800528a:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <std+0x64>)
 800528c:	6323      	str	r3, [r4, #48]	@ 0x30
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <std+0x68>)
 8005290:	6224      	str	r4, [r4, #32]
 8005292:	429c      	cmp	r4, r3
 8005294:	d006      	beq.n	80052a4 <std+0x48>
 8005296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800529a:	4294      	cmp	r4, r2
 800529c:	d002      	beq.n	80052a4 <std+0x48>
 800529e:	33d0      	adds	r3, #208	@ 0xd0
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d105      	bne.n	80052b0 <std+0x54>
 80052a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ac:	f000 b96a 	b.w	8005584 <__retarget_lock_init_recursive>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	08005405 	.word	0x08005405
 80052b8:	08005427 	.word	0x08005427
 80052bc:	0800545f 	.word	0x0800545f
 80052c0:	08005483 	.word	0x08005483
 80052c4:	20003294 	.word	0x20003294

080052c8 <stdio_exit_handler>:
 80052c8:	4a02      	ldr	r2, [pc, #8]	@ (80052d4 <stdio_exit_handler+0xc>)
 80052ca:	4903      	ldr	r1, [pc, #12]	@ (80052d8 <stdio_exit_handler+0x10>)
 80052cc:	4803      	ldr	r0, [pc, #12]	@ (80052dc <stdio_exit_handler+0x14>)
 80052ce:	f000 b869 	b.w	80053a4 <_fwalk_sglue>
 80052d2:	bf00      	nop
 80052d4:	20002018 	.word	0x20002018
 80052d8:	08006eb9 	.word	0x08006eb9
 80052dc:	20002028 	.word	0x20002028

080052e0 <cleanup_stdio>:
 80052e0:	6841      	ldr	r1, [r0, #4]
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <cleanup_stdio+0x34>)
 80052e4:	4299      	cmp	r1, r3
 80052e6:	b510      	push	{r4, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	d001      	beq.n	80052f0 <cleanup_stdio+0x10>
 80052ec:	f001 fde4 	bl	8006eb8 <_fflush_r>
 80052f0:	68a1      	ldr	r1, [r4, #8]
 80052f2:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <cleanup_stdio+0x38>)
 80052f4:	4299      	cmp	r1, r3
 80052f6:	d002      	beq.n	80052fe <cleanup_stdio+0x1e>
 80052f8:	4620      	mov	r0, r4
 80052fa:	f001 fddd 	bl	8006eb8 <_fflush_r>
 80052fe:	68e1      	ldr	r1, [r4, #12]
 8005300:	4b06      	ldr	r3, [pc, #24]	@ (800531c <cleanup_stdio+0x3c>)
 8005302:	4299      	cmp	r1, r3
 8005304:	d004      	beq.n	8005310 <cleanup_stdio+0x30>
 8005306:	4620      	mov	r0, r4
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	f001 bdd4 	b.w	8006eb8 <_fflush_r>
 8005310:	bd10      	pop	{r4, pc}
 8005312:	bf00      	nop
 8005314:	20003294 	.word	0x20003294
 8005318:	200032fc 	.word	0x200032fc
 800531c:	20003364 	.word	0x20003364

08005320 <global_stdio_init.part.0>:
 8005320:	b510      	push	{r4, lr}
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <global_stdio_init.part.0+0x30>)
 8005324:	4c0b      	ldr	r4, [pc, #44]	@ (8005354 <global_stdio_init.part.0+0x34>)
 8005326:	4a0c      	ldr	r2, [pc, #48]	@ (8005358 <global_stdio_init.part.0+0x38>)
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	4620      	mov	r0, r4
 800532c:	2200      	movs	r2, #0
 800532e:	2104      	movs	r1, #4
 8005330:	f7ff ff94 	bl	800525c <std>
 8005334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005338:	2201      	movs	r2, #1
 800533a:	2109      	movs	r1, #9
 800533c:	f7ff ff8e 	bl	800525c <std>
 8005340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005344:	2202      	movs	r2, #2
 8005346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800534a:	2112      	movs	r1, #18
 800534c:	f7ff bf86 	b.w	800525c <std>
 8005350:	200033cc 	.word	0x200033cc
 8005354:	20003294 	.word	0x20003294
 8005358:	080052c9 	.word	0x080052c9

0800535c <__sfp_lock_acquire>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__sfp_lock_acquire+0x8>)
 800535e:	f000 b912 	b.w	8005586 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	200033d5 	.word	0x200033d5

08005368 <__sfp_lock_release>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__sfp_lock_release+0x8>)
 800536a:	f000 b90d 	b.w	8005588 <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	200033d5 	.word	0x200033d5

08005374 <__sinit>:
 8005374:	b510      	push	{r4, lr}
 8005376:	4604      	mov	r4, r0
 8005378:	f7ff fff0 	bl	800535c <__sfp_lock_acquire>
 800537c:	6a23      	ldr	r3, [r4, #32]
 800537e:	b11b      	cbz	r3, 8005388 <__sinit+0x14>
 8005380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005384:	f7ff bff0 	b.w	8005368 <__sfp_lock_release>
 8005388:	4b04      	ldr	r3, [pc, #16]	@ (800539c <__sinit+0x28>)
 800538a:	6223      	str	r3, [r4, #32]
 800538c:	4b04      	ldr	r3, [pc, #16]	@ (80053a0 <__sinit+0x2c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f5      	bne.n	8005380 <__sinit+0xc>
 8005394:	f7ff ffc4 	bl	8005320 <global_stdio_init.part.0>
 8005398:	e7f2      	b.n	8005380 <__sinit+0xc>
 800539a:	bf00      	nop
 800539c:	080052e1 	.word	0x080052e1
 80053a0:	200033cc 	.word	0x200033cc

080053a4 <_fwalk_sglue>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	4607      	mov	r7, r0
 80053aa:	4688      	mov	r8, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	2600      	movs	r6, #0
 80053b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053b4:	f1b9 0901 	subs.w	r9, r9, #1
 80053b8:	d505      	bpl.n	80053c6 <_fwalk_sglue+0x22>
 80053ba:	6824      	ldr	r4, [r4, #0]
 80053bc:	2c00      	cmp	r4, #0
 80053be:	d1f7      	bne.n	80053b0 <_fwalk_sglue+0xc>
 80053c0:	4630      	mov	r0, r6
 80053c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d907      	bls.n	80053dc <_fwalk_sglue+0x38>
 80053cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053d0:	3301      	adds	r3, #1
 80053d2:	d003      	beq.n	80053dc <_fwalk_sglue+0x38>
 80053d4:	4629      	mov	r1, r5
 80053d6:	4638      	mov	r0, r7
 80053d8:	47c0      	blx	r8
 80053da:	4306      	orrs	r6, r0
 80053dc:	3568      	adds	r5, #104	@ 0x68
 80053de:	e7e9      	b.n	80053b4 <_fwalk_sglue+0x10>

080053e0 <iprintf>:
 80053e0:	b40f      	push	{r0, r1, r2, r3}
 80053e2:	b507      	push	{r0, r1, r2, lr}
 80053e4:	4906      	ldr	r1, [pc, #24]	@ (8005400 <iprintf+0x20>)
 80053e6:	ab04      	add	r3, sp, #16
 80053e8:	6808      	ldr	r0, [r1, #0]
 80053ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ee:	6881      	ldr	r1, [r0, #8]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	f001 fbc5 	bl	8006b80 <_vfiprintf_r>
 80053f6:	b003      	add	sp, #12
 80053f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053fc:	b004      	add	sp, #16
 80053fe:	4770      	bx	lr
 8005400:	20002024 	.word	0x20002024

08005404 <__sread>:
 8005404:	b510      	push	{r4, lr}
 8005406:	460c      	mov	r4, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	f000 f86c 	bl	80054e8 <_read_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	bfab      	itete	ge
 8005414:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005416:	89a3      	ldrhlt	r3, [r4, #12]
 8005418:	181b      	addge	r3, r3, r0
 800541a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800541e:	bfac      	ite	ge
 8005420:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005422:	81a3      	strhlt	r3, [r4, #12]
 8005424:	bd10      	pop	{r4, pc}

08005426 <__swrite>:
 8005426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	461f      	mov	r7, r3
 800542c:	898b      	ldrh	r3, [r1, #12]
 800542e:	05db      	lsls	r3, r3, #23
 8005430:	4605      	mov	r5, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4616      	mov	r6, r2
 8005436:	d505      	bpl.n	8005444 <__swrite+0x1e>
 8005438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543c:	2302      	movs	r3, #2
 800543e:	2200      	movs	r2, #0
 8005440:	f000 f840 	bl	80054c4 <_lseek_r>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	4632      	mov	r2, r6
 8005452:	463b      	mov	r3, r7
 8005454:	4628      	mov	r0, r5
 8005456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	f000 b857 	b.w	800550c <_write_r>

0800545e <__sseek>:
 800545e:	b510      	push	{r4, lr}
 8005460:	460c      	mov	r4, r1
 8005462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005466:	f000 f82d 	bl	80054c4 <_lseek_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	bf15      	itete	ne
 8005470:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005472:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005476:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800547a:	81a3      	strheq	r3, [r4, #12]
 800547c:	bf18      	it	ne
 800547e:	81a3      	strhne	r3, [r4, #12]
 8005480:	bd10      	pop	{r4, pc}

08005482 <__sclose>:
 8005482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005486:	f000 b80d 	b.w	80054a4 <_close_r>

0800548a <memset>:
 800548a:	4402      	add	r2, r0
 800548c:	4603      	mov	r3, r0
 800548e:	4293      	cmp	r3, r2
 8005490:	d100      	bne.n	8005494 <memset+0xa>
 8005492:	4770      	bx	lr
 8005494:	f803 1b01 	strb.w	r1, [r3], #1
 8005498:	e7f9      	b.n	800548e <memset+0x4>
	...

0800549c <_localeconv_r>:
 800549c:	4800      	ldr	r0, [pc, #0]	@ (80054a0 <_localeconv_r+0x4>)
 800549e:	4770      	bx	lr
 80054a0:	20002164 	.word	0x20002164

080054a4 <_close_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d06      	ldr	r5, [pc, #24]	@ (80054c0 <_close_r+0x1c>)
 80054a8:	2300      	movs	r3, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	f7fb ff5f 	bl	8001372 <_close>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_close_r+0x1a>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_close_r+0x1a>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	200033d0 	.word	0x200033d0

080054c4 <_lseek_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	@ (80054e4 <_lseek_r+0x20>)
 80054c8:	4604      	mov	r4, r0
 80054ca:	4608      	mov	r0, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	602a      	str	r2, [r5, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f7fb ff74 	bl	80013c0 <_lseek>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_lseek_r+0x1e>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_lseek_r+0x1e>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200033d0 	.word	0x200033d0

080054e8 <_read_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	@ (8005508 <_read_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fb ff1e 	bl	8001338 <_read>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_read_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_read_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200033d0 	.word	0x200033d0

0800550c <_write_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	@ (800552c <_write_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fb fe20 	bl	8001160 <_write>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_write_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_write_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200033d0 	.word	0x200033d0

08005530 <__errno>:
 8005530:	4b01      	ldr	r3, [pc, #4]	@ (8005538 <__errno+0x8>)
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20002024 	.word	0x20002024

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4d0d      	ldr	r5, [pc, #52]	@ (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	@ (8005578 <__libc_init_array+0x3c>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2600      	movs	r6, #0
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4d0b      	ldr	r5, [pc, #44]	@ (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	@ (8005580 <__libc_init_array+0x44>)
 8005550:	f001 fee2 	bl	8007318 <_init>
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2600      	movs	r6, #0
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	0800a540 	.word	0x0800a540
 8005578:	0800a540 	.word	0x0800a540
 800557c:	0800a540 	.word	0x0800a540
 8005580:	0800a544 	.word	0x0800a544

08005584 <__retarget_lock_init_recursive>:
 8005584:	4770      	bx	lr

08005586 <__retarget_lock_acquire_recursive>:
 8005586:	4770      	bx	lr

08005588 <__retarget_lock_release_recursive>:
 8005588:	4770      	bx	lr

0800558a <quorem>:
 800558a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558e:	6903      	ldr	r3, [r0, #16]
 8005590:	690c      	ldr	r4, [r1, #16]
 8005592:	42a3      	cmp	r3, r4
 8005594:	4607      	mov	r7, r0
 8005596:	db7e      	blt.n	8005696 <quorem+0x10c>
 8005598:	3c01      	subs	r4, #1
 800559a:	f101 0814 	add.w	r8, r1, #20
 800559e:	00a3      	lsls	r3, r4, #2
 80055a0:	f100 0514 	add.w	r5, r0, #20
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055b4:	3301      	adds	r3, #1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80055c0:	d32e      	bcc.n	8005620 <quorem+0x96>
 80055c2:	f04f 0a00 	mov.w	sl, #0
 80055c6:	46c4      	mov	ip, r8
 80055c8:	46ae      	mov	lr, r5
 80055ca:	46d3      	mov	fp, sl
 80055cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055d0:	b298      	uxth	r0, r3
 80055d2:	fb06 a000 	mla	r0, r6, r0, sl
 80055d6:	0c02      	lsrs	r2, r0, #16
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	fb06 2303 	mla	r3, r6, r3, r2
 80055de:	f8de 2000 	ldr.w	r2, [lr]
 80055e2:	b280      	uxth	r0, r0
 80055e4:	b292      	uxth	r2, r2
 80055e6:	1a12      	subs	r2, r2, r0
 80055e8:	445a      	add	r2, fp
 80055ea:	f8de 0000 	ldr.w	r0, [lr]
 80055ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055fc:	b292      	uxth	r2, r2
 80055fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005602:	45e1      	cmp	r9, ip
 8005604:	f84e 2b04 	str.w	r2, [lr], #4
 8005608:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800560c:	d2de      	bcs.n	80055cc <quorem+0x42>
 800560e:	9b00      	ldr	r3, [sp, #0]
 8005610:	58eb      	ldr	r3, [r5, r3]
 8005612:	b92b      	cbnz	r3, 8005620 <quorem+0x96>
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	3b04      	subs	r3, #4
 8005618:	429d      	cmp	r5, r3
 800561a:	461a      	mov	r2, r3
 800561c:	d32f      	bcc.n	800567e <quorem+0xf4>
 800561e:	613c      	str	r4, [r7, #16]
 8005620:	4638      	mov	r0, r7
 8005622:	f001 f97b 	bl	800691c <__mcmp>
 8005626:	2800      	cmp	r0, #0
 8005628:	db25      	blt.n	8005676 <quorem+0xec>
 800562a:	4629      	mov	r1, r5
 800562c:	2000      	movs	r0, #0
 800562e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005632:	f8d1 c000 	ldr.w	ip, [r1]
 8005636:	fa1f fe82 	uxth.w	lr, r2
 800563a:	fa1f f38c 	uxth.w	r3, ip
 800563e:	eba3 030e 	sub.w	r3, r3, lr
 8005642:	4403      	add	r3, r0
 8005644:	0c12      	lsrs	r2, r2, #16
 8005646:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800564a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005654:	45c1      	cmp	r9, r8
 8005656:	f841 3b04 	str.w	r3, [r1], #4
 800565a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800565e:	d2e6      	bcs.n	800562e <quorem+0xa4>
 8005660:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005668:	b922      	cbnz	r2, 8005674 <quorem+0xea>
 800566a:	3b04      	subs	r3, #4
 800566c:	429d      	cmp	r5, r3
 800566e:	461a      	mov	r2, r3
 8005670:	d30b      	bcc.n	800568a <quorem+0x100>
 8005672:	613c      	str	r4, [r7, #16]
 8005674:	3601      	adds	r6, #1
 8005676:	4630      	mov	r0, r6
 8005678:	b003      	add	sp, #12
 800567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	3b04      	subs	r3, #4
 8005682:	2a00      	cmp	r2, #0
 8005684:	d1cb      	bne.n	800561e <quorem+0x94>
 8005686:	3c01      	subs	r4, #1
 8005688:	e7c6      	b.n	8005618 <quorem+0x8e>
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	3b04      	subs	r3, #4
 800568e:	2a00      	cmp	r2, #0
 8005690:	d1ef      	bne.n	8005672 <quorem+0xe8>
 8005692:	3c01      	subs	r4, #1
 8005694:	e7ea      	b.n	800566c <quorem+0xe2>
 8005696:	2000      	movs	r0, #0
 8005698:	e7ee      	b.n	8005678 <quorem+0xee>
 800569a:	0000      	movs	r0, r0
 800569c:	0000      	movs	r0, r0
	...

080056a0 <_dtoa_r>:
 80056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	69c7      	ldr	r7, [r0, #28]
 80056a6:	b099      	sub	sp, #100	@ 0x64
 80056a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056ac:	ec55 4b10 	vmov	r4, r5, d0
 80056b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80056b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80056b4:	4683      	mov	fp, r0
 80056b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80056b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056ba:	b97f      	cbnz	r7, 80056dc <_dtoa_r+0x3c>
 80056bc:	2010      	movs	r0, #16
 80056be:	f000 fdfd 	bl	80062bc <malloc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80056c8:	b920      	cbnz	r0, 80056d4 <_dtoa_r+0x34>
 80056ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005968 <_dtoa_r+0x2c8>)
 80056cc:	21ef      	movs	r1, #239	@ 0xef
 80056ce:	48a7      	ldr	r0, [pc, #668]	@ (800596c <_dtoa_r+0x2cc>)
 80056d0:	f001 fccc 	bl	800706c <__assert_func>
 80056d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056d8:	6007      	str	r7, [r0, #0]
 80056da:	60c7      	str	r7, [r0, #12]
 80056dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	b159      	cbz	r1, 80056fc <_dtoa_r+0x5c>
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	604a      	str	r2, [r1, #4]
 80056e8:	2301      	movs	r3, #1
 80056ea:	4093      	lsls	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
 80056ee:	4658      	mov	r0, fp
 80056f0:	f000 feda 	bl	80064a8 <_Bfree>
 80056f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	1e2b      	subs	r3, r5, #0
 80056fe:	bfb9      	ittee	lt
 8005700:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005704:	9303      	strlt	r3, [sp, #12]
 8005706:	2300      	movge	r3, #0
 8005708:	6033      	strge	r3, [r6, #0]
 800570a:	9f03      	ldr	r7, [sp, #12]
 800570c:	4b98      	ldr	r3, [pc, #608]	@ (8005970 <_dtoa_r+0x2d0>)
 800570e:	bfbc      	itt	lt
 8005710:	2201      	movlt	r2, #1
 8005712:	6032      	strlt	r2, [r6, #0]
 8005714:	43bb      	bics	r3, r7
 8005716:	d112      	bne.n	800573e <_dtoa_r+0x9e>
 8005718:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800571a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005724:	4323      	orrs	r3, r4
 8005726:	f000 854d 	beq.w	80061c4 <_dtoa_r+0xb24>
 800572a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800572c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005984 <_dtoa_r+0x2e4>
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 854f 	beq.w	80061d4 <_dtoa_r+0xb34>
 8005736:	f10a 0303 	add.w	r3, sl, #3
 800573a:	f000 bd49 	b.w	80061d0 <_dtoa_r+0xb30>
 800573e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	ec51 0b17 	vmov	r0, r1, d7
 8005748:	2300      	movs	r3, #0
 800574a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800574e:	f7fb f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005752:	4680      	mov	r8, r0
 8005754:	b158      	cbz	r0, 800576e <_dtoa_r+0xce>
 8005756:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005758:	2301      	movs	r3, #1
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800575e:	b113      	cbz	r3, 8005766 <_dtoa_r+0xc6>
 8005760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005762:	4b84      	ldr	r3, [pc, #528]	@ (8005974 <_dtoa_r+0x2d4>)
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005988 <_dtoa_r+0x2e8>
 800576a:	f000 bd33 	b.w	80061d4 <_dtoa_r+0xb34>
 800576e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005772:	aa16      	add	r2, sp, #88	@ 0x58
 8005774:	a917      	add	r1, sp, #92	@ 0x5c
 8005776:	4658      	mov	r0, fp
 8005778:	f001 f980 	bl	8006a7c <__d2b>
 800577c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005780:	4681      	mov	r9, r0
 8005782:	2e00      	cmp	r6, #0
 8005784:	d077      	beq.n	8005876 <_dtoa_r+0x1d6>
 8005786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005788:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005794:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005798:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800579c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057a0:	4619      	mov	r1, r3
 80057a2:	2200      	movs	r2, #0
 80057a4:	4b74      	ldr	r3, [pc, #464]	@ (8005978 <_dtoa_r+0x2d8>)
 80057a6:	f7fa fd77 	bl	8000298 <__aeabi_dsub>
 80057aa:	a369      	add	r3, pc, #420	@ (adr r3, 8005950 <_dtoa_r+0x2b0>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa ff2a 	bl	8000608 <__aeabi_dmul>
 80057b4:	a368      	add	r3, pc, #416	@ (adr r3, 8005958 <_dtoa_r+0x2b8>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fa fd6f 	bl	800029c <__adddf3>
 80057be:	4604      	mov	r4, r0
 80057c0:	4630      	mov	r0, r6
 80057c2:	460d      	mov	r5, r1
 80057c4:	f7fa feb6 	bl	8000534 <__aeabi_i2d>
 80057c8:	a365      	add	r3, pc, #404	@ (adr r3, 8005960 <_dtoa_r+0x2c0>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4620      	mov	r0, r4
 80057d8:	4629      	mov	r1, r5
 80057da:	f7fa fd5f 	bl	800029c <__adddf3>
 80057de:	4604      	mov	r4, r0
 80057e0:	460d      	mov	r5, r1
 80057e2:	f7fb f9c1 	bl	8000b68 <__aeabi_d2iz>
 80057e6:	2200      	movs	r2, #0
 80057e8:	4607      	mov	r7, r0
 80057ea:	2300      	movs	r3, #0
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fb f97c 	bl	8000aec <__aeabi_dcmplt>
 80057f4:	b140      	cbz	r0, 8005808 <_dtoa_r+0x168>
 80057f6:	4638      	mov	r0, r7
 80057f8:	f7fa fe9c 	bl	8000534 <__aeabi_i2d>
 80057fc:	4622      	mov	r2, r4
 80057fe:	462b      	mov	r3, r5
 8005800:	f7fb f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005804:	b900      	cbnz	r0, 8005808 <_dtoa_r+0x168>
 8005806:	3f01      	subs	r7, #1
 8005808:	2f16      	cmp	r7, #22
 800580a:	d851      	bhi.n	80058b0 <_dtoa_r+0x210>
 800580c:	4b5b      	ldr	r3, [pc, #364]	@ (800597c <_dtoa_r+0x2dc>)
 800580e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800581a:	f7fb f967 	bl	8000aec <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	d048      	beq.n	80058b4 <_dtoa_r+0x214>
 8005822:	3f01      	subs	r7, #1
 8005824:	2300      	movs	r3, #0
 8005826:	9312      	str	r3, [sp, #72]	@ 0x48
 8005828:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800582a:	1b9b      	subs	r3, r3, r6
 800582c:	1e5a      	subs	r2, r3, #1
 800582e:	bf44      	itt	mi
 8005830:	f1c3 0801 	rsbmi	r8, r3, #1
 8005834:	2300      	movmi	r3, #0
 8005836:	9208      	str	r2, [sp, #32]
 8005838:	bf54      	ite	pl
 800583a:	f04f 0800 	movpl.w	r8, #0
 800583e:	9308      	strmi	r3, [sp, #32]
 8005840:	2f00      	cmp	r7, #0
 8005842:	db39      	blt.n	80058b8 <_dtoa_r+0x218>
 8005844:	9b08      	ldr	r3, [sp, #32]
 8005846:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005848:	443b      	add	r3, r7
 800584a:	9308      	str	r3, [sp, #32]
 800584c:	2300      	movs	r3, #0
 800584e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005852:	2b09      	cmp	r3, #9
 8005854:	d864      	bhi.n	8005920 <_dtoa_r+0x280>
 8005856:	2b05      	cmp	r3, #5
 8005858:	bfc4      	itt	gt
 800585a:	3b04      	subgt	r3, #4
 800585c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800585e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005860:	f1a3 0302 	sub.w	r3, r3, #2
 8005864:	bfcc      	ite	gt
 8005866:	2400      	movgt	r4, #0
 8005868:	2401      	movle	r4, #1
 800586a:	2b03      	cmp	r3, #3
 800586c:	d863      	bhi.n	8005936 <_dtoa_r+0x296>
 800586e:	e8df f003 	tbb	[pc, r3]
 8005872:	372a      	.short	0x372a
 8005874:	5535      	.short	0x5535
 8005876:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800587a:	441e      	add	r6, r3
 800587c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005880:	2b20      	cmp	r3, #32
 8005882:	bfc1      	itttt	gt
 8005884:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005888:	409f      	lslgt	r7, r3
 800588a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800588e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005892:	bfd6      	itet	le
 8005894:	f1c3 0320 	rsble	r3, r3, #32
 8005898:	ea47 0003 	orrgt.w	r0, r7, r3
 800589c:	fa04 f003 	lslle.w	r0, r4, r3
 80058a0:	f7fa fe38 	bl	8000514 <__aeabi_ui2d>
 80058a4:	2201      	movs	r2, #1
 80058a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058aa:	3e01      	subs	r6, #1
 80058ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80058ae:	e777      	b.n	80057a0 <_dtoa_r+0x100>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e7b8      	b.n	8005826 <_dtoa_r+0x186>
 80058b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80058b6:	e7b7      	b.n	8005828 <_dtoa_r+0x188>
 80058b8:	427b      	negs	r3, r7
 80058ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80058bc:	2300      	movs	r3, #0
 80058be:	eba8 0807 	sub.w	r8, r8, r7
 80058c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058c4:	e7c4      	b.n	8005850 <_dtoa_r+0x1b0>
 80058c6:	2300      	movs	r3, #0
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc35      	bgt.n	800593c <_dtoa_r+0x29c>
 80058d0:	2301      	movs	r3, #1
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	461a      	mov	r2, r3
 80058d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80058da:	e00b      	b.n	80058f4 <_dtoa_r+0x254>
 80058dc:	2301      	movs	r3, #1
 80058de:	e7f3      	b.n	80058c8 <_dtoa_r+0x228>
 80058e0:	2300      	movs	r3, #0
 80058e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	bfb8      	it	lt
 80058f2:	2301      	movlt	r3, #1
 80058f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058f8:	2100      	movs	r1, #0
 80058fa:	2204      	movs	r2, #4
 80058fc:	f102 0514 	add.w	r5, r2, #20
 8005900:	429d      	cmp	r5, r3
 8005902:	d91f      	bls.n	8005944 <_dtoa_r+0x2a4>
 8005904:	6041      	str	r1, [r0, #4]
 8005906:	4658      	mov	r0, fp
 8005908:	f000 fd8e 	bl	8006428 <_Balloc>
 800590c:	4682      	mov	sl, r0
 800590e:	2800      	cmp	r0, #0
 8005910:	d13c      	bne.n	800598c <_dtoa_r+0x2ec>
 8005912:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <_dtoa_r+0x2e0>)
 8005914:	4602      	mov	r2, r0
 8005916:	f240 11af 	movw	r1, #431	@ 0x1af
 800591a:	e6d8      	b.n	80056ce <_dtoa_r+0x2e>
 800591c:	2301      	movs	r3, #1
 800591e:	e7e0      	b.n	80058e2 <_dtoa_r+0x242>
 8005920:	2401      	movs	r4, #1
 8005922:	2300      	movs	r3, #0
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	2200      	movs	r2, #0
 8005932:	2312      	movs	r3, #18
 8005934:	e7d0      	b.n	80058d8 <_dtoa_r+0x238>
 8005936:	2301      	movs	r3, #1
 8005938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800593a:	e7f5      	b.n	8005928 <_dtoa_r+0x288>
 800593c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	9307      	str	r3, [sp, #28]
 8005942:	e7d7      	b.n	80058f4 <_dtoa_r+0x254>
 8005944:	3101      	adds	r1, #1
 8005946:	0052      	lsls	r2, r2, #1
 8005948:	e7d8      	b.n	80058fc <_dtoa_r+0x25c>
 800594a:	bf00      	nop
 800594c:	f3af 8000 	nop.w
 8005950:	636f4361 	.word	0x636f4361
 8005954:	3fd287a7 	.word	0x3fd287a7
 8005958:	8b60c8b3 	.word	0x8b60c8b3
 800595c:	3fc68a28 	.word	0x3fc68a28
 8005960:	509f79fb 	.word	0x509f79fb
 8005964:	3fd34413 	.word	0x3fd34413
 8005968:	0800a205 	.word	0x0800a205
 800596c:	0800a21c 	.word	0x0800a21c
 8005970:	7ff00000 	.word	0x7ff00000
 8005974:	0800a1d5 	.word	0x0800a1d5
 8005978:	3ff80000 	.word	0x3ff80000
 800597c:	0800a318 	.word	0x0800a318
 8005980:	0800a274 	.word	0x0800a274
 8005984:	0800a201 	.word	0x0800a201
 8005988:	0800a1d4 	.word	0x0800a1d4
 800598c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005990:	6018      	str	r0, [r3, #0]
 8005992:	9b07      	ldr	r3, [sp, #28]
 8005994:	2b0e      	cmp	r3, #14
 8005996:	f200 80a4 	bhi.w	8005ae2 <_dtoa_r+0x442>
 800599a:	2c00      	cmp	r4, #0
 800599c:	f000 80a1 	beq.w	8005ae2 <_dtoa_r+0x442>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	dd33      	ble.n	8005a0c <_dtoa_r+0x36c>
 80059a4:	4bad      	ldr	r3, [pc, #692]	@ (8005c5c <_dtoa_r+0x5bc>)
 80059a6:	f007 020f 	and.w	r2, r7, #15
 80059aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ae:	ed93 7b00 	vldr	d7, [r3]
 80059b2:	05f8      	lsls	r0, r7, #23
 80059b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059bc:	d516      	bpl.n	80059ec <_dtoa_r+0x34c>
 80059be:	4ba8      	ldr	r3, [pc, #672]	@ (8005c60 <_dtoa_r+0x5c0>)
 80059c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059c8:	f7fa ff48 	bl	800085c <__aeabi_ddiv>
 80059cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d0:	f004 040f 	and.w	r4, r4, #15
 80059d4:	2603      	movs	r6, #3
 80059d6:	4da2      	ldr	r5, [pc, #648]	@ (8005c60 <_dtoa_r+0x5c0>)
 80059d8:	b954      	cbnz	r4, 80059f0 <_dtoa_r+0x350>
 80059da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	f7fa ff3b 	bl	800085c <__aeabi_ddiv>
 80059e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ea:	e028      	b.n	8005a3e <_dtoa_r+0x39e>
 80059ec:	2602      	movs	r6, #2
 80059ee:	e7f2      	b.n	80059d6 <_dtoa_r+0x336>
 80059f0:	07e1      	lsls	r1, r4, #31
 80059f2:	d508      	bpl.n	8005a06 <_dtoa_r+0x366>
 80059f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059fc:	f7fa fe04 	bl	8000608 <__aeabi_dmul>
 8005a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a04:	3601      	adds	r6, #1
 8005a06:	1064      	asrs	r4, r4, #1
 8005a08:	3508      	adds	r5, #8
 8005a0a:	e7e5      	b.n	80059d8 <_dtoa_r+0x338>
 8005a0c:	f000 80d2 	beq.w	8005bb4 <_dtoa_r+0x514>
 8005a10:	427c      	negs	r4, r7
 8005a12:	4b92      	ldr	r3, [pc, #584]	@ (8005c5c <_dtoa_r+0x5bc>)
 8005a14:	4d92      	ldr	r5, [pc, #584]	@ (8005c60 <_dtoa_r+0x5c0>)
 8005a16:	f004 020f 	and.w	r2, r4, #15
 8005a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a26:	f7fa fdef 	bl	8000608 <__aeabi_dmul>
 8005a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2e:	1124      	asrs	r4, r4, #4
 8005a30:	2300      	movs	r3, #0
 8005a32:	2602      	movs	r6, #2
 8005a34:	2c00      	cmp	r4, #0
 8005a36:	f040 80b2 	bne.w	8005b9e <_dtoa_r+0x4fe>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1d3      	bne.n	80059e6 <_dtoa_r+0x346>
 8005a3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80b7 	beq.w	8005bb8 <_dtoa_r+0x518>
 8005a4a:	4b86      	ldr	r3, [pc, #536]	@ (8005c64 <_dtoa_r+0x5c4>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	4629      	mov	r1, r5
 8005a52:	f7fb f84b 	bl	8000aec <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f000 80ae 	beq.w	8005bb8 <_dtoa_r+0x518>
 8005a5c:	9b07      	ldr	r3, [sp, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80aa 	beq.w	8005bb8 <_dtoa_r+0x518>
 8005a64:	9b00      	ldr	r3, [sp, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	dd37      	ble.n	8005ada <_dtoa_r+0x43a>
 8005a6a:	1e7b      	subs	r3, r7, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4b7d      	ldr	r3, [pc, #500]	@ (8005c68 <_dtoa_r+0x5c8>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	4629      	mov	r1, r5
 8005a76:	f7fa fdc7 	bl	8000608 <__aeabi_dmul>
 8005a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a7e:	9c00      	ldr	r4, [sp, #0]
 8005a80:	3601      	adds	r6, #1
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7fa fd56 	bl	8000534 <__aeabi_i2d>
 8005a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a8c:	f7fa fdbc 	bl	8000608 <__aeabi_dmul>
 8005a90:	4b76      	ldr	r3, [pc, #472]	@ (8005c6c <_dtoa_r+0x5cc>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f7fa fc02 	bl	800029c <__adddf3>
 8005a98:	4605      	mov	r5, r0
 8005a9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a9e:	2c00      	cmp	r4, #0
 8005aa0:	f040 808d 	bne.w	8005bbe <_dtoa_r+0x51e>
 8005aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa8:	4b71      	ldr	r3, [pc, #452]	@ (8005c70 <_dtoa_r+0x5d0>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fbf4 	bl	8000298 <__aeabi_dsub>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ab8:	462a      	mov	r2, r5
 8005aba:	4633      	mov	r3, r6
 8005abc:	f7fb f834 	bl	8000b28 <__aeabi_dcmpgt>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	f040 828b 	bne.w	8005fdc <_dtoa_r+0x93c>
 8005ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aca:	462a      	mov	r2, r5
 8005acc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ad0:	f7fb f80c 	bl	8000aec <__aeabi_dcmplt>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f040 8128 	bne.w	8005d2a <_dtoa_r+0x68a>
 8005ada:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ade:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f2c0 815a 	blt.w	8005d9e <_dtoa_r+0x6fe>
 8005aea:	2f0e      	cmp	r7, #14
 8005aec:	f300 8157 	bgt.w	8005d9e <_dtoa_r+0x6fe>
 8005af0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c5c <_dtoa_r+0x5bc>)
 8005af2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005af6:	ed93 7b00 	vldr	d7, [r3]
 8005afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	ed8d 7b00 	vstr	d7, [sp]
 8005b02:	da03      	bge.n	8005b0c <_dtoa_r+0x46c>
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f340 8101 	ble.w	8005d0e <_dtoa_r+0x66e>
 8005b0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b10:	4656      	mov	r6, sl
 8005b12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b16:	4620      	mov	r0, r4
 8005b18:	4629      	mov	r1, r5
 8005b1a:	f7fa fe9f 	bl	800085c <__aeabi_ddiv>
 8005b1e:	f7fb f823 	bl	8000b68 <__aeabi_d2iz>
 8005b22:	4680      	mov	r8, r0
 8005b24:	f7fa fd06 	bl	8000534 <__aeabi_i2d>
 8005b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2c:	f7fa fd6c 	bl	8000608 <__aeabi_dmul>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4620      	mov	r0, r4
 8005b36:	4629      	mov	r1, r5
 8005b38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b3c:	f7fa fbac 	bl	8000298 <__aeabi_dsub>
 8005b40:	f806 4b01 	strb.w	r4, [r6], #1
 8005b44:	9d07      	ldr	r5, [sp, #28]
 8005b46:	eba6 040a 	sub.w	r4, r6, sl
 8005b4a:	42a5      	cmp	r5, r4
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	f040 8117 	bne.w	8005d82 <_dtoa_r+0x6e2>
 8005b54:	f7fa fba2 	bl	800029c <__adddf3>
 8005b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	f7fa ffe2 	bl	8000b28 <__aeabi_dcmpgt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f040 80f9 	bne.w	8005d5c <_dtoa_r+0x6bc>
 8005b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b76:	b118      	cbz	r0, 8005b80 <_dtoa_r+0x4e0>
 8005b78:	f018 0f01 	tst.w	r8, #1
 8005b7c:	f040 80ee 	bne.w	8005d5c <_dtoa_r+0x6bc>
 8005b80:	4649      	mov	r1, r9
 8005b82:	4658      	mov	r0, fp
 8005b84:	f000 fc90 	bl	80064a8 <_Bfree>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	7033      	strb	r3, [r6, #0]
 8005b8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b8e:	3701      	adds	r7, #1
 8005b90:	601f      	str	r7, [r3, #0]
 8005b92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 831d 	beq.w	80061d4 <_dtoa_r+0xb34>
 8005b9a:	601e      	str	r6, [r3, #0]
 8005b9c:	e31a      	b.n	80061d4 <_dtoa_r+0xb34>
 8005b9e:	07e2      	lsls	r2, r4, #31
 8005ba0:	d505      	bpl.n	8005bae <_dtoa_r+0x50e>
 8005ba2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ba6:	f7fa fd2f 	bl	8000608 <__aeabi_dmul>
 8005baa:	3601      	adds	r6, #1
 8005bac:	2301      	movs	r3, #1
 8005bae:	1064      	asrs	r4, r4, #1
 8005bb0:	3508      	adds	r5, #8
 8005bb2:	e73f      	b.n	8005a34 <_dtoa_r+0x394>
 8005bb4:	2602      	movs	r6, #2
 8005bb6:	e742      	b.n	8005a3e <_dtoa_r+0x39e>
 8005bb8:	9c07      	ldr	r4, [sp, #28]
 8005bba:	9704      	str	r7, [sp, #16]
 8005bbc:	e761      	b.n	8005a82 <_dtoa_r+0x3e2>
 8005bbe:	4b27      	ldr	r3, [pc, #156]	@ (8005c5c <_dtoa_r+0x5bc>)
 8005bc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bca:	4454      	add	r4, sl
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d053      	beq.n	8005c78 <_dtoa_r+0x5d8>
 8005bd0:	4928      	ldr	r1, [pc, #160]	@ (8005c74 <_dtoa_r+0x5d4>)
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f7fa fe42 	bl	800085c <__aeabi_ddiv>
 8005bd8:	4633      	mov	r3, r6
 8005bda:	462a      	mov	r2, r5
 8005bdc:	f7fa fb5c 	bl	8000298 <__aeabi_dsub>
 8005be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005be4:	4656      	mov	r6, sl
 8005be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bea:	f7fa ffbd 	bl	8000b68 <__aeabi_d2iz>
 8005bee:	4605      	mov	r5, r0
 8005bf0:	f7fa fca0 	bl	8000534 <__aeabi_i2d>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfc:	f7fa fb4c 	bl	8000298 <__aeabi_dsub>
 8005c00:	3530      	adds	r5, #48	@ 0x30
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c0a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c12:	f7fa ff6b 	bl	8000aec <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d171      	bne.n	8005cfe <_dtoa_r+0x65e>
 8005c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c1e:	4911      	ldr	r1, [pc, #68]	@ (8005c64 <_dtoa_r+0x5c4>)
 8005c20:	2000      	movs	r0, #0
 8005c22:	f7fa fb39 	bl	8000298 <__aeabi_dsub>
 8005c26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c2a:	f7fa ff5f 	bl	8000aec <__aeabi_dcmplt>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f040 8095 	bne.w	8005d5e <_dtoa_r+0x6be>
 8005c34:	42a6      	cmp	r6, r4
 8005c36:	f43f af50 	beq.w	8005ada <_dtoa_r+0x43a>
 8005c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <_dtoa_r+0x5c8>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	f7fa fce1 	bl	8000608 <__aeabi_dmul>
 8005c46:	4b08      	ldr	r3, [pc, #32]	@ (8005c68 <_dtoa_r+0x5c8>)
 8005c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c52:	f7fa fcd9 	bl	8000608 <__aeabi_dmul>
 8005c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c5a:	e7c4      	b.n	8005be6 <_dtoa_r+0x546>
 8005c5c:	0800a318 	.word	0x0800a318
 8005c60:	0800a2f0 	.word	0x0800a2f0
 8005c64:	3ff00000 	.word	0x3ff00000
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	401c0000 	.word	0x401c0000
 8005c70:	40140000 	.word	0x40140000
 8005c74:	3fe00000 	.word	0x3fe00000
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7fa fcc4 	bl	8000608 <__aeabi_dmul>
 8005c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c84:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c86:	4656      	mov	r6, sl
 8005c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8c:	f7fa ff6c 	bl	8000b68 <__aeabi_d2iz>
 8005c90:	4605      	mov	r5, r0
 8005c92:	f7fa fc4f 	bl	8000534 <__aeabi_i2d>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9e:	f7fa fafb 	bl	8000298 <__aeabi_dsub>
 8005ca2:	3530      	adds	r5, #48	@ 0x30
 8005ca4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	42a6      	cmp	r6, r4
 8005cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	d124      	bne.n	8005d02 <_dtoa_r+0x662>
 8005cb8:	4bac      	ldr	r3, [pc, #688]	@ (8005f6c <_dtoa_r+0x8cc>)
 8005cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cbe:	f7fa faed 	bl	800029c <__adddf3>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cca:	f7fa ff2d 	bl	8000b28 <__aeabi_dcmpgt>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d145      	bne.n	8005d5e <_dtoa_r+0x6be>
 8005cd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cd6:	49a5      	ldr	r1, [pc, #660]	@ (8005f6c <_dtoa_r+0x8cc>)
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f7fa fadd 	bl	8000298 <__aeabi_dsub>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce6:	f7fa ff01 	bl	8000aec <__aeabi_dcmplt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f43f aef5 	beq.w	8005ada <_dtoa_r+0x43a>
 8005cf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cf2:	1e73      	subs	r3, r6, #1
 8005cf4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cfa:	2b30      	cmp	r3, #48	@ 0x30
 8005cfc:	d0f8      	beq.n	8005cf0 <_dtoa_r+0x650>
 8005cfe:	9f04      	ldr	r7, [sp, #16]
 8005d00:	e73e      	b.n	8005b80 <_dtoa_r+0x4e0>
 8005d02:	4b9b      	ldr	r3, [pc, #620]	@ (8005f70 <_dtoa_r+0x8d0>)
 8005d04:	f7fa fc80 	bl	8000608 <__aeabi_dmul>
 8005d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d0c:	e7bc      	b.n	8005c88 <_dtoa_r+0x5e8>
 8005d0e:	d10c      	bne.n	8005d2a <_dtoa_r+0x68a>
 8005d10:	4b98      	ldr	r3, [pc, #608]	@ (8005f74 <_dtoa_r+0x8d4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d18:	f7fa fc76 	bl	8000608 <__aeabi_dmul>
 8005d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d20:	f7fa fef8 	bl	8000b14 <__aeabi_dcmpge>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f000 8157 	beq.w	8005fd8 <_dtoa_r+0x938>
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	4625      	mov	r5, r4
 8005d2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d30:	43db      	mvns	r3, r3
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	4656      	mov	r6, sl
 8005d36:	2700      	movs	r7, #0
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4658      	mov	r0, fp
 8005d3c:	f000 fbb4 	bl	80064a8 <_Bfree>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	d0dc      	beq.n	8005cfe <_dtoa_r+0x65e>
 8005d44:	b12f      	cbz	r7, 8005d52 <_dtoa_r+0x6b2>
 8005d46:	42af      	cmp	r7, r5
 8005d48:	d003      	beq.n	8005d52 <_dtoa_r+0x6b2>
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f000 fbab 	bl	80064a8 <_Bfree>
 8005d52:	4629      	mov	r1, r5
 8005d54:	4658      	mov	r0, fp
 8005d56:	f000 fba7 	bl	80064a8 <_Bfree>
 8005d5a:	e7d0      	b.n	8005cfe <_dtoa_r+0x65e>
 8005d5c:	9704      	str	r7, [sp, #16]
 8005d5e:	4633      	mov	r3, r6
 8005d60:	461e      	mov	r6, r3
 8005d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d66:	2a39      	cmp	r2, #57	@ 0x39
 8005d68:	d107      	bne.n	8005d7a <_dtoa_r+0x6da>
 8005d6a:	459a      	cmp	sl, r3
 8005d6c:	d1f8      	bne.n	8005d60 <_dtoa_r+0x6c0>
 8005d6e:	9a04      	ldr	r2, [sp, #16]
 8005d70:	3201      	adds	r2, #1
 8005d72:	9204      	str	r2, [sp, #16]
 8005d74:	2230      	movs	r2, #48	@ 0x30
 8005d76:	f88a 2000 	strb.w	r2, [sl]
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	3201      	adds	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e7bd      	b.n	8005cfe <_dtoa_r+0x65e>
 8005d82:	4b7b      	ldr	r3, [pc, #492]	@ (8005f70 <_dtoa_r+0x8d0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	f7fa fc3f 	bl	8000608 <__aeabi_dmul>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	460d      	mov	r5, r1
 8005d92:	f7fa fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f aebb 	beq.w	8005b12 <_dtoa_r+0x472>
 8005d9c:	e6f0      	b.n	8005b80 <_dtoa_r+0x4e0>
 8005d9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	f000 80db 	beq.w	8005f5c <_dtoa_r+0x8bc>
 8005da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da8:	2a01      	cmp	r2, #1
 8005daa:	f300 80bf 	bgt.w	8005f2c <_dtoa_r+0x88c>
 8005dae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	f000 80b7 	beq.w	8005f24 <_dtoa_r+0x884>
 8005db6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005dbc:	4646      	mov	r6, r8
 8005dbe:	9a08      	ldr	r2, [sp, #32]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	441a      	add	r2, r3
 8005dc4:	4658      	mov	r0, fp
 8005dc6:	4498      	add	r8, r3
 8005dc8:	9208      	str	r2, [sp, #32]
 8005dca:	f000 fc21 	bl	8006610 <__i2b>
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b15e      	cbz	r6, 8005dea <_dtoa_r+0x74a>
 8005dd2:	9b08      	ldr	r3, [sp, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd08      	ble.n	8005dea <_dtoa_r+0x74a>
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	9a08      	ldr	r2, [sp, #32]
 8005ddc:	bfa8      	it	ge
 8005dde:	4633      	movge	r3, r6
 8005de0:	eba8 0803 	sub.w	r8, r8, r3
 8005de4:	1af6      	subs	r6, r6, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dec:	b1f3      	cbz	r3, 8005e2c <_dtoa_r+0x78c>
 8005dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80b7 	beq.w	8005f64 <_dtoa_r+0x8c4>
 8005df6:	b18c      	cbz	r4, 8005e1c <_dtoa_r+0x77c>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	4658      	mov	r0, fp
 8005dfe:	f000 fcc7 	bl	8006790 <__pow5mult>
 8005e02:	464a      	mov	r2, r9
 8005e04:	4601      	mov	r1, r0
 8005e06:	4605      	mov	r5, r0
 8005e08:	4658      	mov	r0, fp
 8005e0a:	f000 fc17 	bl	800663c <__multiply>
 8005e0e:	4649      	mov	r1, r9
 8005e10:	9004      	str	r0, [sp, #16]
 8005e12:	4658      	mov	r0, fp
 8005e14:	f000 fb48 	bl	80064a8 <_Bfree>
 8005e18:	9b04      	ldr	r3, [sp, #16]
 8005e1a:	4699      	mov	r9, r3
 8005e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e1e:	1b1a      	subs	r2, r3, r4
 8005e20:	d004      	beq.n	8005e2c <_dtoa_r+0x78c>
 8005e22:	4649      	mov	r1, r9
 8005e24:	4658      	mov	r0, fp
 8005e26:	f000 fcb3 	bl	8006790 <__pow5mult>
 8005e2a:	4681      	mov	r9, r0
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4658      	mov	r0, fp
 8005e30:	f000 fbee 	bl	8006610 <__i2b>
 8005e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e36:	4604      	mov	r4, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 81cf 	beq.w	80061dc <_dtoa_r+0xb3c>
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4601      	mov	r1, r0
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 fca4 	bl	8006790 <__pow5mult>
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	f300 8095 	bgt.w	8005f7c <_dtoa_r+0x8dc>
 8005e52:	9b02      	ldr	r3, [sp, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8087 	bne.w	8005f68 <_dtoa_r+0x8c8>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 8089 	bne.w	8005f78 <_dtoa_r+0x8d8>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e6c:	0d1b      	lsrs	r3, r3, #20
 8005e6e:	051b      	lsls	r3, r3, #20
 8005e70:	b12b      	cbz	r3, 8005e7e <_dtoa_r+0x7de>
 8005e72:	9b08      	ldr	r3, [sp, #32]
 8005e74:	3301      	adds	r3, #1
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	f108 0801 	add.w	r8, r8, #1
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 81b0 	beq.w	80061e8 <_dtoa_r+0xb48>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e8e:	6918      	ldr	r0, [r3, #16]
 8005e90:	f000 fb72 	bl	8006578 <__hi0bits>
 8005e94:	f1c0 0020 	rsb	r0, r0, #32
 8005e98:	9b08      	ldr	r3, [sp, #32]
 8005e9a:	4418      	add	r0, r3
 8005e9c:	f010 001f 	ands.w	r0, r0, #31
 8005ea0:	d077      	beq.n	8005f92 <_dtoa_r+0x8f2>
 8005ea2:	f1c0 0320 	rsb	r3, r0, #32
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	dd6b      	ble.n	8005f82 <_dtoa_r+0x8e2>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	f1c0 001c 	rsb	r0, r0, #28
 8005eb0:	4403      	add	r3, r0
 8005eb2:	4480      	add	r8, r0
 8005eb4:	4406      	add	r6, r0
 8005eb6:	9308      	str	r3, [sp, #32]
 8005eb8:	f1b8 0f00 	cmp.w	r8, #0
 8005ebc:	dd05      	ble.n	8005eca <_dtoa_r+0x82a>
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	4658      	mov	r0, fp
 8005ec4:	f000 fcbe 	bl	8006844 <__lshift>
 8005ec8:	4681      	mov	r9, r0
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dd05      	ble.n	8005edc <_dtoa_r+0x83c>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4658      	mov	r0, fp
 8005ed6:	f000 fcb5 	bl	8006844 <__lshift>
 8005eda:	4604      	mov	r4, r0
 8005edc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d059      	beq.n	8005f96 <_dtoa_r+0x8f6>
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	4648      	mov	r0, r9
 8005ee6:	f000 fd19 	bl	800691c <__mcmp>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	da53      	bge.n	8005f96 <_dtoa_r+0x8f6>
 8005eee:	1e7b      	subs	r3, r7, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4658      	mov	r0, fp
 8005efa:	f000 faf7 	bl	80064ec <__multadd>
 8005efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f00:	4681      	mov	r9, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8172 	beq.w	80061ec <_dtoa_r+0xb4c>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f000 faec 	bl	80064ec <__multadd>
 8005f14:	9b00      	ldr	r3, [sp, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	4605      	mov	r5, r0
 8005f1a:	dc67      	bgt.n	8005fec <_dtoa_r+0x94c>
 8005f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	dc41      	bgt.n	8005fa6 <_dtoa_r+0x906>
 8005f22:	e063      	b.n	8005fec <_dtoa_r+0x94c>
 8005f24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f2a:	e746      	b.n	8005dba <_dtoa_r+0x71a>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	1e5c      	subs	r4, r3, #1
 8005f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	bfbf      	itttt	lt
 8005f36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f3c:	1ae3      	sublt	r3, r4, r3
 8005f3e:	bfb4      	ite	lt
 8005f40:	18d2      	addlt	r2, r2, r3
 8005f42:	1b1c      	subge	r4, r3, r4
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	bfbc      	itt	lt
 8005f48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f4a:	2400      	movlt	r4, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfb5      	itete	lt
 8005f50:	eba8 0603 	sublt.w	r6, r8, r3
 8005f54:	9b07      	ldrge	r3, [sp, #28]
 8005f56:	2300      	movlt	r3, #0
 8005f58:	4646      	movge	r6, r8
 8005f5a:	e730      	b.n	8005dbe <_dtoa_r+0x71e>
 8005f5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f60:	4646      	mov	r6, r8
 8005f62:	e735      	b.n	8005dd0 <_dtoa_r+0x730>
 8005f64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f66:	e75c      	b.n	8005e22 <_dtoa_r+0x782>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e788      	b.n	8005e7e <_dtoa_r+0x7de>
 8005f6c:	3fe00000 	.word	0x3fe00000
 8005f70:	40240000 	.word	0x40240000
 8005f74:	40140000 	.word	0x40140000
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	e780      	b.n	8005e7e <_dtoa_r+0x7de>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f80:	e782      	b.n	8005e88 <_dtoa_r+0x7e8>
 8005f82:	d099      	beq.n	8005eb8 <_dtoa_r+0x818>
 8005f84:	9a08      	ldr	r2, [sp, #32]
 8005f86:	331c      	adds	r3, #28
 8005f88:	441a      	add	r2, r3
 8005f8a:	4498      	add	r8, r3
 8005f8c:	441e      	add	r6, r3
 8005f8e:	9208      	str	r2, [sp, #32]
 8005f90:	e792      	b.n	8005eb8 <_dtoa_r+0x818>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e7f6      	b.n	8005f84 <_dtoa_r+0x8e4>
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	9704      	str	r7, [sp, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dc20      	bgt.n	8005fe0 <_dtoa_r+0x940>
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	dd1e      	ble.n	8005fe4 <_dtoa_r+0x944>
 8005fa6:	9b00      	ldr	r3, [sp, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f47f aec0 	bne.w	8005d2e <_dtoa_r+0x68e>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	4658      	mov	r0, fp
 8005fb4:	f000 fa9a 	bl	80064ec <__multadd>
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f000 fcad 	bl	800691c <__mcmp>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f77f aeb3 	ble.w	8005d2e <_dtoa_r+0x68e>
 8005fc8:	4656      	mov	r6, sl
 8005fca:	2331      	movs	r3, #49	@ 0x31
 8005fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8005fd0:	9b04      	ldr	r3, [sp, #16]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	e6ae      	b.n	8005d36 <_dtoa_r+0x696>
 8005fd8:	9c07      	ldr	r4, [sp, #28]
 8005fda:	9704      	str	r7, [sp, #16]
 8005fdc:	4625      	mov	r5, r4
 8005fde:	e7f3      	b.n	8005fc8 <_dtoa_r+0x928>
 8005fe0:	9b07      	ldr	r3, [sp, #28]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8104 	beq.w	80061f4 <_dtoa_r+0xb54>
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	dd05      	ble.n	8005ffc <_dtoa_r+0x95c>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f000 fc25 	bl	8006844 <__lshift>
 8005ffa:	4605      	mov	r5, r0
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d05a      	beq.n	80060b8 <_dtoa_r+0xa18>
 8006002:	6869      	ldr	r1, [r5, #4]
 8006004:	4658      	mov	r0, fp
 8006006:	f000 fa0f 	bl	8006428 <_Balloc>
 800600a:	4606      	mov	r6, r0
 800600c:	b928      	cbnz	r0, 800601a <_dtoa_r+0x97a>
 800600e:	4b84      	ldr	r3, [pc, #528]	@ (8006220 <_dtoa_r+0xb80>)
 8006010:	4602      	mov	r2, r0
 8006012:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006016:	f7ff bb5a 	b.w	80056ce <_dtoa_r+0x2e>
 800601a:	692a      	ldr	r2, [r5, #16]
 800601c:	3202      	adds	r2, #2
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	f105 010c 	add.w	r1, r5, #12
 8006024:	300c      	adds	r0, #12
 8006026:	f001 f813 	bl	8007050 <memcpy>
 800602a:	2201      	movs	r2, #1
 800602c:	4631      	mov	r1, r6
 800602e:	4658      	mov	r0, fp
 8006030:	f000 fc08 	bl	8006844 <__lshift>
 8006034:	f10a 0301 	add.w	r3, sl, #1
 8006038:	9307      	str	r3, [sp, #28]
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	4453      	add	r3, sl
 800603e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006040:	9b02      	ldr	r3, [sp, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	462f      	mov	r7, r5
 8006048:	930a      	str	r3, [sp, #40]	@ 0x28
 800604a:	4605      	mov	r5, r0
 800604c:	9b07      	ldr	r3, [sp, #28]
 800604e:	4621      	mov	r1, r4
 8006050:	3b01      	subs	r3, #1
 8006052:	4648      	mov	r0, r9
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	f7ff fa98 	bl	800558a <quorem>
 800605a:	4639      	mov	r1, r7
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006062:	4648      	mov	r0, r9
 8006064:	f000 fc5a 	bl	800691c <__mcmp>
 8006068:	462a      	mov	r2, r5
 800606a:	9008      	str	r0, [sp, #32]
 800606c:	4621      	mov	r1, r4
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fc70 	bl	8006954 <__mdiff>
 8006074:	68c2      	ldr	r2, [r0, #12]
 8006076:	4606      	mov	r6, r0
 8006078:	bb02      	cbnz	r2, 80060bc <_dtoa_r+0xa1c>
 800607a:	4601      	mov	r1, r0
 800607c:	4648      	mov	r0, r9
 800607e:	f000 fc4d 	bl	800691c <__mcmp>
 8006082:	4602      	mov	r2, r0
 8006084:	4631      	mov	r1, r6
 8006086:	4658      	mov	r0, fp
 8006088:	920e      	str	r2, [sp, #56]	@ 0x38
 800608a:	f000 fa0d 	bl	80064a8 <_Bfree>
 800608e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006090:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006092:	9e07      	ldr	r6, [sp, #28]
 8006094:	ea43 0102 	orr.w	r1, r3, r2
 8006098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609a:	4319      	orrs	r1, r3
 800609c:	d110      	bne.n	80060c0 <_dtoa_r+0xa20>
 800609e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060a2:	d029      	beq.n	80060f8 <_dtoa_r+0xa58>
 80060a4:	9b08      	ldr	r3, [sp, #32]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dd02      	ble.n	80060b0 <_dtoa_r+0xa10>
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060b0:	9b00      	ldr	r3, [sp, #0]
 80060b2:	f883 8000 	strb.w	r8, [r3]
 80060b6:	e63f      	b.n	8005d38 <_dtoa_r+0x698>
 80060b8:	4628      	mov	r0, r5
 80060ba:	e7bb      	b.n	8006034 <_dtoa_r+0x994>
 80060bc:	2201      	movs	r2, #1
 80060be:	e7e1      	b.n	8006084 <_dtoa_r+0x9e4>
 80060c0:	9b08      	ldr	r3, [sp, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	db04      	blt.n	80060d0 <_dtoa_r+0xa30>
 80060c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060c8:	430b      	orrs	r3, r1
 80060ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060cc:	430b      	orrs	r3, r1
 80060ce:	d120      	bne.n	8006112 <_dtoa_r+0xa72>
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	dded      	ble.n	80060b0 <_dtoa_r+0xa10>
 80060d4:	4649      	mov	r1, r9
 80060d6:	2201      	movs	r2, #1
 80060d8:	4658      	mov	r0, fp
 80060da:	f000 fbb3 	bl	8006844 <__lshift>
 80060de:	4621      	mov	r1, r4
 80060e0:	4681      	mov	r9, r0
 80060e2:	f000 fc1b 	bl	800691c <__mcmp>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	dc03      	bgt.n	80060f2 <_dtoa_r+0xa52>
 80060ea:	d1e1      	bne.n	80060b0 <_dtoa_r+0xa10>
 80060ec:	f018 0f01 	tst.w	r8, #1
 80060f0:	d0de      	beq.n	80060b0 <_dtoa_r+0xa10>
 80060f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060f6:	d1d8      	bne.n	80060aa <_dtoa_r+0xa0a>
 80060f8:	9a00      	ldr	r2, [sp, #0]
 80060fa:	2339      	movs	r3, #57	@ 0x39
 80060fc:	7013      	strb	r3, [r2, #0]
 80060fe:	4633      	mov	r3, r6
 8006100:	461e      	mov	r6, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006108:	2a39      	cmp	r2, #57	@ 0x39
 800610a:	d052      	beq.n	80061b2 <_dtoa_r+0xb12>
 800610c:	3201      	adds	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e612      	b.n	8005d38 <_dtoa_r+0x698>
 8006112:	2a00      	cmp	r2, #0
 8006114:	dd07      	ble.n	8006126 <_dtoa_r+0xa86>
 8006116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800611a:	d0ed      	beq.n	80060f8 <_dtoa_r+0xa58>
 800611c:	9a00      	ldr	r2, [sp, #0]
 800611e:	f108 0301 	add.w	r3, r8, #1
 8006122:	7013      	strb	r3, [r2, #0]
 8006124:	e608      	b.n	8005d38 <_dtoa_r+0x698>
 8006126:	9b07      	ldr	r3, [sp, #28]
 8006128:	9a07      	ldr	r2, [sp, #28]
 800612a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800612e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006130:	4293      	cmp	r3, r2
 8006132:	d028      	beq.n	8006186 <_dtoa_r+0xae6>
 8006134:	4649      	mov	r1, r9
 8006136:	2300      	movs	r3, #0
 8006138:	220a      	movs	r2, #10
 800613a:	4658      	mov	r0, fp
 800613c:	f000 f9d6 	bl	80064ec <__multadd>
 8006140:	42af      	cmp	r7, r5
 8006142:	4681      	mov	r9, r0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	f04f 020a 	mov.w	r2, #10
 800614c:	4639      	mov	r1, r7
 800614e:	4658      	mov	r0, fp
 8006150:	d107      	bne.n	8006162 <_dtoa_r+0xac2>
 8006152:	f000 f9cb 	bl	80064ec <__multadd>
 8006156:	4607      	mov	r7, r0
 8006158:	4605      	mov	r5, r0
 800615a:	9b07      	ldr	r3, [sp, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	e774      	b.n	800604c <_dtoa_r+0x9ac>
 8006162:	f000 f9c3 	bl	80064ec <__multadd>
 8006166:	4629      	mov	r1, r5
 8006168:	4607      	mov	r7, r0
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4658      	mov	r0, fp
 8006170:	f000 f9bc 	bl	80064ec <__multadd>
 8006174:	4605      	mov	r5, r0
 8006176:	e7f0      	b.n	800615a <_dtoa_r+0xaba>
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfcc      	ite	gt
 800617e:	461e      	movgt	r6, r3
 8006180:	2601      	movle	r6, #1
 8006182:	4456      	add	r6, sl
 8006184:	2700      	movs	r7, #0
 8006186:	4649      	mov	r1, r9
 8006188:	2201      	movs	r2, #1
 800618a:	4658      	mov	r0, fp
 800618c:	f000 fb5a 	bl	8006844 <__lshift>
 8006190:	4621      	mov	r1, r4
 8006192:	4681      	mov	r9, r0
 8006194:	f000 fbc2 	bl	800691c <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	dcb0      	bgt.n	80060fe <_dtoa_r+0xa5e>
 800619c:	d102      	bne.n	80061a4 <_dtoa_r+0xb04>
 800619e:	f018 0f01 	tst.w	r8, #1
 80061a2:	d1ac      	bne.n	80060fe <_dtoa_r+0xa5e>
 80061a4:	4633      	mov	r3, r6
 80061a6:	461e      	mov	r6, r3
 80061a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ac:	2a30      	cmp	r2, #48	@ 0x30
 80061ae:	d0fa      	beq.n	80061a6 <_dtoa_r+0xb06>
 80061b0:	e5c2      	b.n	8005d38 <_dtoa_r+0x698>
 80061b2:	459a      	cmp	sl, r3
 80061b4:	d1a4      	bne.n	8006100 <_dtoa_r+0xa60>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	3301      	adds	r3, #1
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	2331      	movs	r3, #49	@ 0x31
 80061be:	f88a 3000 	strb.w	r3, [sl]
 80061c2:	e5b9      	b.n	8005d38 <_dtoa_r+0x698>
 80061c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006224 <_dtoa_r+0xb84>
 80061ca:	b11b      	cbz	r3, 80061d4 <_dtoa_r+0xb34>
 80061cc:	f10a 0308 	add.w	r3, sl, #8
 80061d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	4650      	mov	r0, sl
 80061d6:	b019      	add	sp, #100	@ 0x64
 80061d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	2b01      	cmp	r3, #1
 80061e0:	f77f ae37 	ble.w	8005e52 <_dtoa_r+0x7b2>
 80061e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e8:	2001      	movs	r0, #1
 80061ea:	e655      	b.n	8005e98 <_dtoa_r+0x7f8>
 80061ec:	9b00      	ldr	r3, [sp, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f77f aed6 	ble.w	8005fa0 <_dtoa_r+0x900>
 80061f4:	4656      	mov	r6, sl
 80061f6:	4621      	mov	r1, r4
 80061f8:	4648      	mov	r0, r9
 80061fa:	f7ff f9c6 	bl	800558a <quorem>
 80061fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006202:	f806 8b01 	strb.w	r8, [r6], #1
 8006206:	9b00      	ldr	r3, [sp, #0]
 8006208:	eba6 020a 	sub.w	r2, r6, sl
 800620c:	4293      	cmp	r3, r2
 800620e:	ddb3      	ble.n	8006178 <_dtoa_r+0xad8>
 8006210:	4649      	mov	r1, r9
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	4658      	mov	r0, fp
 8006218:	f000 f968 	bl	80064ec <__multadd>
 800621c:	4681      	mov	r9, r0
 800621e:	e7ea      	b.n	80061f6 <_dtoa_r+0xb56>
 8006220:	0800a274 	.word	0x0800a274
 8006224:	0800a1f8 	.word	0x0800a1f8

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d041      	beq.n	80062b4 <_free_r+0x8c>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f000 f8e8 	bl	8006410 <__malloc_lock>
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <_free_r+0x90>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f000 b8e4 	b.w	800641c <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4408      	add	r0, r1
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x22>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	200033dc 	.word	0x200033dc

080062bc <malloc>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <malloc+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f000 b825 	b.w	8006310 <_malloc_r>
 80062c6:	bf00      	nop
 80062c8:	20002024 	.word	0x20002024

080062cc <sbrk_aligned>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4e0f      	ldr	r6, [pc, #60]	@ (800630c <sbrk_aligned+0x40>)
 80062d0:	460c      	mov	r4, r1
 80062d2:	6831      	ldr	r1, [r6, #0]
 80062d4:	4605      	mov	r5, r0
 80062d6:	b911      	cbnz	r1, 80062de <sbrk_aligned+0x12>
 80062d8:	f000 feaa 	bl	8007030 <_sbrk_r>
 80062dc:	6030      	str	r0, [r6, #0]
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fea5 	bl	8007030 <_sbrk_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d103      	bne.n	80062f2 <sbrk_aligned+0x26>
 80062ea:	f04f 34ff 	mov.w	r4, #4294967295
 80062ee:	4620      	mov	r0, r4
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d0f8      	beq.n	80062ee <sbrk_aligned+0x22>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fe96 	bl	8007030 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d1f2      	bne.n	80062ee <sbrk_aligned+0x22>
 8006308:	e7ef      	b.n	80062ea <sbrk_aligned+0x1e>
 800630a:	bf00      	nop
 800630c:	200033d8 	.word	0x200033d8

08006310 <_malloc_r>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4606      	mov	r6, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d904      	bls.n	8006336 <_malloc_r+0x26>
 800632c:	230c      	movs	r3, #12
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	2000      	movs	r0, #0
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800640c <_malloc_r+0xfc>
 800633a:	f000 f869 	bl	8006410 <__malloc_lock>
 800633e:	f8d8 3000 	ldr.w	r3, [r8]
 8006342:	461c      	mov	r4, r3
 8006344:	bb44      	cbnz	r4, 8006398 <_malloc_r+0x88>
 8006346:	4629      	mov	r1, r5
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ffbf 	bl	80062cc <sbrk_aligned>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	4604      	mov	r4, r0
 8006352:	d158      	bne.n	8006406 <_malloc_r+0xf6>
 8006354:	f8d8 4000 	ldr.w	r4, [r8]
 8006358:	4627      	mov	r7, r4
 800635a:	2f00      	cmp	r7, #0
 800635c:	d143      	bne.n	80063e6 <_malloc_r+0xd6>
 800635e:	2c00      	cmp	r4, #0
 8006360:	d04b      	beq.n	80063fa <_malloc_r+0xea>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4639      	mov	r1, r7
 8006366:	4630      	mov	r0, r6
 8006368:	eb04 0903 	add.w	r9, r4, r3
 800636c:	f000 fe60 	bl	8007030 <_sbrk_r>
 8006370:	4581      	cmp	r9, r0
 8006372:	d142      	bne.n	80063fa <_malloc_r+0xea>
 8006374:	6821      	ldr	r1, [r4, #0]
 8006376:	1a6d      	subs	r5, r5, r1
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffa6 	bl	80062cc <sbrk_aligned>
 8006380:	3001      	adds	r0, #1
 8006382:	d03a      	beq.n	80063fa <_malloc_r+0xea>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	442b      	add	r3, r5
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	f8d8 3000 	ldr.w	r3, [r8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	bb62      	cbnz	r2, 80063ec <_malloc_r+0xdc>
 8006392:	f8c8 7000 	str.w	r7, [r8]
 8006396:	e00f      	b.n	80063b8 <_malloc_r+0xa8>
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	1b52      	subs	r2, r2, r5
 800639c:	d420      	bmi.n	80063e0 <_malloc_r+0xd0>
 800639e:	2a0b      	cmp	r2, #11
 80063a0:	d917      	bls.n	80063d2 <_malloc_r+0xc2>
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	6025      	str	r5, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	6059      	strne	r1, [r3, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	bf08      	it	eq
 80063b0:	f8c8 1000 	streq.w	r1, [r8]
 80063b4:	5162      	str	r2, [r4, r5]
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 f82f 	bl	800641c <__malloc_unlock>
 80063be:	f104 000b 	add.w	r0, r4, #11
 80063c2:	1d23      	adds	r3, r4, #4
 80063c4:	f020 0007 	bic.w	r0, r0, #7
 80063c8:	1ac2      	subs	r2, r0, r3
 80063ca:	bf1c      	itt	ne
 80063cc:	1a1b      	subne	r3, r3, r0
 80063ce:	50a3      	strne	r3, [r4, r2]
 80063d0:	e7af      	b.n	8006332 <_malloc_r+0x22>
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	bf0c      	ite	eq
 80063d8:	f8c8 2000 	streq.w	r2, [r8]
 80063dc:	605a      	strne	r2, [r3, #4]
 80063de:	e7eb      	b.n	80063b8 <_malloc_r+0xa8>
 80063e0:	4623      	mov	r3, r4
 80063e2:	6864      	ldr	r4, [r4, #4]
 80063e4:	e7ae      	b.n	8006344 <_malloc_r+0x34>
 80063e6:	463c      	mov	r4, r7
 80063e8:	687f      	ldr	r7, [r7, #4]
 80063ea:	e7b6      	b.n	800635a <_malloc_r+0x4a>
 80063ec:	461a      	mov	r2, r3
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d1fb      	bne.n	80063ec <_malloc_r+0xdc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e7de      	b.n	80063b8 <_malloc_r+0xa8>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 f80c 	bl	800641c <__malloc_unlock>
 8006404:	e794      	b.n	8006330 <_malloc_r+0x20>
 8006406:	6005      	str	r5, [r0, #0]
 8006408:	e7d6      	b.n	80063b8 <_malloc_r+0xa8>
 800640a:	bf00      	nop
 800640c:	200033dc 	.word	0x200033dc

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff b8b8 	b.w	8005586 <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	200033d4 	.word	0x200033d4

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	@ (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff b8b3 	b.w	8005588 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	200033d4 	.word	0x200033d4

08006428 <_Balloc>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	69c6      	ldr	r6, [r0, #28]
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	b976      	cbnz	r6, 8006450 <_Balloc+0x28>
 8006432:	2010      	movs	r0, #16
 8006434:	f7ff ff42 	bl	80062bc <malloc>
 8006438:	4602      	mov	r2, r0
 800643a:	61e0      	str	r0, [r4, #28]
 800643c:	b920      	cbnz	r0, 8006448 <_Balloc+0x20>
 800643e:	4b18      	ldr	r3, [pc, #96]	@ (80064a0 <_Balloc+0x78>)
 8006440:	4818      	ldr	r0, [pc, #96]	@ (80064a4 <_Balloc+0x7c>)
 8006442:	216b      	movs	r1, #107	@ 0x6b
 8006444:	f000 fe12 	bl	800706c <__assert_func>
 8006448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800644c:	6006      	str	r6, [r0, #0]
 800644e:	60c6      	str	r6, [r0, #12]
 8006450:	69e6      	ldr	r6, [r4, #28]
 8006452:	68f3      	ldr	r3, [r6, #12]
 8006454:	b183      	cbz	r3, 8006478 <_Balloc+0x50>
 8006456:	69e3      	ldr	r3, [r4, #28]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800645e:	b9b8      	cbnz	r0, 8006490 <_Balloc+0x68>
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f605 	lsl.w	r6, r1, r5
 8006466:	1d72      	adds	r2, r6, #5
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fe1c 	bl	80070a8 <_calloc_r>
 8006470:	b160      	cbz	r0, 800648c <_Balloc+0x64>
 8006472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006476:	e00e      	b.n	8006496 <_Balloc+0x6e>
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	2104      	movs	r1, #4
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fe13 	bl	80070a8 <_calloc_r>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	60f0      	str	r0, [r6, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <_Balloc+0x2e>
 800648c:	2000      	movs	r0, #0
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006496:	2300      	movs	r3, #0
 8006498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800649c:	e7f7      	b.n	800648e <_Balloc+0x66>
 800649e:	bf00      	nop
 80064a0:	0800a205 	.word	0x0800a205
 80064a4:	0800a285 	.word	0x0800a285

080064a8 <_Bfree>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	69c6      	ldr	r6, [r0, #28]
 80064ac:	4605      	mov	r5, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Bfree+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7ff ff02 	bl	80062bc <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	61e8      	str	r0, [r5, #28]
 80064bc:	b920      	cbnz	r0, 80064c8 <_Bfree+0x20>
 80064be:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <_Bfree+0x3c>)
 80064c0:	4809      	ldr	r0, [pc, #36]	@ (80064e8 <_Bfree+0x40>)
 80064c2:	218f      	movs	r1, #143	@ 0x8f
 80064c4:	f000 fdd2 	bl	800706c <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	b13c      	cbz	r4, 80064e2 <_Bfree+0x3a>
 80064d2:	69eb      	ldr	r3, [r5, #28]
 80064d4:	6862      	ldr	r2, [r4, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064dc:	6021      	str	r1, [r4, #0]
 80064de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	0800a205 	.word	0x0800a205
 80064e8:	0800a285 	.word	0x0800a285

080064ec <__multadd>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	690d      	ldr	r5, [r1, #16]
 80064f2:	4607      	mov	r7, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	461e      	mov	r6, r3
 80064f8:	f101 0c14 	add.w	ip, r1, #20
 80064fc:	2000      	movs	r0, #0
 80064fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006502:	b299      	uxth	r1, r3
 8006504:	fb02 6101 	mla	r1, r2, r1, r6
 8006508:	0c1e      	lsrs	r6, r3, #16
 800650a:	0c0b      	lsrs	r3, r1, #16
 800650c:	fb02 3306 	mla	r3, r2, r6, r3
 8006510:	b289      	uxth	r1, r1
 8006512:	3001      	adds	r0, #1
 8006514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006518:	4285      	cmp	r5, r0
 800651a:	f84c 1b04 	str.w	r1, [ip], #4
 800651e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006522:	dcec      	bgt.n	80064fe <__multadd+0x12>
 8006524:	b30e      	cbz	r6, 800656a <__multadd+0x7e>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc19      	bgt.n	8006560 <__multadd+0x74>
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4638      	mov	r0, r7
 8006530:	3101      	adds	r1, #1
 8006532:	f7ff ff79 	bl	8006428 <_Balloc>
 8006536:	4680      	mov	r8, r0
 8006538:	b928      	cbnz	r0, 8006546 <__multadd+0x5a>
 800653a:	4602      	mov	r2, r0
 800653c:	4b0c      	ldr	r3, [pc, #48]	@ (8006570 <__multadd+0x84>)
 800653e:	480d      	ldr	r0, [pc, #52]	@ (8006574 <__multadd+0x88>)
 8006540:	21ba      	movs	r1, #186	@ 0xba
 8006542:	f000 fd93 	bl	800706c <__assert_func>
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	3202      	adds	r2, #2
 800654a:	f104 010c 	add.w	r1, r4, #12
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	300c      	adds	r0, #12
 8006552:	f000 fd7d 	bl	8007050 <memcpy>
 8006556:	4621      	mov	r1, r4
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <_Bfree>
 800655e:	4644      	mov	r4, r8
 8006560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006564:	3501      	adds	r5, #1
 8006566:	615e      	str	r6, [r3, #20]
 8006568:	6125      	str	r5, [r4, #16]
 800656a:	4620      	mov	r0, r4
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	0800a274 	.word	0x0800a274
 8006574:	0800a285 	.word	0x0800a285

08006578 <__hi0bits>:
 8006578:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800657c:	4603      	mov	r3, r0
 800657e:	bf36      	itet	cc
 8006580:	0403      	lslcc	r3, r0, #16
 8006582:	2000      	movcs	r0, #0
 8006584:	2010      	movcc	r0, #16
 8006586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800658a:	bf3c      	itt	cc
 800658c:	021b      	lslcc	r3, r3, #8
 800658e:	3008      	addcc	r0, #8
 8006590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006594:	bf3c      	itt	cc
 8006596:	011b      	lslcc	r3, r3, #4
 8006598:	3004      	addcc	r0, #4
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659e:	bf3c      	itt	cc
 80065a0:	009b      	lslcc	r3, r3, #2
 80065a2:	3002      	addcc	r0, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db05      	blt.n	80065b4 <__hi0bits+0x3c>
 80065a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065ac:	f100 0001 	add.w	r0, r0, #1
 80065b0:	bf08      	it	eq
 80065b2:	2020      	moveq	r0, #32
 80065b4:	4770      	bx	lr

080065b6 <__lo0bits>:
 80065b6:	6803      	ldr	r3, [r0, #0]
 80065b8:	4602      	mov	r2, r0
 80065ba:	f013 0007 	ands.w	r0, r3, #7
 80065be:	d00b      	beq.n	80065d8 <__lo0bits+0x22>
 80065c0:	07d9      	lsls	r1, r3, #31
 80065c2:	d421      	bmi.n	8006608 <__lo0bits+0x52>
 80065c4:	0798      	lsls	r0, r3, #30
 80065c6:	bf49      	itett	mi
 80065c8:	085b      	lsrmi	r3, r3, #1
 80065ca:	089b      	lsrpl	r3, r3, #2
 80065cc:	2001      	movmi	r0, #1
 80065ce:	6013      	strmi	r3, [r2, #0]
 80065d0:	bf5c      	itt	pl
 80065d2:	6013      	strpl	r3, [r2, #0]
 80065d4:	2002      	movpl	r0, #2
 80065d6:	4770      	bx	lr
 80065d8:	b299      	uxth	r1, r3
 80065da:	b909      	cbnz	r1, 80065e0 <__lo0bits+0x2a>
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	2010      	movs	r0, #16
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	b909      	cbnz	r1, 80065e8 <__lo0bits+0x32>
 80065e4:	3008      	adds	r0, #8
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	0719      	lsls	r1, r3, #28
 80065ea:	bf04      	itt	eq
 80065ec:	091b      	lsreq	r3, r3, #4
 80065ee:	3004      	addeq	r0, #4
 80065f0:	0799      	lsls	r1, r3, #30
 80065f2:	bf04      	itt	eq
 80065f4:	089b      	lsreq	r3, r3, #2
 80065f6:	3002      	addeq	r0, #2
 80065f8:	07d9      	lsls	r1, r3, #31
 80065fa:	d403      	bmi.n	8006604 <__lo0bits+0x4e>
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	f100 0001 	add.w	r0, r0, #1
 8006602:	d003      	beq.n	800660c <__lo0bits+0x56>
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4770      	bx	lr
 8006608:	2000      	movs	r0, #0
 800660a:	4770      	bx	lr
 800660c:	2020      	movs	r0, #32
 800660e:	4770      	bx	lr

08006610 <__i2b>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	2101      	movs	r1, #1
 8006616:	f7ff ff07 	bl	8006428 <_Balloc>
 800661a:	4602      	mov	r2, r0
 800661c:	b928      	cbnz	r0, 800662a <__i2b+0x1a>
 800661e:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <__i2b+0x24>)
 8006620:	4805      	ldr	r0, [pc, #20]	@ (8006638 <__i2b+0x28>)
 8006622:	f240 1145 	movw	r1, #325	@ 0x145
 8006626:	f000 fd21 	bl	800706c <__assert_func>
 800662a:	2301      	movs	r3, #1
 800662c:	6144      	str	r4, [r0, #20]
 800662e:	6103      	str	r3, [r0, #16]
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	0800a274 	.word	0x0800a274
 8006638:	0800a285 	.word	0x0800a285

0800663c <__multiply>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	4614      	mov	r4, r2
 8006642:	690a      	ldr	r2, [r1, #16]
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	bfa8      	it	ge
 800664a:	4623      	movge	r3, r4
 800664c:	460f      	mov	r7, r1
 800664e:	bfa4      	itt	ge
 8006650:	460c      	movge	r4, r1
 8006652:	461f      	movge	r7, r3
 8006654:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006658:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800665c:	68a3      	ldr	r3, [r4, #8]
 800665e:	6861      	ldr	r1, [r4, #4]
 8006660:	eb0a 0609 	add.w	r6, sl, r9
 8006664:	42b3      	cmp	r3, r6
 8006666:	b085      	sub	sp, #20
 8006668:	bfb8      	it	lt
 800666a:	3101      	addlt	r1, #1
 800666c:	f7ff fedc 	bl	8006428 <_Balloc>
 8006670:	b930      	cbnz	r0, 8006680 <__multiply+0x44>
 8006672:	4602      	mov	r2, r0
 8006674:	4b44      	ldr	r3, [pc, #272]	@ (8006788 <__multiply+0x14c>)
 8006676:	4845      	ldr	r0, [pc, #276]	@ (800678c <__multiply+0x150>)
 8006678:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800667c:	f000 fcf6 	bl	800706c <__assert_func>
 8006680:	f100 0514 	add.w	r5, r0, #20
 8006684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006688:	462b      	mov	r3, r5
 800668a:	2200      	movs	r2, #0
 800668c:	4543      	cmp	r3, r8
 800668e:	d321      	bcc.n	80066d4 <__multiply+0x98>
 8006690:	f107 0114 	add.w	r1, r7, #20
 8006694:	f104 0214 	add.w	r2, r4, #20
 8006698:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800669c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066a0:	9302      	str	r3, [sp, #8]
 80066a2:	1b13      	subs	r3, r2, r4
 80066a4:	3b15      	subs	r3, #21
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	3304      	adds	r3, #4
 80066ac:	f104 0715 	add.w	r7, r4, #21
 80066b0:	42ba      	cmp	r2, r7
 80066b2:	bf38      	it	cc
 80066b4:	2304      	movcc	r3, #4
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	9103      	str	r1, [sp, #12]
 80066bc:	428b      	cmp	r3, r1
 80066be:	d80c      	bhi.n	80066da <__multiply+0x9e>
 80066c0:	2e00      	cmp	r6, #0
 80066c2:	dd03      	ble.n	80066cc <__multiply+0x90>
 80066c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05b      	beq.n	8006784 <__multiply+0x148>
 80066cc:	6106      	str	r6, [r0, #16]
 80066ce:	b005      	add	sp, #20
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	f843 2b04 	str.w	r2, [r3], #4
 80066d8:	e7d8      	b.n	800668c <__multiply+0x50>
 80066da:	f8b1 a000 	ldrh.w	sl, [r1]
 80066de:	f1ba 0f00 	cmp.w	sl, #0
 80066e2:	d024      	beq.n	800672e <__multiply+0xf2>
 80066e4:	f104 0e14 	add.w	lr, r4, #20
 80066e8:	46a9      	mov	r9, r5
 80066ea:	f04f 0c00 	mov.w	ip, #0
 80066ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066f2:	f8d9 3000 	ldr.w	r3, [r9]
 80066f6:	fa1f fb87 	uxth.w	fp, r7
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006700:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006704:	f8d9 7000 	ldr.w	r7, [r9]
 8006708:	4463      	add	r3, ip
 800670a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800670e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006712:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800671c:	4572      	cmp	r2, lr
 800671e:	f849 3b04 	str.w	r3, [r9], #4
 8006722:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006726:	d8e2      	bhi.n	80066ee <__multiply+0xb2>
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	f845 c003 	str.w	ip, [r5, r3]
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006734:	3104      	adds	r1, #4
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	d021      	beq.n	8006780 <__multiply+0x144>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	f104 0c14 	add.w	ip, r4, #20
 8006742:	46ae      	mov	lr, r5
 8006744:	f04f 0a00 	mov.w	sl, #0
 8006748:	f8bc b000 	ldrh.w	fp, [ip]
 800674c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006750:	fb09 770b 	mla	r7, r9, fp, r7
 8006754:	4457      	add	r7, sl
 8006756:	b29b      	uxth	r3, r3
 8006758:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800675c:	f84e 3b04 	str.w	r3, [lr], #4
 8006760:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006768:	f8be 3000 	ldrh.w	r3, [lr]
 800676c:	fb09 330a 	mla	r3, r9, sl, r3
 8006770:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006774:	4562      	cmp	r2, ip
 8006776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800677a:	d8e5      	bhi.n	8006748 <__multiply+0x10c>
 800677c:	9f01      	ldr	r7, [sp, #4]
 800677e:	51eb      	str	r3, [r5, r7]
 8006780:	3504      	adds	r5, #4
 8006782:	e799      	b.n	80066b8 <__multiply+0x7c>
 8006784:	3e01      	subs	r6, #1
 8006786:	e79b      	b.n	80066c0 <__multiply+0x84>
 8006788:	0800a274 	.word	0x0800a274
 800678c:	0800a285 	.word	0x0800a285

08006790 <__pow5mult>:
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	4615      	mov	r5, r2
 8006796:	f012 0203 	ands.w	r2, r2, #3
 800679a:	4607      	mov	r7, r0
 800679c:	460e      	mov	r6, r1
 800679e:	d007      	beq.n	80067b0 <__pow5mult+0x20>
 80067a0:	4c25      	ldr	r4, [pc, #148]	@ (8006838 <__pow5mult+0xa8>)
 80067a2:	3a01      	subs	r2, #1
 80067a4:	2300      	movs	r3, #0
 80067a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067aa:	f7ff fe9f 	bl	80064ec <__multadd>
 80067ae:	4606      	mov	r6, r0
 80067b0:	10ad      	asrs	r5, r5, #2
 80067b2:	d03d      	beq.n	8006830 <__pow5mult+0xa0>
 80067b4:	69fc      	ldr	r4, [r7, #28]
 80067b6:	b97c      	cbnz	r4, 80067d8 <__pow5mult+0x48>
 80067b8:	2010      	movs	r0, #16
 80067ba:	f7ff fd7f 	bl	80062bc <malloc>
 80067be:	4602      	mov	r2, r0
 80067c0:	61f8      	str	r0, [r7, #28]
 80067c2:	b928      	cbnz	r0, 80067d0 <__pow5mult+0x40>
 80067c4:	4b1d      	ldr	r3, [pc, #116]	@ (800683c <__pow5mult+0xac>)
 80067c6:	481e      	ldr	r0, [pc, #120]	@ (8006840 <__pow5mult+0xb0>)
 80067c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067cc:	f000 fc4e 	bl	800706c <__assert_func>
 80067d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d4:	6004      	str	r4, [r0, #0]
 80067d6:	60c4      	str	r4, [r0, #12]
 80067d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067e0:	b94c      	cbnz	r4, 80067f6 <__pow5mult+0x66>
 80067e2:	f240 2171 	movw	r1, #625	@ 0x271
 80067e6:	4638      	mov	r0, r7
 80067e8:	f7ff ff12 	bl	8006610 <__i2b>
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80067f2:	4604      	mov	r4, r0
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	f04f 0900 	mov.w	r9, #0
 80067fa:	07eb      	lsls	r3, r5, #31
 80067fc:	d50a      	bpl.n	8006814 <__pow5mult+0x84>
 80067fe:	4631      	mov	r1, r6
 8006800:	4622      	mov	r2, r4
 8006802:	4638      	mov	r0, r7
 8006804:	f7ff ff1a 	bl	800663c <__multiply>
 8006808:	4631      	mov	r1, r6
 800680a:	4680      	mov	r8, r0
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff fe4b 	bl	80064a8 <_Bfree>
 8006812:	4646      	mov	r6, r8
 8006814:	106d      	asrs	r5, r5, #1
 8006816:	d00b      	beq.n	8006830 <__pow5mult+0xa0>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	b938      	cbnz	r0, 800682c <__pow5mult+0x9c>
 800681c:	4622      	mov	r2, r4
 800681e:	4621      	mov	r1, r4
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ff0b 	bl	800663c <__multiply>
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	f8c0 9000 	str.w	r9, [r0]
 800682c:	4604      	mov	r4, r0
 800682e:	e7e4      	b.n	80067fa <__pow5mult+0x6a>
 8006830:	4630      	mov	r0, r6
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	bf00      	nop
 8006838:	0800a2e0 	.word	0x0800a2e0
 800683c:	0800a205 	.word	0x0800a205
 8006840:	0800a285 	.word	0x0800a285

08006844 <__lshift>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	6849      	ldr	r1, [r1, #4]
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	4607      	mov	r7, r0
 8006856:	4691      	mov	r9, r2
 8006858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800685c:	f108 0601 	add.w	r6, r8, #1
 8006860:	42b3      	cmp	r3, r6
 8006862:	db0b      	blt.n	800687c <__lshift+0x38>
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fddf 	bl	8006428 <_Balloc>
 800686a:	4605      	mov	r5, r0
 800686c:	b948      	cbnz	r0, 8006882 <__lshift+0x3e>
 800686e:	4602      	mov	r2, r0
 8006870:	4b28      	ldr	r3, [pc, #160]	@ (8006914 <__lshift+0xd0>)
 8006872:	4829      	ldr	r0, [pc, #164]	@ (8006918 <__lshift+0xd4>)
 8006874:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006878:	f000 fbf8 	bl	800706c <__assert_func>
 800687c:	3101      	adds	r1, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	e7ee      	b.n	8006860 <__lshift+0x1c>
 8006882:	2300      	movs	r3, #0
 8006884:	f100 0114 	add.w	r1, r0, #20
 8006888:	f100 0210 	add.w	r2, r0, #16
 800688c:	4618      	mov	r0, r3
 800688e:	4553      	cmp	r3, sl
 8006890:	db33      	blt.n	80068fa <__lshift+0xb6>
 8006892:	6920      	ldr	r0, [r4, #16]
 8006894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006898:	f104 0314 	add.w	r3, r4, #20
 800689c:	f019 091f 	ands.w	r9, r9, #31
 80068a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068a8:	d02b      	beq.n	8006902 <__lshift+0xbe>
 80068aa:	f1c9 0e20 	rsb	lr, r9, #32
 80068ae:	468a      	mov	sl, r1
 80068b0:	2200      	movs	r2, #0
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	fa00 f009 	lsl.w	r0, r0, r9
 80068b8:	4310      	orrs	r0, r2
 80068ba:	f84a 0b04 	str.w	r0, [sl], #4
 80068be:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c2:	459c      	cmp	ip, r3
 80068c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068c8:	d8f3      	bhi.n	80068b2 <__lshift+0x6e>
 80068ca:	ebac 0304 	sub.w	r3, ip, r4
 80068ce:	3b15      	subs	r3, #21
 80068d0:	f023 0303 	bic.w	r3, r3, #3
 80068d4:	3304      	adds	r3, #4
 80068d6:	f104 0015 	add.w	r0, r4, #21
 80068da:	4584      	cmp	ip, r0
 80068dc:	bf38      	it	cc
 80068de:	2304      	movcc	r3, #4
 80068e0:	50ca      	str	r2, [r1, r3]
 80068e2:	b10a      	cbz	r2, 80068e8 <__lshift+0xa4>
 80068e4:	f108 0602 	add.w	r6, r8, #2
 80068e8:	3e01      	subs	r6, #1
 80068ea:	4638      	mov	r0, r7
 80068ec:	612e      	str	r6, [r5, #16]
 80068ee:	4621      	mov	r1, r4
 80068f0:	f7ff fdda 	bl	80064a8 <_Bfree>
 80068f4:	4628      	mov	r0, r5
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80068fe:	3301      	adds	r3, #1
 8006900:	e7c5      	b.n	800688e <__lshift+0x4a>
 8006902:	3904      	subs	r1, #4
 8006904:	f853 2b04 	ldr.w	r2, [r3], #4
 8006908:	f841 2f04 	str.w	r2, [r1, #4]!
 800690c:	459c      	cmp	ip, r3
 800690e:	d8f9      	bhi.n	8006904 <__lshift+0xc0>
 8006910:	e7ea      	b.n	80068e8 <__lshift+0xa4>
 8006912:	bf00      	nop
 8006914:	0800a274 	.word	0x0800a274
 8006918:	0800a285 	.word	0x0800a285

0800691c <__mcmp>:
 800691c:	690a      	ldr	r2, [r1, #16]
 800691e:	4603      	mov	r3, r0
 8006920:	6900      	ldr	r0, [r0, #16]
 8006922:	1a80      	subs	r0, r0, r2
 8006924:	b530      	push	{r4, r5, lr}
 8006926:	d10e      	bne.n	8006946 <__mcmp+0x2a>
 8006928:	3314      	adds	r3, #20
 800692a:	3114      	adds	r1, #20
 800692c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006930:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006934:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006938:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800693c:	4295      	cmp	r5, r2
 800693e:	d003      	beq.n	8006948 <__mcmp+0x2c>
 8006940:	d205      	bcs.n	800694e <__mcmp+0x32>
 8006942:	f04f 30ff 	mov.w	r0, #4294967295
 8006946:	bd30      	pop	{r4, r5, pc}
 8006948:	42a3      	cmp	r3, r4
 800694a:	d3f3      	bcc.n	8006934 <__mcmp+0x18>
 800694c:	e7fb      	b.n	8006946 <__mcmp+0x2a>
 800694e:	2001      	movs	r0, #1
 8006950:	e7f9      	b.n	8006946 <__mcmp+0x2a>
	...

08006954 <__mdiff>:
 8006954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	4689      	mov	r9, r1
 800695a:	4606      	mov	r6, r0
 800695c:	4611      	mov	r1, r2
 800695e:	4648      	mov	r0, r9
 8006960:	4614      	mov	r4, r2
 8006962:	f7ff ffdb 	bl	800691c <__mcmp>
 8006966:	1e05      	subs	r5, r0, #0
 8006968:	d112      	bne.n	8006990 <__mdiff+0x3c>
 800696a:	4629      	mov	r1, r5
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff fd5b 	bl	8006428 <_Balloc>
 8006972:	4602      	mov	r2, r0
 8006974:	b928      	cbnz	r0, 8006982 <__mdiff+0x2e>
 8006976:	4b3f      	ldr	r3, [pc, #252]	@ (8006a74 <__mdiff+0x120>)
 8006978:	f240 2137 	movw	r1, #567	@ 0x237
 800697c:	483e      	ldr	r0, [pc, #248]	@ (8006a78 <__mdiff+0x124>)
 800697e:	f000 fb75 	bl	800706c <__assert_func>
 8006982:	2301      	movs	r3, #1
 8006984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006988:	4610      	mov	r0, r2
 800698a:	b003      	add	sp, #12
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	bfbc      	itt	lt
 8006992:	464b      	movlt	r3, r9
 8006994:	46a1      	movlt	r9, r4
 8006996:	4630      	mov	r0, r6
 8006998:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800699c:	bfba      	itte	lt
 800699e:	461c      	movlt	r4, r3
 80069a0:	2501      	movlt	r5, #1
 80069a2:	2500      	movge	r5, #0
 80069a4:	f7ff fd40 	bl	8006428 <_Balloc>
 80069a8:	4602      	mov	r2, r0
 80069aa:	b918      	cbnz	r0, 80069b4 <__mdiff+0x60>
 80069ac:	4b31      	ldr	r3, [pc, #196]	@ (8006a74 <__mdiff+0x120>)
 80069ae:	f240 2145 	movw	r1, #581	@ 0x245
 80069b2:	e7e3      	b.n	800697c <__mdiff+0x28>
 80069b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069b8:	6926      	ldr	r6, [r4, #16]
 80069ba:	60c5      	str	r5, [r0, #12]
 80069bc:	f109 0310 	add.w	r3, r9, #16
 80069c0:	f109 0514 	add.w	r5, r9, #20
 80069c4:	f104 0e14 	add.w	lr, r4, #20
 80069c8:	f100 0b14 	add.w	fp, r0, #20
 80069cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	46d9      	mov	r9, fp
 80069d8:	f04f 0c00 	mov.w	ip, #0
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	fa1f f38a 	uxth.w	r3, sl
 80069ec:	4619      	mov	r1, r3
 80069ee:	b283      	uxth	r3, r0
 80069f0:	1acb      	subs	r3, r1, r3
 80069f2:	0c00      	lsrs	r0, r0, #16
 80069f4:	4463      	add	r3, ip
 80069f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a04:	4576      	cmp	r6, lr
 8006a06:	f849 3b04 	str.w	r3, [r9], #4
 8006a0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a0e:	d8e5      	bhi.n	80069dc <__mdiff+0x88>
 8006a10:	1b33      	subs	r3, r6, r4
 8006a12:	3b15      	subs	r3, #21
 8006a14:	f023 0303 	bic.w	r3, r3, #3
 8006a18:	3415      	adds	r4, #21
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	bf38      	it	cc
 8006a20:	2304      	movcc	r3, #4
 8006a22:	441d      	add	r5, r3
 8006a24:	445b      	add	r3, fp
 8006a26:	461e      	mov	r6, r3
 8006a28:	462c      	mov	r4, r5
 8006a2a:	4544      	cmp	r4, r8
 8006a2c:	d30e      	bcc.n	8006a4c <__mdiff+0xf8>
 8006a2e:	f108 0103 	add.w	r1, r8, #3
 8006a32:	1b49      	subs	r1, r1, r5
 8006a34:	f021 0103 	bic.w	r1, r1, #3
 8006a38:	3d03      	subs	r5, #3
 8006a3a:	45a8      	cmp	r8, r5
 8006a3c:	bf38      	it	cc
 8006a3e:	2100      	movcc	r1, #0
 8006a40:	440b      	add	r3, r1
 8006a42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a46:	b191      	cbz	r1, 8006a6e <__mdiff+0x11a>
 8006a48:	6117      	str	r7, [r2, #16]
 8006a4a:	e79d      	b.n	8006988 <__mdiff+0x34>
 8006a4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a50:	46e6      	mov	lr, ip
 8006a52:	0c08      	lsrs	r0, r1, #16
 8006a54:	fa1c fc81 	uxtah	ip, ip, r1
 8006a58:	4471      	add	r1, lr
 8006a5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a5e:	b289      	uxth	r1, r1
 8006a60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a64:	f846 1b04 	str.w	r1, [r6], #4
 8006a68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a6c:	e7dd      	b.n	8006a2a <__mdiff+0xd6>
 8006a6e:	3f01      	subs	r7, #1
 8006a70:	e7e7      	b.n	8006a42 <__mdiff+0xee>
 8006a72:	bf00      	nop
 8006a74:	0800a274 	.word	0x0800a274
 8006a78:	0800a285 	.word	0x0800a285

08006a7c <__d2b>:
 8006a7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	460f      	mov	r7, r1
 8006a82:	2101      	movs	r1, #1
 8006a84:	ec59 8b10 	vmov	r8, r9, d0
 8006a88:	4616      	mov	r6, r2
 8006a8a:	f7ff fccd 	bl	8006428 <_Balloc>
 8006a8e:	4604      	mov	r4, r0
 8006a90:	b930      	cbnz	r0, 8006aa0 <__d2b+0x24>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b23      	ldr	r3, [pc, #140]	@ (8006b24 <__d2b+0xa8>)
 8006a96:	4824      	ldr	r0, [pc, #144]	@ (8006b28 <__d2b+0xac>)
 8006a98:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a9c:	f000 fae6 	bl	800706c <__assert_func>
 8006aa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006aa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aa8:	b10d      	cbz	r5, 8006aae <__d2b+0x32>
 8006aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ab4:	d023      	beq.n	8006afe <__d2b+0x82>
 8006ab6:	4668      	mov	r0, sp
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	f7ff fd7c 	bl	80065b6 <__lo0bits>
 8006abe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ac2:	b1d0      	cbz	r0, 8006afa <__d2b+0x7e>
 8006ac4:	f1c0 0320 	rsb	r3, r0, #32
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	430b      	orrs	r3, r1
 8006ace:	40c2      	lsrs	r2, r0
 8006ad0:	6163      	str	r3, [r4, #20]
 8006ad2:	9201      	str	r2, [sp, #4]
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	61a3      	str	r3, [r4, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bf0c      	ite	eq
 8006adc:	2201      	moveq	r2, #1
 8006ade:	2202      	movne	r2, #2
 8006ae0:	6122      	str	r2, [r4, #16]
 8006ae2:	b1a5      	cbz	r5, 8006b0e <__d2b+0x92>
 8006ae4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ae8:	4405      	add	r5, r0
 8006aea:	603d      	str	r5, [r7, #0]
 8006aec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006af0:	6030      	str	r0, [r6, #0]
 8006af2:	4620      	mov	r0, r4
 8006af4:	b003      	add	sp, #12
 8006af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006afa:	6161      	str	r1, [r4, #20]
 8006afc:	e7ea      	b.n	8006ad4 <__d2b+0x58>
 8006afe:	a801      	add	r0, sp, #4
 8006b00:	f7ff fd59 	bl	80065b6 <__lo0bits>
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	6163      	str	r3, [r4, #20]
 8006b08:	3020      	adds	r0, #32
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	e7e8      	b.n	8006ae0 <__d2b+0x64>
 8006b0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b16:	6038      	str	r0, [r7, #0]
 8006b18:	6918      	ldr	r0, [r3, #16]
 8006b1a:	f7ff fd2d 	bl	8006578 <__hi0bits>
 8006b1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b22:	e7e5      	b.n	8006af0 <__d2b+0x74>
 8006b24:	0800a274 	.word	0x0800a274
 8006b28:	0800a285 	.word	0x0800a285

08006b2c <__sfputc_r>:
 8006b2c:	6893      	ldr	r3, [r2, #8]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	b410      	push	{r4}
 8006b34:	6093      	str	r3, [r2, #8]
 8006b36:	da08      	bge.n	8006b4a <__sfputc_r+0x1e>
 8006b38:	6994      	ldr	r4, [r2, #24]
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	db01      	blt.n	8006b42 <__sfputc_r+0x16>
 8006b3e:	290a      	cmp	r1, #10
 8006b40:	d103      	bne.n	8006b4a <__sfputc_r+0x1e>
 8006b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b46:	f000 b9df 	b.w	8006f08 <__swbuf_r>
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	1c58      	adds	r0, r3, #1
 8006b4e:	6010      	str	r0, [r2, #0]
 8006b50:	7019      	strb	r1, [r3, #0]
 8006b52:	4608      	mov	r0, r1
 8006b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <__sfputs_r>:
 8006b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	18d5      	adds	r5, r2, r3
 8006b64:	42ac      	cmp	r4, r5
 8006b66:	d101      	bne.n	8006b6c <__sfputs_r+0x12>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e007      	b.n	8006b7c <__sfputs_r+0x22>
 8006b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b70:	463a      	mov	r2, r7
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ffda 	bl	8006b2c <__sfputc_r>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d1f3      	bne.n	8006b64 <__sfputs_r+0xa>
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b80 <_vfiprintf_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	460d      	mov	r5, r1
 8006b86:	b09d      	sub	sp, #116	@ 0x74
 8006b88:	4614      	mov	r4, r2
 8006b8a:	4698      	mov	r8, r3
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	b118      	cbz	r0, 8006b98 <_vfiprintf_r+0x18>
 8006b90:	6a03      	ldr	r3, [r0, #32]
 8006b92:	b90b      	cbnz	r3, 8006b98 <_vfiprintf_r+0x18>
 8006b94:	f7fe fbee 	bl	8005374 <__sinit>
 8006b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b9a:	07d9      	lsls	r1, r3, #31
 8006b9c:	d405      	bmi.n	8006baa <_vfiprintf_r+0x2a>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_vfiprintf_r+0x2a>
 8006ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ba6:	f7fe fcee 	bl	8005586 <__retarget_lock_acquire_recursive>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	071b      	lsls	r3, r3, #28
 8006bae:	d501      	bpl.n	8006bb4 <_vfiprintf_r+0x34>
 8006bb0:	692b      	ldr	r3, [r5, #16]
 8006bb2:	b99b      	cbnz	r3, 8006bdc <_vfiprintf_r+0x5c>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f9e4 	bl	8006f84 <__swsetup_r>
 8006bbc:	b170      	cbz	r0, 8006bdc <_vfiprintf_r+0x5c>
 8006bbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bc0:	07dc      	lsls	r4, r3, #31
 8006bc2:	d504      	bpl.n	8006bce <_vfiprintf_r+0x4e>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b01d      	add	sp, #116	@ 0x74
 8006bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	0598      	lsls	r0, r3, #22
 8006bd2:	d4f7      	bmi.n	8006bc4 <_vfiprintf_r+0x44>
 8006bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bd6:	f7fe fcd7 	bl	8005588 <__retarget_lock_release_recursive>
 8006bda:	e7f3      	b.n	8006bc4 <_vfiprintf_r+0x44>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be0:	2320      	movs	r3, #32
 8006be2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bea:	2330      	movs	r3, #48	@ 0x30
 8006bec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d9c <_vfiprintf_r+0x21c>
 8006bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bf4:	f04f 0901 	mov.w	r9, #1
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	469a      	mov	sl, r3
 8006bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c00:	b10a      	cbz	r2, 8006c06 <_vfiprintf_r+0x86>
 8006c02:	2a25      	cmp	r2, #37	@ 0x25
 8006c04:	d1f9      	bne.n	8006bfa <_vfiprintf_r+0x7a>
 8006c06:	ebba 0b04 	subs.w	fp, sl, r4
 8006c0a:	d00b      	beq.n	8006c24 <_vfiprintf_r+0xa4>
 8006c0c:	465b      	mov	r3, fp
 8006c0e:	4622      	mov	r2, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffa1 	bl	8006b5a <__sfputs_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f000 80a7 	beq.w	8006d6c <_vfiprintf_r+0x1ec>
 8006c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c20:	445a      	add	r2, fp
 8006c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c24:	f89a 3000 	ldrb.w	r3, [sl]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 809f 	beq.w	8006d6c <_vfiprintf_r+0x1ec>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c38:	f10a 0a01 	add.w	sl, sl, #1
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	9307      	str	r3, [sp, #28]
 8006c40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c44:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c46:	4654      	mov	r4, sl
 8006c48:	2205      	movs	r2, #5
 8006c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4e:	4853      	ldr	r0, [pc, #332]	@ (8006d9c <_vfiprintf_r+0x21c>)
 8006c50:	f7f9 fac6 	bl	80001e0 <memchr>
 8006c54:	9a04      	ldr	r2, [sp, #16]
 8006c56:	b9d8      	cbnz	r0, 8006c90 <_vfiprintf_r+0x110>
 8006c58:	06d1      	lsls	r1, r2, #27
 8006c5a:	bf44      	itt	mi
 8006c5c:	2320      	movmi	r3, #32
 8006c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c62:	0713      	lsls	r3, r2, #28
 8006c64:	bf44      	itt	mi
 8006c66:	232b      	movmi	r3, #43	@ 0x2b
 8006c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c72:	d015      	beq.n	8006ca0 <_vfiprintf_r+0x120>
 8006c74:	9a07      	ldr	r2, [sp, #28]
 8006c76:	4654      	mov	r4, sl
 8006c78:	2000      	movs	r0, #0
 8006c7a:	f04f 0c0a 	mov.w	ip, #10
 8006c7e:	4621      	mov	r1, r4
 8006c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c84:	3b30      	subs	r3, #48	@ 0x30
 8006c86:	2b09      	cmp	r3, #9
 8006c88:	d94b      	bls.n	8006d22 <_vfiprintf_r+0x1a2>
 8006c8a:	b1b0      	cbz	r0, 8006cba <_vfiprintf_r+0x13a>
 8006c8c:	9207      	str	r2, [sp, #28]
 8006c8e:	e014      	b.n	8006cba <_vfiprintf_r+0x13a>
 8006c90:	eba0 0308 	sub.w	r3, r0, r8
 8006c94:	fa09 f303 	lsl.w	r3, r9, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	9304      	str	r3, [sp, #16]
 8006c9c:	46a2      	mov	sl, r4
 8006c9e:	e7d2      	b.n	8006c46 <_vfiprintf_r+0xc6>
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	1d19      	adds	r1, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	9103      	str	r1, [sp, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bfbb      	ittet	lt
 8006cac:	425b      	neglt	r3, r3
 8006cae:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb2:	9307      	strge	r3, [sp, #28]
 8006cb4:	9307      	strlt	r3, [sp, #28]
 8006cb6:	bfb8      	it	lt
 8006cb8:	9204      	strlt	r2, [sp, #16]
 8006cba:	7823      	ldrb	r3, [r4, #0]
 8006cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cbe:	d10a      	bne.n	8006cd6 <_vfiprintf_r+0x156>
 8006cc0:	7863      	ldrb	r3, [r4, #1]
 8006cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc4:	d132      	bne.n	8006d2c <_vfiprintf_r+0x1ac>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	1d1a      	adds	r2, r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	9203      	str	r2, [sp, #12]
 8006cce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd2:	3402      	adds	r4, #2
 8006cd4:	9305      	str	r3, [sp, #20]
 8006cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006dac <_vfiprintf_r+0x22c>
 8006cda:	7821      	ldrb	r1, [r4, #0]
 8006cdc:	2203      	movs	r2, #3
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f7f9 fa7e 	bl	80001e0 <memchr>
 8006ce4:	b138      	cbz	r0, 8006cf6 <_vfiprintf_r+0x176>
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	eba0 000a 	sub.w	r0, r0, sl
 8006cec:	2240      	movs	r2, #64	@ 0x40
 8006cee:	4082      	lsls	r2, r0
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	3401      	adds	r4, #1
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfa:	4829      	ldr	r0, [pc, #164]	@ (8006da0 <_vfiprintf_r+0x220>)
 8006cfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d00:	2206      	movs	r2, #6
 8006d02:	f7f9 fa6d 	bl	80001e0 <memchr>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d03f      	beq.n	8006d8a <_vfiprintf_r+0x20a>
 8006d0a:	4b26      	ldr	r3, [pc, #152]	@ (8006da4 <_vfiprintf_r+0x224>)
 8006d0c:	bb1b      	cbnz	r3, 8006d56 <_vfiprintf_r+0x1d6>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	3307      	adds	r3, #7
 8006d12:	f023 0307 	bic.w	r3, r3, #7
 8006d16:	3308      	adds	r3, #8
 8006d18:	9303      	str	r3, [sp, #12]
 8006d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1c:	443b      	add	r3, r7
 8006d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d20:	e76a      	b.n	8006bf8 <_vfiprintf_r+0x78>
 8006d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d26:	460c      	mov	r4, r1
 8006d28:	2001      	movs	r0, #1
 8006d2a:	e7a8      	b.n	8006c7e <_vfiprintf_r+0xfe>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	3401      	adds	r4, #1
 8006d30:	9305      	str	r3, [sp, #20]
 8006d32:	4619      	mov	r1, r3
 8006d34:	f04f 0c0a 	mov.w	ip, #10
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d3e:	3a30      	subs	r2, #48	@ 0x30
 8006d40:	2a09      	cmp	r2, #9
 8006d42:	d903      	bls.n	8006d4c <_vfiprintf_r+0x1cc>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0c6      	beq.n	8006cd6 <_vfiprintf_r+0x156>
 8006d48:	9105      	str	r1, [sp, #20]
 8006d4a:	e7c4      	b.n	8006cd6 <_vfiprintf_r+0x156>
 8006d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d50:	4604      	mov	r4, r0
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7f0      	b.n	8006d38 <_vfiprintf_r+0x1b8>
 8006d56:	ab03      	add	r3, sp, #12
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	462a      	mov	r2, r5
 8006d5c:	4b12      	ldr	r3, [pc, #72]	@ (8006da8 <_vfiprintf_r+0x228>)
 8006d5e:	a904      	add	r1, sp, #16
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7fd fec3 	bl	8004aec <_printf_float>
 8006d66:	4607      	mov	r7, r0
 8006d68:	1c78      	adds	r0, r7, #1
 8006d6a:	d1d6      	bne.n	8006d1a <_vfiprintf_r+0x19a>
 8006d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d6e:	07d9      	lsls	r1, r3, #31
 8006d70:	d405      	bmi.n	8006d7e <_vfiprintf_r+0x1fe>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	059a      	lsls	r2, r3, #22
 8006d76:	d402      	bmi.n	8006d7e <_vfiprintf_r+0x1fe>
 8006d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d7a:	f7fe fc05 	bl	8005588 <__retarget_lock_release_recursive>
 8006d7e:	89ab      	ldrh	r3, [r5, #12]
 8006d80:	065b      	lsls	r3, r3, #25
 8006d82:	f53f af1f 	bmi.w	8006bc4 <_vfiprintf_r+0x44>
 8006d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d88:	e71e      	b.n	8006bc8 <_vfiprintf_r+0x48>
 8006d8a:	ab03      	add	r3, sp, #12
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	462a      	mov	r2, r5
 8006d90:	4b05      	ldr	r3, [pc, #20]	@ (8006da8 <_vfiprintf_r+0x228>)
 8006d92:	a904      	add	r1, sp, #16
 8006d94:	4630      	mov	r0, r6
 8006d96:	f7fe f941 	bl	800501c <_printf_i>
 8006d9a:	e7e4      	b.n	8006d66 <_vfiprintf_r+0x1e6>
 8006d9c:	0800a3e0 	.word	0x0800a3e0
 8006da0:	0800a3ea 	.word	0x0800a3ea
 8006da4:	08004aed 	.word	0x08004aed
 8006da8:	08006b5b 	.word	0x08006b5b
 8006dac:	0800a3e6 	.word	0x0800a3e6

08006db0 <__sflush_r>:
 8006db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db8:	0716      	lsls	r6, r2, #28
 8006dba:	4605      	mov	r5, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	d454      	bmi.n	8006e6a <__sflush_r+0xba>
 8006dc0:	684b      	ldr	r3, [r1, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dc02      	bgt.n	8006dcc <__sflush_r+0x1c>
 8006dc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dd48      	ble.n	8006e5e <__sflush_r+0xae>
 8006dcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	d045      	beq.n	8006e5e <__sflush_r+0xae>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dd8:	682f      	ldr	r7, [r5, #0]
 8006dda:	6a21      	ldr	r1, [r4, #32]
 8006ddc:	602b      	str	r3, [r5, #0]
 8006dde:	d030      	beq.n	8006e42 <__sflush_r+0x92>
 8006de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	0759      	lsls	r1, r3, #29
 8006de6:	d505      	bpl.n	8006df4 <__sflush_r+0x44>
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	1ad2      	subs	r2, r2, r3
 8006dec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dee:	b10b      	cbz	r3, 8006df4 <__sflush_r+0x44>
 8006df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	2300      	movs	r3, #0
 8006df6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006df8:	6a21      	ldr	r1, [r4, #32]
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b0      	blx	r6
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	d106      	bne.n	8006e12 <__sflush_r+0x62>
 8006e04:	6829      	ldr	r1, [r5, #0]
 8006e06:	291d      	cmp	r1, #29
 8006e08:	d82b      	bhi.n	8006e62 <__sflush_r+0xb2>
 8006e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb4 <__sflush_r+0x104>)
 8006e0c:	410a      	asrs	r2, r1
 8006e0e:	07d6      	lsls	r6, r2, #31
 8006e10:	d427      	bmi.n	8006e62 <__sflush_r+0xb2>
 8006e12:	2200      	movs	r2, #0
 8006e14:	6062      	str	r2, [r4, #4]
 8006e16:	04d9      	lsls	r1, r3, #19
 8006e18:	6922      	ldr	r2, [r4, #16]
 8006e1a:	6022      	str	r2, [r4, #0]
 8006e1c:	d504      	bpl.n	8006e28 <__sflush_r+0x78>
 8006e1e:	1c42      	adds	r2, r0, #1
 8006e20:	d101      	bne.n	8006e26 <__sflush_r+0x76>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	b903      	cbnz	r3, 8006e28 <__sflush_r+0x78>
 8006e26:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e2a:	602f      	str	r7, [r5, #0]
 8006e2c:	b1b9      	cbz	r1, 8006e5e <__sflush_r+0xae>
 8006e2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e32:	4299      	cmp	r1, r3
 8006e34:	d002      	beq.n	8006e3c <__sflush_r+0x8c>
 8006e36:	4628      	mov	r0, r5
 8006e38:	f7ff f9f6 	bl	8006228 <_free_r>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e40:	e00d      	b.n	8006e5e <__sflush_r+0xae>
 8006e42:	2301      	movs	r3, #1
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b0      	blx	r6
 8006e48:	4602      	mov	r2, r0
 8006e4a:	1c50      	adds	r0, r2, #1
 8006e4c:	d1c9      	bne.n	8006de2 <__sflush_r+0x32>
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0c6      	beq.n	8006de2 <__sflush_r+0x32>
 8006e54:	2b1d      	cmp	r3, #29
 8006e56:	d001      	beq.n	8006e5c <__sflush_r+0xac>
 8006e58:	2b16      	cmp	r3, #22
 8006e5a:	d11e      	bne.n	8006e9a <__sflush_r+0xea>
 8006e5c:	602f      	str	r7, [r5, #0]
 8006e5e:	2000      	movs	r0, #0
 8006e60:	e022      	b.n	8006ea8 <__sflush_r+0xf8>
 8006e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	e01b      	b.n	8006ea2 <__sflush_r+0xf2>
 8006e6a:	690f      	ldr	r7, [r1, #16]
 8006e6c:	2f00      	cmp	r7, #0
 8006e6e:	d0f6      	beq.n	8006e5e <__sflush_r+0xae>
 8006e70:	0793      	lsls	r3, r2, #30
 8006e72:	680e      	ldr	r6, [r1, #0]
 8006e74:	bf08      	it	eq
 8006e76:	694b      	ldreq	r3, [r1, #20]
 8006e78:	600f      	str	r7, [r1, #0]
 8006e7a:	bf18      	it	ne
 8006e7c:	2300      	movne	r3, #0
 8006e7e:	eba6 0807 	sub.w	r8, r6, r7
 8006e82:	608b      	str	r3, [r1, #8]
 8006e84:	f1b8 0f00 	cmp.w	r8, #0
 8006e88:	dde9      	ble.n	8006e5e <__sflush_r+0xae>
 8006e8a:	6a21      	ldr	r1, [r4, #32]
 8006e8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e8e:	4643      	mov	r3, r8
 8006e90:	463a      	mov	r2, r7
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b0      	blx	r6
 8006e96:	2800      	cmp	r0, #0
 8006e98:	dc08      	bgt.n	8006eac <__sflush_r+0xfc>
 8006e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eac:	4407      	add	r7, r0
 8006eae:	eba8 0800 	sub.w	r8, r8, r0
 8006eb2:	e7e7      	b.n	8006e84 <__sflush_r+0xd4>
 8006eb4:	dfbffffe 	.word	0xdfbffffe

08006eb8 <_fflush_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	690b      	ldr	r3, [r1, #16]
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	b913      	cbnz	r3, 8006ec8 <_fflush_r+0x10>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	b118      	cbz	r0, 8006ed2 <_fflush_r+0x1a>
 8006eca:	6a03      	ldr	r3, [r0, #32]
 8006ecc:	b90b      	cbnz	r3, 8006ed2 <_fflush_r+0x1a>
 8006ece:	f7fe fa51 	bl	8005374 <__sinit>
 8006ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f3      	beq.n	8006ec2 <_fflush_r+0xa>
 8006eda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006edc:	07d0      	lsls	r0, r2, #31
 8006ede:	d404      	bmi.n	8006eea <_fflush_r+0x32>
 8006ee0:	0599      	lsls	r1, r3, #22
 8006ee2:	d402      	bmi.n	8006eea <_fflush_r+0x32>
 8006ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ee6:	f7fe fb4e 	bl	8005586 <__retarget_lock_acquire_recursive>
 8006eea:	4628      	mov	r0, r5
 8006eec:	4621      	mov	r1, r4
 8006eee:	f7ff ff5f 	bl	8006db0 <__sflush_r>
 8006ef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ef4:	07da      	lsls	r2, r3, #31
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	d4e4      	bmi.n	8006ec4 <_fflush_r+0xc>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	059b      	lsls	r3, r3, #22
 8006efe:	d4e1      	bmi.n	8006ec4 <_fflush_r+0xc>
 8006f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f02:	f7fe fb41 	bl	8005588 <__retarget_lock_release_recursive>
 8006f06:	e7dd      	b.n	8006ec4 <_fflush_r+0xc>

08006f08 <__swbuf_r>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b118      	cbz	r0, 8006f1a <__swbuf_r+0x12>
 8006f12:	6a03      	ldr	r3, [r0, #32]
 8006f14:	b90b      	cbnz	r3, 8006f1a <__swbuf_r+0x12>
 8006f16:	f7fe fa2d 	bl	8005374 <__sinit>
 8006f1a:	69a3      	ldr	r3, [r4, #24]
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	071a      	lsls	r2, r3, #28
 8006f22:	d501      	bpl.n	8006f28 <__swbuf_r+0x20>
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	b943      	cbnz	r3, 8006f3a <__swbuf_r+0x32>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f82a 	bl	8006f84 <__swsetup_r>
 8006f30:	b118      	cbz	r0, 8006f3a <__swbuf_r+0x32>
 8006f32:	f04f 37ff 	mov.w	r7, #4294967295
 8006f36:	4638      	mov	r0, r7
 8006f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	1a98      	subs	r0, r3, r2
 8006f40:	6963      	ldr	r3, [r4, #20]
 8006f42:	b2f6      	uxtb	r6, r6
 8006f44:	4283      	cmp	r3, r0
 8006f46:	4637      	mov	r7, r6
 8006f48:	dc05      	bgt.n	8006f56 <__swbuf_r+0x4e>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f7ff ffb3 	bl	8006eb8 <_fflush_r>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d1ed      	bne.n	8006f32 <__swbuf_r+0x2a>
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	60a3      	str	r3, [r4, #8]
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	701e      	strb	r6, [r3, #0]
 8006f64:	6962      	ldr	r2, [r4, #20]
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d004      	beq.n	8006f76 <__swbuf_r+0x6e>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	07db      	lsls	r3, r3, #31
 8006f70:	d5e1      	bpl.n	8006f36 <__swbuf_r+0x2e>
 8006f72:	2e0a      	cmp	r6, #10
 8006f74:	d1df      	bne.n	8006f36 <__swbuf_r+0x2e>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f7ff ff9d 	bl	8006eb8 <_fflush_r>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d0d9      	beq.n	8006f36 <__swbuf_r+0x2e>
 8006f82:	e7d6      	b.n	8006f32 <__swbuf_r+0x2a>

08006f84 <__swsetup_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4b29      	ldr	r3, [pc, #164]	@ (800702c <__swsetup_r+0xa8>)
 8006f88:	4605      	mov	r5, r0
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b118      	cbz	r0, 8006f98 <__swsetup_r+0x14>
 8006f90:	6a03      	ldr	r3, [r0, #32]
 8006f92:	b90b      	cbnz	r3, 8006f98 <__swsetup_r+0x14>
 8006f94:	f7fe f9ee 	bl	8005374 <__sinit>
 8006f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9c:	0719      	lsls	r1, r3, #28
 8006f9e:	d422      	bmi.n	8006fe6 <__swsetup_r+0x62>
 8006fa0:	06da      	lsls	r2, r3, #27
 8006fa2:	d407      	bmi.n	8006fb4 <__swsetup_r+0x30>
 8006fa4:	2209      	movs	r2, #9
 8006fa6:	602a      	str	r2, [r5, #0]
 8006fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb2:	e033      	b.n	800701c <__swsetup_r+0x98>
 8006fb4:	0758      	lsls	r0, r3, #29
 8006fb6:	d512      	bpl.n	8006fde <__swsetup_r+0x5a>
 8006fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fba:	b141      	cbz	r1, 8006fce <__swsetup_r+0x4a>
 8006fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	d002      	beq.n	8006fca <__swsetup_r+0x46>
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7ff f92f 	bl	8006228 <_free_r>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6063      	str	r3, [r4, #4]
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	f043 0308 	orr.w	r3, r3, #8
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	b94b      	cbnz	r3, 8006ffe <__swsetup_r+0x7a>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff4:	d003      	beq.n	8006ffe <__swsetup_r+0x7a>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 f8c1 	bl	8007180 <__smakebuf_r>
 8006ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007002:	f013 0201 	ands.w	r2, r3, #1
 8007006:	d00a      	beq.n	800701e <__swsetup_r+0x9a>
 8007008:	2200      	movs	r2, #0
 800700a:	60a2      	str	r2, [r4, #8]
 800700c:	6962      	ldr	r2, [r4, #20]
 800700e:	4252      	negs	r2, r2
 8007010:	61a2      	str	r2, [r4, #24]
 8007012:	6922      	ldr	r2, [r4, #16]
 8007014:	b942      	cbnz	r2, 8007028 <__swsetup_r+0xa4>
 8007016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800701a:	d1c5      	bne.n	8006fa8 <__swsetup_r+0x24>
 800701c:	bd38      	pop	{r3, r4, r5, pc}
 800701e:	0799      	lsls	r1, r3, #30
 8007020:	bf58      	it	pl
 8007022:	6962      	ldrpl	r2, [r4, #20]
 8007024:	60a2      	str	r2, [r4, #8]
 8007026:	e7f4      	b.n	8007012 <__swsetup_r+0x8e>
 8007028:	2000      	movs	r0, #0
 800702a:	e7f7      	b.n	800701c <__swsetup_r+0x98>
 800702c:	20002024 	.word	0x20002024

08007030 <_sbrk_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	@ (800704c <_sbrk_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa f9ce 	bl	80013dc <_sbrk>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_sbrk_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_sbrk_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	200033d0 	.word	0x200033d0

08007050 <memcpy>:
 8007050:	440a      	add	r2, r1
 8007052:	4291      	cmp	r1, r2
 8007054:	f100 33ff 	add.w	r3, r0, #4294967295
 8007058:	d100      	bne.n	800705c <memcpy+0xc>
 800705a:	4770      	bx	lr
 800705c:	b510      	push	{r4, lr}
 800705e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007066:	4291      	cmp	r1, r2
 8007068:	d1f9      	bne.n	800705e <memcpy+0xe>
 800706a:	bd10      	pop	{r4, pc}

0800706c <__assert_func>:
 800706c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800706e:	4614      	mov	r4, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4b09      	ldr	r3, [pc, #36]	@ (8007098 <__assert_func+0x2c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4605      	mov	r5, r0
 8007078:	68d8      	ldr	r0, [r3, #12]
 800707a:	b954      	cbnz	r4, 8007092 <__assert_func+0x26>
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <__assert_func+0x30>)
 800707e:	461c      	mov	r4, r3
 8007080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007084:	9100      	str	r1, [sp, #0]
 8007086:	462b      	mov	r3, r5
 8007088:	4905      	ldr	r1, [pc, #20]	@ (80070a0 <__assert_func+0x34>)
 800708a:	f000 f841 	bl	8007110 <fiprintf>
 800708e:	f000 f8d5 	bl	800723c <abort>
 8007092:	4b04      	ldr	r3, [pc, #16]	@ (80070a4 <__assert_func+0x38>)
 8007094:	e7f4      	b.n	8007080 <__assert_func+0x14>
 8007096:	bf00      	nop
 8007098:	20002024 	.word	0x20002024
 800709c:	0800a436 	.word	0x0800a436
 80070a0:	0800a408 	.word	0x0800a408
 80070a4:	0800a3fb 	.word	0x0800a3fb

080070a8 <_calloc_r>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	fba1 5402 	umull	r5, r4, r1, r2
 80070ae:	b93c      	cbnz	r4, 80070c0 <_calloc_r+0x18>
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7ff f92d 	bl	8006310 <_malloc_r>
 80070b6:	4606      	mov	r6, r0
 80070b8:	b928      	cbnz	r0, 80070c6 <_calloc_r+0x1e>
 80070ba:	2600      	movs	r6, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	220c      	movs	r2, #12
 80070c2:	6002      	str	r2, [r0, #0]
 80070c4:	e7f9      	b.n	80070ba <_calloc_r+0x12>
 80070c6:	462a      	mov	r2, r5
 80070c8:	4621      	mov	r1, r4
 80070ca:	f7fe f9de 	bl	800548a <memset>
 80070ce:	e7f5      	b.n	80070bc <_calloc_r+0x14>

080070d0 <__ascii_mbtowc>:
 80070d0:	b082      	sub	sp, #8
 80070d2:	b901      	cbnz	r1, 80070d6 <__ascii_mbtowc+0x6>
 80070d4:	a901      	add	r1, sp, #4
 80070d6:	b142      	cbz	r2, 80070ea <__ascii_mbtowc+0x1a>
 80070d8:	b14b      	cbz	r3, 80070ee <__ascii_mbtowc+0x1e>
 80070da:	7813      	ldrb	r3, [r2, #0]
 80070dc:	600b      	str	r3, [r1, #0]
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	1e10      	subs	r0, r2, #0
 80070e2:	bf18      	it	ne
 80070e4:	2001      	movne	r0, #1
 80070e6:	b002      	add	sp, #8
 80070e8:	4770      	bx	lr
 80070ea:	4610      	mov	r0, r2
 80070ec:	e7fb      	b.n	80070e6 <__ascii_mbtowc+0x16>
 80070ee:	f06f 0001 	mvn.w	r0, #1
 80070f2:	e7f8      	b.n	80070e6 <__ascii_mbtowc+0x16>

080070f4 <__ascii_wctomb>:
 80070f4:	4603      	mov	r3, r0
 80070f6:	4608      	mov	r0, r1
 80070f8:	b141      	cbz	r1, 800710c <__ascii_wctomb+0x18>
 80070fa:	2aff      	cmp	r2, #255	@ 0xff
 80070fc:	d904      	bls.n	8007108 <__ascii_wctomb+0x14>
 80070fe:	228a      	movs	r2, #138	@ 0x8a
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	4770      	bx	lr
 8007108:	700a      	strb	r2, [r1, #0]
 800710a:	2001      	movs	r0, #1
 800710c:	4770      	bx	lr
	...

08007110 <fiprintf>:
 8007110:	b40e      	push	{r1, r2, r3}
 8007112:	b503      	push	{r0, r1, lr}
 8007114:	4601      	mov	r1, r0
 8007116:	ab03      	add	r3, sp, #12
 8007118:	4805      	ldr	r0, [pc, #20]	@ (8007130 <fiprintf+0x20>)
 800711a:	f853 2b04 	ldr.w	r2, [r3], #4
 800711e:	6800      	ldr	r0, [r0, #0]
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	f7ff fd2d 	bl	8006b80 <_vfiprintf_r>
 8007126:	b002      	add	sp, #8
 8007128:	f85d eb04 	ldr.w	lr, [sp], #4
 800712c:	b003      	add	sp, #12
 800712e:	4770      	bx	lr
 8007130:	20002024 	.word	0x20002024

08007134 <__swhatbuf_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	460c      	mov	r4, r1
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	2900      	cmp	r1, #0
 800713e:	b096      	sub	sp, #88	@ 0x58
 8007140:	4615      	mov	r5, r2
 8007142:	461e      	mov	r6, r3
 8007144:	da0d      	bge.n	8007162 <__swhatbuf_r+0x2e>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	bf14      	ite	ne
 8007152:	2340      	movne	r3, #64	@ 0x40
 8007154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007158:	2000      	movs	r0, #0
 800715a:	6031      	str	r1, [r6, #0]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	b016      	add	sp, #88	@ 0x58
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	466a      	mov	r2, sp
 8007164:	f000 f848 	bl	80071f8 <_fstat_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	dbec      	blt.n	8007146 <__swhatbuf_r+0x12>
 800716c:	9901      	ldr	r1, [sp, #4]
 800716e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007176:	4259      	negs	r1, r3
 8007178:	4159      	adcs	r1, r3
 800717a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800717e:	e7eb      	b.n	8007158 <__swhatbuf_r+0x24>

08007180 <__smakebuf_r>:
 8007180:	898b      	ldrh	r3, [r1, #12]
 8007182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007184:	079d      	lsls	r5, r3, #30
 8007186:	4606      	mov	r6, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d507      	bpl.n	800719c <__smakebuf_r+0x1c>
 800718c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	2301      	movs	r3, #1
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	b003      	add	sp, #12
 800719a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719c:	ab01      	add	r3, sp, #4
 800719e:	466a      	mov	r2, sp
 80071a0:	f7ff ffc8 	bl	8007134 <__swhatbuf_r>
 80071a4:	9f00      	ldr	r7, [sp, #0]
 80071a6:	4605      	mov	r5, r0
 80071a8:	4639      	mov	r1, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff f8b0 	bl	8006310 <_malloc_r>
 80071b0:	b948      	cbnz	r0, 80071c6 <__smakebuf_r+0x46>
 80071b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b6:	059a      	lsls	r2, r3, #22
 80071b8:	d4ee      	bmi.n	8007198 <__smakebuf_r+0x18>
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	f043 0302 	orr.w	r3, r3, #2
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	e7e2      	b.n	800718c <__smakebuf_r+0xc>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	6020      	str	r0, [r4, #0]
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071d6:	b15b      	cbz	r3, 80071f0 <__smakebuf_r+0x70>
 80071d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f81d 	bl	800721c <_isatty_r>
 80071e2:	b128      	cbz	r0, 80071f0 <__smakebuf_r+0x70>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	431d      	orrs	r5, r3
 80071f4:	81a5      	strh	r5, [r4, #12]
 80071f6:	e7cf      	b.n	8007198 <__smakebuf_r+0x18>

080071f8 <_fstat_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	@ (8007218 <_fstat_r+0x20>)
 80071fc:	2300      	movs	r3, #0
 80071fe:	4604      	mov	r4, r0
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	f7fa f8c0 	bl	800138a <_fstat>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d102      	bne.n	8007214 <_fstat_r+0x1c>
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	b103      	cbz	r3, 8007214 <_fstat_r+0x1c>
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	200033d0 	.word	0x200033d0

0800721c <_isatty_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d06      	ldr	r5, [pc, #24]	@ (8007238 <_isatty_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7fa f8bf 	bl	80013aa <_isatty>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_isatty_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_isatty_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	200033d0 	.word	0x200033d0

0800723c <abort>:
 800723c:	b508      	push	{r3, lr}
 800723e:	2006      	movs	r0, #6
 8007240:	f000 f82c 	bl	800729c <raise>
 8007244:	2001      	movs	r0, #1
 8007246:	f7fa f86c 	bl	8001322 <_exit>

0800724a <_raise_r>:
 800724a:	291f      	cmp	r1, #31
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4605      	mov	r5, r0
 8007250:	460c      	mov	r4, r1
 8007252:	d904      	bls.n	800725e <_raise_r+0x14>
 8007254:	2316      	movs	r3, #22
 8007256:	6003      	str	r3, [r0, #0]
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007260:	b112      	cbz	r2, 8007268 <_raise_r+0x1e>
 8007262:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007266:	b94b      	cbnz	r3, 800727c <_raise_r+0x32>
 8007268:	4628      	mov	r0, r5
 800726a:	f000 f831 	bl	80072d0 <_getpid_r>
 800726e:	4622      	mov	r2, r4
 8007270:	4601      	mov	r1, r0
 8007272:	4628      	mov	r0, r5
 8007274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007278:	f000 b818 	b.w	80072ac <_kill_r>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d00a      	beq.n	8007296 <_raise_r+0x4c>
 8007280:	1c59      	adds	r1, r3, #1
 8007282:	d103      	bne.n	800728c <_raise_r+0x42>
 8007284:	2316      	movs	r3, #22
 8007286:	6003      	str	r3, [r0, #0]
 8007288:	2001      	movs	r0, #1
 800728a:	e7e7      	b.n	800725c <_raise_r+0x12>
 800728c:	2100      	movs	r1, #0
 800728e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007292:	4620      	mov	r0, r4
 8007294:	4798      	blx	r3
 8007296:	2000      	movs	r0, #0
 8007298:	e7e0      	b.n	800725c <_raise_r+0x12>
	...

0800729c <raise>:
 800729c:	4b02      	ldr	r3, [pc, #8]	@ (80072a8 <raise+0xc>)
 800729e:	4601      	mov	r1, r0
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f7ff bfd2 	b.w	800724a <_raise_r>
 80072a6:	bf00      	nop
 80072a8:	20002024 	.word	0x20002024

080072ac <_kill_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	@ (80072cc <_kill_r+0x20>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	f7fa f822 	bl	8001302 <_kill>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d102      	bne.n	80072c8 <_kill_r+0x1c>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	b103      	cbz	r3, 80072c8 <_kill_r+0x1c>
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	200033d0 	.word	0x200033d0

080072d0 <_getpid_r>:
 80072d0:	f7fa b80f 	b.w	80012f2 <_getpid>

080072d4 <sqrtf>:
 80072d4:	b508      	push	{r3, lr}
 80072d6:	ed2d 8b02 	vpush	{d8}
 80072da:	eeb0 8a40 	vmov.f32	s16, s0
 80072de:	f000 f817 	bl	8007310 <__ieee754_sqrtf>
 80072e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80072e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ea:	d60c      	bvs.n	8007306 <sqrtf+0x32>
 80072ec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800730c <sqrtf+0x38>
 80072f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	d505      	bpl.n	8007306 <sqrtf+0x32>
 80072fa:	f7fe f919 	bl	8005530 <__errno>
 80072fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007302:	2321      	movs	r3, #33	@ 0x21
 8007304:	6003      	str	r3, [r0, #0]
 8007306:	ecbd 8b02 	vpop	{d8}
 800730a:	bd08      	pop	{r3, pc}
 800730c:	00000000 	.word	0x00000000

08007310 <__ieee754_sqrtf>:
 8007310:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007314:	4770      	bx	lr
	...

08007318 <_init>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr

08007324 <_fini>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr
